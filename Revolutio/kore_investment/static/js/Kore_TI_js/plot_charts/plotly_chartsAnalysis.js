/* global Plotly,analysiselementIDList:true,$*/
var slicerTabConfigDict = {};
var slicerTabConnectDict = {};
var crossFilterDict1 = {}
var plotType=''
var freeze_dict = {"left":0,"right":0}
var finalfdict2 = {"left":0,"right":0}
var cellindex3
var cellcollen2
var tabID
var crossFilterlist = []
var elementID
var tabID
var plt_bk_color=""
var apply_clicked = 0
var close_clicked = 0
var color_changed = 0
let prevDiv = ''
let myPlot = '';
let selectedOptions
let globalHeaderColumnAlignment = "center"
let globalContentColumnAlignment = "center"
let highlightcolumnheaderscolorlist = {};
let globalConfigJsonData = {};
var columnOptions = ""
var formatterOptions = ""
var numberOptions = ""
var currencyOptions = ""
var currencyOptions1 = ""
var formatterObjs = []
var dateOptions = ""
function masterPlotly(analysiselementIDList){
  if (String($('form').find("input[name='csrfmiddlewaretoken']").attr('value')) !== 'undefined') {
    const ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
    $.ajaxSetup({
      // eslint-disable-next-line no-unused-vars
      beforeSend: function (xhr, settings) {
        xhr.setRequestHeader('X-CSRFToken', ctoken)
      }
    })
  }

  if (String($('.chartDivSection').attr('data-layout')) === 'Landscape') {
    $('.chartDivSection').css({
      'background-image': 'linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)',
      'background-size': '5% 5%',
      width: '100%',
      margin: 'auto',
      border: 'solid black 0.1px',
      'flex-wrap': 'wrap',
      'aspect-ratio': 16/9,
      'overflow-y': 'hidden',
      'overflow-x': 'hidden'
    })
  } else if (String($('.chartDivSection').attr('data-layout')) === 'Portrait') {
    $('.chartDivSection').css({
      'background-image': 'linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)',
      'background-size': '5% 5%',
      width: '1080px',
      margin: 'auto',
      border: 'solid black 0.1px',
      display: 'flex',
      'flex-wrap': 'wrap',
      'aspect-ratio': 9/16,
      'overflow-y': 'hidden',
      'overflow-x': 'hidden'
    })
  } else {
    $('.chartDivSection').css({
      width: '92%',
      'padding-left': '70px',
      'padding-top': '9px',
      'padding-right': '9px'
    })
  }

  /*eslint-disable*/


     /* eslint-enable */


  //eslint-disable-next-line no-unused-vars


  if (String(typeof (analysiselementIDList)) === 'undefined') {
    // eslint-disable-next-line no-undef
    analysiselementIDList = []
  }
  for (const i in analysiselementIDList) {
    elementID = analysiselementIDList[i]
    $('.plotAjax').change(function () {
      if (String($('#collapseTwo').attr('class')) !== 'collapse') {
        $('#collapseTwo').removeClass('show')
      }
    })
    $(`.filter_card_header${elementID}`).click(function () {
      let elementID = $(this).attr("data-elementid");
      $(`.filter_card_body${elementID}`).empty()
      const tablename = $(`#selectTable${elementID}`).val()
      let filters = ''
      const filter_input_final = []
      const graphsubtype2 = document.getElementById(`selectPlotly${elementID}`).value.split('|')[0]
      if (String(graphsubtype2) === 'Vertical Bar' || String(graphsubtype2) === 'Vertical Waterfall' || String(graphsubtype2) === 'Line' || String(graphsubtype2) === 'Stepped Line' || String(graphsubtype2) === 'Vertical Area') {
        filters = JSON.stringify($(`#selectfilter${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Funnel' || String(graphsubtype2) === 'Funnel Area' || String(graphsubtype2) === 'Horizontal Bar' || String(graphsubtype2) === 'Horizontal Area' || String(graphsubtype2) === 'Horizontal Waterfall') {
        filters = JSON.stringify($(`#selectfilter1${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Vertical Histogram' || String(graphsubtype2) === 'Horizontal Histogram' || String(graphsubtype2) === 'Cumulative Histogram') {
        filters = JSON.stringify($(`#selectfilter2${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Stacked Histogram') {
        filters = JSON.stringify($(`#selectfilter3${elementID}`).val())
      }

      if (String(graphsubtype2) === 'Sunburst' || String(graphsubtype2) === 'Angular Gauge' || String(graphsubtype2) === 'Bullet Gauge') {
        filters = JSON.stringify($(`#selectfilter4${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Pie Chart' || String(graphsubtype2) === 'Donut Chart' || String(graphsubtype2) === 'Treemap') {
        filters = JSON.stringify($(`#selectfilter5${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Scatter' || String(graphsubtype2) === '2D Histogram Contour' || String(graphsubtype2) === 'Scatter with Straight Lines and Markers') {
        filters = JSON.stringify($(`#selectfilter6${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Vertical Box' || String(graphsubtype2) === 'Horizontal Box' || String(graphsubtype2) === 'Horizontal Dot Plot' || String(graphsubtype2) === 'Vertical Violin' || String(graphsubtype2) === 'Horizontal Violin') {
        filters = JSON.stringify($(`#selectfilter7${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Vertical Line Stacked' || String(graphsubtype2) === 'Vertical Area Stacked' || String(graphsubtype2) === 'Vertical Waterfall Grouped') {
        filters = JSON.stringify($(`#selectfilter8${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Vertical Bar Stacked' || String(graphsubtype2) === 'Vertical Bar Grouped') {
        filters = JSON.stringify($(`#selectfilter26${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Vertical Grouped Violin' || String(graphsubtype2) === 'Vertical Grouped Box') {
        filters = JSON.stringify($(`#selectfilter10${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Horizontal Area Stacked' || String(graphsubtype2) === 'Horizontal Waterfall Grouped' || String(graphsubtype2) === 'Funnel Stacked') {
        filters = JSON.stringify($(`#selectfilter11${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Horizontal Bar Stacked' || String(graphsubtype2) === 'Horizontal Bar Grouped') {
        filters = JSON.stringify($(`#selectfilter29${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Horizontal Grouped Violin' || String(graphsubtype2) === 'Horizontal Grouped Box') {
        filters = JSON.stringify($(`#selectfilter12${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Bubble Map' || String(graphsubtype2) === 'Chloropeth Map') {
        filters = JSON.stringify($(`#selectfilter13${elementID}`).val())
      }
      if (String(graphsubtype2) === '3D Scatter' || String(graphsubtype2) === '3D Mesh') {
        filters = JSON.stringify($(`#selectfilter14${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Nested Table') {
        filters = JSON.stringify($(`#selectfilter15${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Sum' || String(graphsubtype2) === 'Average' || String(graphsubtype2) === 'Median' || String(graphsubtype2) === 'Variance' || String(graphsubtype2) === 'Skewness' || String(graphsubtype2) === 'Kurtosis' || String(graphsubtype2) === 'Standard Deviation') {
        filters = JSON.stringify($(`#selectfilter16${elementID}`).val())
      }

      if (String(graphsubtype2) === 'Minimum' || String(graphsubtype2) === 'Maximum') {
        filters = JSON.stringify($(`#selectfilter21${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Top N' || String(graphsubtype2) === 'Bottom N') {
        filters = JSON.stringify($(`#selectfilter22${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Count' || String(graphsubtype2) === 'Count Distinct' || String(graphsubtype2) === 'First' || String(graphsubtype2) === 'Last') {
        filters = JSON.stringify($(`#selectfilter20${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Bar Grouped and Line' || String(graphsubtype2) === 'Bar Stacked and Line' ) {
        filters = JSON.stringify($(`#selectfilter17${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Bar Stacked and Multiple Line') {
        filters = JSON.stringify($(`#selectfilter25${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Bubble Chart') {
        filters = JSON.stringify($(`#selectfilter18${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Multiple Line Chart') {
        filters = JSON.stringify($(`#selectfilter23${elementID}`).val())
      }
      if (String(graphsubtype2) === 'Table') {
        filters = JSON.stringify($(`#selectfilter24${elementID}`).val())
      }
      if (["Pivot Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"].includes(String(graphsubtype2))) {
        filters = JSON.stringify($(`#select_pivot_filter${elementID}`).val())
      }
      plotFilterFunction(tablename, filters)
    })
    $(`.plotlyCategory${elementID}`).click(function () {
      let elementID = $(this).attr("data-elementid");
      document.getElementById(`plotlyButtonDiv${elementID}`).style.display = 'none'
      document.getElementById(`XY_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`BubbleXYZ_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`Table_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`Pivot_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYfloatOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`MultipleLine_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XfloatYOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYZ_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYfloatYfloatOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYMultipleOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XfloatXfloatYOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XMultipleYOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`CVfloatO_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`Image_${elementID}`).style.display = 'none'
      document.getElementById(`CSVfloat_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`aggcard_n${elementID}`).style.display = 'none'
      document.getElementById(`agg_card_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`aggcard_${elementID}`).style.display = 'none'
      document.getElementById(`CSVfloatO_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYYOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYZ_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`ValueOp_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XX_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYYHOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`CLfloatO_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYfloatYComboOP_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`MultipleLine_Combo_AXIS${elementID}`).style.display = 'none'

      $(`.filter_card_body${elementID}`).empty()
      $('#collapseTwo').removeClass('show')
      $(`.plotlyCategory${elementID}`).each(function () {
        $(this).css({ backgroundColor: '#565a5e' })
        $(this).css({ borderColor: '#565a5e' })
      })
      $(this).css({ backgroundColor: 'var(--primary-color)' })
      $(this).css({ borderColor: 'var(--primary-color)' })
      let url_string = windowLocation
      let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
      let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
      let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
      let app_code2 = url_string.substring(f_occ+1,s_occ)
      let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
      if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
        current_dev_mode2 = "User"
      }
      const chartCategory = $(this).val()
      $.ajax({
        url: `/users/${urlPath}/plotly/`,
        data: {
          selectedValue: chartCategory,
          operation: 'PlotCategory'
        },
        type: 'POST',
        dataType: 'json',
        success: function (data) {
          $(`#selectPlotly${elementID}`).empty()
          $(`#selectPlotly${elementID}`).append(new Option('--------------------', '', true, true))
          for (const i in data.chartType) {
            const newOption = new Option(data.chartType[i], data.chartType[i], false, false)
            $(`#selectPlotly${elementID}`).append(newOption)
          }
          $(`#plotlyButton${elementID}`).attr('chartCategory', chartCategory)
        },
        error: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
        }
      })
    })

    $(`#global_bg${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("global_bg");
      if ($(this).val() == 'background_image') {
        $('.global_bg_color').css('display', 'none')
        $('.global_bg_image').css('display', 'block')
        if (String($(`#bg_image_url${elementID}`).html()) !== '' || String($(`#bg_image_url${elementID}`).html()) !== 'undefined') {
          $('.mainDiv').css('background-image', 'url(data:image/png;base64,' + $(`#bg_image_url${elementID}`).html())
        }
      } else {
        $('.global_bg_color').css('display', 'block')
        $('.global_bg_image').css('display', 'none')
        $('.mainDiv').css('background-image', 'none')
      }
    })

    $(`#bg_image_${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("bg_image_");
      const formData = new FormData($(this).parent().parent().parent().find('form.uploadbgimage')[0])
      const n = ((windowLocationAttr.href).split('/'))
      const dataurl = n[n.length - 2]
      const uniqueid = (elementID + Math.random()).replace('.', '').replace(/\s/g, '')
      formData.append('upload_bg_image', $(this).parent().parent().parent().find("input[name='upload_bg_image']").val())
      formData.append('operation', 'uploadbgImage')
      formData.append('folder_name', dataurl)
      formData.append('elementid', uniqueid)
      //  img_field = formData
      $.ajax({
        url: `/users/${urlPath}/upload_bg_image/`,
        data: formData,
        type: 'POST',
        cache: false,
        contentType: false,
        processData: false,
        dataType: 'json',

        success: function (data) {
          $('.mainDiv').css('background-image', 'url(data:image/png;base64,' + data.image_url)
          $('.mainDiv').css('background-size', '56em 15em')
          $(`#bg_image_url${elementID}`).html('')
          $(`#bg_image_url${elementID}`).html(data.image_url)
          $(`#bg_image_name${elementID}`).html('')
          $(`#bg_image_name${elementID}`).html(data.image_name)
        }
      })
    })

    $(`.plotlyType${elementID}`).on('select2:select', displayPlotlyInputAnalysis)

    function displayPlotlyInputAnalysis () {
      const elementTabID = $(this).attr('data-elementID')
      let tabrowname = ''
      let tablistname = ''
      $(`#chartTypes${elementTabID}`).css('display', 'block')
      $(`#plotlyButtonDiv${elementTabID}`).css('display', 'none')
      document.getElementById(`plotlyButtonDiv${elementTabID}`).style.display = 'none'
      document.getElementById(`XY_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`BubbleXYZ_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`Table_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`Pivot_AXIS${elementID}`).style.display = 'none'
      document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`MultipleLine_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYZ_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYfloatYfloatOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYMultipleOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XfloatXfloatYOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XMultipleYOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`CVfloatO_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`Image_${elementTabID}`).style.display = 'none'
      document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`aggcard_n${elementTabID}`).style.display = 'none'
      document.getElementById(`agg_card_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`aggcard_${elementTabID}`).style.display = 'none'
      document.getElementById(`CSVfloatO_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`Value_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYYOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYZ_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`ValueOp_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XX_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYYHOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`CLfloatO_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`XYfloatYComboOP_AXIS${elementTabID}`).style.display = 'none'
      document.getElementById(`MultipleLine_Combo_AXIS${elementTabID}`).style.display = 'none'
      $(`.filter_card_body${elementTabID}`).empty()
      $('#collapseTwo').removeClass('show')
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Scatter') {
        document.getElementById(`XY_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bubble Chart') {
        document.getElementById(`BubbleXYZ_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectBubbleXYTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectBubbleXYTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Scatter with Straight Lines and Markers') {
        document.getElementById(`XY_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === '2D Histogram Contour') {
        document.getElementById(`XY_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Dot Plot') {
        document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Box') {
        document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Box') {
        document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Violin') {
        document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Violin') {
        document.getElementById(`XYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Bar') {
        document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPETab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPETab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Line') {
        document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPETab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPETab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Multiple Line Chart') {
        document.getElementById(`MultipleLine_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPE_multipleTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPE_multipleTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Stepped Line') {
        document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPETab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPETab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Area') {
        document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPETab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPETab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Waterfall') {
        document.getElementById(`XYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPETab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPETab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === '3D Scatter') {
        document.getElementById(`XYZ_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYZTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYZTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === '3D Mesh') {
        document.getElementById(`XYZ_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYZTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYZTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Bar') {
        document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXFloatTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXFloatTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Area') {
        document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXFloatTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXFloatTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Waterfall') {
        document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXFloatTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXFloatTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Funnel') {
        document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXFloatTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXFloatTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Funnel Area') {
        document.getElementById(`XfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXFloatTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXFloatTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Bar Stacked') {
        document.getElementById(`XYMultipleOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYMultipleOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYMultipleOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Bar Grouped') {
        document.getElementById(`XYMultipleOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYMultipleOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYMultipleOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bar Grouped and Line' || String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bar Stacked and Line') {
        document.getElementById(`XYfloatYComboOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYY1OPComboTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYY1OPComboTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bar Stacked and Multiple Line') {
        document.getElementById(`MultipleLine_Combo_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYOPE_multipleComboTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYOPE_multipleComboTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Line Stacked') {
        document.getElementById(`XYfloatYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYY1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYY1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Area Stacked') {
        document.getElementById(`XYfloatYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYY1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYY1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Waterfall Grouped') {
        document.getElementById(`XYfloatYfloatOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXYY1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXYY1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Bar Stacked' || String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Bar Grouped') {
        document.getElementById(`XMultipleYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXMultipleYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXMultipleYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Area Stacked') {
        document.getElementById(`XfloatXfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXX1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXX1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Waterfall Grouped') {
        document.getElementById(`XfloatXfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXX1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXX1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Funnel Stacked') {
        document.getElementById(`XfloatXfloatYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXX1OPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXX1OPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Pie Chart') {
        document.getElementById(`CVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }

      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Image') {
        document.getElementById(`Image_${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'none')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#image_Tab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#image_Tab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }

      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Donut Chart') {
        document.getElementById(`CVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Treemap') {
        document.getElementById(`CVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Sum') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Top N') {
        document.getElementById(`aggcard_n${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggTabn${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggTabn${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bottom N') {
        document.getElementById(`aggcard_n${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggTabn${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggTabn${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Maximum') {
        document.getElementById(`aggcard_${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Minimum') {
        document.getElementById(`aggcard_${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Count') {
        document.getElementById(`agg_card_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Count Distinct') {
        document.getElementById(`agg_card_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'First') {
        document.getElementById(`agg_card_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Last') {
        document.getElementById(`agg_card_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectAggCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectAggCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Average') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Median') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Variance') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Skewness') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Kurtosis') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Standard Deviation') {
        document.getElementById(`CSVfloat_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Sunburst') {
        document.getElementById(`CSVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Angular Gauge') {
        document.getElementById(`CSVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bullet Gauge') {
        document.getElementById(`CSVfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCSVOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCSVOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Grouped Box') {
        document.getElementById(`XYYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectYYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectYYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Grouped Violin') {
        document.getElementById(`XYYOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectYYOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectYYOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Grouped Violin') {
        document.getElementById(`XYYHOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXXHOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXXHOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Grouped Box') {
        document.getElementById(`XYYHOP_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXXHOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXXHOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }

      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Vertical Histogram') {
        document.getElementById(`Value_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectValueTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectValueTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Cumulative Histogram') {
        document.getElementById(`Value_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectValueTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectValueTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Horizontal Histogram') {
        document.getElementById(`Value_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectValueTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectValueTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Bubble Map') {
        document.getElementById(`ValueOp_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectValueOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectValueOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Chloropath Map') {
        document.getElementById(`ValueOp_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectValueOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectValueOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Stacked Histogram') {
        document.getElementById(`XX_AXIS${elementTabID}`).style.display = 'block'
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectXXTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectXXTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Nested Table') {
        document.getElementById(`CLfloatO_AXIS${elementTabID}`).style.display = 'block'
        $('.table_type').html('Nested_Table')
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#selectCLOPTab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#selectCLOPTab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
      if (String(document.getElementById(`selectPlotly${elementTabID}`).value) === 'Table') {
        document.getElementById(`Table_AXIS${elementTabID}`).style.display = 'block'
        $('.table_type').html('Table')
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#table_Tab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#table_Tab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }

      if (["Pivot Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"].includes(String(document.getElementById(`selectPlotly${elementTabID}`).value))) {
        document.getElementById(`Pivot_AXIS${elementTabID}`).style.display = 'block'
        $('.table_type').html('Pivot Report')
        $('.filter_plot_card').css('display', 'block')
        $(`#plotlyButtonDiv${elementTabID}`).css('display', 'block')
        $(`#select_pivot_Tab${elementTabID}`).find('option').slice(1).remove()
        $(`#analysisTab${elementTabID}`).find('.tabname').each(function () {
          tabrowname = $(this).attr('data-tab_ct')
          tablistname = $(this)[0].innerHTML
          $(`#select_pivot_Tab${elementTabID}`).append(new Option(tablistname, tabrowname, false, false))
        })
      }
    }

    $(`#selectPlotly${elementID}`).on('select2:select', function () {
      let elementID = $(this).attr("data-elementid")
      $(`#selectXaxis${elementID}`).val('').trigger('change')
      $(`#selectYaxis${elementID}`).val('').trigger('change')
      $(`#selectX_axis${elementID}`).val('').trigger('change')
      $(`#selectY_axis${elementID}`).val('').trigger('change')
      $(`#selectY1_axis${elementID}`).val('').trigger('change')
      $(`#selectX${elementID}`).val('').trigger('change')
      $(`#selectY${elementID}`).val('').trigger('change')
      $(`#selectXH${elementID}`).val('').trigger('change')
      $(`#select_table_columns${elementID}`).val('').trigger('change')
      $(`#selectX_multiple${elementID}`).val('').trigger('change')
      $(`#selectYH${elementID}`).val('').trigger('change')
      $(`#select_X${elementID}`).val('').trigger('change')
      $(`#select_Y${elementID}`).val('').trigger('change')
      $(`#select_Y1${elementID}`).val('').trigger('change')
      $(`#select_yn${elementID}`).val('').trigger('change')
      $(`#select_Y11${elementID}`).val('').trigger('change')
      $(`#select_X1${elementID}`).val('').trigger('change')
      $(`#select_Z1${elementID}`).val('').trigger('change')
      $(`#select_X1Multiple${elementID}`).val('').trigger('change')
      $(`#select_Ym${elementID}`).val('').trigger('change')
      $(`#select_xxaxis${elementID}`).val('').trigger('change')
      $(`#select_xx1axis${elementID}`).val('').trigger('change')
      $(`#selectXVBar${elementID}`).val('').trigger('change')
      $(`#aggregation11${elementID}`).val('').trigger('change')
      $(`#selectYfloat${elementID}`).val('').trigger('change')
      $(`#selectY1_multiplefloat${elementID}`).val('').trigger('change')
      $(`#selectXfloat${elementID}`).val('').trigger('change')
      $(`#select_Xm${elementID}`).val('').trigger('change')
      $(`#select_Y1Multiple${elementID}`).val('').trigger('change')
      $(`#select_xf${elementID}`).val('').trigger('change')
      $(`#select_xf1${elementID}`).val('').trigger('change')
      $(`#select_value${elementID}`).val('').trigger('change')
      $(`#selectval${elementID}`).val('').trigger('change')
      $(`#selectval_n${elementID}`).val('').trigger('change')
      $(`#select_allval${elementID}`).val('').trigger('change')
      $(`#select_agg_val${elementID}`).val('').trigger('change')
      $(`#select_val${elementID}`).val('').trigger('change')
      $(`#select_histovalue${elementID}`).val('').trigger('change')
      $(`#select_valueop${elementID}`).val('').trigger('change')
      $(`#select_category${elementID}`).val('').trigger('change')

      $(`#select_cat${elementID}`).val('').trigger('change')
      $(`#select_subcat${elementID}`).val('').trigger('change')
      $(`#selectYPie${elementID}`).val('').trigger('change')
      $(`#selectXH_axis${elementID}`).val('').trigger('change')
      $(`#select_table_columns${elementID}`).val('').trigger('change')
      $(`#selectX1H_axis${elementID}`).val('').trigger('change')
      $(`#selectYH_axis${elementID}`).val('').trigger('change')
      $(`#select_categories_level1${elementID}`).val('').trigger('change')
      $(`#select_categories_level2${elementID}`).val('').trigger('change')
      $(`#select_categories_level3${elementID}`).val('').trigger('change')
      $(`#select_categories_level4${elementID}`).val('').trigger('change')
      $(`#select_categories_level5${elementID}`).val('').trigger('change')

      $(`#select_columns${elementID}`).val('').trigger('change')
      $(`.filter_condition${elementID}`).val('').trigger('change')
      $(`#select_XmultipleCombo${elementID}`).val('').trigger('change')
      $(`#select_Y1multipleCombo${elementID}`).val('').trigger('change')
      $(`#select_LineCombo${elementID}`).val('').trigger('change')
      $(`#select_XmultipleLineCombo${elementID}`).val('').trigger('change')
      $(`#select_Y1multipleLineCombo${elementID}`).val('').trigger('change')
      $(`#select_L1multipleCombo${elementID}`).val('').trigger('change')
      $(`#selectBubble_X${elementID}`).val('').trigger('change')
      $(`#selectBubble_Y${elementID}`).val('').trigger('change')
      $(`#selectBubble_Z${elementID}`).val('').trigger('change')
    })

    $(`#selectTable${elementID}`).on('select2:select', function () {
      let elementID = ($(this).attr("id")).replace("selectTable","");
      const appID = $('#mainSideNavBar').attr('data-app_id')
      $(`.filter_card_body${elementID}`).empty()
      $('#collapseTwo').removeClass('show')
      let selectedTable = $(this).val()
      $(`.multiple_line_chart_yaxis${elementID}`).empty()
      $(`.multiple_line_combo_chart_line${elementID}`).empty()
      $(`.multiple_yaxis${elementID}`).empty()
      $(`.multiple_xaxis${elementID}`).empty()
      $(`.multiple_yaxis_combo${elementID}`).empty()
      $(`.multiple_yaxis_line_combo${elementID}`).empty()
      $(`#select_multiple_y${elementID}`).val(1)
      $(`#select_multiple_combo_line${elementID}`).val(1)
      $(`#select_XMultiple_no${elementID}`).val(1)
      $(`#select_YMultiple_no${elementID}`).val(1)
      $(`#select_YmultipleCombo_no${elementID}`).val(1)
      $(".table_columns_re-order").empty()
      $(".nestedtable_columns_re-order").empty()
      $(`#select_YmultipleLineCombo_no${elementID}`).val(1)
      let url_string = windowLocation
      let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
      let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
      let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
      let app_code2 = url_string.substring(f_occ+1,s_occ)
      let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
      if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
        current_dev_mode2 = "User"
      }
      let url_n = ""
      if(current_dev_mode2=="User"){
        url_n = `/users/${urlPath}/homePage/`
      }else{
        url_n = `/users/${urlPath}/homePage/`
      }
      $.ajax({
        url: url_n,
        data: {
          operation: 'chartTable',
          tableName: selectedTable
        },
        type: 'POST',
        dataType: 'json',
        success: function (data) {
          $('.input_columns_value_dict').empty()
          $('.nested_input_columns_value_dict').empty()
          $(`#nested_conditional_column_name${elementID}`).find('option').slice(1).remove()
          $(`#conditional_column_name${elementID}`).find('option').slice(1).remove()
          $(`#selectXaxis${elementID}`).find('option').slice(1).remove()
          $(`#selectYaxis${elementID}`).find('option').slice(1).remove()
          $(`#selectX_axis${elementID}`).find('option').slice(1).remove()
          $(`#selectY_axis${elementID}`).find('option').slice(1).remove()
          $(`#selectY1_axis${elementID}`).find('option').slice(1).remove()
          $(`#selectX${elementID}`).find('option').slice(1).remove()
          $(`#selectY${elementID}`).find('option').slice(1).remove()
          $(`#selectXH${elementID}`).find('option').slice(1).remove()
          $(`#select_table_columns${elementID}`).find('option').remove()
          $(`#selectX_multiple${elementID}`).find('option').slice(1).remove()
          $(`#selectYH${elementID}`).find('option').slice(1).remove()
          $(`#select_X${elementID}`).find('option').slice(1).remove()
          $(`#select_Y${elementID}`).find('option').slice(1).remove()
          $(`#select_Y1${elementID}`).find('option').slice(1).remove()
          $(`#select_yn${elementID}`).find('option').slice(1).remove()
          $(`#select_Y11${elementID}`).find('option').slice(1).remove()
          $(`#select_X1${elementID}`).find('option').slice(1).remove()
          $(`#select_Z1${elementID}`).find('option').slice(1).remove()
          $(`#select_xxaxis${elementID}`).find('option').slice(1).remove()
          $(`#select_xx1axis${elementID}`).find('option').slice(1).remove()
          $(`#selectXVBar${elementID}`).find('option').slice(1).remove()
          $(`#aggregation11${elementID}`).find('option').slice(1).remove()
          $(`#selectYfloat${elementID}`).find('option').slice(1).remove()
          $(`#selectY1_multiplefloat${elementID}`).find('option').slice(1).remove()
          $(`#selectXfloat${elementID}`).find('option').slice(1).remove()
          $(`#select_Xm${elementID}`).find('option').slice(1).remove()
          $(`#select_Y1Multiple${elementID}`).find('option').slice(1).remove()
          $(`#select_X1Multiple${elementID}`).find('option').slice(1).remove()
          $(`#select_Ym${elementID}`).find('option').slice(1).remove()
          $(`#select_xf${elementID}`).find('option').slice(1).remove()
          $(`#select_xf1${elementID}`).find('option').slice(1).remove()
          $(`#select_value${elementID}`).find('option').slice(1).remove()
          $(`#selectval${elementID}`).find('option').slice(1).remove()
          $(`#selectval_n${elementID}`).find('option').slice(1).remove()
          $(`#select_allval${elementID}`).find('option').slice(1).remove()
          $(`#select_agg_val${elementID}`).find('option').slice(1).remove()
          $(`#select_val${elementID}`).find('option').slice(1).remove()
          $(`#select_histovalue${elementID}`).find('option').slice(1).remove()
          $(`#select_valueop${elementID}`).find('option').slice(1).remove()
          $(`#select_category${elementID}`).find('option').slice(1).remove()
          $(`#select_cat${elementID}`).find('option').slice(1).remove()
          $(`#select_subcat${elementID}`).find('option').slice(1).remove()
          $(`#selectYPie${elementID}`).find('option').slice(1).remove()
          $(`#selectXH_axis${elementID}`).find('option').slice(1).remove()
          $(`#select_table_columns${elementID}`).find('option').remove()
          $(`#selectX1H_axis${elementID}`).find('option').slice(1).remove()
          $(`#selectYH_axis${elementID}`).find('option').slice(1).remove()
          $(`#select_categories_level1${elementID}`).find('option').slice(1).remove()
          $(`#select_categories_level2${elementID}`).find('option').slice(1).remove()
          $(`#select_categories_level3${elementID}`).find('option').slice(1).remove()
          $(`#select_categories_level4${elementID}`).find('option').slice(1).remove()
          $(`#select_categories_level5${elementID}`).find('option').slice(1).remove()

          $(`#select_pivot_rows${elementID}`).find('option').slice(1).remove()

          $(`#select_columns${elementID}`).find('option').remove()
          $(`.filter_condition${elementID}`).find('option').remove()
          $(`#select_XmultipleCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_Y1multipleCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_LineCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_XmultipleLineCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_Y1multipleLineCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_L1multipleCombo${elementID}`).find('option').slice(1).remove()
          $(`#selectBubble_X${elementID}`).find('option').slice(1).remove()
          $(`#selectBubble_Y${elementID}`).find('option').slice(1).remove()
          $(`#selectBubble_Z${elementID}`).find('option').slice(1).remove()
          for (const i in data.labels) {
            $(`#selectXaxis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectYaxis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectX_axis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectY_axis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectY1_axis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectX${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectY${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectXH${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_table_columns${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectX_multiple${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectYH${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_X${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_Xm${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_Ym${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_XmultipleCombo${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_XmultipleLineCombo${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_yn${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_Y11${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_X1${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_Z1${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_xxaxis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_xx1axis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#selectYH_axis${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`#select_pivot_rows${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
            $(`.filter_condition${elementID}`).append(new Option(data.labels[i],data.field_column[i], false, false))
          }
          const optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
          const optionvalues_table = ['Sum', 'Count', 'Count Distinct', 'Average', 'Skewness', 'Kurtosis', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'Percentage of Total']
          const pivot_operations = ['Count', 'Count Unique Values', 'List Unique Values', 'Average', 'Sum', 'Interger Sum', 'Median', 'Sample Variance', 'Sample Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Sum over Sum', '80% Upper Bound', '80% Lower Bound', 'Sum as Fraction of Total', 'Sum as Fraction of Rows', 'Sum as Fraction of Columns', 'Count as Fraction of Total']

          $(`#selectopt${elementID}`).find('option').slice(1).remove()
          $(`#selectoperations${elementID}`).find('option').slice(1).remove()
          $(`#select_multiple_operations${elementID}`).find('option').slice(1).remove()
          $(`#opt${elementID}`).find('option').slice(1).remove()
          $(`#select_OP${elementID}`).find('option').slice(1).remove()
          $(`#select_YMultipleOP${elementID}`).find('option').slice(1).remove()
          $(`#select_XMultipleOP${elementID}`).find('option').slice(1).remove()
          $(`#select_xxy${elementID}`).find('option').slice(1).remove()
          $(`#select_options${elementID}`).find('option').slice(1).remove()
          $(`#select_op${elementID}`).find('option').slice(1).remove()
          $(`#selectoptaxis${elementID}`).find('option').slice(1).remove()
          $(`#select_operation${elementID}`).find('option').slice(1).remove()
          $(`#select_table_operation${elementID}`).find('option').slice(1).remove()
          $(`#select_OPCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_OPCombo_2${elementID}`).find('option').slice(1).remove()
          $(`#select_multipleCombo${elementID}`).find('option').slice(1).remove()
          $(`#select_multipleCombo_line${elementID}`).find('option').slice(1).remove()
          $(`#select_pivot_operations${elementID}`).find('option').slice(1).remove()

          for (let i = 0; i < pivot_operations.length; i++) {
            $(`#select_pivot_operations${elementID}`).append('<option value="' + pivot_operations[i] + '">' + pivot_operations[i] + '</option>')
          }

          for (let i = 0; i < optionvalues.length; i++) {
            $(`#selectopt${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#selectoperations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_multiple_operations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#opt${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_YMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_XMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_options${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_op${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#selectoptaxis${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_operation${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_table_operation${elementID}`).append('<option value="' + optionvalues_table[i] + '">' + optionvalues_table[i] + '</option>')
            $(`#select_OPCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_OPCombo_2${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_multipleCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            $(`#select_multipleCombo_line${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
          for (const i in data.aggregationLabels) {
            $('<option>').val(data.aggregationLabels[i].field_name).text(data.aggregationLabels[i].name).attr('data-datatype', data.aggregationLabels[i].datatype).appendTo(`#select_agg_val${elementID}`)
          }

          for (const i in data.xBarLabels) {
            $('<option>').val(data.xBarLabels[i].field_name).text(data.xBarLabels[i].name).attr('data-datatype', data.xBarLabels[i].datatype).appendTo(`#select_allval${elementID}`)
            $('<option>').val(data.xBarLabels[i].field_name).text(data.xBarLabels[i].name).attr('data-datatype', data.xBarLabels[i].datatype).appendTo(`#selectXVBar${elementID}`)
          }
          for (const i in data.aggLabels) {
            $('<option>').val(data.aggLabels[i].field_name).text(data.aggLabels[i].name).attr('data-datatype', data.aggLabels[i].datatype).appendTo(`#aggregation11${elementID}`)
          }
          for (const i in data.tableLabels) {
            $('<option>').val(data.tableLabels[i].field_name).text(data.tableLabels[i].name).attr('data-datatype', data.tableLabels[i].datatype).appendTo('.input_columns_value_dict')
            $('<option>').val(data.tableLabels[i].field_name).text(data.tableLabels[i].name).attr('data-datatype', data.tableLabels[i].datatype).appendTo('.conditional_column_name')
            $('<option>').val(data.tableLabels[i].field_name).text(data.tableLabels[i].name).attr('data-datatype', data.tableLabels[i].datatype).appendTo('.selectColumnAlignment')
            $('<option>').val(data.tableLabels[i].field_name).text(data.tableLabels[i].name).attr('data-datatype', data.tableLabels[i].datatype).appendTo('.nested_input_columns_value_dict')
            $('<option>').val(data.tableLabels[i].field_name).text(data.tableLabels[i].name).attr('data-datatype', data.tableLabels[i].datatype).appendTo('.nested_conditional_column_name')
          }

          for (const i in data.yAxisBarLabels) {
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#selectYfloat${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#selectY1_multiplefloat${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#selectXfloat${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_Y${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_Y1${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_Y1Multiple${elementID}`)

            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_X1Multiple${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_xf${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_xf1${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_value${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_val${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_Y1multipleCombo${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_LineCombo${elementID}`)

            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_Y1multipleLineCombo${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_L1multipleCombo${elementID}`)
            $('<option>').val(data.yAxisBarLabels[i].field_name).text(data.yAxisBarLabels[i].name).attr('data-datatype', data.yAxisBarLabels[i].datatype).appendTo(`#select_columns${elementID}`)
          }
          for (const i in data.yBarLabels) {
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectval${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#select_histovalue${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#select_valueop${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectXH_axis${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectX1H_axis${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectBubble_X${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectBubble_Y${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectBubble_Z${elementID}`)
            $('<option>').val(data.yBarLabels[i].field_name).text(data.yBarLabels[i].name).attr('data-datatype', data.yBarLabels[i].datatype).appendTo(`#selectval_n${elementID}`)
          }
          for (const i in data.xPieLabels) {
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_category${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_cat${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_subcat${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_categories_level1${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_categories_level2${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_categories_level3${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_categories_level4${elementID}`)
            $('<option>').val(data.xPieLabels[i].field_name).text(data.xPieLabels[i].name).attr('data-datatype', data.xPieLabels[i].datatype).appendTo(`#select_categories_level5${elementID}`)
          }
          for (const i in data.yPieLabels) {
            $('<option>').val(data.yPieLabels[i].name).text(data.yPieLabels[i].name).attr('data-datatype', data.yPieLabels[i].datatype).appendTo(`#selectYPie${elementID}`)
          }
        },
        error: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
        }
      })
    })
    $(`#select_table_columns${elementID}`).on('select2:select', function (e) {
      var data = e.params.data;
          $(".table_columns_re-order").append(`
          <li class="btn btn-sm btn-light col" name="${data.id}"  style="height:auto;margin:5px auto;
          overflow: auto;">
            <span class="ui-icon ui-icon-arrowthick-2-n-s float-left mt-1"></span>${data.text}
          </li>`);
          $('#tableColumnReorder').find('.sortable-order').sortable()
    })
    $(`#select_table_columns${elementID}`).on('select2:unselect', function (e) {
      var data = e.params.data;
      $(`.table_columns_re-order li[name='${data.id}']`).remove()
    });

        $("#tablecol_reorder").click(function () {
          if ($(this).is(":checked")) {
              $("#tableColumnReorder").css("display", "block");
          } else {
              $("#tableColumnReorder").css("display", "none");
          }
        });

    $('.nested_conditional_column_name').change(function () {
      // const datatype = $(this).find('option:selected').attr('data-datatype')
      $(this).parent().parent().find('.nested_conditional_condition').empty()
      $(this).parent().parent().find('.nested_conditional_condition').append('<option value="" disabled selected>------------</option>')
      const optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
      for (let i = 0; i < optionvalues.length; i++) {
        $(this).parent().parent().find('.nested_conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })
    $(".selectColumnAlignment").off('select2:select').on('select2:select', function(event) {
      let selectedOption = event.params.data;
      let selectedValue = selectedOption.id;
      let selectedText = selectedOption.text;
      let alreadySelected = false;

      $('#ColumnAlignmentContainer').find('.row strong').each(function() {
        if ($(this).data('value') === selectedValue) {
          alreadySelected = true;
          return false;
        }
      });

      if (!alreadySelected) {
        $('#ColumnAlignmentContainer').append(`
          <div class="row col-12 my-1">
            <div class="col-4">
              <span class="removeAlignment" style="color:var(--primary,var(--primary-color));cursor: pointer;">&times;</span> &nbsp; <strong data-value="${selectedValue}">${selectedText}</strong>
            </div>
            <div class="col-4">
              <select class="select2 form-control header">
                <option value="left">Left</option>
                <option value="center" selected>Center</option>
                <option value="right">Right</option>
              </select>
            </div>
            <div class="col-4">
              <select class="select2 form-control content">
                <option value="left">Left</option>
                <option value="center" selected>Center</option>
                <option value="right">Right</option>
              </select>
            </div>
          </div>
        `);

        $('#ColumnAlignmentContainer').find('.row').eq(-1).find('.select2').select2();

        $('#ColumnAlignmentContainer').find('.row').eq(-1).find('.removeAlignment').on('click', function(){
          $(this).parent().parent().remove();
        })
      }
    });
    $('.selectGlobalHeaderColumnAlignment').change(function () {
      globalHeaderColumnAlignment = $(this).val()
    })
    $('.selectGlobalContentColumnAlignment').change(function () {
      globalContentColumnAlignment = $(this).val()
    })
    $("#saveColumnAlignmentButton").off("click").on("click", function() {
      let columnsConfig = [];

      $('#ColumnAlignmentContainer').find('.row').each(function() {
        let selectedOption = $(this).find('strong').text();
        let headerValue = $(this).find('.header').val();
        let contentValue = $(this).find('.content').val();
        columnsConfig.push({
          columnName: selectedOption,
          header: headerValue,
          content: contentValue
        });
      });

      selectedOptions = [{
        global_config: {
          globalHeaderColumnAlignment: globalHeaderColumnAlignment,
          globalContentColumnAlignment: globalContentColumnAlignment
        },
        columns_config: columnsConfig
      }];

      let listData = JSON.stringify(selectedOptions);
      $('.columnAlignmentButtonTable').attr('data-listdata', listData);
      $('.columnAlignmentButtonModal').modal("hide");
    });

    $('.conditional_column_name').change(function () {
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = []
      $(this).parent().parent().find('.conditional_condition').empty()
      $(this).parent().parent().find('.conditional_condition').append('<option value="" disabled selected>------------</option>')
      if (String($('.table_type').html()) !== 'Nested_Table') {
        if ((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField')) {
          optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to']
          for (let i = 0; i < optionvalues.length; i++) {
            $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        } else if ((String(datatype) === 'DateField') || (String(datatype) === 'DateTimeField')) {
          optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to']
          for (let i = 0; i < optionvalues.length; i++) {
            $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        } else if (String(datatype) === 'CharField') {
          optionvalues = ['Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
          for (let i = 0; i < optionvalues.length; i++) {
            $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        } else {
          optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
          for (let i = 0; i < optionvalues.length; i++) {
            $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        }
      } else {
        optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
        for (let i = 0; i < optionvalues.length; i++) {
          $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })

    $('.nested_column').change(function () {
      $('.nested_conditional_condition').val('').trigger('change')
    })

    $('.nested_conditional_condition').change(function () {
      const condition = $(this).val()

      if ((condition == 'Greater than') || (condition == 'Smaller than')) {
        if ($(this).parent().parent().find('.nested_column').val() == 'Category') {
          if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="date" style="width:7.5em;" class="nested_conditional_value"></input>')
          } else if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value"></input>')
          } else {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value"></input>')
          }
        } else {
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value"></input>')
        }
      } else if (condition == 'Equal to' || condition == 'Not equal to') {
        if ($(this).parent().parent().find('.nested_column').val() == 'Category') {
          if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="date" style="width:7.5em;" class="nested_conditional_value"></input>')
          } else if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value"></input>')
          } else {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value" required></select>')
          }
        } else {
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value" required></select>')
        }
      } else if (condition == 'In') {
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 nested_conditional_value" multiple required></select>')
      } else if (condition == 'Starts with' || condition == 'Ends with' || condition == 'Contains') {
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value" required></select>')
      } else {
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
        $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value" required></select>')
      }

      $('.select2_condition_class').select2({
        tags: true
      })
    })

    $('.conditional_condition').change(function () {
      const condition = $(this).val()

      if ((String(condition) === 'Greater than') || (String(condition) === 'Smaller than')) {
        if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="date" class="conditional_value"></input>')
        } else if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="datetime-local" style="width:11em;" class="conditional_value"></input>')
        } else {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="number" style="height:2em;" class="conditional_value"></input>')
        }
      } else if (String(condition) === 'Equal to' || String(condition) === 'Not equal to') {
        if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="date" class="conditional_value"></input>')
        } else if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="datetime-local" style="width:11em;" class="conditional_value"></input>')
        } else {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 select2_condition_class form-control condition_select2 conditional_value" required></select>')
        }
      } else if (String(condition) === 'In') {
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 conditional_value" multiple required></select>')
      } else if (String(condition) === 'Starts with' || String(condition) === 'Ends with' || String(condition) === 'Contains') {
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 conditional_value" required></select>')
      } else {
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
        $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 conditional_value" required></select>')
      }

      $('.select2_condition_class').select2({
        tags: true
      })
    })

    $('.nested_add_conditional_parameter').click(function () {
      const varconditionalcols = $('.nested_input_columns_value_dict')[0].innerHTML
      const stringcol = `<div class="nested_conditional_body" style="margin-top:1em;width: 100%; display:flex">
          <div class="col-2">
            <select class="select2 form-control nested_column">
              <option value="Category">Category</option>
              <option value="Value">Value</option>
            </select>
          </div>
          <div class="col-3">
            <select class="select2 form-control nested_conditional_column_name">
              <option value="" selected disabled>------------</option>
            ` + varconditionalcols +
            `</select>
          </div>
          <div class="col-2">
            <select class="select2 form-control nested_conditional_condition">
              <option value="" disabled selected>-------------------</option>
              <option value="Greater than">Greater than</option>
              <option value="Smaller than">Smaller than</option>
              <option value="Equal to">Equal to</option>
              <option value="Not equal to">Not equal to</option>
              <option value="In">In</option>
              <option value="Starts with">Starts with</option>
              <option value="Contains">Contains</option>
              <option value="Ends with">Ends with</option>
            </select>
          </div>
          <div class="col-2 nested_conditional_input_value">
            <div class="nested_conditional_format_value_input">
            <select class="select2 form-control select2_condition_class" required>
            </select>
            </div>
          </div>
          <div class="col-2">
            <input type="color" class="form-control nested_conditional_color_input" data-css="background-color" value="#ffffff" >
          </div>
          <div class="col-1">
            <i class="fa fa-times nested_remove_conditional_parameter" data-toggle="tooltip" title="Remove condition" style="cursor:pointer;margin-top:0.7em;"></i>
          </div>

        </div>`

      $('.nested_conditional_data_body').append(stringcol)
      $('.select2').select2()
      $('.select2_condition_class').select2({
        tags: true
      })

      $('.nested_remove_conditional_parameter').click(function () {
        $(this).closest('.nested_conditional_body').remove()
      })

      $('.nested_conditional_column_name').change(function () {
        // const datatype = $(this).find('option:selected').attr('data-datatype')
        $(this).parent().parent().find('.nested_conditional_condition').empty()
        $(this).parent().parent().find('.nested_conditional_condition').append('<option value="" disabled selected>------------</option>')
        const optionvalues = new Array('Greater than', 'Smaller than', 'Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains')
        for (let i = 0; i < optionvalues.length; i++) {
          $(this).parent().parent().find('.nested_conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

      $('.nested_conditional_condition').change(function () {
        const condition = $(this).val()
        if ((String(condition) === 'Greater than') || (String(condition) === 'Smaller than')) {
          if ($(this).parent().parent().find('.nested_column').val() == 'Category') {
            if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="date" style="width:7.5em;" class="nested_conditional_value"></input>')
            } else if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value"></input>')
            } else {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value"></input>')
            }
          } else {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value"></input>')
          }
        } else if (String(condition) === 'Equal to' || String(condition) === 'Not equal to') {
          if ($(this).parent().parent().find('.nested_column').val() == 'Category') {
            if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="date" style="width:7.5em;" class="nested_conditional_value"></input>')
            } else if ($(this).parent().parent().find('.nested_conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value"></input>')
            } else {
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
              $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value" required></select>')
            }
          } else {
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
            $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value" required></select>')
          }
        } else if (String(condition) === 'In') {
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 nested_conditional_value" multiple required></select>')
        } else if (String(condition) === 'Starts with' || String(condition) === 'Ends with' || String(condition) === 'Contains') {
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value" required></select>')
        } else {
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').empty()
          $(this).parent().parent().find('.nested_conditional_input_value').find('.nested_conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value" required></select>')
        }

        $('.select2_condition_class').select2({
          tags: true
        })
      })

      $('.nested_column').change(function () {
        $('.nested_conditional_condition').val('').trigger('change')
      })
    })

    $('.add_conditional_parameter').click(function () {
      const var_conditional_cols = $('.input_columns_value_dict')[0].innerHTML
      const string_col = `<div class="conditional_body" style="margin-top:1em;width: 100%; display:flex">
          <div class="col-3">
            <select class="select2 form-control conditional_column_name">
              <option value="" selected disabled>------------</option>
            ` + var_conditional_cols +
            `</select>
          </div>
          <div class="col-3">
            <select class="select2 form-control conditional_condition">
              <option value="" disabled selected>-------------------</option>
              <option value="Greater than">Greater than</option>
              <option value="Smaller than">Smaller than</option>
              <option value="Equal to">Equal to</option>
              <option value="Not equal to">Not equal to</option>
              <option value="In">In</option>
              <option value="Starts with">Starts with</option>
              <option value="Contains">Contains</option>
              <option value="Ends with">Ends with</option>
            </select>
          </div>
          <div class="col-3 conditional_input_value">
            <div class="conditional_format_value_input">
            <select class="select2 form-control select2_condition_class" required>
            </select>
            </div>
          </div>
          <div class="col-2">
            <input type="color" class="form-control conditional_color_input" data-css="background-color" value="#ffffff" >
          </div>
          <div class="col-1">
            <i class="fa fa-times remove_conditional_parameter" data-toggle="tooltip" title="Remove condition" style="cursor:pointer;margin-top:0.7em;"></i>
          </div>

        </div>`

      $('.conditional_data_body').append(string_col)
      $('.select2').select2()
      $('.select2_condition_class').select2({
        tags: true
      })

      $('.remove_conditional_parameter').click(function () {
        $(this).closest('.conditional_body').remove()
      })

      $('.conditional_column_name').change(function () {
        const datatype = $(this).find('option:selected').attr('data-datatype')
        let optionvalues = ''
        $(this).parent().parent().find('.conditional_condition').empty()
        $(this).parent().parent().find('.conditional_condition').append('<option value="" disabled selected>------------</option>')
        if ($('.table_type').html() != 'Nested_Table') {
          if ((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField')) {
            optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to']
            for (let i = 0; i < optionvalues.length; i++) {
              $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            }
          } else if ((String(datatype) === 'DateField') || (String(datatype) === 'DateTimeField')) {
            optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to']
            for (let i = 0; i < optionvalues.length; i++) {
              $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            }
          } else {
            optionvalues = ['Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
            for (let i = 0; i < optionvalues.length; i++) {
              $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
            }
          }
        } else {
          optionvalues = ['Greater than', 'Smaller than', 'Equal to', 'Not equal to', 'In', 'Starts with', 'Ends with', 'Contains']
          for (let i = 0; i < optionvalues.length; i++) {
            $(this).parent().parent().find('.conditional_condition').append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        }
      })

      $('.conditional_condition').change(function () {
        const condition = $(this).val()
        if ((String(condition) === 'Greater than') || (String(condition) === 'Smaller than')) {
          if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="date" class="conditional_value"></input>')
          } else if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="datetime-local" style="width:11em;" class="conditional_value"></input>')
          } else {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="number" style="height:2em;" class="conditional_value"></input>')
          }
        } else if (String(condition) === 'Equal to' || String(condition) === 'Not equal to') {
          if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateField') {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="date" class="conditional_value"></input>')
          } else if ($(this).parent().parent().find('.conditional_column_name').find('option:selected').attr('data-datatype') == 'DateTimeField') {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<input type="datetime-local" style="width:11em;" class="conditional_value"></input>')
          } else {
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
            $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 conditional_value" required></select>')
          }
        } else if (String(condition) === 'In') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 conditional_value" multiple required></select>')
        } else if (String(condition) === 'Starts with' || String(condition) === 'Ends with' || String(condition) === 'Contains') {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 conditional_value" required></select>')
        } else {
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').empty()
          $(this).parent().parent().find('.conditional_input_value').find('.conditional_format_value_input').append('<select class="select2 form-control select2_condition_class condition_select2 conditional_value" required></select>')
        }
        $('.select2_condition_class').select2({
          tags: true
        })
      })
    })

    $(`#agg_header${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("agg_header","");
      if (String($(`#agg_header${elementID}`).prop('checked')) === 'true') {
        $(`#agg_header_value${elementID}`).css('display', 'block')
      } else {
        $(`#agg_header_value${elementID}`).css('display', 'none')
      }
    })
    $(`#agg_header_sum${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("agg_header_sum","");
      if (String($(`#agg_header_sum${elementID}`).prop('checked')) === 'true') {
        $(`#agg_header_value_sum${elementID}`).css('display', 'block')
      } else {
        $(`#agg_header_value_sum${elementID}`).css('display', 'none')
      }
    })

    $(`#agg_header_count${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("agg_header_count","");
      if (String($(`#agg_header_count${elementID}`).prop('checked')) === 'true') {
        $(`#agg_header_value_count${elementID}`).css('display', 'block')
      } else {
        $(`#agg_header_value_count${elementID}`).css('display', 'none')
      }
    })
    $(`#agg_header_max${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("agg_header_max","");
      if (String($(`#agg_header_max${elementID}`).prop('checked')) === 'true') {
        $(`#agg_header_value_max${elementID}`).css('display', 'block')
      } else {
        $(`#agg_header_value_max${elementID}`).css('display', 'none')
      }
    })

    $(`#selectYfloat${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("selectYfloat","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = ''
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#selectoperations${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#selectoperations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#selectoperations${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#selectoperations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_columns${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_columns","");
      const optndatatype = []
      let optionvalues = []
      let alldatatype = []
      const options_length = $(this).val()
      $(`#OPerationlabel${elementID}`).find(`.operation_delete`).remove()
      for (let i = 0; i < options_length.length; i++) {
        $(`#OPerationlabel${elementID}`).append(`<div class="form-group operation_delete">
                              <label class="acies_label col-md-12">Operation - ${options_length[i]}:</label>
                              <select id="select_table_operation${options_length[i]}${elementID}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                              </div>`)
        $(`#select_table_operation${options_length[i]}${elementID}`).select2()
        let flag = 0
        const seldatatype = $(`#select_columns${elementID} option[value = "${options_length[i]}"]`).attr('data-datatype')
        alldatatype.push(seldatatype)
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
          if(seldatatype != 'DateField' && seldatatype != 'DateTimeField' ){
            flag = 1
          }
          if(flag == 0) optionvalues = ['Count', 'Count Distinct', 'First', 'Last', 'Earliest','Latest']
          else optionvalues = ['Count', 'Count Distinct', 'First', 'Last']
          $(`#select_table_operation${options_length[i]}${elementID}`).find('option').slice(1).remove()
          for (let j = 0; j < optionvalues.length; j++) {
            $(`#select_table_operation${options_length[i]}${elementID}`).append(`<option value="${optionvalues[j]}">${optionvalues[j]}</option>`)
          }
        }
        else if (((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optionvalues = ['Sum', 'Count', 'Count Distinct', 'Average', 'Skewness', 'Kurtosis', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'Percentage of Total']
          $(`#select_table_operation${options_length[i]}${elementID}`).find('option').slice(1).remove()
          for (let j = 0; j < optionvalues.length; j++) {
            $(`#select_table_operation${options_length[i]}${elementID}`).append(`<option value="${optionvalues[j]}">${optionvalues[j]}</option>`)
          }
        }
      }

    })

    $(`#select_columns${elementID}`).on('select2:select', function (e) {
          var data = e.params.data;
              $(".nestedtable_columns_re-order").append(`
              <li class="btn btn-sm btn-light col" name="${data.id}"  style="height:auto;margin:5px auto;
              overflow: auto;">
                <span class="ui-icon ui-icon-arrowthick-2-n-s float-left mt-1"></span>${data.text}
              </li>`);
              $('#nestedTableColumnReorder').find('.sortable-order').sortable()
        })
    $(`#select_columns${elementID}`).on('select2:unselect', function (e) {
            var data = e.params.data;
            $(`.nestedtable_columns_re-order li[name='${data.id}']`).remove()
        });

    $("#nestedtablecol_reorder").click(function () {
          if ($(this).is(":checked")) {
              $("#nestedTableColumnReorder").css("display", "block");
          } else {
              $("#nestedTableColumnReorder").css("display", "none");
          }
        });


    $(`#selectXfloat${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("selectXfloat","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = []
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#opt${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#opt${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#opt${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#opt${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })

    $(`#select_xf${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_xf","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      const datatypeY = $(`#select_xf1${elementID}`).find('option:selected').attr('data-datatype')
      let optionvalues = []
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else if ((!((String(datatypeY) === 'IntegerField') || (String(datatypeY) === 'BigIntegerField') || (String(datatypeY) === 'FloatField') || (String(datatypeY) === 'AutoField')))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_xf1${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_xf1","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      const datatypeY = $(`#select_xf${elementID}`).find('option:selected').attr('data-datatype')
      let optionvalues = []
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = new Array('Count', 'Count Distinct')
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()

        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else if ((!((String(datatypeY) === 'IntegerField') || (String(datatypeY) === 'BigIntegerField') || (String(datatypeY) === 'FloatField') || (String(datatypeY) === 'AutoField')))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_xxy${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_xxy${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_Y${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_Y","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      const datatypeY = $(`#select_Y1${elementID}`).find('option:selected').attr('data-datatype')
      let optionvalues = ''
      if ((!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField')))) {
        optionvalues = new Array('Count', 'Count Distinct')
        $(`#select_OP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else if ((!((String(datatypeY) === 'IntegerField') || (String(datatypeY) === 'BigIntegerField') || (String(datatypeY) === 'FloatField') || (String(datatypeY) === 'AutoField')))) {
        optionvalues = new Array('Count', 'Count Distinct')
        $(`#select_OP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_OP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_Y1${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_Y1","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      const datatypeY = $(`#select_Y${elementID}`).find('option:selected').attr('data-datatype')
      let optionvalues = ''
      if ((!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField')))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_OP${elementID}`).find('option').slice(1).remove()

        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else if ((!((String(datatypeY) === 'IntegerField') || (String(datatypeY) === 'BigIntegerField') || (String(datatypeY) === 'FloatField') || (String(datatypeY) === 'AutoField')))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_OP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_OP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_value${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_value","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = ''
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_options${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_options${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_options${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_options${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })

    $(`#select_val${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_val","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = ''
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_op${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_op${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        if (String(document.getElementById(`selectPlotly${elementID}`).value) !== 'Sunburst') {
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        } else {
          optionvalues = ['Sum', 'Count', 'Count Distinct', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_op${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_op${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#select_XMultiple_no${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_XMultiple_no","");
      let html = ''
      $(`.multiple_xaxis${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="XHbarMultiplelabel{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select X${i}:</label>
                      <select id="select_X${i}Multiple${elementID}" class="XMultiple_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        html = html + '<option value="" disabled selected>--------------------</option>'
        $(`#select_X1Multiple${elementID} option`).each(function () {
          if($(this).attr('data-datatype')){
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
          }
        })
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_xaxis${elementID}`).append(html)

      $('.select2').select2()
      $('.XMultiple_dropbox').change(function () {
        let optionvalues = []
        $('.XMultiple_dropbox').each(function(){
          const datatype = $(this).find('option:selected').attr('data-datatype')
          if(datatype){
            if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
              optionvalues = ['Count', 'Count Distinct']
            }
          }
        });
        if(optionvalues.length == 0){
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_XMultipleOP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_XMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

    })
    $('.XMultiple_dropbox').change(function () {
      let optionvalues = []
      $('.XMultiple_dropbox').each(function(){
        const datatype = $(this).find('option:selected').attr('data-datatype')
        if(datatype){
          if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
            optionvalues = ['Count', 'Count Distinct']
          }
        }
      });
      if(optionvalues.length == 0){
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
      $(`#select_XMultipleOP${elementID}`).find('option').slice(1).remove()
      for (let i = 0; i < optionvalues.length; i++) {
        $(`#select_XMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })
    $(`#select_YmultipleCombo_no${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_YmultipleCombo_no","");
      let html = ''
      $(`.multiple_yaxis_combo${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="YHbarComboMultiplelabel{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select Y${i}:</label>
                      <select id="select_Y${i}multipleCombo${elementID}" class="YmultipleCombo_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        html = html + '<option value="" disabled selected>--------------------</option>'
        $(`#select_Y1multipleCombo${elementID} option`).each(function () {
          if($(this).attr('data-datatype')){
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
          }
        })
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_yaxis_combo${elementID}`).append(html)

      $('.select2').select2()
      $('.YmultipleCombo_dropbox').change(function () {
        let optionvalues = []
        $('.YmultipleCombo_dropbox').each(function(){
          const datatype = $(this).find('option:selected').attr('data-datatype')
          if(datatype){
            if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
              optionvalues = ['Count', 'Count Distinct']
            }
          }
        });
        if(optionvalues.length == 0){
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_OPCombo${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OPCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

    })
    $('.YmultipleCombo_dropbox').change(function () {
      let optionvalues = []
      $('.YmultipleCombo_dropbox').each(function(){
        const datatype = $(this).find('option:selected').attr('data-datatype')
        if(datatype){
          if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
            optionvalues = ['Count', 'Count Distinct']
          }
        }
      });
      if(optionvalues.length == 0){
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
      $(`#select_OPCombo${elementID}`).find('option').slice(1).remove()
      for (let i = 0; i < optionvalues.length; i++) {
        $(`#select_OPCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })
    $(`#select_LineCombo${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_LineCombo","");
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = []
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_OPCombo_2${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OPCombo_2${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_OPCombo_2${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_OPCombo_2${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })

    $(`#select_YmultipleLineCombo_no${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_YmultipleLineCombo_no","");
      let html = ''
      $(`.multiple_yaxis_line_combo${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="YHbarComboMultipleLinelabel{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select Y${i}:</label>
                      <select id="select_Y${i}multipleLineCombo${elementID}" class="YmultipleLineCombo_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        html = html + '<option value="" disabled selected>--------------------</option>'
        $(`#select_Y1multipleLineCombo${elementID} option`).each(function () {
          if($(this).attr('data-datatype')){
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
          }
        })
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_yaxis_line_combo${elementID}`).append(html)

      $('.select2').select2()
      $('.YmultipleLineCombo_dropbox').change(function () {
        let optionvalues = []
        $('.YmultipleLineCombo_dropbox').each(function(){
          const datatype = $(this).find('option:selected').attr('data-datatype')
          if(datatype){
            if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
              optionvalues = ['Count', 'Count Distinct']
            }
          }
        });
        if(optionvalues.length == 0){
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_multipleCombo${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_multipleCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

    })
    $('.YmultipleLineCombo_dropbox').change(function () {
      let optionvalues = []
      $('.YmultipleLineCombo_dropbox').each(function(){
        const datatype = $(this).find('option:selected').attr('data-datatype')
        if(datatype){
          if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
            optionvalues = ['Count', 'Count Distinct']
          }
        }
      });
      if(optionvalues.length == 0){
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
      $(`#select_multipleCombo${elementID}`).find('option').slice(1).remove()
      for (let i = 0; i < optionvalues.length; i++) {
        $(`#select_multipleCombo${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })
    $(`#select_multiple_combo_line${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_multiple_combo_line","");
      let html = ''
      $(`.multiple_line_combo_chart_line${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="YHbarComboMultiplelabel{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select Line ${i}:</label>
                      <select id="select_L${i}multipleCombo${elementID}" class="combo_multiple_line_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        html = html + '<option value="" disabled selected>--------------------</option>'
        $(`#select_L1multipleCombo${elementID} option`).each(function () {
          if($(this).attr('data-datatype')){
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
          }
        })
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_line_combo_chart_line${elementID}`).append(html)

      $('.select2').select2()
      $('.combo_multiple_line_dropbox').change(function () {
        let optionvalues = []
        $('.combo_multiple_line_dropbox').each(function(){
          const datatype = $(this).find('option:selected').attr('data-datatype')
          if(datatype){
            if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
              optionvalues = ['Count', 'Count Distinct']
            }
          }
        });
        if(optionvalues.length == 0){
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_multipleCombo_line${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_multipleCombo_line${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

    })
    $('.combo_multiple_line_dropbox').change(function () {
      let optionvalues = []
      $('.combo_multiple_line_dropbox').each(function(){
        const datatype = $(this).find('option:selected').attr('data-datatype')
        if(datatype){
          if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
            optionvalues = ['Count', 'Count Distinct']
          }
        }
      });
      if(optionvalues.length == 0){
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
      $(`#select_multipleCombo_line${elementID}`).find('option').slice(1).remove()
      for (let i = 0; i < optionvalues.length; i++) {
        $(`#select_multipleCombo_line${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })
    $(`#select_YMultiple_no${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_YMultiple_no","");
      let html = ''
      $(`.multiple_yaxis${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="YHbarMultiplelabel{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select  Y${i}:</label>
                      <select id="select_Y${i}Multiple${elementID}" class="YMultiple_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        html = html + '<option value="" disabled selected>--------------------</option>'
        $(`#select_Y1Multiple${elementID} option`).each(function () {
          if($(this).attr('data-datatype')){
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
          }
        })
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_yaxis${elementID}`).append(html)

      $('.select2').select2()
      $('.YMultiple_dropbox').change(function () {
        let optionvalues = []
        $('.YMultiple_dropbox').each(function(){
          const datatype = $(this).find('option:selected').attr('data-datatype')
          if(datatype){
            if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
              optionvalues = ['Count', 'Count Distinct']
            }
          }
        });
        if(optionvalues.length == 0){
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        }
        $(`#select_YMultipleOP${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_YMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      })

    })
    $('.YMultiple_dropbox').change(function () {
      let optionvalues = []
      $('.YMultiple_dropbox').each(function(){
        const datatype = $(this).find('option:selected').attr('data-datatype')
        if(datatype){
          if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
            optionvalues = ['Count', 'Count Distinct']
          }
        }
      });
      if(optionvalues.length == 0){
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
      $(`#select_YMultipleOP${elementID}`).find('option').slice(1).remove()
      for (let i = 0; i < optionvalues.length; i++) {
        $(`#select_YMultipleOP${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
      }
    })

    $(`#select_multiple_y${elementID}`).change(function () {
      let elementID = ($(this).attr("id")).replace("select_multiple_y","");
      let html = ''
      $(`.multiple_line_chart_yaxis${elementID}`).empty()
      for (let i = 2; i <= $(this).val(); i++) {
        html = html + `<div class="col-12" id="YHbar_multiple_label{element_id}">
                  <div class="form-group">
                      <label class="acies_label col-md-12">Select Y${i} Axis:</label>
                      <select id="selectY${i}_multiplefloat${elementID}" class="multiple_line_dropbox select2 plotAjax form-control" name="sel"
                      required>`
        $(`#selectY1_multiplefloat${elementID} option`).each(function () {
          html = html + `<option value="${$(this).val()}" data-datatype="${$(this).attr('data-datatype')}">${$(this).text()}</option>`
        })
        html = html + '<option value="" disabled selected>--------------------</option>'
        html = html + `</select>
                  </div>
              </div>`
      }
      $(`.multiple_line_chart_yaxis${elementID}`).append(html)

      $('.select2').select2()
      $('.multiple_line_dropbox').change(function () {
        const datatype = $(this).find('option:selected').attr('data-datatype')
        let optionvalues = []
        if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
          optionvalues = ['Count', 'Count Distinct']
          $(`#select_multiple_operations${elementID}`).find('option').slice(1).remove()
          for (let i = 0; i < optionvalues.length; i++) {
            $(`#select_multiple_operations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        } else {
          optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
          $(`#select_multiple_operations${elementID}`).find('option').slice(1).remove()
          for (let i = 0; i < optionvalues.length; i++) {
            $(`#select_multiple_operations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
          }
        }
      })
    })

    $('.multiple_line_dropbox').change(function () {
      const datatype = $(this).find('option:selected').attr('data-datatype')
      let optionvalues = []
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionvalues = ['Count', 'Count Distinct']
        $(`#select_multiple_operations${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_multiple_operations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      } else {
        optionvalues = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
        $(`#select_multiple_operations${elementID}`).find('option').slice(1).remove()
        for (let i = 0; i < optionvalues.length; i++) {
          $(`#select_multiple_operations${elementID}`).append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>')
        }
      }
    })
    $(`#plotlyButton${elementID}`).off("click").on('click', plotlyDataAnalysis)
    function plotlyDataAnalysis () {
      let elementID = ($(this).attr("id")).replace("plotlyButton","");
      $("#plotSection" + elementID).css("display","block");
      $(`#PlotElements${elementID}`).modal('hide')
      $('.modal-backdrop').remove()
      const tablename = $(`#selectTable${elementID}`).val()
      const graphsubtype2 = document.getElementById(`selectPlotly${elementID}`).value.split('|')[0]
      const graphtype2 = $(this).attr('chartCategory').split('|')[0]
      let filters = ''
      let linecolumn = ''
      const filterinputfinal = []
      let xaxis = ''
      let yaxis = ''
      let img_icon = ''
      let columnname = ''
      let val = ''
      let condition = ''
      let secondcolumn = ''
      let operation = ''
      let operation_line = ''
      let tabNameID = ''
      let graphtype = ''
      let graphsubtype = ''
      let conditionaltable = []
      let totaly = ''
      let totalL = ''
      let istitle = ''
      let titlevalue = ''
      let computednumber = ''
      let operationn = ''
      let aggdistinct = ''
      let n = ''
      let dataurl = ''
      let uniqueid = ''
      let entity = ''
      let date = ''
      let model = ''
      let formData = ''
      let drange = {}
      $(`.filter_card_body${elementID}`).find('.categorical_filter_inputs').each(function () {
        const filterinputdict = {}
        columnname = $(this).attr('name')
        val = $(this).val()
        filterinputdict.column_name = columnname
        filterinputdict.filter_value = val
        filterinputdict.data_type = $(this).attr('data-data_type')
        filterinputdict.data_category = 'Categorical'
        filterinputfinal.push(filterinputdict)
      })
      $(`.filter_card_body${elementID}`).find('.numerical_column_condition').each(function () {
        const filterinputdict = {}
        columnname = $(this).attr('name')
        condition = $(this).val()
        val = $(this).parent().next().find('.numerical_column_value').val()
        filterinputdict.column_name = columnname
        filterinputdict.condition_name = condition
        filterinputdict.filter_value = val
        filterinputdict.data_type = $(this).attr('data-data_type')
        filterinputdict.data_category = 'Numerical'
        filterinputfinal.push(filterinputdict)
      })
      if($(`.filter_card_body${elementID}`).find('#filter_dtrange').is(':checked')){
        drange['col_name'] = $('.seldatecol').val()
        drange['start_date'] = $('#startdate').val()
        drange['end_date'] = $('#enddate').val()
      }
      if (String(graphtype2) === 'Aggregation'){
        if (String(graphsubtype2) === 'Sum' || String(graphsubtype2) === 'Average' || String(graphsubtype2) === 'Median' || String(graphsubtype2) === 'Variance' || String(graphsubtype2) === 'Skewness' || String(graphsubtype2) === 'Kurtosis' || String(graphsubtype2) === 'Standard Deviation') {
          img_icon = $(`#selectAggIcon_float${elementID}`).val()
        }
        if (String(graphsubtype2) === 'Count' || String(graphsubtype2) === 'Count Distinct' || String(graphsubtype2) === 'First' || String(graphsubtype2) === 'Last') {
          img_icon = $(`#selectAggIcon_axis${elementID}`).val()
        }
        if (String(graphsubtype2) === 'Minimum' || String(graphsubtype2) === 'Maximum') {
          img_icon = $(`#selectAggIcon${elementID}`).val()
        }
        if (String(graphsubtype2) === 'Top N' || String(graphsubtype2) === 'Bottom N') {
          img_icon = $(`#selectAggIcon_n${elementID}`).val()
        }
      }
      if (String(graphsubtype2) === 'Vertical Bar' || String(graphsubtype2) === 'Vertical Waterfall' || String(graphsubtype2) === 'Line' || String(graphsubtype2) === 'Stepped Line' || String(graphsubtype2) === 'Vertical Area') {
        xaxis = $(`#selectXH${elementID}`).val()
        yaxis = $(`#selectYfloat${elementID}`).val()
        secondcolumn = $(`#selectYfloat${elementID}`).val()
        operation = $(`#selectoperations${elementID}`).val()
        tabNameID = $(`#selectXYOPETab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }

      if (["Pivot Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"].includes(String(graphsubtype2))) {
        xaxis = JSON.stringify($(`#select_pivot_rows${elementID}`).val())
        operation = $(`#select_pivot_operations${elementID}`).val()
        tabNameID = $(`#select_pivot_Tab${elementID}`).val()
        filters = JSON.stringify($(`#select_pivot_filter${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Table') {
        var column_reorder = [];
        if ($("#tablecol_reorder").is(":checked")) {
          $("#tableColumnReorder").find(".sortable-order").children().each(function() {
            column_reorder.push($(this).attr("name"));
          });
        }
        if (column_reorder.length == 0) {
          const selectedValues = $(`#select_table_columns${elementID}`).val();
          if (selectedValues && selectedValues.length > 0) {
            xaxis = JSON.stringify(selectedValues);
            yaxis = JSON.stringify(selectedValues);
          } else {
            var columnValues = [];
            $(`#select_table_columns${elementID}`).find('option').each(function() {
              columnValues.push($(this).attr('value'));
            });
            xaxis = JSON.stringify(columnValues);
            yaxis = JSON.stringify(columnValues);
          }
        } else {
          xaxis = JSON.stringify(column_reorder);
          yaxis = JSON.stringify(column_reorder);
        }


        conditionaltable = []
        $('.conditional_body').each(function () {
          const conditional_dict = {}
          conditional_dict.column_name = $(this).find('.conditional_column_name').val()
          conditional_dict.column_datatype = $(this).find('.conditional_column_name').find('option:selected').attr('data-datatype')
          conditional_dict.column_condition = $(this).find('.conditional_condition').val()
          conditional_dict.condition_value = $(this).find('.conditional_value').val()
          conditional_dict.condition_color = $(this).find('.conditional_color_input').val()
          if(conditional_dict.column_name != null && conditional_dict.column_name != undefined){
            conditionaltable.push(conditional_dict)
            }
        })
        if($(`#columnAlignmentButtonTable${elementID}`).attr('data-listdata')){
          selectedOptions = JSON.parse($(`#columnAlignmentButtonTable${elementID}`).attr('data-listdata'))
        }else{
           selectedOptions = JSON.parse('[{"global_config":{"globalHeaderColumnAlignment":"center","globalContentColumnAlignment":"center"},"columns_config":[]}]');
        }
        operation = $(`#fk_value${elementID}`).prop('checked')
        tabNameID = $(`#table_Tab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter24${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Multiple Line Chart') {
        xaxis = $(`#selectX_multiple${elementID}`).val()
        secondcolumn = $(`#selectX_multiple${elementID}`).val()
        yaxis = []
        totaly = $(`#select_multiple_y${elementID}`).val()
        for (let i = 1; i <= totaly; i++) {
          yaxis.push($(`#selectY${i}_multiplefloat${elementID}`).val())
        }
        yaxis = JSON.stringify(yaxis)
        operation = $(`#select_multiple_operations${elementID}`).val()
        tabNameID = $(`#selectXYOPE_multipleTab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter23${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }

      if (String(graphsubtype2) === 'Funnel' || String(graphsubtype2) === 'Funnel Area' || String(graphsubtype2) === 'Horizontal Bar' || String(graphsubtype2) === 'Horizontal Area' || String(graphsubtype2) === 'Horizontal Waterfall') {
        xaxis = $(`#selectXfloat${elementID}`).val()
        yaxis = $(`#selectYH${elementID}`).val()
        secondcolumn = $(`#selectXfloat${elementID}`).val()
        operation = $(`#opt${elementID}`).val()
        tabNameID = $(`#selectXFloatTab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter1${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Vertical Histogram' || String(graphsubtype2) === 'Horizontal Histogram' || String(graphsubtype2) === 'Cumulative Histogram') {
        xaxis = $(`#select_histovalue${elementID}`).val()
        yaxis = $(`#select_histovalue${elementID}`).val()
        secondcolumn = $(`#select_histovalue${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter2${elementID}`).val())
        operation = $(`#select_histovalue${elementID}`).val()
        tabNameID = $(`#selectValueTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Stacked Histogram') {
        xaxis = $(`#select_xxaxis${elementID}`).val()
        yaxis = $(`#select_xx1axis${elementID}`).val()
        secondcolumn = $(`#select_xxaxis${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter3${elementID}`).val())
        operation = $(`#select_xxaxis${elementID}`).val()
        tabNameID = $(`#selectXXTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Sum' || String(graphsubtype2) === 'Average' || String(graphsubtype2) === 'Median' || String(graphsubtype2) === 'Variance' || String(graphsubtype2) === 'Skewness' || String(graphsubtype2) === 'Kurtosis' || String(graphsubtype2) === 'Standard Deviation') {
        xaxis = $(`#selectval${elementID}`).val()
        yaxis = $(`#selectval${elementID}`).val()
        secondcolumn = $(`#selectval${elementID}`).val()
        istitle = $(`#agg_header_max${elementID}`).prop('checked')
        titlevalue = $(`#agg_header_value_max${elementID}`).val()
        tabNameID = $(`#selectCSVTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        filters = JSON.stringify($(`#selectfilter16${elementID}`).val())
        operation = graphsubtype2
      }

      if (String(graphsubtype2) === 'Count' || String(graphsubtype2) === 'Count Distinct' || String(graphsubtype2) === 'First' || String(graphsubtype2) === 'Last') {
        xaxis = $(`#select_allval${elementID}`).val()
        yaxis = $(`#select_allval${elementID}`).val()
        secondcolumn = $(`#select_allval${elementID}`).val()
        istitle = $(`#agg_header_count${elementID}`).prop('checked')
        titlevalue = $(`#agg_header_value_count${elementID}`).val()
        tabNameID = $(`#selectAggCSVTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        filters = JSON.stringify($(`#selectfilter20${elementID}`).val())
        operation = graphsubtype2
      }
      if (String(graphsubtype2) === 'Minimum' || String(graphsubtype2) === 'Maximum') {
        xaxis = $(`#select_agg_val${elementID}`).val()
        yaxis = $(`#select_agg_val${elementID}`).val()
        secondcolumn = $(`#select_agg_val${elementID}`).val()
        istitle = $(`#agg_header${elementID}`).prop('checked')
        titlevalue = $(`#agg_header_value${elementID}`).val()
        tabNameID = $(`#selectAggTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        filters = JSON.stringify($(`#selectfilter21${elementID}`).val())
        operation = graphsubtype2
      }
      if (String(graphsubtype2) === 'Top N' || String(graphsubtype2) === 'Bottom N') {
        xaxis = $(`#selectval_n${elementID}`).val()
        yaxis = $(`#selectval_n${elementID}`).val()
        secondcolumn = $(`#selectval_n${elementID}`).val()
        computednumber = $(`#computed_number${elementID}`).val()
        istitle = $(`#agg_header_sum${elementID}`).prop('checked')
        titlevalue = $(`#agg_header_value_sum${elementID}`).val()
        tabNameID = $(`#selectAggTabn${elementID}`).val()
        operationn = $(`#selectop_n${elementID}`).val()
        aggdistinct = String($(`#agg_distinct${elementID}`).prop('checked'))
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        filters = JSON.stringify($(`#selectfilter22${elementID}`).val())
        operation = graphsubtype2
      }

      if (String(graphsubtype2) === 'Sunburst' || String(graphsubtype2) === 'Angular Gauge' || String(graphsubtype2) === 'Bullet Gauge') {
        xaxis = $(`#select_cat${elementID}`).val()
        yaxis = $(`#select_subcat${elementID}`).val()
        secondcolumn = $(`#select_val${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter4${elementID}`).val())
        operation = $(`#select_op${elementID}`).val()
        tabNameID = $(`#selectCSVOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Pie Chart' || String(graphsubtype2) === 'Donut Chart' || String(graphsubtype2) === 'Treemap') {
        xaxis = $(`#select_category${elementID}`).val()
        yaxis = $(`#select_value${elementID}`).val()
        secondcolumn = $(`#select_value${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter5${elementID}`).val())
        operation = $(`#select_options${elementID}`).val()
        tabNameID = $(`#selectCVOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Image') {
        formData = new FormData($(this).parent().parent().find('form.uploadimage')[0])
        n = ((windowLocationAttr.href).split('/'))
        dataurl = n[n.length - 2]
        uniqueid = (elementID + Math.random()).replace('.', '').replace(/\s/g, '')
        formData.append('upload_image', $(this).parent().parent().find("input[name='upload_image']").val())
        formData.append('operation', 'uploadImage')
        formData.append('folder_name', dataurl)
        formData.append('elementid', uniqueid)
        xaxis = $(`#image_${elementID}`).val().substr(($(`#image_${elementID}`).val()).lastIndexOf('\\') + 1).split('.')[0] + '.' + (($(`#image_${elementID}`).val()).split('.')[1])
        yaxis = ($(`#image_${elementID}`).val().substr(($(`#image_${elementID}`).val()).lastIndexOf('\\') + 1).split('.')[0]).replace(/[\W_]+/g, '')
        secondcolumn = dataurl
        filters = JSON.stringify([])
        operation = uniqueid
        tabNameID = $(`#image_Tab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        $.ajax({
          url: `/users/${urlPath}/upload_image/`,
          data: formData,
          type: 'POST',
          cache: false,
          contentType: false,
          processData: false,
          dataType: 'json',
          success: function (data) {
            const plotDict = { is_title: istitle, title_value: titlevalue, total_y: totaly, total_L: totalL, computed_number: computednumber, operation_n: operationn, agg_distinct: aggdistinct, second_column: secondcolumn, color: color, x_axis: xaxis, y_axis: yaxis, operation: operation, operation_line: operation_line, optionvalues: optionvalues, optionvalues_line: optionvalues_line, graph_type: graphtype, graph_subtype: graphsubtype, tableName: tablename, tabNameID: tabNameID, filters: filters, line_column: linecolumn, filter_input_final: JSON.stringify(filterinputfinal), drange: JSON.stringify(drange)}
            let slicerColumnId = tabNameID.replace('analysisrow', 'selectSlicerConfig_')
            let slicerColumnValue = []
            let slicerColumn = []
            for (let i = 0; i < $(`.${slicerColumnId}`).length; i++) {
              slicerColumnValue.push($(`.${slicerColumnId}`).eq(i).val())
              slicerColumn.push($(`.${slicerColumnId}`).eq(i).attr('data-slicerColumn'))
            }
            plotFunction(plotDict, slicerColumn = slicerColumn, slicerColumnValue = slicerColumnValue, slicerColumnId = slicerColumnId)
          }
        })
      }

      if (String(graphsubtype2) === 'Scatter' || String(graphsubtype2) === '2D Histogram Contour' || String(graphsubtype2) === 'Scatter with Straight Lines and Markers') {
        xaxis = $(`#selectX${elementID}`).val()
        yaxis = $(`#selectY${elementID}`).val()
        secondcolumn = $(`#selectY${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter6${elementID}`).val())
        tabNameID = $(`#selectXYTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Vertical Box' || String(graphsubtype2) === 'Horizontal Box' || String(graphsubtype2) === 'Horizontal Dot Plot' || String(graphsubtype2) === 'Vertical Violin' || String(graphsubtype2) === 'Horizontal Violin') {
        xaxis = $(`#selectXaxis${elementID}`).val()
        yaxis = $(`#selectYaxis${elementID}`).val()
        secondcolumn = $(`#selectYaxis${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter7${elementID}`).val())
        tabNameID = $(`#selectXYOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Vertical Line Stacked' || String(graphsubtype2) === 'Vertical Area Stacked' || String(graphsubtype2) === 'Vertical Waterfall Grouped') {
        xaxis = $(`#select_X${elementID}`).val()
        yaxis = $(`#select_Y${elementID}`).val()
        secondcolumn = $(`#select_Y1${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter8${elementID}`).val())
        operation = $(`#select_OP${elementID}`).val()
        tabNameID = $(`#selectXYY1OPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Vertical Bar Stacked' || String(graphsubtype2) === 'Vertical Bar Grouped') {
        xaxis = $(`#select_Xm${elementID}`).val()
        yaxis = []
        totaly = $(`#select_YMultiple_no${elementID}`).val()
        for (let i = 1; i <= totaly; i++) {
          yaxis.push($(`#select_Y${i}Multiple${elementID}`).val())
        }
        yaxis = JSON.stringify(yaxis)
        operation = $(`#select_YMultipleOP${elementID}`).val()
        tabNameID = $(`#selectXYMultipleOPTab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter26${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Bar Grouped and Line' || String(graphsubtype2) === 'Bar Stacked and Line') {
        xaxis = $(`#select_XmultipleCombo${elementID}`).val()
        yaxis = []
        totaly = $(`#select_YmultipleCombo_no${elementID}`).val()
        for (let i = 1; i <= totaly; i++) {
          yaxis.push($(`#select_Y${i}multipleCombo${elementID}`).val())
        }
        yaxis = JSON.stringify(yaxis)
        linecolumn = $(`#select_LineCombo${elementID}`).val()
        operation = $(`#select_OPCombo${elementID}`).val()
        operation_line = $(`#select_OPCombo_2${elementID}`).val()
        tabNameID = $(`#selectXYY1OPComboTab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter17${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Bar Stacked and Multiple Line') {
        xaxis = $(`#select_XmultipleLineCombo${elementID}`).val()
        yaxis = []
        totaly = $(`#select_YmultipleLineCombo_no${elementID}`).val()
        for (let i = 1; i <= totaly; i++) {
          yaxis.push($(`#select_Y${i}multipleLineCombo${elementID}`).val())
        }
        yaxis = JSON.stringify(yaxis)
        linecolumn = []
        totalL = $(`#select_multiple_combo_line${elementID}`).val()
        for (let i = 1; i <= totalL; i++) {
          linecolumn.push($(`#select_L${i}multipleCombo${elementID}`).val())
        }
        linecolumn = JSON.stringify(linecolumn)
        operation = $(`#select_multipleCombo${elementID}`).val()
        operation_line = $(`#select_multipleCombo_line${elementID}`).val()
        tabNameID = $(`#selectXYOPE_multipleComboTab${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter25${elementID}`).val())
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Vertical Grouped Violin' || String(graphsubtype2) === 'Vertical Grouped Box') {
        xaxis = $(`#selectX_axis${elementID}`).val()
        yaxis = $(`#selectY_axis${elementID}`).val()
        secondcolumn = $(`#selectY1_axis${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter10${elementID}`).val())
        tabNameID = $(`#selectYYOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Horizontal Area Stacked' || String(graphsubtype2) === 'Horizontal Waterfall Grouped' || String(graphsubtype2) === 'Funnel Stacked') {
        xaxis = $(`#select_xf${elementID}`).val()
        yaxis = $(`#select_yn${elementID}`).val()
        secondcolumn = $(`#select_xf1${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter11${elementID}`).val())
        operation = $(`#select_xxy${elementID}`).val()
        tabNameID = $(`#selectXX1OPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Horizontal Bar Stacked' || String(graphsubtype2) === 'Horizontal Bar Grouped' ) {
        xaxis = []
        totaly = $(`#select_XMultiple_no${elementID}`).val()
        for (let i = 1; i <= totaly; i++) {
          xaxis.push($(`#select_X${i}Multiple${elementID}`).val())
        }
        xaxis = JSON.stringify(xaxis)
        yaxis = $(`#select_Ym${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter29${elementID}`).val())
        operation = $(`#select_XMultipleOP${elementID}`).val()
        tabNameID = $(`#selectXMultipleYOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Horizontal Grouped Violin' || String(graphsubtype2) === 'Horizontal Grouped Box') {
        xaxis = $(`#selectXH_axis${elementID}`).val()
        yaxis = $(`#selectYH_axis${elementID}`).val()
        secondcolumn = $(`#selectX1H_axis${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter12${elementID}`).val())
        tabNameID = $(`#selectXXHOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Bubble Map' || String(graphsubtype2) === 'Chloropeth Map') {
        entity = document.getElementById('entity_id').value
        date = document.getElementById('date_id').value
        model = document.getElementById('model_id').value
        xaxis = document.getElementById('x_axissunburst').value
        yaxis = document.getElementById('y_axissunburst').value
        secondcolumn = document.getElementById('y_axissunburst2').value
        operation = document.getElementById('operationsunburst').value
        graphtype = document.getElementById('graph_type').value
        graphsubtype = document.getElementById('graph_subtype').value
      }
      if (String(graphsubtype2) === '3D Scatter' || String(graphsubtype2) === '3D Mesh') {
        xaxis = $(`#select_X1${elementID}`).val()
        yaxis = $(`#select_Y11${elementID}`).val()
        secondcolumn = $(`#select_Z1${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter14${elementID}`).val())
        tabNameID = $(`#selectXYZTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Bubble Chart') {
        xaxis = $(`#selectBubble_X${elementID}`).val()
        yaxis = $(`#selectBubble_Y${elementID}`).val()
        secondcolumn = $(`#selectBubble_Z${elementID}`).val()
        filters = JSON.stringify($(`#selectfilter18${elementID}`).val())
        tabNameID = $(`#selectBubbleXYTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
      }
      if (String(graphsubtype2) === 'Nested Table') {

        const xaxisdummy = []
        const l1 = $(`#select_categories_level1${elementID}`).val()
        const l2 = $(`#select_categories_level2${elementID}`).val()
        const l3 = $(`#select_categories_level3${elementID}`).val()
        const l4 = $(`#select_categories_level4${elementID}`).val()
        const l5 = $(`#select_categories_level5${elementID}`).val()

        if (String(l1) !== 'null') {
          xaxisdummy.push(l1)
        }
        if (String(l2) !== 'null') {
          xaxisdummy.push(l2)
        }
        if (String(l3) !== 'null') {
          xaxisdummy.push(l3)
        }
        if (String(l4) !== 'null') {
          xaxisdummy.push(l4)
        }
        if (String(l5) !== 'null') {
          xaxisdummy.push(l5)
        }
        xaxis = JSON.stringify(xaxisdummy)
         var column_reorder = []
        if($("#nestedtablecol_reorder").is(":checked")){
        $("#nestedTableColumnReorder").find(".sortable-order").children().each(function() {
         column_reorder.push($(this).attr("name"))
        })
        }
        if(column_reorder.length ==0){
          yaxis = JSON.stringify($(`#select_columns${elementID}`).val())
        }else{
          yaxis = JSON.stringify(column_reorder)
        }
        secondcolumn = $(`#selectCLOPTab${elementID}`).val()
        column_data = $(`#select_columns${elementID}`).val()
        operation_data = [];
        for (let i = 0; i < column_data.length; i++){
          const element = document.getElementById(`select_table_operation${column_data[i]}${elementID}`);
          if (element) {
            operation_data.push(element.value);
          }
        }
          if (column_reorder.length ==0){
            operation = JSON.stringify(operation_data);
          }else{
          const a = column_data;
          const b = operation_data;
          const selectedCols = column_reorder;
          const newA = [];
          const operation_data1 = [];
          for (let i = 0; i < selectedCols.length; i++) {
            const col = selectedCols[i];
            const colIndex = a.indexOf(col);
            if (colIndex !== -1) {
              newA.push(col);
              operation_data1.push(b[colIndex]);
            }
          }
          operation = JSON.stringify(operation_data1);
        }
        filters = JSON.stringify($(`#selectfilter15${elementID}`).val())
        tabNameID = $(`#selectCLOPTab${elementID}`).val()
        graphtype = graphtype2
        graphsubtype = graphsubtype2
        conditionaltable = []
        $('.nested_conditional_body').each(function () {
          const conditional_dict = {}
          conditional_dict.nested_type = $(this).find('.nested_column').val()
          conditional_dict.column_name = $(this).find('.nested_conditional_column_name').val()
          conditional_dict.column_datatype = $(this).find('.nested_conditional_column_name').find('option:selected').attr('data-datatype')
          conditional_dict.column_condition = $(this).find('.nested_conditional_condition').val()
          conditional_dict.condition_value = $(this).find('.nested_conditional_value').val()
          conditional_dict.condition_color = $(this).find('.nested_conditional_color_input').val()
          if(conditional_dict.column_name != null && conditional_dict.column_name != undefined){
          conditionaltable.push(conditional_dict)
          }
        })

      }
      const color = '#b8860b'

      if (!(String(graphsubtype2) === 'Table' || String(graphsubtype2) === 'Nested Table')) {
        conditionaltable = ''
      } else {
        conditionaltable = JSON.stringify(conditionaltable)
        $(`#conditionalModal${elementID}`).find('.conditional_body').each(function (index) {
          if (String(index) !== '0') {
            $(this).remove()
          } else {
            $(this).find('.conditional_column_name').val('')
            $(this).find('.conditional_condition').val('')
            $(this).find('.conditional_value').val('')
            $(this).find('.conditional_value').val('').trigger('change')
          }
        })
      }
      if (String(graphsubtype2) !== 'Image') {
        const plotDict = { is_title: istitle, title_value: titlevalue, conditional_table: conditionaltable, total_y: totaly, total_L: totalL, computed_number: computednumber, operation_n: operationn, agg_distinct: aggdistinct, second_column: secondcolumn, color: color, x_axis: xaxis, y_axis: yaxis, operation: operation,operation_line: operation_line, graph_type: graphtype, graph_subtype: graphsubtype,  tableName: tablename, tabNameID: tabNameID, filters: filters, line_column: linecolumn, filter_input_final: JSON.stringify(filterinputfinal), img_icon:img_icon, drange: JSON.stringify(drange)}
        let slicerColumnId = tabNameID.replace('analysisrow', 'selectSlicerConfig_')
        let slicerColumnValue = []
        let slicerColumn = []
        for (let i = 0; i < $(`.${slicerColumnId}`).length; i++) {
          slicerColumnValue.push($(`.${slicerColumnId}`).eq(i).val())
          slicerColumn.push($(`.${slicerColumnId}`).eq(i).attr('data-slicerColumn'))
        }
        let marginLeft = parseInt($("#"+tabNameID).css("width"))
        $("#"+tabNameID).append(`<i class="fa fa-spinner fa-pulse loadingSymbol" style="position:absolute;font-size: 100px;margin-left:50%; margin-top:15%; z-index: 99999;"></i>`)
        plotFunction(plotDict, slicerColumn = slicerColumn, slicerColumnValue = slicerColumnValue, slicerColumnId = slicerColumnId)
      }
    };
    const chartConfigSaveList = []
    const chartConfigSaveList1 = []
    $(`#themeColor${elementID}`).change(function () {
      const theme = $(this).val()
      var elementID = $(this).attr("id").replace("themeColor","")
      $(`#theme1${elementID}`).css('background-color', theme)
    })
    $(`#themeColor1${elementID}`).change(function () {
      const theme = $(this).val()
      $('.globalConfigPreviewChart').css('color', theme)
      $('.inner-div').css('background-color', theme)
    })
    $(`#myColor${elementID}`).change(function () {
      const theme = $(this).val()
      $('.mainDiv').css('background-color', theme)
    })
    reloadAnalysisConfig(elementID);

    if (element_id.startsWith("ellipse")) {
      $(`#saveChartConfigButton1${element_id}`).click(function (){
        saveChartConfigAnalysis($(this).attr("data-elementID"),"listview")
      });
    } else {
      $(`#saveChartConfigButton${element_id}`).click(function (){
        saveChartConfigAnalysis($(this).attr("data-elementID"))
      });
    }

    $(`#analysisPDF${element_id}`).click(genPDF)
    async function genPDF(){
      var classs = `.tab-pane#${element_id}_tab_content`;
      var buttonText = $(`#analysisPDF${element_id}`).html()
      if ($('.tab-content').find(classs).find('.card-body').find('a')[0] == undefined) {
        classs = ".cells";
        $(classs).find('.card-body').find('a').removeClass('active');
        $('body').css('pointer-events','none')
        $('body').css('background-color','black')
        $('body').css('opacity',0.5)
        $('body').css('overflow-y','hidden')
        $(`#analysisPDF${element_id}`).html(`<i class="fa fa-circle-notch fa-spin"></i> Loading`);
        var idForPdf = await $(classs).find('.card-body').find('.tab-content').find('.tab-pane')//document.getElementById('analysisTabContent'+"ellipse01423704159911523");
        $(classs).find('.card-body').find('.tab-content').find('.tab-pane').find('.card-tools').css('opacity',0);
        $(classs).find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display','none')
        var sizeForPdf = $(classs).find('.card-body').find('.tab-content').find('.tab-pane').length;
      } else {
          $('.tab-content').find(classs).find('.card-body').find('a').removeClass('active');
          $('body').css('pointer-events','none')
          $('body').css('background-color','black')
          $('body').css('opacity',0.5)
          $('body').css('overflow-y','hidden')
          $(`#analysisPDF${element_id}`).html(`<i class="fa fa-circle-notch fa-spin"></i> Loading`);
          var idForPdf = await $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane')//document.getElementById('analysisTabContent'+"ellipse01423704159911523");
          $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane').find('.card-tools').css('opacity',0);
          $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display','none')
          var sizeForPdf = $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane').length;
      }
      var pdfName='Analysis.pdf';
      function sleep(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
      }
      var pdfs
      var pd
      var layout_old = $(`.chartDivSection`).eq(0).attr('data-layout')
      var check = 0
      for(let i = 0; i < sizeForPdf; i++) {
        if ($('.tab-content').find(classs).find('.card-body').find('a')[0] == undefined) {
          $(classs).find('.card-body').find('.tab-content').find('.tab-pane').eq(i).removeClass('active show')
          $(classs).find('.card-body').find('.tab-content').find('.tab-pane').eq(i).addClass('active show')
          $('.chartDivSection').css('border','none');
        } else {
          $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane').eq(i).removeClass('active show')
          $('.tab-content').find(classs).find('.card-body').find('.tab-content').find('.tab-pane').eq(i).addClass('active show')
          $('.chartDivSection').css('border','none');
        }
        if(check == 0 && i == 1) {
          i = 0;
          check = 1
        }
        await(800)
        $(document).scrollTop(0);
        await sleep(1000);
        if (i == 0) {
          pdfs = await new jsPDF("l", "pt", [idForPdf[i].offsetWidth,idForPdf[i].offsetHeight]);
          pd = await new jsPDF("l", "pt", [idForPdf[0].offsetWidth,idForPdf[0].offsetHeight]);
        }
        if (i < (sizeForPdf ) && i >= 0) {
          var dynamic_height = await idForPdf[i].offsetHeight;
          var dynamic_width = await idForPdf[i].offsetWidth;
          if (i < (sizeForPdf ) && i >= 0) {
            await pdfs.addPage([dynamic_width,dynamic_height]);
          }
        }
        await html2canvas(idForPdf[i], { useCors: true, allowTaint: true }).then(canvas => {
          var imgDataPdf = canvas.toDataURL('image/png');
          var widthPdf = pdfs.internal.pageSize.width + 30;
          var heightPdf = pdfs.internal.pageSize.height;
          if (i >= 0) {
            pdfs.addImage(imgDataPdf, 'PNG',0,0,widthPdf,heightPdf);
          }
        })
      }
      for(let i = 0; i < sizeForPdf; i++) {
          $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-pane').eq(i).removeClass('active show')
      }
      $(`#analysisPDF${element_id}`).html(buttonText)
      $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.card-tools').css('opacity',1);
      pdfs.deletePage(1)
      pdfs.save(pdfName)
      if ($('.tab-content').find('.tab-pane').find('.card-body').find('a')[0] == undefined) {
        window.location.reload();
      }
      $('body').css('overflow-y','')
      $('body').css('background-color','')
      $('body').css('opacity','')
      $('body').css('pointer-events','')
      $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display','inline-block')
      $('.tab-content').find('.tab-pane').find('.card-body').find('a').removeClass('active');
      if(layout_old != "No layout") {
        $('.chartDivSection').css('border','solid black 0.1px');
      }
    };
  }




  const button = '<button class="close" type="button" title="Remove this page">×</button>'


  $(document).ready(function () {
    tabID = $('.navtab').length
    $('#btn-add-tab').click(function () {
      tabID++
      $('#tab-list').append($(`<li class="nav-item navtab"><a class="nav-link" id="analysistab${tabID}" href="#tab${tabID}" role="tab" data-toggle="tab" aria-controls="#tab${tabID}" aria-selected="false"><div class="row"><div class="col-md-10" style="padding-right: 0.1rem"><span class="contentEditable tabname" data-tab="analysisrow${tabID}" data-tab_ct="analysisrow${tabID}">Tab${tabID}</span></div><div class="col-md-2" style="padding-top: 0.3rem"><div class="dropdown"><i class="fa fa-cog fa-lg" style="font-size:1.2rem"></i><div class="dropdown-content" style="right: 0rem; top: 1.5rem"><div style="height:8px"></div><div class="row" id="saveChartConfigButton${tabID}" data-tab="analysisrow${tabID}" style="font-size:1rem;">
                                  <button type="button"
                                                  style="border-width:0px;padding: 1px 1px;background-color: white;">
                                                  <i class="fa fa-save fa-lg"
                                                      style="font-size:1.3rem;padding-top: 0.1rem;color:var(--primary-color)"></i>
                                                  Save</button></div>
                                                  <div class="row closetab" style="font-size:1rem; padding-left:0.1rem"><button type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp;<i class="fa fa-times fa-lg"  style="font-size:1.4rem;color:var(--primary-color)"></i>&nbsp; Delete</button></div>
                                                  <div class="row" id="${'AddComment' + tabID}" style="font-size:1rem;padding-left:0.1rem"><button type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp;<i class="fa fa-font fa-lg"  style="font-size:1rem;color:var(--primary-color)"></i>Comment</button></div>

                                      </div>
                                  </div>
                              </div>
                          </div></a></li>`))
      $('#tab-content').append($(`<div class="tab-pane fade" id="tab${tabID}" role="tabpanel" aria-labelledby="analysistab${tabID}"><div class="row" style="margin-left: 1rem;"><button id="analysisPDF${tabID}" type="button" class="btn btn-primary">Convert to PDF</button></div><div class="col-lg-12 m-3 row savealltab resizablediv" id="analysisrow${tabID}"></div></div>`))

      $('.contentEditable').each(function () {
        $(this).on('click', function () {
          $(this).attr('contenteditable', 'true')
          $(this).focus()
        })
        $(this).focusout(function () {
          $(this).removeAttr('contenteditable')
        })
      })
      $('.resizablediv').resizable({
        handles: 'n, s'
      })
      $(`#${'AddComment' + tabID}`).click(function () {
        const tabno = ($(this).parent().parent().parent().parent().parent()[0].id).split('b')[1]
        const commentboxid = 'analysisrow' + tabno
        const commentid = $('.commentboxcard').length
        const commentcardid = 'commentcard' + commentid
        const cancelid = 'cancelcard' + commentid
        const commentbox = $(`<div class="commentboxcard" style="height:6rem" data-tab="${commentcardid}"><div class="row"><i class="fa fa-times" id="${cancelid}" style="font-size:1rem"></i></div><div><div class="row"><textarea id="${commentcardid}" class="commentbox" rows="4" cols="20" name="comment" form="usrform" style="resize:none;margin:0.5rem"></textarea></div></div></div>`)
        commentbox.appendTo(`#${commentboxid}`)
        document.getElementById(cancelid).onclick = function () {
          $(this).parent().parent().remove()
        }
        $('.commentbox').resizable({
          start: function (event, size) {
            $(this).parent()[0].style.height = ''
            $(this).parent()[0].style.position = 'absolute'
          },
        })
        $('.commentboxcard').draggable({ cancel: '' })
      })
      $(`#analysisPDF${tabID}`).click(async function () {
        tabno = $(this)[0].id.split('F')[1]
        function sleep (ms) {
          return new Promise(resolve => setTimeout(resolve, ms))
        }
        $(this).html('<i class="fa fa-spinner fa-spin"></i> Loading')
        $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'none')
        $(this).parent().attr('data-html2canvas-ignore', true)
        $('.nav-tabs').attr('data-html2canvas-ignore', true)
        $(`#${$(this).parent().parent().next().attr('id')}`).css('border', 'none')
        const layoutold = $(`#${$(this).parent().parent().next().attr('id')}`).attr('data-layout')
        $(document).scrollTop(0)
        await sleep(1000)
        const pagesection = $(`#analysisrow${tabno}`).parent().parent().parent()
        const HTMLWidth = pagesection.width()
        const HTMLHeight = pagesection.height()
        const topleftmargin = 15
        const PDFWidth = HTMLWidth + (topleftmargin * 2)
        const PDFHeight = (PDFWidth * 1.2) + (topleftmargin * 2)
        let canvasimageheight = ''
        let canvasimagewidth = ''
        pdfName = 'PDF'
        const wid = $(`#analysisrow${tabno}`).parent().parent().parent()[0].offsetWidth
        const hei = $(`#analysisrow${tabno}`).parent().parent().parent()[0].offsetHeight
        await html2canvas($(`#analysisrow${tabno}`).parent().parent().parent()[0], { useCORS: true,  allowTaint: true }).then(function (canvas) {
          canvasimageheight = $(`#analysisrow${tabno}`).height()
          canvasimagewidth = $(`#analysisrow${tabno}`).width()
          const imgData = canvas.toDataURL('image/svg')
          const doc = new jsPDF('l', 'px', [wid, hei])
          doc.addImage(imgData, 'SVG', 0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height)
          doc.save(pdfName)
          $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'block')
          $(`#${tabDict.pdfButtonID}`).html('<i class="fa fa-file-pdf-o"></i>&nbsp;PDF')
        })
        $(this).empty()
        $(this).html('<i class="fa fa-file-pdf-o"></i>&nbsp;PDF')
        if (String(layoutold) !== 'No layout') {
          $(`#${$(this).parent().parent().next().attr('id')}`).css('border', 'solid black 0.1px')
        }
        $('.nav-tabs').removeAttr('data-html2canvas-ignore')
        $(this).parent().removeAttr('data-html2canvas-ignore')
      })

      $(`#saveChartConfigButton${tabID}`).click(function () {
        const tabid = $(this).attr('data-tab')
        const analysisid = 'analysistab' + tabid.split('w')[1]
        const tabname = $(`#${analysisid}`).children()[0].children[0].innerText
        const tabheight = document.querySelector(`#${tabid}`).offsetHeight
        const layoutScreen = $('.chartDivSection').eq(0).attr('data-layout')
        $('.charts').each(function () {
          const chart_tab = $(this).parent().attr('id')
          if (String(chart_tab) === String(tabid)) {
            const chartheader = $(this).find('h5')[0].innerText
            const layout = $(this).attr('data-layout')
            const graphdata = JSON.parse($(this).attr('data-data'))
            const unique_id = $(this).attr('data-id')
            const graphsubtype = $(this).attr('data-subtype')
            const changed_text = $(this).attr('data-changed_text')
            if (String(graphsubtype) === 'Pie_Chart' || String(graphsubtype) === 'Treemap' || String(graphsubtype) === 'Donut_Chart') {
              graphdata[0].labels = []
              graphdata[0].values = []
            }
            if (String(graphsubtype) === 'Sunburst') {
              graphdata[0].labels = []
              graphdata[0].values = []
              graphdata[0].ids = []
              graphdata[0].parents = []
            }
            if (String(graphsubtype) === 'Vertical_Bar' || String(graphsubtype) === 'Funnel' || String(graphsubtype) === 'Horizontal_Bar' || String(graphsubtype) === 'Line' || String(graphsubtype) === 'Stepped_Line' || String(graphsubtype) === 'Area' || String(graphsubtype) === 'Horizontal_Area' || String(graphsubtype) === 'Scatter' || String(graphsubtype) === '2D_Histogram_Contour' || String(graphsubtype) === 'Vertical_Box' || String(graphsubtype) === 'Horizontal_Box' || String(graphsubtype) === 'Horizontal_Dot_Plot' || String(graphsubtype) === 'Scatter_with_Straight_Lines_and_Markers' || String(graphsubtype) === 'Vertical_Violin' || String(graphsubtype) === 'Horizontal_Violin' || String(graphsubtype) === '3D_Scatter_Plot' || String(graphsubtype) === '3D_Mesh_Plot') {
              graphdata[0].x = []
              graphdata[0].y = []
            }
            if (String(graphsubtype) === '3D_Scatter_Plot' || String(graphsubtype) === '3D_Mesh_Plot') {
              graphdata[0].z = []
            }
            if (String(graphsubtype) === 'Vertical_Waterfall' || String(graphsubtype) === 'Horizontal_Waterfall') {
              graphdata[0].x = []
              graphdata[0].y = []
              graphdata[0].measure = []
            }
            if (String(graphsubtype) === 'Funnel_Area') {
              graphdata[0].text = []
              graphdata[0].values = []
            }
            if (String(graphsubtype) === 'Vertical_Histogram' || String(graphsubtype) === 'Cumulative_Histogram') {
              graphdata[0].x = []
            }
            if (String(graphsubtype) === 'Horizontal_Histogram') {
              graphdata[0].y = []
            }
            if (String(graphsubtype) === 'Angular_Gauge') {
              graphdata[0].value = []
              graphdata[0].title = []
              graphdata[0].gauge.axis.range = []
            }
            if (String(graphsubtype) === 'Bullet_Gauge') {
              graphdata[0].value = []
              graphdata[0].gauge.axis.range = []
            }
            if (String(graphsubtype) === 'Vertical_Grouped_Violin' || String(graphsubtype) === 'Horizontal_Grouped_Violin' || String(graphsubtype) === 'Vertical_Grouped_Box' || String(graphsubtype) === 'Vertical_Line_Stacked' || String(graphsubtype) === 'Vertical_Area_Stacked' || String(graphsubtype) === 'Horizontal_Area_Stacked' || String(graphsubtype) === 'Horizontal_Grouped_Box' || String(graphsubtype) === 'Horizontal_Waterfall_Grouped' || String(graphsubtype) === 'Funnel_Stacked') {
              graphdata[0].x = []
              graphdata[0].y = []
              graphdata[1].y = []
              graphdata[1].x = []
            }
            if (String(graphsubtype) === 'Vertical_Waterfall_Grouped') {
              graphdata[0].measure = []
              graphdata[1].measure = []
            }
            const xaxis = $(this).attr('data-xaxis')
            const yaxis = $(this).attr('data-yaxis')
            const secondcolumn = $(this).attr('data-secondcolumn')
            const operation = $(this).attr('data-operation')
            const entity = $(this).attr('data-entity')
            const date = $(this).attr('data-date')
            const model = $(this).attr('data-model')
            chartsavedata.push({ entity: entity, date: date, model: model, operation: operation, tabheight: tabheight, tab_name: tabname, chartheader: chartheader, x_axis: xaxis, y_axis: yaxis, second_column: secondcolumn, tab_id: tabid, height: $(this).height(), width: $(this).width(), position: $(this).position(), layout: JSON.parse(layout), data: graphdata, id: uniqueid, graph_subtype: graphsubtype, changed_text: JSON.parse(changedtext) })
          }
        })
        $('.draggable_charts').each(function () {
          const chart_tab = $(this).parent().attr('id')
          if (String(chart_tab) === String(tabid)) {
            const xaxis = $(this).attr('data-xaxis')
            const yaxis = $(this).attr('data-yaxis')
            const second_column = $(this).attr('data-secondcolumn')
            const entity = $(this).attr('data-entity')
            const date = $(this).attr('data-date')
            const model = $(this).attr('data-model')
            const operation = $(this).attr('data-operation')
            const layout = $(this).attr('data-layout')
            const graphdata = $(this).attr('data-data')
            const unique_id = $(this).attr('data-id')
            const graph_subtype = $(this).attr('data-subtype')
            const backgroundcolor = $(this).css('background-color')
            const valuefontsize = $(this).find('h5').css('font-size')
            const titlefontsize = $(this).find('p').css('font-size')
            chartsavedata.push({ entity: entity, date: date, model: model, operation: operation, tabheight: tabheight, tab_name: tabname, x_axis: xaxis, y_axis: yaxis, second_column: second_column, tab_id: tabid, height: $(this).height(), width: $(this).width(), position: $(this).position(), layout: layout, data: graphdata, id: unique_id, graph_subtype: graph_subtype, backgroundcolor: backgroundcolor, titlefontsize: titlefontsize, valuefontsize: valuefontsize })
          }
        })
        $('.commentboxcard').each(function () {
          const chart_tab = $(this).parent().attr('id')
          if (String(chart_tab) === String(tabid)) {
            const textboxid = $(this).attr('data-tab')
            const textboxvalue = document.getElementById(textboxid).value
            const height = $(`#${textboxid}`).height()
            const width = $(`#${textboxid}`).width()
            chartsavedata.push({ graph_subtype: 'Textbox', tabheight: tabheight, tab_name: tabname, tab_id: tabid, height: height, width: width, position: $(this).position(), textboxvalue: textboxvalue, textboxid: textboxid })
          }
        })
        chartsavedata.push(layoutScreen)
        let url_string = window.location.pathname
        let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
        let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
        let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
        let app_code2 = url_string.substring(f_occ+1,s_occ)
        let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
        if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
          current_dev_mode2 = "User"
        }

      })
    })

    $('#tab-list').on('click', '.closetab', function () {
      tabID = $(this).parents('a').attr('href')
      $(this).parents('li').remove()
      $(tabID).remove()
      $.ajax({
        url: '/dashboard/delete_plot',

        data: {
          tab_id: tabID
        },
        type: 'POST',
        dataType: 'json',
        success: function (data) { },
        error: function () {

        }
      })
    })

    const list = document.getElementById('tab-list')
  })

  let y = ''
  let a = ''
  $('.myDiv').click(function () {
    y = $(this).css('background-color')
    a = $('.inner-div').css('background-color')
    $(prevDiv).css('border', '0px')
    $(this).css('border-spacing', ' 15px 15px 15px 15px')
    prevDiv = $(this)
  })


  window.onclick = function (event) {
    if (!event.target.matches('.dropbtn')) {
      const dropdowns = document.getElementsByClassName('dropdown-content')
      for (let i = 0; i < dropdowns.length; i++) {
        const openDropdown = dropdowns[i]
        if (openDropdown.classList.contains('show')) {
          openDropdown.classList.remove('show')
        }
      }
    }
  }


  $("#applyButton").on("click",function(){
    let color_ = $(this).closest(".modal").find(".global_bg_color").find("input").val()
    $(".tabLinksclass").css("background-color",color_)
    $("#tabLinks .index-rows").css("background-color",color_)
  })

  $(document).ready(function () {
    // Get all the input tags, select tags, and checkboxes inside the modal
    let globalSettingsInputs = $('#select_global_settings input[type="number"], #select_global_settings input[type="color"], #select_global_settings select.select2, #select_global_settings input[type="checkbox"]');
    globalSettingsInputs.each(function () {
      let elementId = $(this).attr('id');
      let elementType = $(this).prop('nodeName');
      let elementValue;
      if (elementType === 'INPUT') {
        if ($(this).attr('type') === 'checkbox') {
          elementValue = $(this).prop('checked');
        } else if ($(this).attr('type') === 'color') {
          elementValue = $(this).val();
        } else {
          elementValue = $(this).val();
        }
      } else if (elementType === 'SELECT') {
        elementValue = $(this).find(':selected').val();
      }
      globalConfigJsonData[elementId] = elementValue;
    });

    globalSettingsInputs.on("change", function () {
      color_changed = 1
    })
    $(".global_applyButton").on('click', function () {
      ele_id = $(this).attr('data_elementid')
      var col1 = $(".indextabBG").val();
      var col2 = $(".indextabFC").val();
      $(".defaultTabTheme").css("background-color", col1);
      $(".index-no-column").css("background-color", col1);
      $(".dropIndex").css("background", `${col1} linear-gradient(to bottom right, ${col1} 25%, #fff)`);
      $(".boxIndex").css("background", `${col1} linear-gradient(to bottom right, ${col1} 25%, #fff)`);
      $(".dropIndex").find('p').css("color", col2);
      $(".boxIndex").find('p').css("color", col2);
      $(".tab-header-name").css("color", col2);
      $(".colored-text").css("color", col2);
      $(".index-rows").css("border-color", col1);
      $(".index-no-column").css("border-color", col1);
      $(".tab-icons ").find('i').css("color", col2);
      $(".colored-icons").find('i').css("color", col1);
      $(".index-no-column").find('p').css("color", col2);
      $(".arrow-tab").css("border-left-color", col1);
      apply_clicked = 1
    })

    $('#select_global_settings').find('.close').off('click').on('click', function () {
      el_id = $('#select_global_settings').find('.themeColor1').attr('id').replace("themeColor1", "")
      close_clicked = 1

      if (apply_clicked == 0 && close_clicked == 1 && color_changed == 1) {
        Swal.fire({
          icon: 'question',
          title: "There are some unsaved changes, if you close, these changes will be lost. Do you want to apply the unsaved changes?\n\n Click 'Yes' to confirm or click 'No' if you do not wish to apply it.",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: 'Yes',
          denyButtonText: 'No',
        }).then((result) => {
          if (result.isConfirmed) {
            $('.global_applyButton').trigger("click");
          }
          else if (result.isDenied) {
            globalSettingsInputs.each(function () {
              let elementId = $(this).attr('id');
              let elementType = $(this).prop('nodeName');
              let elementValue = globalConfigJsonData[elementId];
              if (elementType === 'INPUT') {
                if ($(this).attr('type') === 'checkbox') {
                  $(this).prop('checked', elementValue);
                } else if ($(this).attr('type') === 'color') {
                  $(this).val(elementValue).trigger('change');
                } else {
                  $(this).val(elementValue);
                }
              } else if (elementType === 'SELECT') {
                $(this).val(elementValue).trigger('change.select2');
              }
            });
            if ($('.global_bg_selection ') == "background_image") {
              $('.global_bg_color').css("display", "none")
              $('.global_bg_image').css("display", "block")
            }
            else {
              $('.global_bg_color').css("display", "block")
              $('.global_bg_image').css("display", "none")
              $(`.mainDiv`).css("background-image", 'none')
            }
          }
        })
        apply_clicked = 0;
      }
    })
    $('#select_global_settings').on('hide.bs.modal', function () {
      close_clicked = 1
      if (apply_clicked == 0 && close_clicked == 1 && color_changed == 1) {
        Swal.fire({
          icon: 'question',
          title: "There are some unsaved changes, if you close, these changes will be lost. Do you want to apply the unsaved changes?\n\n Click 'Yes' to confirm or click 'No' if you do not wish to apply it.",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: 'Yes',
          denyButtonText: 'No',
        }).then((result) => {
          if (result.isConfirmed) {
            $('.global_applyButton').trigger("click");
          } else if (result.isDenied) {
            globalSettingsInputs.each(function () {
              let elementId = $(this).attr('id');
              let elementType = $(this).prop('nodeName');
              let elementValue = globalConfigJsonData[elementId];
              if (elementType === 'INPUT') {
                if ($(this).attr('type') === 'checkbox') {
                  $(this).prop('checked', elementValue);
                } else if ($(this).attr('type') === 'color') {
                  $(this).val(elementValue).trigger('change');
                } else {
                  $(this).val(elementValue);
                }
              } else if (elementType === 'SELECT') {
                $(this).val(elementValue).trigger('change.select2');
              }
            });
            if ($('.global_bg_selection ') == "background_image") {
              $('.global_bg_color').css("display", "none")
              $('.global_bg_image').css("display", "block")
            }
            else {
              $('.global_bg_color').css("display", "block")
              $('.global_bg_image').css("display", "none")
              $(`.mainDiv`).css("background-image", 'none')
            }
          }
        });
        apply_clicked = 0;
      }
    })
    $('#select_global_settings').on('shown.bs.modal', function () {
      s_id = $('#select_global_settings').find('.themeColor1').attr('id').replace('themeColor1', '')
      plt_bk_color = $('#themeColor1' + s_id).val()
      apply_clicked = 0
      close_clicked = 0
      color_changed = 0
    })
  });

}

function arrayEquals(a, b) {
  return Array.isArray(a) &&
    Array.isArray(b) &&
    a.length === b.length &&
    a.every((val, index) => val === b[index]);
}

function ToggleSlicerConfigure (objThis, id6, id20, Slicer_ColumnId) {
  const slicerP = objThis.attr('data-slicerColumn')
  const html = `
    <div id="div_id_active" class="custom-control custom-checkbox">
            <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
            <label for="${id20}${slicerP}" class="custom-control-label">
                ${slicerP}
            </label>
        </div>
    `
  $(`#${id20}`).append(html)
  if (Object.keys(slicerTabConnectDict).includes(id6)) {
    const unConnectSlicer = slicerTabConnectDict[id6]
    if (unConnectSlicer.includes(slicerP)) {
      $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false)
      $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false)
    } else {
      $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true)
    }
  }

  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
    const plotChartDiv = $(this).attr('data-parentId6')
    const connectVal = $(this).prop('checked')
    if (String(connectVal) === 'false') {
      if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
        slicerTabConnectDict[plotChartDiv].push($(this).attr('name'))
      }
    }
      else{
        if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
          const index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'))
          slicerTabConnectDict[plotChartDiv].splice(index, 1)
        };
      }
    slicerChangeUpdatePlots()
    const slicerClass = $(this).attr('data-slicerClass')
    const unConSlicerParam = $(this).attr('name')
    $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select')
  })
}

function deleteUpdatePlotID5 (id5, maindiv) {
  for (const [key, value] of Object.entries(crossFilterDict1)) {
    if (String(key) === String($('#' + maindiv).parent().attr('id'))) {
      for (let i = 0; i < value.length; i++) {
        const plotcancelID = value[i].id + 'cancel'
        if (String(plotcancelID) === String(id5)) {
          plotType = value[i].plot_type
          crossFilterDict1[key].splice(i, 1)
          break
        }
      }
    }
  }
  document.getElementById(maindiv).remove()
}

function deletePlotId6FromSlicerDict (ID6) {
  for (const slicer in slicerTabConfigDict) {
    for (const plotsId6 of slicerTabConfigDict[slicer]) {
      if (String(plotsId6) === String(ID6)) {
        const index = slicerTabConfigDict[slicer].indexOf(ID6)
        slicerTabConfigDict[slicer].splice(index, 1)
      }
    }
  }
}

function fieldToVerbose(field_input, mappingDict){
  let verbose_input
  if($.type(field_input) == 'string'){
    verbose_input = ''
    verbose_input = mappingDict[field_input]
  }
  else if($.type(field_input) == 'array'){
    verbose_input = []
    for(let i = 0 ; i < field_input.length ; i ++){
      verbose_input[i] = mappingDict[field_input[i]]
    }
  }
  return verbose_input
}


function changeChartOperation(operation_type = ""){
if ($(this).val() == '' || $(this).val() == undefined){
  return
}
let id6 = $(this).attr("data-chart-id");
let tabSlicerId = $(this).attr("tabSlicerId")

$('#' + id6).attr(operation_type, $(this).val());
const graphsubtype = $(`#${id6}`).attr('data-subtype')
const xaxis = $(`#${id6}`).attr('data-xaxis')
const yaxis = $(`#${id6}`).attr('data-yaxis')
const operation = $(`#${id6}`).attr('data-operation')
const operation_line = $(`#${id6}`).attr('data-operation_line')
const conditional_table = $(`#${id6}`).attr('data-conditional_table')
let filter_input_final = $(`#${id6}`).attr('data-filter_input_final')
if (String(filter_input_final) === 'undefined') {
  filter_input_final = JSON.stringify([])
};
let drange = $(`#${id6}`).attr('data-filter_dtrange')
const line_column = $(`#${id6}`).attr('data-line_column')
const second_column = $(`#${id6}`).attr('data-secondcolumn')
const total_y = $(`#${id6}`).attr('data-total_y')
const total_L = $(`#${id6}`).attr('data-total_L')
let computed_number = $(`#${id6}`).attr('data-computed_number')
const is_title = $(`#${id6}`).attr('data-is_title')
const title_value = $(`#${id6}`).attr('data-title_value')
let operation_n = $(`#${id6}`).attr('data-operation_n')
const agg_distinct = $(`#${id6}`).attr('data-agg_distinct')
if (graphsubtype == "Aggregation") {
  var nid = id6.split('card')[0] +'optionvaluesoperation_n';
  if(operation == "Top N" || operation == "Bottom N"){
    $('#' + nid).css('display', 'block')
    if(operation_n == undefined || operation_n == ''){
      let operationn = $('#' + nid + 'dropdown').val()
      $(`#${id6}`).attr('data-operation_n', operationn)
    }
    if(computed_number == undefined || computed_number == ''){
      let number = $('#' + nid + 'computed_number').val()
      $(`#${id6}`).attr('data-computed_number', number)
    }
  }
  else{
    $('#' + nid).css('display', 'none')
    $(`#${id6}`).removeAttr('data-operation_n')
    $(`#${id6}`).removeAttr('data-computed_number')
  }
}
operation_n = $(`#${id6}`).attr('data-operation_n')
computed_number = $(`#${id6}`).attr('data-computed_number')
const id = id6.split('card')[0];
const id18 = id + 'resetlabels'
let slicerColumnValue = [];
let slicerColumn = []
for (let i = 0; i < $(`.${tabSlicerId}`).length; i++) {
    slicerColumnValue.push($(`.${tabSlicerId}`).eq(i).val());
    slicerColumn.push($(`.${tabSlicerId}`).eq(i).attr("data-slicerColumn"))
}
const table_name = $(`#${id6}`).attr('data-table_name')
const updateDict = {
  operation: 'filter',
  conditional_table: conditional_table,
  filter_input_final: filter_input_final,
  tableName: table_name,
  graph_subtype: graphsubtype,
  chart_id: id,
  x_axis: xaxis,
  y_axis: yaxis,
  second_column: second_column,
  line_column: line_column,
  total_y: total_y,
  total_L: total_L,
  operation_n: operation_n,
  agg_distinct: agg_distinct,
  computed_number: computed_number,
  is_title: is_title,
  title_value: title_value,
  aggregation: operation,
  operation_line: operation_line,
  colValue: slicerColumnValue,
  slicerColumn: slicerColumn,
  slicerColumnValue: slicerColumnValue,
  id18 : id18,
  drange: drange,
  app_code: ""
}
updateChartOperation(updateDict)


}
function fetchOptionsForOperation(data, line_column = ''){
let optionsval = []
let graph_subtype = data.graph_subtype
let x_axis = data.x_axis
let y_axis = data.y_axis
let second_column = data.second_column
let datatype_dict = {}
for (const i in data.datatype_list) {
  datatype_dict[data.datatype_list[i].field_name] =  data.datatype_list[i].data_type
}
if(line_column == ''){
  no_operation_graph = ['Vertical_Histogram','Horizontal_Histogram','Cumulative_Histogram','Table','Stacked_Histogram',
  'Image','Scatter','2D_Histogram_Contour','Scatter_with_Straight_Lines_and_Markers',
  'Vertical_Box','Horizontal_Box','Horizontal_Dot_Plot','Vertical_Violin','Horizontal_Violin',
  'Vertical_Grouped_Violin' ,'Vertical_Grouped_Box','Horizontal_Grouped_Violin','Horizontal_Grouped_Box',
  'Bubble_Map','Chloropeth_Map','3D_Scatter','3D_Mesh','Bubble_Chart' ]
  if (graph_subtype in no_operation_graph){
    return optionsval
  }
  else{
    if(graph_subtype == 'Aggregation'){
      const datatype = datatype_dict[x_axis]
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Top N' ,'Bottom N']
      }
    }
    else if (graph_subtype == 'Vertical_Bar' || graph_subtype == 'Vertical_Waterfall' || graph_subtype == 'Line' || graph_subtype == 'Stepped_Line' || graph_subtype == 'Vertical_Area' || graph_subtype == 'Pie_Chart' || graph_subtype == 'Donut_Chart' || graph_subtype == 'Treemap') {
      const datatype = datatype_dict[y_axis]
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Funnel' || graph_subtype == 'Funnel_Area' || graph_subtype == 'Horizontal_Bar' || graph_subtype == 'Horizontal_Area' || graph_subtype == 'Horizontal_Waterfall') {
      const datatype = datatype_dict[x_axis]
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Sunburst' || graph_subtype == 'Angular_Gauge' || graph_subtype == 'Bullet_Gauge') {
      const datatype = datatype_dict[second_column]
      if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Count Distinct', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Vertical_Line_Stacked' || graph_subtype == 'Vertical_Area_Stacked' || graph_subtype == 'Vertical_Waterfall_Grouped'){
      const col = [y_axis, second_column]
      const optndatatype = []
      for (let i = 0; i < col.length; i++) {
        const seldatatype = datatype_dict[col[i]]
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
        }
      }
      if (optndatatype.length > 0) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Horizontal_Area_Stacked' || graph_subtype == 'Horizontal_Waterfall_Grouped' || graph_subtype == 'Funnel_Stacked') {
      const col = [x_axis, second_column]
      const optndatatype = []
      for (let i = 0; i < col.length; i++) {
        const seldatatype = datatype_dict[col[i]]
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
        }
      }
      if (optndatatype.length > 0) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Horizontal_Bar_Stacked'|| graph_subtype == 'Horizontal_Bar_Grouped') {
      const optndatatype = []
      for (let i = 0; i < x_axis.length; i++) {
        const seldatatype = datatype_dict[x_axis[i]]
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
        }
      }
      if (optndatatype.length > 0) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Nested_Table'){
      const optndatatype = []
      let alldatatype = []
      for (let i = 0; i < y_axis.length; i++) {
        const seldatatype = datatype_dict[y_axis[i]]
        alldatatype.push(seldatatype)
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
        }
      }
      if (optndatatype.length > 0) {
        let flag = 0
        for (let i = 0; i < alldatatype.length; i++) {
          if(alldatatype[i] != 'DateField' && alldatatype[i] != 'DateTimeField' ){
            flag = 1
          }
        }
        if(flag == 0) optionvalues = ['Count', 'Count Distinct', 'First', 'Last', 'Earliest','Latest']
        else optionvalues = ['Count', 'Count Distinct', 'First', 'Last']
      } else {
        optionsval = ['Sum', 'Count', 'Count Distinct', 'Average', 'Skewness', 'Kurtosis', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'Percentage of Total']
      }
    }
    else if (graph_subtype == 'Vertical_Bar_Stacked' || graph_subtype == 'Vertical_Bar_Grouped' || graph_subtype == 'Multiple_Line_Chart' || graph_subtype == 'Bar_Grouped_and_Line' || graph_subtype == 'Bar_Stacked_and_Line'|| graph_subtype == 'Bar_Stacked_and_Multiple_Line'){
      const optndatatype = []
      for (let i = 0; i < y_axis.length; i++) {
        const seldatatype = datatype_dict[y_axis[i]]
        if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
          optndatatype.push(seldatatype)
        }
      }
      if (optndatatype.length > 0) {
        optionsval = ['Count', 'Count Distinct']
      } else {
        optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
      }
    }
  }
}
else{
  if (graph_subtype == 'Bar_Grouped_and_Line' || graph_subtype == 'Bar_Stacked_and_Line'){
    const datatype = datatype_dict[line_column]
    if (!((String(datatype) === 'IntegerField') || (String(datatype) === 'BigIntegerField') || (String(datatype) === 'FloatField') || (String(datatype) === 'AutoField'))) {
      optionsval = ['Count', 'Count Distinct']
    } else {
      optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
    }
  }
  else if (graph_subtype == 'Bar_Stacked_and_Multiple_Line'){
    const optndatatype = []
    for (let i = 0; i < line_column.length; i++) {
      const seldatatype = datatype_dict[y_axis[i]]
      if (!((seldatatype === 'IntegerField') || (seldatatype === 'BigIntegerField') || (seldatatype === 'FloatField') || (seldatatype === 'AutoField'))) {
        optndatatype.push(seldatatype)
      }
    }
    if (optndatatype.length > 0) {
      optionsval = ['Count', 'Count Distinct']
    } else {
      optionsval = ['Sum', 'Count', 'Average', 'Skewness', 'Kurtosis', 'Count Distinct', 'Median', 'Variance', 'Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Percentage of Total']
    }
  }
}
return optionsval

}


function updateChartOperation(updateDict,app_code = ""){
let url_string = windowLocation
let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
let app_code2 = url_string.substring(f_occ+1,s_occ)
let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
let formatters_config = updateDict.formatters_config
if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
  current_dev_mode2 = "User"
}
if (app_code == ""){
  if($("body").find("div").eq(0).attr("app_code") != undefined){
    app_code = $("body").find("div").eq(0).attr("app_code")
  } else if($("#"+updateDict.chart_id).closest(".chartDivSection").attr("app_code") != undefined){
    app_code = $("#"+updateDict.chart_id).closest(".chartDivSection").attr("app_code");
  }
}
$.ajax({
  url: `/users/${urlPath}/filter_plot/`,
  data: {
    operation: 'filter',
    conditional_table: updateDict.conditional_table,
    filter_input_final: updateDict.filter_input_final,
    tableName: updateDict.tableName,
    graph_subtype: updateDict.graph_subtype,
    chart_id: updateDict.chart_id,
    x_axis: updateDict.x_axis,
    y_axis: updateDict.y_axis,
    second_column: updateDict.second_column,
    line_column: updateDict.line_column,
    total_y: updateDict.total_y,
    total_L: updateDict.total_L,
    operation_n: updateDict.operation_n,
    agg_distinct: updateDict.agg_distinct,
    computed_number: updateDict.computed_number,
    is_title: updateDict.is_title,
    title_value: updateDict.title_value,
    aggregation: updateDict.aggregation,
    operation_line: updateDict.operation_line,
    colValue: updateDict.colValue,
    slicerColumn: JSON.stringify(updateDict.slicerColumn),
    slicerColumnValue: JSON.stringify(updateDict.slicerColumnValue),
    drange: updateDict.drange,
    app_code: app_code
  },
  type: 'POST',
  dataType: 'json',
  success: function (data) {

    let tester = document.getElementById(data.chart_id_for_slicer)
    const id1 = data.chart_id_for_slicer + 'color'
    const id24 = data.chart_id_for_slicer + 'gradient_color'
    const id6 = data.chart_id_for_slicer + 'card'
    const id_table = data.chart_id_for_slicer + 'table'
    const idOrderModal = data.chart_id_for_slicer + 'orderModal'
    const id18 = updateDict.id18
    let colorvalue = $(`#${id1}`).val()
    let filtergradientcolor =''
    let update = ''
    let update1 = ''
    let update2 = ''
    let colordata = []
    let xaxisdata = ''
    let yaxisdata = ''
    let xaxisdata2 =''
    let y_axisdata2 = ''
    let colorlength = ''
    let tabledata = []
    let tableheaders = []
    let measure=''
    let colordatasecond = ''
    if (String($(`#${id24}`).prop('checked')) === 'true') {
      filtergradientcolor = 'yes'
    } else {
      filtergradientcolor = 'no'
    }
    let sorted_array = []
    let new_sorted_array = []
    if($(`#${idOrderModal}Button`).length){
      $(`#${idOrderModal}`).attr('data-x_axis', data.x_axisdata)
      $(`#${idOrderModal}`).attr('data-y_axis', data.y_axisdata)
      sorted_array = $(`#${idOrderModal}Button`).attr('data-sorted-values').trim().split(',')
      new_sorted_array = JSON.parse(JSON.stringify(sorted_array))
      sorted_array.sort()
    }
    if (String(data.graph_subtype)=== '3D_Mesh' || String(data.graph_subtype)=== '3D_Scatter') {
      colordata = []
      colorlength = data.x_axisdata.length
      for (let i = 0; i < colorlength; i++) {
        colordata.push(colorvalue)
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], y: [data.y_axisdata], z: [data.second_columndata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Vertical_Waterfall') {
      const colorlength1 = data.x_axisdata.length
      tester = document.getElementById(data.chart_id_for_slicer)

      xaxisdata = data.x_axisdata
      yaxisdata = data.y_axisdata
      xaxisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
      xaxisdata2.push('Total')
      xaxisdata.push('Total')
      if (String(yaxisdata) !== 'undefined') {
        if (Number.isInteger((yaxisdata.reduce((a, b) => a + b, 0)))) {
          yaxisdata.push((yaxisdata.reduce((a, b) => a + b, 0)))
        } else {
          yaxisdata.push((yaxisdata.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }
      const measure1 = []
      for (let i = 0; i < colorlength1; i++) {
        measure1.push('relative')
      }
      measure1.push('total')
      update = {
        x: [xaxisdata],
        y: [yaxisdata],
        measure: [measure1],
        text: [yaxisdata]
      }

      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))

      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Vertical_Waterfall_Grouped') {
      colorlength = data.x_axisdata.length
      colordata = []
      tester = document.getElementById(data.chart_id_for_slicer)
      myPlot = document.getElementById(data.chart_id_for_slicer)
      colordatasecond = []
      measure = []

      xaxisdata = data.x_axisdata
      yaxisdata = data.y_axisdata
      yaxisdata2 = data.second_columndata
      xaxisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
      xaxisdata2.push('Total')

      xaxisdata.push('Total')
      if (String(yaxisdata) !== 'undefined') {
        if (Number.isInteger((yaxisdata.reduce((a, b) => a + b, 0)))) {
          yaxisdata.push((yaxisdata.reduce((a, b) => a + b, 0)))
        } else {
          yaxisdata.push((yaxisdata.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }
      if (String(y_axisdata2) !== "undefined") {
        if (Number.isInteger((y_axisdata2.reduce((a, b) => a + b, 0)))) {
          y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)))
        } else {
          y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }

      for (let i = 0; i < colorlength; i++) {
        measure.push('relative')
      }
      measure.push('total')
      update = { x: [xaxisdata], y: [yaxisdata], measure: [measure], text: [yaxisdata] }
      Plotly.restyle(tester, update, [0])
      update1 = { x: [xaxisdata], y: [y_axisdata2], measure: [measure], text: [y_axisdata2] }
      Plotly.restyle(tester, update1, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Horizontal_Waterfall') {
      colorlength = data.y_axisdata.length
      colordata = []
     measure = []
      xaxisdata = data.x_axisdata
      yaxisdata = data.y_axisdata
      yaxisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
      yaxisdata2.push('Total')
      tester = document.getElementById(data.chart_id_for_slicer)
      yaxisdata.push('Total')
      if (String(xaxisdata) !== 'undefined') {
        if (Number.isInteger((xaxisdata.reduce((a, b) => a + b, 0)))) {
          xaxisdata.push((xaxisdata.reduce((a, b) => a + b, 0)))
        } else {
          xaxisdata.push((xaxisdata.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }

      for (let i = 0; i < colorlength; i++) {
        measure.push('relative')
      }
      measure.push('total')
      update = { x: [xaxisdata], y: [yaxisdata], measure: [measure], text: [xaxisdata] }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))

      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Horizontal_Waterfall_Grouped') {
      colorlength = data.x_axisdata.length
      colordata = []
      colordatasecond = []
      tester = document.getElementById(data.chart_id_for_slicer)
      myPlot = document.getElementById(data.chart_id_for_slicer)
      measure = []
      xaxisdata = data.x_axisdata
      yaxisdata = data.y_axisdata
      xaxisdata2 = data.second_columndata
      yaxisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
      yaxisdata2.push('Total')
      yaxisdata.push('Total')
      if (String(xaxisdata) !== "undefined") {
        if (Number.isInteger((xaxisdata.reduce((a, b) => a + b, 0)))) {
          xaxisdata.push((xaxisdata.reduce((a, b) => a + b, 0)))
        } else {
          xaxisdata.push((xaxisdata.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }
      if (String(xaxisdata2) !== "undefined") {
        if (Number.isInteger((xaxisdata2.reduce((a, b) => a + b, 0)))) {
          xaxisdata2.push((xaxisdata2.reduce((a, b) => a + b, 0)))
        } else {
          xaxisdata2.push((xaxisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
        }
      }
      for (let i = 0; i < colorlength; i++) {
        colordata.push('#b8860b')
      }
      for (let i = 0; i < colorlength; i++) {
        colordatasecond.push('goldenrod')
      }
      for (let i = 0; i < colorlength; i++) {
        measure.push('relative')
      }
      measure.push('total')
      update = { x: [xaxisdata], y: [yaxisdata], measure: [measure], text: [xaxisdata] }
      Plotly.restyle(tester, update, [0])
      update1 = { x: [xaxisdata2], y: [yaxisdata], measure: [measure], text: [xaxisdata2] }
      Plotly.restyle(tester, update1, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))

      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.second_columndata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Bubble_Chart') {
      colorlength = data.x_axisdata.length
      colordata = []
      for (let i = 0; i < colorlength; i++) {
        colordata.push(colorvalue)
      }
      update = { x: [data.x_axisdata], y: [data.y_axisdata], z: [data.second_columndata] }
      Plotly.restyle(tester, update)
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker.color
      const dataupdate = {
        marker: { color: marker1, size: data.second_columndata }
      }
      Plotly.restyle(tester, dataupdate)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))

      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype) === 'Bar_Grouped_and_Line' || String(data.graph_subtype)=== 'Bar_Stacked_and_Line') {
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
      colorlength = data.x_axisdata.length
      var backRGB = colorvalue;
      var color_update = []
      for(var i=0;i<data.y_axisdata.length;i++){
        color_update = []
        for (let i = 0; i < colorlength; i++) {
          color_update.push(colorvalue);
        }

        update = {
          x: [data.x_axisdata],
          y: [data.y_axisdata[i]],
          text:[data.y_axisdata[i]],
          marker: {
              color: color_update
        },

        }
        var colorList1=[]
        colorList1.push(colorvalue)
        var backRGB = colorvalue;

        const hexToRgb = hex =>
            hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                , (m, r, g, b) => '#' + r + r + g + g + b + b)
                .substring(1).match(/.{2}/g)
                .map(x => parseInt(x, 16))
        var r = hexToRgb(backRGB)[0] * 0.6
        var g = hexToRgb(backRGB)[1] * 0.6
        var b = hexToRgb(backRGB)[2] * 0.6

        var newcolor = rgb2hex(r, g, b)
        colorvalue = newcolor
        Plotly.restyle(tester, update,[i])
      }
      update = {x: [data.x_axisdata],y: [data.line_columndata],name: [fieldToVerbose(data.line_column, data.mappingDict)],text: [data.line_columndata],};
      Plotly.restyle(tester, update, [data.y_axisdata.length])
      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]

      var new_y_axis = eval(data.new_y_axis)
      for(var i=0;i < new_y_axis.length;i++){
          tableheaders.push(`<b>${fieldToVerbose(data.new_y_axis[i], data.mappingDict)}</b>`)
      }
      tableheaders .push(`<b>${fieldToVerbose(data.line_column, data.mappingDict)}</b>`)
      tabledata.push(data.x_axisdata)
      for(var i=0;i<data.y_axisdata.length;i++){
      tabledata.push(data.y_axisdata[i])
      }
      tabledata.push(data.line_columndata)
    }
    else if (String(data.graph_subtype)=== 'Bar_Stacked_and_Multiple_Line') {
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
      colorlength = data.x_axisdata.length
      var backRGB = colorvalue;
      var color_update = []
      var i = 0
      for(i=0;i<data.y_axisdata.length;i++){
        color_update = []
        for (let j = 0; j < colorlength; j++) {
          color_update.push(colorvalue);
        }

        update = {
          x: [data.x_axisdata],
          y: [data.y_axisdata[i]],
          text:[data.y_axisdata[i]],
          marker: {
              color: color_update
          },
        }
        var colorList1=[]
        colorList1.push(colorvalue)
        var backRGB = colorvalue;

        const hexToRgb = hex =>
            hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                , (m, r, g, b) => '#' + r + r + g + g + b + b)
                .substring(1).match(/.{2}/g)
                .map(x => parseInt(x, 16))
        var r = hexToRgb(backRGB)[0] * 0.6
        var g = hexToRgb(backRGB)[1] * 0.6
        var b = hexToRgb(backRGB)[2] * 0.6


        var newcolor = rgb2hex(r, g, b)
        colorvalue = newcolor
        Plotly.restyle(tester, update,[i])
      }
      backRGB = colorvalue
      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
      var r = hexToRgb(backRGB)[0] * 0.9
      var g = hexToRgb(backRGB)[1] * 0.9
      var b = hexToRgb(backRGB)[2] * 0.9


      var newcolor = rgb2hex(r, g, b)
      backRGB = newcolor

      for(var j=0;j<data.line_columndata.length;j++){

          const hexToRgb = hex =>
              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                  .substring(1).match(/.{2}/g)
                  .map(x => parseInt(x, 16))
          var r = hexToRgb(backRGB)[0] * 0.6
          var g = hexToRgb(backRGB)[1] * 0.6
          var b = hexToRgb(backRGB)[2] * 0.6
          var newcolor = rgb2hex(r, g, b)
          colorvalue = newcolor
          update = {
            x: [data.x_axisdata],
            y: [data.line_columndata[j]],
            text:[data.line_columndata[j]],
            marker: {
                color: colorvalue
            },
          }
          colorList1.push(colorvalue)
          backRGB = colorvalue;
          Plotly.restyle(tester, update,[i+j])
      }
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]

      var new_y_axis = eval(data.new_y_axis)
      for(var i=0;i < new_y_axis.length;i++){
          tableheaders.push(`<b>${fieldToVerbose(data.new_y_axis[i], data.mappingDict)}</b>`)
      }
      for (let i = 0; i < data.line_column.length; i++) {
          tableheaders.push(`<b>${fieldToVerbose(data.line_column[i], data.mappingDict)}</b>`)
      }
      tabledata.push(data.x_axisdata)
      for(var i=0;i<data.y_axisdata.length;i++){
      tabledata.push(data.y_axisdata[i])
      }
      for (let i = 0; i < data.line_columndata.length; i++) {
          tabledata.push(data.line_columndata[i])
      }
  }
    else if (String(data.graph_subtype)=== 'Vertical_Histogram' || data.graph_subtye == 'Cumulative_Histogram') {
      colorlength = data.x_axisdata.length
      if (String(filtergradientcolor) === 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        colordata = colorvalue
      }
      update = { x: [data.x_axisdata], marker: {color:colordata} }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
      tabledata.push(data.x_axisdata)
    } else if (String(data.graph_subtype)=== 'Aggregation') {
      const datavalue = $(`#${id6}`).attr('data-config_data_value')
      let changedOuputValue = data.value
      let changedTitle = data.title
      if ($.isNumeric(data.value)) {
        if (String(datavalue)=== 'Units') {
          changedOuputValue = (data.value / 1)
        }
        if (String(datavalue)=== 'Hundreds') {
          changedOuputValue = (data.value / 100).toFixed(2) + 'H'
        }
        if (String(datavalue)=== 'Thousands') {
          changedOuputValue = (data.value / 1000).toFixed(2) + 'K'
        }
        if (String(datavalue)=== 'Millions') {
          changedOuputValue = (data.value / 1000000).toFixed(2) + 'M'
        }
        if (String(datavalue)=== 'Billions') {
          changedOuputValue = (data.value / 1000000000).toFixed(2) + 'B'
        }
      }
      $(`#${id6}`).children().find('h5')[1].innerText = changedOuputValue
      $(`#${id6}`).find('p').eq(0).html(`<span class="contentEditable">${changedTitle}</span>`)
      $(`#${id6}`).find('p').eq(0).on('click', function () {
        $(`#${id6}`).find('p').eq(0).find('.contentEditable').eq(0).attr('contenteditable', 'true')
        $(`#${id6}`).find('p').eq(0).find('.contentEditable').eq(0).focus()
      })
      $(`#${id6}`).find('p').eq(0).find('.contentEditable').eq(0).focusout(function () {
        $(`#${id6}`).find('p').eq(0).find('.contentEditable').eq(0).removeAttr('contenteditable')
      })
      $(`#${id18}`).attr('datavalue', data.value)
      $(`#${id6}`).attr("data-layout", data.title)

    } else if (String(data.graph_subtype)=== 'Funnel') {
      colorlength = data.x_axisdata.length
      colordata = []
      yaxisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
      if (String(filtergradientcolor) === 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        for (let i = 0; i < colorlength; i++) {
          colordata.push(colorvalue)
        }
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], y: [data.y_axisdata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Funnel_Area') {
      yaxisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
      color = colorvalue
      colordata = []
      colorlength = data.x_axisdata.length
      backRGB = color
      colordata.push(backRGB)
      for (let i = 0; i < colorlength - 1; i++) {
        let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1])
        let r = parseInt(previousHex[1], 16) * 0.8
        let g = parseInt(previousHex[2], 16) * 0.8
        let b = parseInt(previousHex[3], 16) * 0.8
        let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b))
        colordata.push(newHex)
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { text: [data.x_axisdata], values: [data.y_axisdata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
    } else if (String(data.graph_subtype)=== 'Bubble_Map') {
      update = { labels: [data.x_axisdata], values: [data.y_axisdata] }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
    } else if (String(data.graph_subtype)=== 'Pie_Chart' || String(data.graph_subtype)=== 'Donut_Chart') {
      colorlength = data.x_axisdata.length
      let colorList = []
      let backRGB = colorvalue
      colorList.push(backRGB)
      for (let i = 0; i < colorlength - 1; i++) {
        let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1])
        let r = parseInt(previousHex[1], 16) * 0.8
        let g = parseInt(previousHex[2], 16) * 0.8
        let b = parseInt(previousHex[3], 16) * 0.8

        let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b))
        colorList.push(newHex)
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { values: [data.y_axisdata], labels: [data.x_axisdata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      $(`#${id6}`).attr(
        "data-config_element_color",
        JSON.stringify(tester.data[0].marker.colors)
      );
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Nested_Table') {


      const columns = []
      for (let i = 0; i < data.final_cols.length; i++) {
        columns.push({ title: data.final_cols[i], field: data.final_cols[i] })
      }
      const nestedconditionaltable = data.conditional_table
      let open_close = false
      if (data.conditional_table.length > 0 && data.conditional_table[0].column_name != null) {
        open_close = true
      }
      var mappingDict = data.mappingDict
      let table = new Tabulator(`#${data.chart_id_for_slicer}`, {
        data: data.table_data, // load row data from array
        layout: 'fitDataFill', // fit columns to width of table
        height: 400,
        columnMinWidth: 130,
        dataTree: true,
        dataTreeStartExpanded: open_close,
        dataTreeCollapseElement: "<i class='fas fa-minus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
        dataTreeExpandElement: "<i class='fas fa-plus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
        movableColumns: true, // allow column order to be changed
        resizableRows: true,
        rowFormatter: function (row) {
          // row - row component
          const data = row.getData()
          let val= ''
          for (let j = 0; j < nestedconditionaltable.length; j++) {
            if (String(nestedconditionaltable[j].column_condition) === 'Greater than') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].column_datatype) === 'DateField') {
                if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                  if (new Date(data.Category) > new Date(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else if (String(nestedconditionaltable[j].column_datatype) === 'DateTimeField') {
                if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                  if (new Date(data.Category) > new Date(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else if (String(nestedconditionaltable[j].column_datatype) === 'FloatField') {
                if (String(nestedconditionaltable[j].column_condition) === 'Category') {
                  if (data.Category > parseFloat(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseFloat(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (String(nestedconditionaltable[j].column_condition) === 'Category') {
                  if (data.Category > parseInt(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (String(nestedconditionaltable[j].column_condition) === 'Smaller than') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].column_datatype) === 'DateField') {
                if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                  if (new Date(data.Category) < new Date(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] < parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else if (String(nestedconditionaltable[j].column_datatype) === 'DateTimeField') {
                if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                  if (new Date(data.Category) < new Date(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] < parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else if (String(nestedconditionaltable[j].column_datatype) === 'FloatField') {
                if (String(nestedconditionaltable[j].column_condition) === 'Category') {
                  if (data.Category < parseFloat(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseFloat(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (String(nestedconditionaltable[j].column_condition) === 'Category') {
                  if (data.Category > parseInt(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                        if (data.tabulator_table_column_name == cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                } else {
                  if (cname in data) {
                    if (data[cname] > parseInt(nestedconditionaltable[j].condition_value)) {
                      for (let i = 0; i < row.getCells().length; i++) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          if (String(row.getCells()[i]._cell.column.field)=== cname) {
                            row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (String(nestedconditionaltable[j].column_condition) === 'Equal to') {
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (String(nestedconditionaltable[j].column_datatype) === 'DateField') {
                  val = nestedconditionaltable[j].condition_value
                } else if (String(nestedconditionaltable[j].column_datatype) === 'DateTimeField') {
                  val = nestedconditionaltable[j].condition_value.replace('T', ' ')
                } else {
                  val = nestedconditionaltable[j].condition_value.toString()
                }
              } else {
                val = nestedconditionaltable[j].condition_value.toString()
              }

              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (data.Category.toString() == val) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              } else {
                if (cname in data) {
                  if (data[cname] == val) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              }
            }
            if (String(nestedconditionaltable[j].column_condition) === 'Not equal to') {
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (String(nestedconditionaltable[j].column_datatype) === 'DateField') {
                  val = nestedconditionaltable[j].condition_value
                } else if (String(nestedconditionaltable[j].column_datatype) === 'DateTimeField') {
                  val = nestedconditionaltable[j].condition_value.replace('T', ' ')
                } else {
                  val = nestedconditionaltable[j].condition_value.toString()
                }
              } else {
                val = nestedconditionaltable[j].condition_value.toString()
              }

              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (data.Category.toString() != val) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              } else {
                if (cname in data) {
                  if (data[cname] != val) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              }
            }
            if (String(nestedconditionaltable[j].column_condition) === 'In') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Value') {
                if (cname in data) {
                  if ((nestedconditionaltable[j].condition_value).includes(data[cname].toString())) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              } else {
                if ((nestedconditionaltable[j].condition_value).includes(data.Category.toString())) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              }
            }

            if (String(nestedconditionaltable[j].column_condition) === 'Starts with') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (data.Category.toString().startsWith(nestedconditionaltable[j].condition_value)) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              } else {
                if (cname in data) {
                  if (data[cname].toString().startsWith(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              }
            }
            if (String(nestedconditionaltable[j].column_condition) === 'Ends with') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (data.Category.toString().endsWith(nestedconditionaltable[j].condition_value)) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              } else {
                if (cname in data) {
                  if (data[cname].toString().endsWith(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              }
            }
            if (String(nestedconditionaltable[j].column_condition) === 'Contains') {
              let cname = fieldToVerbose(nestedconditionaltable[j].column_name, mappingDict)
              if (String(nestedconditionaltable[j].nested_type) ===  'Category') {
                if (data.Category.toString().includes(nestedconditionaltable[j].condition_value)) {
                  for (let i = 0; i < row.getCells().length; i++) {
                    if (String(row.getCells()[i]._cell.column.field)=== 'Category') {
                      if (data.tabulator_table_column_name == cname) {
                        row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                      }
                    }
                  }
                }
              } else {
                if (cname in data) {
                  if (data[cname].toString().includes(nestedconditionaltable[j].condition_value)) {
                    for (let i = 0; i < row.getCells().length; i++) {
                      if (String(row.getCells()[i]._cell.column.field)=== cname) {
                        if (String(row.getCells()[i]._cell.column.field)=== cname) {
                          row.getCells()[i]._cell.element.style.backgroundColor = nestedconditionaltable[j].condition_color
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (String(data._children) !== 'undefined') {
            if (data._children.length > 0) {
              row.getElement().style.fontWeight = 'bold'
              if (row.getElement().getElementsByClassName('fas fa-plus').length > 0) {
                row.getElement().getElementsByClassName('fas fa-plus')[0].insertAdjacentHTML('afterend', '    ')
              }
              if (row.getElement().getElementsByClassName('fas fa-minus').length > 0) {
                row.getElement().getElementsByClassName('fas fa-minus')[0].insertAdjacentHTML('afterend', '    ')
              }
            }
          }
          const row_data = row.getElementsByClassName
        },
        columns: columns
      })

      let datatablediv2 = document.getElementById(id_table)


      $(`#${id_table}`).empty();
      $(`#${id_table}`).append(`
      <table id="${id_table}-table" class="display compact" style="width:100%;border: 1.5px solid black;">
          <thead>
              <tr>
              </tr>
          </thead>
          <tbody>
          </tbody>
      </table>
      `)

      for (var i = 0; i < data.table_view.length; i++) {
          string=`<tr style="1px solid black;">`
          for(let [key,value] of Object.entries(data.table_view[i]) ){
            string+=`<td>${value}</td>`
          }
          string+=`</tr>`
          $(`#${id_table}-table`).find('tbody').append(string)
      }
      var tableheaders2 = [];
      for(let [key,value] of Object.entries(data.table_view[0]) ){
        tableheaders2.push(key);
        $(`#${id_table}-table`).find('thead tr').eq(0).append(`<th style="background-color: var(--primary-color); color:white;">${key}</th>`)
      }

      $(`#${id_table}-table`).DataTable();


      var table_data = data.table_view

   let  tabledata2 = []
     let data2=[]
     for(let i=0;i<table_data2.length;i++ ){
     let newData=[]
     for(let j=0;j<tableheaders2.length;j++){
     newData.push(table_data2[i][tableheaders2[j]])
     }

     data2.push(newData)
     }

    } else if (String(data.graph_subtype)=== 'Table') {
      $(`#table_example${data.chart_id_for_slicer}`).DataTable().clear().destroy()
      const column_names = []
      for (let i = 0; i < data.x_axis.length; i++) {
        column_names.push({ data: fieldToVerbose(data.x_axis[i], data.mappingDict) })
      }
      var mappingDict = data.mappingDict
      for (let i = 0; i < (data.conditional_table); i++) {
        for (const [key, value] of Object.entries(column_names)) {
          if (value.data == fieldToVerbose(data.conditional_table[i].column_name, mappingDict)) {
            data.conditional_table[i].td_val = parseInt(key)
          }
        }
      }
      const conditional_data = data.conditional_table

      let content = data.content
      let val = ''
      if (String(content) === 'undefined') {
        content = {}
      }
      xaxisdata = data.x_axis
      let table = $(`#table_example${data.chart_id_for_slicer}`).DataTable({

        data: content,
        columns: column_names,
        autoWidth: false,
        scrollY: '50vh',
        scrollCollapse: true,
        scrollX: '110%',
        orderCellsTop: true,
        responsive: true,
        stateSave: true,
        deferRender: true,
        paging: true,
        lengthMenu: [[1, 5, 50, -1], [1, 5, 50, 'All']],
        pageLength: 10,
        dom: 'lfBrtip',
        sScrollX: '100%',
        scrollX: true,
        buttons: [
          {
            extend: 'collection',
            text: 'Export',
            buttons: [
              {
                extend: 'copy',
                title: '',
                exportOptions: {
                  columns: ':visible:not(.noVis)'
                }
              },
              {
                extend: 'excel',
                title: '',
                exportOptions: {
                  columns: ':visible:not(.noVis)'
                }
              },
              {
                extend: 'csv',
                title: '',
                exportOptions: {
                  columns: ':visible:not(.noVis)'
                }
              },
              {
                extend: 'pdf',
                title: '',
                exportOptions: {
                  columns: ':visible:not(.noVis)'
                }
              }
            ]
          }

        ],
        columnDefs: [
          {
            targets: '_all',
            className: 'dt-center allColumnClass all buttons_export_class'
          }

        ],
        rowCallback: function (row, data, index) {
          for (let i = 0; i < (conditional_data).length; i++) {
            if (String(conditional_data[i].column_name) !== 'null') {
              if ((xaxisdata).includes(conditional_data[i].column_name)) {
                if (String(conditional_data[i].column_condition) === 'Equal to') {
                  if (String(conditional_data[i].column_datatype) === 'DateField') {
                    val = conditional_data[i].condition_value
                  } else if (String(conditional_data[i].column_datatype) === 'DateTimeField') {
                    val = conditional_data[i].condition_value
                  } else {
                    val = conditional_data[i].condition_value
                  }
                  if ($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML == val) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else if (String(conditional_data[i].column_condition) === 'Not equal to') {
                  if (String(conditional_data[i].column_datatype) === 'DateField') {
                    val = conditional_data[i].condition_value
                  } else if (String(conditional_data[i].column_datatype) === 'DateTimeField') {
                    val = conditional_data[i].condition_value
                  } else {
                    val = conditional_data[i].condition_value
                  }
                  if ($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML != val) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else if (String(conditional_data[i].column_condition) === 'Greater than') {
                  if (String(conditional_data[i].column_datatype) === 'DateField') {
                    if ((new Date($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML)) > (new Date(conditional_data[i].condition_value))) {
                      $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                    }
                  } else if (String(conditional_data[i].column_datatype) === 'DateTimeField') {
                    if ((new Date($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML)) > (new Date(conditional_data[i].condition_value))) {
                      $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                    }
                  } else {
                    if (String(conditional_data[i].column_datatype) === 'FloatField') {
                      if (parseFloat($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML) > parseFloat(conditional_data[i].condition_value)) {
                        $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                      }
                    } else {
                      if (parseInt($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML) > parseInt(conditional_data[i].condition_value)) {
                        $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                      }
                    }
                  }
                } else if (String(conditional_data[i].column_condition) === 'Smaller than') {
                  if (String(conditional_data[i].column_datatype) === 'DateField') {
                    if ((new Date($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML)) < (new Date(conditional_data[i].condition_value))) {
                      $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                    }
                  } else if (String(conditional_data[i].column_datatype) === 'DateTimeField') {
                    if ((new Date($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML)) < (new Date(conditional_data[i].condition_value))) {
                      $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                    }
                  } else {
                    if (String(conditional_data[i].column_datatype) === 'FloatField') {
                      if (parseFloat($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML) < parseFloat(conditional_data[i].condition_value)) {
                        $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                      }
                    } else {
                      if (parseInt($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML) < parseInt(conditional_data[i].condition_value)) {
                        $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                      }
                    }
                  }
                } else if (String(conditional_data[i].column_condition) === 'In') {
                  if (conditional_data[i].condition_value.includes($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML)) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else if (String(conditional_data[i].column_condition) === 'Starts with') {
                  if (($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML).startsWith(conditional_data[i].condition_value)) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else if (String(conditional_data[i].column_condition) === 'Contains') {
                  if (($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML).includes(conditional_data[i].condition_value)) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else if (String(conditional_data[i].column_condition) === 'Ends with') {
                  if (($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML).endsWith(conditional_data[i].condition_value)) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                } else {
                  if ($(row).find(`td`).eq(conditional_data[i].td_val)[0].innerHTML == conditional_data[i].condition_value) {
                    $(row).find(`td`).eq(conditional_data[i].td_val).css('background-color', conditional_data[i].condition_color)
                  }
                }
              }
            }
          }
        },
        initComplete: function () {
          try {
            $(`#table_example${data.chart_id_for_slicer}`).off('click').on('click', 'td', function () {
              const id_freeze_ = $(this).closest('table').attr('id')
              const table1 = $(`#${id_freeze_}`).DataTable()
              const columns = table1.settings().init().columns
              cellcollen2 = columns.length
              cellindex3 = table1.cell(this).index().column + 1

              $(this).toggleClass('cell_highlighted')
              $(this).toggleClass('cell_selected')
            })
          } catch (err) {}
        }

      }).columns.adjust()
      if (data.chart_id_for_slicer in finalfdict2) {
        const table_freeze = $(`#table_example${data.chart_id_for_slicer}`).DataTable()

        new $.fn.dataTable.FixedColumns(table_freeze,
          finalfdict2[`${data.chart_id_for_slicer}`]
        )

        setTimeout(() => {
          if ($.fn.DataTable.isDataTable(`#table_example${data.chart_id_for_slicer}`)) {
            $(`#table_example${data.chart_id_for_slicer}`).DataTable().draw()
          }
        }, 200)
      }
      if(formatters_config){
        let tableId = "table_example" + data.chart_id_for_slicer
        let config = JSON.parse(formatters_config)
        applyColumnFormatters(config,tableId)
        function applyColumnFormatters(config, tableId) {
          var currency_list2 = "";
          var currency_symbols2 = "";
          var table = $('#' + tableId).DataTable();

          function removeAllFormatters() {
            if ($.fn.DataTable.isDataTable('#' + tableId)) {
              table.destroy();
            }

            var columns = table.settings().init().columns;
            columns.forEach(function (column, index) {
              column.render = null;
            });
          }

          removeAllFormatters();

          var headerRow = $('#' + tableId + ' thead tr');
          var columnNames = [];
          headerRow.find('th').each(function () {
            columnNames.push($(this).text());
          });

          var columnSettings = columnNames.map(function (columnName) {
            var columnConfig = config.find(function (configItem) {
              return configItem.column === columnName;
            });

            if (columnConfig) {
              var formatter;
              switch (columnConfig.formatter) {
                case 'number':
                  formatter = function (data, type, row) {
                    if (type === 'display') {
                      return parseFloat(data.replace(/[^0-9.-]/g, '')).toLocaleString();
                    }
                    return data;
                  };
                  break;
                case 'currency':
                  formatter = function (data, type, row) {
                    if (type === 'display') {
                      var currencyCode = columnConfig.operation;
                      var currencyIndex = currency_list2.indexOf(currencyCode);
                      var currencySymbol = currency_symbols2[currencyIndex];
                      return currencySymbol + " " + data.replace(/[^0-9.-]/g, '').toLocaleString();
                    }
                    return data;
                  };
                  break;
                case 'date':
                  formatter = function (data, type, row) {
                    if (type === 'display' || type === 'filter') {
                      var dateFormat = columnConfig.operation;
                      var formattedDate = formatDate(data, dateFormat);
                      return formattedDate;
                    }

                    return data;
                  };
                  break;
                default:
                  formatter = null;
              }

              return {
                "data": columnName,
                "render": formatter
              };
            } else {
              return {
                "data": columnName
              };
            }
          });

          function formatDate(dateString, format) {
            var date = new Date(dateString);
            if (isNaN(date.getTime())) {
              // Date is invalid, return the original string
              return dateString;
            }

            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();

            var formattedDate = format
              .replace(/%d/g, ('0' + day).slice(-2))
              .replace(/%m/g, ('0' + month).slice(-2))
              .replace(/%Y/g, year)
              .replace(/%y/g, year.toString().slice(-2))
              .replace(/%B/g, new Intl.DateTimeFormat('en-US', { month: 'long' }).format(date));

            return formattedDate;
          }

          $.ajax({
            url: `/users/${urlPath}/processGraphModule/`,
            data: {
              'operation': 'get_currency_list',
            },
            type: "POST",
            dataType: "json",
            success: function (data) {
              currency_list2 = data.country_list;
              currency_symbols2 = data.curr_list;
              if ($.fn.DataTable.isDataTable('#' + tableId)) {
                $('#' + tableId).DataTable().destroy();
              }
              table = $('#' + tableId).DataTable({
                "columns": columnSettings,
                "language": {
                  "decimal": ".",
                  "thousands": ","
                },
                "fixedColumns": true
              });

              table.draw();
            },
            error: function () {
              Swal.fire({
                icon: 'error',
                text: 'Error! Please try again.'
              });
            }
          });
        }
      }
      $(`#${id6}`).find('.dt-buttons').css('padding-left', '1em')
      $(`#table_example${data.chart_id_for_slicer}_info`).css('padding-left', '1em')
      $(`#table_example${data.chart_id_for_slicer}_paginate`).css('padding-right', '1em')
      $(`#${id6}`).find('.dt-buttons').css('padding-top', '1em')
      $(`#table_example${data.chart_id_for_slicer}_length`).css('float', 'none')
      $(`#table_example${data.chart_id_for_slicer}_length`).css('padding-right', '1em')
      $(`#table_example${data.chart_id_for_slicer}_length`).css('padding-top', '1em')
      $(`#table_example${data.chart_id_for_slicer}_length`).css('padding-top', '1em')
      $(`#table_example${data.chart_id_for_slicer}_length`).css('display', 'inline-block')
      $(`#table_example${data.chart_id_for_slicer}_filter`).css('padding-top', '1em')
    } else if (String(data.graph_subtype)=== 'Sunburst') {
      let colorList = []
      let colorlength = data.x_axisdata.length
      let backRGB = colorvalue
      colorList = []
      colorList.push(backRGB)
      for (let i = 0; i < colorlength - 1; i++) {
        let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1])
        let r = parseInt(previousHex[1], 16) * 0.8
        let g = parseInt(previousHex[2], 16) * 0.8
        let b = parseInt(previousHex[3], 16) * 0.8
        let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b))
        colorList.push(newHex)
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = {
        values: [data.second_columndata],
        labels: [data.y_axisdata],
        parents: [data.x_axisdata],
        ids: [data.sunburst_id],
        branchvalues: 'total',
        marker: marker1
      }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.y_axisdata)
      tabledata.push(data.x_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Angular_Gauge') {
      let id6_ = id6.replace("card","")
      let attr = JSON.parse($("#"+id6).attr("data-data"))
      attr[0]["value"] = data.value
      let value = ""
      let color = ""
      $("#"+id6_+"gaugeModalSaveButton").each(function() {
          let{dataValue, gaugeBarColor} = returnGaugeColor($(this),attr)
          value = dataValue
          color = gaugeBarColor
      })
      if(color != ""){
          color_value = color
      } else {
          color_value = "var(--primary-color)"
      }
      let range1 = []
      $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
          let {dataValue} = returnGaugeColorRange($(this),attr)
          range1 = dataValue
      })
      if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
          update = {
              "mode": "gauge+number+delta",
              delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
              "value": [data.value],
              "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                  steps: range1,
                  threshold: {
                      line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                      thickness: 0.75,
                      value: $("#"+id6_+"threshold").val()
                  }
              },
              "x" : [data.x_axisdata],
          "y" : [data.y_axisdata],
          "second_columndata" : [data.second_columndata]
          }
      } else {
          update = {
              "value": [data.value],
              "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                  steps: range1,
                  threshold: {
                      line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                      thickness: 0.75,
                      value: $("#"+id6_+"threshold").val()
                  }
              },
              "x" : [data.x_axisdata],
          "y" : [data.y_axisdata],
          "second_columndata" : [data.second_columndata]
          }

      }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Bullet_Gauge') {
      update = {
        value: [data.value],
        gauge: { axis: { range: [null, [data.value] * 1.1] }, bar: { color: colorvalue }, shape: 'bullet' },
        x: [data.x_axisdata],
        y: [data.y_axisdata],
        second_columndata: [data.second_columndata]
      }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Treemap') {
      colorlength = data.x_axisdata.length
      colordata = data.colordata
      const parentsList = []
      for (let i = 0; i < colorlength; i++) {
        parentsList.push('')
      }
      let backRGB = colorvalue
      let colorList = []
      colorList.push(backRGB)
      for (let i = 0; i < colorlength - 1; i++) {
        let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1])
        let r = parseInt(previousHex[1], 16) * 0.8
        let g = parseInt(previousHex[2], 16) * 0.8
        let b = parseInt(previousHex[3], 16) * 0.8

        let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b))
        colorList.push(newHex)
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { parents: [parentsList], values: [data.y_axisdata], labels: [data.x_axisdata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Vertical_Line_Stacked') {
      update = { x: [data.x_axisdata], y: [data.y_axisdata], text: [data.second_columndata] }
      update2 = { x: [data.x_axisdata], y: [data.second_columndata], text: [data.second_columndata] }

      Plotly.restyle(tester, update, [0])
      Plotly.restyle(tester, update2, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
    } else if (String(data.graph_subtype)=== 'Vertical_Grouped_Box' || String(data.graph_subtype)=== 'Vertical_Grouped_Violin' || String(data.graph_subtype)=== 'Vertical_Area_Stacked') {
      update = { x: [data.x_axisdata], y: [data.y_axisdata], text: [data.y_axisdata] }
      update2 = { x: [data.x_axisdata], y: [data.second_columndata], text: [data.second_columndata] }

      Plotly.restyle(tester, update, [0])
      Plotly.restyle(tester, update2, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      tabledata.push(data.second_columndata)
    } else if (String(data.graph_subtype)=== 'Horizontal_Histogram') {
      colorlength = data.x_axisdata.length
      if (filtergradientcolor == 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        colordata = colorvalue
      }

      update = { y: [data.x_axisdata], marker: { color: colordata } }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
      tabledata.push(data.y_axisdata)
    } else if (["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(data.graph_subtype))) {
      var pivot_config = $(`#${data.chart_id_for_slicer}card`).find('.graphcontainerdiv').data("pivotUIOptions")
      var pivot_config_copy = JSON.parse(JSON.stringify(pivot_config));

      if(Object.keys(pivot_config_copy).includes("aggregators")){
        delete pivot_config_copy["aggregators"]
      }
      if(Object.keys(pivot_config_copy).includes("renderers")){
        delete pivot_config_copy["renderers"]
      }
      var latestconfig = {}


      if(data.graph_subtype == "Pivot_Table"){
        rendererName = "Table"
      }
      else{
        rendererName = data.graph_subtype.split("_").join(" ")
      }
      google.load("visualization", "1", {
        packages: ["corechart"],
      });

      graphHeight = $(`#${id6}`).height() * 0.850;
      graphWidth = $(`#${id6}`).width() * 0.8250;
      $(`#${id6}`).find('.graphcontainerdiv').pivotUI(
        data.content, {
          ...pivot_config_copy,
          renderers: $.extend(
            $.pivotUtilities.renderers,
            $.pivotUtilities.plotly_renderers,
            $.pivotUtilities.d3_renderers,
            $.pivotUtilities.c3_renderers,
            $.pivotUtilities.gchart_renderers,
            $.pivotUtilities.subtotal_renderers,
          ),
          rendererOptions: { plotly: {width: graphWidth, height: graphHeight}, c3: {width: graphWidth, height: graphHeight}, d3: {width: graphWidth, height: graphHeight}, gchart: {width: graphWidth, height: graphHeight, colors: ["var(--primary-color)"]} },
          onRefresh: function (config) {
            var config_copy = JSON.parse(JSON.stringify(config));
            if(Object.keys(config_copy).includes("aggregators")){
              delete config_copy["aggregators"]
            }
            if(Object.keys(config_copy).includes("renderers")){
              delete config_copy["renderers"]
            }

            latestconfig = config_copy
          },
        }
      );

      $(`#${id6} .graphcontainerdiv .pvtAggregator`).css("display", "none")
      $(`#${id6} .graphcontainerdiv .pvtRenderer`).css("display", "none")

      var pivot_charttype = ["Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"]
      var id = data.chart_id_for_slicer;
      $(`#${id}_configure_pivot_charttype`).find('option').slice(1).remove()
          for (const i in pivot_charttype) {
            $(`#${id}_configure_pivot_charttype`).append(new Option(pivot_charttype[i],pivot_charttype[i], false, false))
          }

        $(`#${id}_configure_pivot_charttype`).val(rendererName).trigger("change")

        $(`#${id}_configure_pivot_charttype`).on('change', function () {
          $(`#${id6} .graphcontainerdiv .pvtRenderer`).val(this.value).trigger("change")
        })


      var pivot_operations = ['Count', 'Count Unique Values', 'List Unique Values', 'Average', 'Sum', 'Interger Sum', 'Median', 'Sample Variance', 'Sample Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Sum over Sum', '80% Upper Bound', '80% Lower Bound', 'Sum as Fraction of Total', 'Sum as Fraction of Rows', 'Sum as Fraction of Columns', 'Count as Fraction of Total']
      $(`#${id}_configure_pivot_operation`).find('option').slice(1).remove()

      for (let i = 0; i < pivot_operations.length; i++) {
        $(`#${id}_configure_pivot_operation`).append('<option value="' + pivot_operations[i] + '">' + pivot_operations[i] + '</option>')
      }
      $(`#${id}_configure_pivot_operation`).val(data.operation).trigger("change")

      $(`#${id}_configure_pivot_operation`).on('change', function () {
        $(`#${id6} .graphcontainerdiv .pvtAggregator`).val(this.value).trigger("change")
      })

      pivotResize(id6,data.content,pivot_config_copy,id,rendererName,data.operation)

    } else if (String(data.graph_subtype)=== '2D_Histogram_Contour') {
      update = { x: [data.x_axisdata], y: [data.y_axisdata], colorscale: [data.colordata] }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Stacked_Histogram') {

      update = { x: [data.x_axisdata] }
      Plotly.restyle(tester, update, [0])
      update2 = { x: [data.y_axisdata] }
      Plotly.restyle(tester, update2, [1])
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Cumulative_Histogram') {
      colorlength = data.x_axisdata.length
      if (filtergradientcolor == 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        colordata = colorvalue
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], marker: marker1 }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
      tabledata.push(data.x_axisdata)
    } else if (String(data.graph_subtype)=== 'Horizontal_Bar_Stacked' || String(data.graph_subtype)=== 'Horizontal_Bar_Grouped') {
        colorlength = data.y_axisdata.length
        var color_update = []
        for(var i=0;i<data.x_axisdata.length;i++){
          color_update = []
          for (let i = 0; i < colorlength; i++) {
            color_update.push(colorvalue);
          }

            update = {
                x: [data.x_axisdata[i]],
                y: [data.y_axisdata],
                text:[data.x_axisdata[i]],
                marker: {
                    color: color_update
                },

            }
            var colorList1=[]
            colorList1.push(colorvalue)
            var backRGB = colorvalue;

      const hexToRgb = hex =>
        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
            , (m, r, g, b) => '#' + r + r + g + g + b + b)
            .substring(1).match(/.{2}/g)
            .map(x => parseInt(x, 16))
      var r = hexToRgb(backRGB)[0] * 0.6
      var g = hexToRgb(backRGB)[1] * 0.6
      var b = hexToRgb(backRGB)[2] * 0.6


      var newcolor = rgb2hex(r, g, b)
      colorvalue = newcolor
            Plotly.restyle(tester, update,[i])
        }
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
          tableheaders =[]
          var new_x_axis = eval(data.new_x_axis)
          for(var i=0;i < new_x_axis.length;i++){
              tableheaders.push(fieldToVerbose(data.new_x_axis[i], data.mappingDict))
          }
          tableheaders.push(`${fieldToVerbose(data.y_axis, data.mappingDict)}`)

          tabledata=[]
          for(var i=0;i<data.x_axisdata.length;i++){
            tabledata.push(data.x_axisdata[i])
          }
          tabledata.push(data.y_axisdata)
        var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
        y_array.sort()
        if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array

    } else if (String(data.graph_subtype)=== 'Horizontal_Grouped_Box' || String(data.graph_subtype)=== 'Horizontal_Grouped_Violin' || String(data.graph_subtype)=== 'Horizontal_Area_Stacked') {
      update = { x: [data.x_axisdata], y: [data.y_axisdata], text: [data.x_axisdata] }
      update2 = { x: [data.second_columndata], y: [data.y_axisdata], text: [data.second_columndata] }

      Plotly.restyle(tester, update, [0])
      Plotly.restyle(tester, update2, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

      tabledata.push(data.x_axisdata)
      tabledata.push(data.second_columndata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Funnel_Stacked') {
      colordata = []
      let colordatasecond = []
      colorlength = data.x_axisdata.length
      let backRGB = colorvalue
      const hexToRgb = hex =>
        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
          , (m, r, g, b) => '#' + r + r + g + g + b + b)
          .substring(1).match(/.{2}/g)
          .map(x => parseInt(x, 16))
      let r = hexToRgb(backRGB)[0] * 0.9
      let g = hexToRgb(backRGB)[1] * 0.9
      let b = hexToRgb(backRGB)[2] * 0.9
      let newcolor = rgb2hex(r, g, b)
      for (let i = 0; i < colorlength; i++) {
        colordata.push(backRGB)
      }
      for (let i = 0; i < colorlength; i++) {
        colordatasecond.push(newcolor)
      }
      update = {
        x: [data.x_axisdata],
        y: [data.y_axisdata],
        marker: {
          color: colordata
        }
      }
      update2 = {
        x: [data.second_columndata],
        y: [data.y_axisdata],
        marker: {
          color: colordatasecond
        }
      }
      Plotly.restyle(tester, update, [0])
      Plotly.restyle(tester, update2, [1])
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tabledata = []
      tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]
      tabledata.push(data.x_axisdata)
      tabledata.push(data.second_columndata)
      tabledata.push(data.y_axisdata)
    } else if (String(data.graph_subtype)=== 'Horizontal_Bar') {
      colorlength = data.x_axisdata.length
      if (String(filtergradientcolor) === 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        colordata = colorvalue
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], y: [data.y_axisdata], marker: marker1, text: [data.x_axisdata] }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata = []
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
      y_array.sort()
      if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
    } else if (String(data.graph_subtype) === 'Horizontal_Area') {
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], y: [data.y_axisdata], marker: marker1, text: [data.x_axisdata] }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata = []
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
      y_array.sort()
      if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
    } else if (String(data.graph_subtype)=== 'Vertical_Bar_Stacked' || String(data.graph_subtype)=== 'Vertical_Bar_Grouped' || String(data.graph_subtype)=== 'Multiple_Line_Chart') {
      colorlength = data.x_axisdata.length
      colordata = [];
      for (let i = 0; i < data.y_axisdata.length; i++) {
        colordata = [];
        for (let i = 0; i < colorlength; i++) {
              colordata.push(colorvalue);
          }
        update = {
          x: [data.x_axisdata],
          y: [data.y_axisdata[i]],
          text: [data.y_axisdata[i]],
          marker: {
            color: colordata
          }
        }
        const colorList1 = []
        colorList1.push(colorvalue)
        let backRGB = colorvalue

        const hexToRgb = hex =>
          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
            , (m, r, g, b) => '#' + r + r + g + g + b + b)
            .substring(1).match(/.{2}/g)
            .map(x => parseInt(x, 16))
        let r = hexToRgb(backRGB)[0] * 0.6
        let g = hexToRgb(backRGB)[1] * 0.6
        let b = hexToRgb(backRGB)[2] * 0.6


        let newcolor = rgb2hex(r, g, b)
        colorvalue = newcolor
        Plotly.restyle(tester, update, [i])
      }
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]

      const new_y_axis = eval(data.new_y_axis)
      for (let i = 0; i < new_y_axis.length; i++) {
        tableheaders.push(fieldToVerbose(data.new_y_axis[i], data.mappingDict))
      }
      tabledata = []
      tabledata.push(data.x_axisdata)
      for (let i = 0; i < data.y_axisdata.length; i++) {
        tabledata.push(data.y_axisdata[i])
      }
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
    } else if (String(data.graph_subtype)=== 'Scatter_with_Straight_Lines_and_Markers') {
      colordata = []
      for (let i = 0; i < data.x_axisdata.length; i++) {
        colordata.push(colorvalue)
      }
      update = { x: [data.x_axisdata], y: [data.y_axisdata], text: [data.y_axisdata], marker: { color: colordata }, line: { color: colorvalue, width: 2 } }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata = []
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
    } else if (String(data.graph_subtype)=== 'Horizontal_Dot_Plot' || String(data.graph_subtype)=== 'Scatter') {
      colordata = []
      const new_colordata = []
      const new_x_axislist = []
      let backRGB = ''
      if (filtergradientcolor == 'yes') {
        for (let i = 0; i < data.x_axisdata.length; i++) {
          backRGB = colorvalue
          if (new_x_axislist.includes(data.x_axisdata[i]) == false) {
            new_x_axislist.push(data.x_axisdata[i])
          }
        }
        backRGB = colorvalue
        new_colordata.push(backRGB)
        for (let i = 0; i < (new_x_axislist.length) - 1; i++) {
          let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1])
          let r = parseInt(previousHex[1], 16) * 0.8
          let g = parseInt(previousHex[2], 16) * 0.8
          let b = parseInt(previousHex[3], 16) * 0.8

          let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b))
          new_colordata.push(newHex)
        }
        for (let i = 0; i < (data.x_axisdata.length); i++) {
          colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
        }
      } else {
        for (let i = 0; i < data.x_axisdata.length; i++) {
          colordata.push(colorvalue)
        }
      }
      update = { x: [data.x_axisdata], y: [data.y_axisdata], text: [data.y_axisdata], marker: { color: colordata } }
      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata = []
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
      x_array.sort()
      if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
    } else {

      colorlength = data.x_axisdata.length
      if (filtergradientcolor == 'yes') {
        colordata = gradient_filter(colorvalue, colorlength)
      } else {
        colordata = colorvalue
      }
      var marker1= JSON.parse($(`#${id6}`).attr('data-data'))[0].marker
      update = { x: [data.x_axisdata], y: [data.y_axisdata], marker: marker1, text: [data.y_axisdata] }

      Plotly.restyle(tester, update)
      $(`#${id6}`).attr('data-data', JSON.stringify(tester.data))
      tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
      tabledata = []
      tabledata.push(data.x_axisdata)
      tabledata.push(data.y_axisdata)
      if($(`#${idOrderModal}Button`).length){
        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
        x_array.sort()
        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
      }
    }
    if($(`#${idOrderModal}Button`).length){
    // $(`#${idOrderModal}Button`).attr('data-sorted-values', new_sorted_array)
    updateChart(id6, $(`#${idOrderModal}Button`).attr('data-sorted-values'))
    }

    const trace2 = {
      domain: { x: [0, 1], y: [0, 1] },
      header: {
        align: 'center',
        values: tableheaders,
        font: { family: 'Arial', size: 13, color: ['white'] },
        fill: { color: 'var(--primary-color)' }
      },
      cells: {
        align: 'center',
        values: tabledata,
        font: { family: 'Arial', size: 13, color: ['black'] }
      },
      type: 'table'
    }
    let layout2 = {
      margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 }
    }
    const datatable = [trace2]
    const datatablediv = document.getElementById(id_table)
    const config = { responsive: true, displaylogo: false }
    if(datatablediv){
    Plotly.newPlot(datatablediv, datatable, layout2, config)
    }
    $('#' + $('#' + id6).parent().attr('id')).find('.charts').each(function () {
      if (String($(this).attr('data-subtype')) === 'Bubble_Chart') {
        $(this).find('path').css('opacity', 0.7)
      } else {
        $(this).find('path').css('opacity', 1)
      }
    })
    const id_axis_order = data.chart_id_for_slicer + 'axis_order'
    var val = $(`#${id_axis_order}`).val()
    if(val || val == ""){
      var order_type = $(`#${id_axis_order}`).attr('order_type')
      let datatype_dict = JSON.parse($(`#${id_axis_order}`).attr("datatype_dict"))
      var old_layout = $('#' + id6).attr("data-layout");
      old_layout = JSON.parse(old_layout);
      var layout = JSON.parse(JSON.stringify(old_layout));
      if(order_type == "Vertical"){
        if(datatype_dict[data.x_axis] == 'DateField' || datatype_dict[data.x_axis] == 'DateTimeField') {
          changeAxisType(val, order_type, tester, old_layout, layout, id6)}
      }
      else if(order_type == "Horizontal"){
        if(datatype_dict[data.y_axis] == 'DateField' || datatype_dict[data.y_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, id6)
      }
    }
  },
  error: function () {
    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
  }
})
}


function resetCrossFilter () {
    for (const [key, value] of Object.entries(crossFilterDict1)) {
      if (String(key) === String($(this).attr('id'))) {
        try {
          for (let i = 0; i < value.length; i++) {
            if (String($('#' + value[i].id + 'card').attr('data-subtype')) === 'Bubble_Chart') {
              $('#' + value[i].id + 'card').find('path').each(function () {
                $(this).css('opacity', 0.7)
              })
            } else {
              $('#' + value[i].id + 'card').find('path').each(function () {
                $(this).css('opacity', 1)
              })
            }
          }
        } finally {
          console.log()
        }
      }
    }
  }


  function saveChartConfigAnalysis (analysisElementID, type="analysis") {
    $('.editTabIcon').css('display','none')
    const analysisFinalJson = {}
    const analysisSubTabDetails = []
    const interaction = []
    analysisFinalJson.ElementID = analysisElementID
    if($("#tableTab"+analysisElementID).find(".select2").val() != undefined || $("#tableTab"+analysisElementID).find(".select2").val() != null){
      analysisFinalJson.dropdown = $("#tableTab"+analysisElementID).find(".select2").val();
    }
    if (String($(`#${analysisElementID + '-tab'}`).children()[0]) !== 'undefined') {
      analysisFinalJson.ParentL3Name = $(`#${analysisElementID + '-tab'}`).children()[0].innerText
    } else {
      analysisFinalJson.ParentL3Name = $(`#${analysisElementID + '_tab_content'}`).attr('data-header_name')
    }
    analysisFinalJson.ParentULID = 'analysisTab' + analysisElementID
    analysisFinalJson.ParentTabContainerID = 'analysisTabContent' + analysisElementID

    $(`#analysisTab${analysisElementID}`).find('.nav-link').each(function () {
      const parentId = $(this).closest('.nav-tabs').attr('id').split('analysisTab')[1]
      const tabID = $(this).attr('id').replace('analysistab' + parentId, '')
      const tabbg = $(`#analysisDashboard${analysisElementID} .tab-content`).attr('config_background-color')
      const outercolor = $('.themeColor').val()
      const innercolor = $('.themeColor1').val()

      const indexCardBGColor = $('.indextabBG').val()
      const indexCardFontColor = $('.indextabFC').val()

      const headercolor = $('.global_header_color').val()
      const headerbgcolor = $('.global_header_bgcolor').val()
      const headerfontsize = $('.global_header_fontsize').val()
      const label_color = $('.global_header_color').val()
      const label_fontsize = $('.global_header_fontsize').val()
      const headerfontweight = $('.global_header_fontweight').val()
      const headerfontstyle = $('.global_header_fontstyle').val()
      const globalcheckBox = $('.global_shadow').prop('checked')
      const globalcheckBoxborder = $('.global_border').prop('checked')
      const globalshadowColor = $('.global_shadow_color').val()
      const globalshadowXOffset = $('.global_shadow_x').val()
      const globalshadowYOffset = $('.global_shadow_y').val()
      const globalshadowBlur = $('.global_shadow_blur').val()
      const globalshadowThickness = $('.global_shadow_thickness').val()
      const globalborderColor = $('.global_border_color').val()
      const globalborderThickness = $('.global_border_thickness').val()
      const globalborderStyle = $('.global_border_style').val()
      const n = ((windowLocationAttr.href).split('/'))
      const globalbgfolder = n[n.length - 2]
      const globalbgname = $(`#bg_image_name${analysisElementID}`).html()
      const globalheaderalignment = $('.global_header_alignment').val()
      const globalbgvalue = $(`#global_bg${analysisElementID}`).val()
      let gcolor = 'no'
      if (String($('.global_gradient_color').prop('checked')) === 'true') {
        gcolor = 'yes'
      }
      let grid = $(`#analysisrow${analysisElementID}${tabID}`).css('background-image')
      if (String(grid) === 'none') {
        grid = 'no'
      } else {
        grid = 'yes'
      }
      let subName = "Index"
      if($(this).find('.tabname')[0] != undefined){
        subName = $(this).find('.tabname')[0].innerText
      }

      var subDesc = ""
      if($(this).find('.tabname')[0] != undefined){
        const editables = document.getElementsByClassName('tab-desc');
        var currentID = $(this).attr('id').replace('analysis', '')
        Array.from(editables).forEach(ele => {{
          element_id = $(ele).attr("data-name").replace('index','')
          if(element_id == currentID){{
            if(ele.innerText){
              subDesc = ele.innerText
            }
          }}
        }});
      }

      subIcon = ""
      if($(this).find('.tabname')[0] != undefined){
        const editables = document.getElementsByClassName('TabIcons');
        var currentID = $(this).attr('id').replace('analysis', '')
        Array.from(editables).forEach(ele => {{
          element_id = $(ele).children().attr("data-name").replace('index','')
          if(element_id == currentID){{
            if($(ele).children().attr("class")){
              subIcon = $(ele).children().attr("class")
            }
          }}
        }});
      }

      const analysisSubTabDict = {
        aID: $(this).attr('id'),
        grid: grid,
        aHref: $(this).attr('href'),
        chartDivContainer: $(this).find('.tabname').attr('data-tab_ct'),

        subTabName: subName,
        subDesc:  subDesc,
        subIcon: subIcon,
        commentButtonID: `AddComment${analysisElementID}` + tabID,
        pdfButtonID: `analysisPDF${analysisElementID}` + tabID,
        deleteButtonID: 'removeTab' + analysisElementID + tabID,
        tabHeaderID: `tabHeader${analysisElementID}` + tabID,
        slicerConfigButtonId: `slicerConfig${analysisElementID}` + tabID,
        'tab_background-color': tabbg,
        outer_color: outercolor,
        inner_color: innercolor,

        indexCard_BGColor :indexCardBGColor,
        indexCard_FontColor :indexCardFontColor,

        g_color: gcolor,
        header_color: headercolor,
        header_bg_color: headerbgcolor,
        header_fontsize: headerfontsize,
        label_color:label_color,
        label_fontsize:label_fontsize,
        header_fontweight: headerfontweight,
        header_fontstyle: headerfontstyle,
        global_header_alignment: globalheaderalignment,
        global_header_alignment: globalheaderalignment,
        global_checkBox: globalcheckBox,
        global_checkBox_border: globalcheckBoxborder,
        global_shadowColor: globalshadowColor,
        global_shadowXOffset: globalshadowXOffset,
        global_shadowYOffset: globalshadowYOffset,
        global_shadowBlur: globalshadowBlur,
        global_shadowThickness: globalshadowThickness,
        global_borderColor: globalborderColor,
        global_borderThickness: globalborderThickness,
        global_borderStyle: globalborderStyle,
        global_bg_name: globalbgname,
        global_bg_value: globalbgvalue,
        global_bg_folder: globalbgfolder,
        freeze_dict: finalfdict2
      }
      const tabSlicerConfig = {
        slicerTable: [],
        slicerParameter: [],
        slicerBoolean: [],
        slicerReload : [],
        multipleSlicer:[],
      }

      $(`.selectSlicerConfig_${analysisElementID}${tabID}`).each(function () {
        const slicer_table = $(this).attr('data-slicertable')
        const slicer_param = $(this).attr('data-slicercolumn')
        const slicer_reload = $(this).val()
        if ($(this).find("option[value='']").length > 0){
          tabSlicerConfig.slicerBoolean.push("True")
        } else {
          tabSlicerConfig.slicerBoolean.push("False")
        }
        tabSlicerConfig.slicerTable.push(slicer_table)
        tabSlicerConfig.slicerParameter.push(slicer_param)
        tabSlicerConfig.slicerReload.push(slicer_reload)
        if($(this).attr("multiple")){
          tabSlicerConfig["multipleSlicer"].push(true);
        }else{
          tabSlicerConfig["multipleSlicer"].push(false);
        }
      })

      analysisSubTabDict.tabSlicerConfig = tabSlicerConfig
      $('#analysisrow' + analysisElementID + tabID).find('.charts').each(function () {
        const a = $(this).attr('id').split('card')[0]
        interaction.push($('#' + a + 'interaction').prop('checked'))
      })
      let gaugeProp = {}
        $('#analysisrow'+analysisElementID+tabID).find('.charts').each(function() {
          var a = $(this).attr('id').split('card')[0]
          gaugeProp[a] = {
              "threshold": $('#'+a+'threshold').val(),
              "color":$('#'+a+'thresholdColor').val(),
              "delta": $('#'+a+'deltaGauge').val(),
              "barColor": $("#"+a+"gaugeModalButton").attr("data-color"),
              "barColorConfig": $("#"+a+"gaugeModalButton").attr("data-value"),
              "barRangeConfig": $("#"+a+"gaugeModalRangeButton").attr("data-value")
          }
      })
      analysisSubTabDict.crossFilter = interaction
      analysisSubTabDict.thresholdProp = gaugeProp;
      $(`${$(this).attr('href')}`).css('display', 'block')
      const chartDivContainerHeight = $(`#${$(this).find('.tabname').attr('data-tab_ct')}`).height()
      analysisSubTabDict.chartDivContainerHeight = chartDivContainerHeight
      let id_r = ($(this).attr("id")).replace("tab","row");
      if($("#"+id_r).attr("app_code") == undefined || $("#"+id_r).attr("app_code") == ""){
        analysisSubTabDetails.push(analysisSubTabDict)
      }
      $(`${$(this).attr('href')}`).css('display', '')
    })
    analysisFinalJson.subTabContent = analysisSubTabDetails
    analysisFinalJson.slicerTabConnectDict = slicerTabConnectDict
    const chartConfigDetails = []
    $(`#analysisTabContent${analysisElementID}`).find('.chartDivSection').each(function () {

      const chartConfigDict = {}
      chartConfigDict.ParentTabID = $(this).parent().attr('id')
      const navTabId = $(this).parent().attr('aria-labelledby');
      $(`#${$(this).parent().attr('id')}`).css('display', 'block')
      chartConfigDict.ParentContainerID = $(this).attr('id')
      if ($(`#${navTabId}`).attr('data-tabLoaded') === 'false') {
        const chartConfigSaveListNew = JSON.parse($(`#${navTabId}`).attr('data-data'));
        chartConfigDict.chartJson = chartConfigSaveListNew
      } else {
        const chartConfigSaveListNew = []
        $(this).find('.charts').each(function (index) {
          let highlightcolumnheaderscolorlist = $(this).attr('highlightcolumnheaderscolorlist')
          const charttab = $(this).closest('.chartDivSection').attr('id')
          const fontsize = $(this).find('h5').css('font-size')
          let chartheader = $(this).find('h5')[0].innerText
          const conditionaltable = $(this).attr('data-conditional_table')
          const headerfontsize = parseInt($(this).attr('data-header_fontsize'))
          const headerfontweight = $(this).attr('data-header_fontweight')
          const headerfontstyle = $(this).attr('data-header_fontstyle')
          const headercolor = $(this).attr('data-header_color')
          const headerbgcolor = $(this).attr('data-header_bgcolor')
          const headeralignment = $(this).attr('data-header_alignment')
          const uniqueid = $(this).attr('data-id')
          const graphsubtype = $(this).attr('data-subtype')
          const columnAlignmentSelectedOptions = $(this).attr('data-column_alignment_table')
          const FormattersConfiguration = $(this).attr('data-formatters_config_table')
          if(["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graphsubtype))){

            var config = $(this).find('.graphcontainerdiv').data("pivotUIOptions")
            var config_copy = JSON.parse(JSON.stringify(config));

            if(Object.keys(config_copy).includes("aggregators")){
              delete config_copy["aggregators"]
            }
            if(Object.keys(config_copy).includes("renderers")){
              delete config_copy["renderers"]
            }


            latestconfig = config_copy

          }
          const tabheight = document.querySelector(`#${charttab}`).offsetHeight
          const tableName = $(this).attr('data-table_name')
          let linecolumn
          let titlefontsize = ''
          let charttitle = ''
          let datavalue = ''
          const bgcolor = $(this).css('background-color')
          const globalbg = $(this).attr('data-globalbg')
          let color = $(this).attr('data-color')
          const plotbgcolor = $(this).attr('data-bgcolor')
          const gradcolor = $(this).attr('data-grad_color')
          const globalbgcolor = $(this).attr('data-global_bg_color')
          const globalindcolor = $(this).attr('data-global_ind_color')
          const configdatavalue = $(this).attr('data-config_data_value')
          const configvaluesize = $(this).attr('data-config_valuesize')
          const configtitlesize = $(this).attr('data-config_titlesize')
          const configcolor = $(this).attr('data-config_color')
          const configgridlines = $(this).attr('data-config_gridlines')
          const configlabels = $(this).attr('data-config_labels')
          let configxrange = $(this).attr('data-config_xrange')
          const configxaxistitle = $(this).attr('data-config_x_axis_title')
          const configyaxistitle = $(this).attr('data-config_y_axis_title')
          const legendx = $(this).attr('data-legend_x')
          const configlabelplacement = $(this).attr('data-config_label_placement')
          const legendy = $(this).attr('data-legend_y')
          const configelementcolor = $(this).attr('data-config_element_color')
          const elementlabel = $(this).attr('data-element_label')
          const label_color = $(this).attr('data-label_color')
          const label_fontsize = $(this).attr('data-label_fontsize')
          if (String(configxrange) === 'undefined') {
            configxrange = ''
          }
          let configyrange = $(this).attr('data-config_yrange')
          if (String(configyrange) === 'undefined') {
            configyrange = ''
          }
          color = $(this).css('background-color')
          const datashadecolor = $(this).attr('data-shadecolor')
          const datashadowX = $(this).attr('data-shadowX')
          const datashadowY = $(this).attr('data-shadowY')
          const datashadowblurry = $(this).attr('data-shadowblurry')
          const datashadowThick = $(this).attr('data-shadowThick')
          const datashadowon = $(this).attr('data-shadowon')
          const databorderColor = $(this).attr('data-borderColor')
          const databorderStyle = $(this).attr('data-borderStyle')
          const databorderThickness = $(this).attr('data-borderThickness')
          const databorderon = $(this).attr('data-borderon')
          let cardheight = $(this).height()
          let cardwidth = $(this).width()
          let filtercolumns = ''
          let filterinputfinal = ''
          let layout = ''
          let graphdata = ''
          let changedtext = ''
          let img_icon =''
          let drange = {}
          if (String($(this).attr('data-borderon')) === 'true') {
            cardheight = $(this).height() + (2 * databorderThickness)
            cardwidth = $(this).width() + (2 * databorderThickness)
          }
          if (String($(this).attr('data-filter_columns')) !== 'undefined') {
            filtercolumns = JSON.parse($(this).attr('data-filter_columns'))
          }

          if (String($(this).attr('data-filter_input_final')) !== 'undefined') {
            filterinputfinal = JSON.parse($(this).attr('data-filter_input_final'))
          }

          if (String($(this).attr('data-filter_dtrange')) !== 'undefined' && String($(this).attr('data-filter_dtrange')) !== '{}') {
            drange = JSON.parse($(this).attr('data-filter_dtrange'))
          }

          if (!((String(graphsubtype) === 'Nested_Table') || (String(graphsubtype) === 'Aggregation') || (String(graphsubtype) === 'Image') || (graphsubtype == 'Table') || ["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graphsubtype)))) {
            layout = $(this).attr('data-layout')
            graphdata = JSON.parse($(this).attr('data-data'))
            changedtext = $(this).attr('data-changed_text')
            if (String($(this).attr('data-line_column')) !== 'undefined') {
              linecolumn = $(this).attr('data-line_column')
            }
          }
          if (String(graphsubtype) === 'Aggregation') {
            titlefontsize = $(this).find('p').css('font-size')
            chartheader = $(this).find('h5')[0].innerText
            charttitle = $(this).find('p')[0].innerText
            datavalue = $(this).find('h5').attr('data_value')
            img_icon = $(this).find('img').attr('src')
          }
          if (String(graphsubtype) === 'Pie_Chart' || String(graphsubtype) === 'Treemap' || String(graphsubtype) === 'Donut_Chart') {
            graphdata[0].labels = []
            graphdata[0].values = []
          }
          if (String(graphsubtype) === 'Sunburst') {
            graphdata[0].labels = []
            graphdata[0].values = []
            graphdata[0].ids = []
            graphdata[0].parents = []
          }
          if (String(graphsubtype) === 'Vertical_Bar' || String(graphsubtype) === 'Funnel' || String(graphsubtype) === 'Horizontal_Bar' || String(graphsubtype) === 'Line' || String(graphsubtype) === 'Stepped_Line' || String(graphsubtype) === 'Area' || String(graphsubtype) === 'Horizontal_Area' || String(graphsubtype) === 'Scatter' || String(graphsubtype) === '2D_Histogram_Contour' || String(graphsubtype) === 'Vertical_Box' || String(graphsubtype) === 'Horizontal_Box' || String(graphsubtype) === 'Horizontal_Dot_Plot' || String(graphsubtype) === 'Scatter_with_Straight_Lines_and_Markers' || String(graphsubtype) === 'Vertical_Violin' || String(graphsubtype) === 'Horizontal_Violin' || String(graphsubtype) === '3D_Scatter_Plot') {
            graphdata[0].x = []
            graphdata[0].y = []
          }
          if (String(graphsubtype) === '3D_Scatter_Plot') {
            graphdata[0].z = []
          }
          if (String(graphsubtype) === 'Vertical_Waterfall' || String(graphsubtype) === 'Horizontal_Waterfall') {
            graphdata[0].x = []
            graphdata[0].y = []
            graphdata[0].measure = []
          }
          if (String(graphsubtype) === 'Funnel_Area') {
            graphdata[0].text = []
            graphdata[0].values = []
          }
          if (String(graphsubtype) === 'Vertical_Histogram' || String(graphsubtype) === 'Cumulative_Histogram') {
            graphdata[0].x = []
          }
          if (String(graphsubtype) === 'Horizontal_Histogram') {
            graphdata[0].y = []
          }
          if (String(graphsubtype) === 'Angular_Gauge') {
            graphdata[0].value = []
            graphdata[0].title = []
            graphdata[0].gauge.axis.range = []
          }
          if (String(graphsubtype) === 'Bullet_Gauge') {
            graphdata[0].value = []
            graphdata[0].gauge.axis.range = []
          }
          if (String(graphsubtype) === 'Vertical_Grouped_Box' || String(graphsubtype) === 'Vertical_Line_Stacked' || String(graphsubtype) === 'Vertical_Area_Stacked' || String(graphsubtype) === 'Horizontal_Area_Stacked' || String(graphsubtype) === 'Vertical_Waterfall_Grouped' || String(graphsubtype) === 'Horizontal_Grouped_Box' || String(graphsubtype) === 'Horizontal_Waterfall_Grouped') {
            graphdata[0].x = []
            graphdata[1].x = []
            graphdata[0].y = []
            graphdata[1].y = []
          }
          if (String(graphsubtype) === 'Vertical_Waterfall_Grouped') {
            graphdata[0].measure = []
            graphdata[1].measure = []
          }
          const xaxis = $(this).attr('data-xaxis')
          const yaxis = $(this).attr('data-yaxis')
          const secondcolumn = $(this).attr('data-secondcolumn')
          const totaly = $(this).attr('data-total_y')
          const totalL = $(this).attr('data-total_L')
          const computednumber = $(this).attr('data-computed_number')
          const istitle = $(this).attr('data-is_title')
          const titlevalue = $(this).attr('data-title_value')
          const operationn = $(this).attr('data-operation_n')
          const aggdistinct = $(this).attr('data-agg_distinct')
          const operation = $(this).attr('data-operation')
          const operation_line = $(this).attr('data-operation_line')
          if($(this).attr("app_code") == "" || $(this).attr("app_code") == undefined){
            if (!((String(graphsubtype) === 'Nested_Table') || (String(graphsubtype) === 'Aggregation') || (String(graphsubtype) === 'Image') || (String(graphsubtype) === 'Table') || ["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graphsubtype)))) {
              chartConfigSaveListNew.push({ is_title: istitle, title_value: titlevalue, conditional_table: conditionaltable, header_alignment: headeralignment, header_fontstyle: headerfontstyle, header_fontsize: headerfontsize, header_fontweight: headerfontweight, header_color: headercolor, header_bgcolor: headerbgcolor, data_shadowon: datashadowon, data_shadecolor: datashadecolor, data_shadowX: datashadowX, data_shadowY: datashadowY, data_shadowblurry: datashadowblurry, data_shadowThick: datashadowThick, data_borderColor: databorderColor, data_borderStyle: databorderStyle, data_borderon: databorderon, data_borderThickness: databorderThickness, total_y: totaly, total_L: totalL,color: color, plot_bg_color: plotbgcolor, global_bg: globalbg, grad_color: gradcolor, global_bgcolor: globalbgcolor, global_ind_color: globalindcolor, element_label: elementlabel, config_element_color: configelementcolor, config_data_value: configdatavalue, config_valuesize: configvaluesize, config_titlesize: configtitlesize, config_label_placement: configlabelplacement, legend_x: legendx, legend_y: legendy, computed_number: computednumber, operation_n: operationn, agg_distinct: aggdistinct, operation: operation, operation_line: operation_line, tableName: tableName, chartheader: chartheader, config_x_axis_title: configxaxistitle, config_y_axis_title: configyaxistitle, config_yrange: configyrange, config_xrange: configxrange, config_gridlines: configgridlines, config_labels: configlabels, x_axis: xaxis, y_axis: yaxis, second_column: secondcolumn, filters: filtercolumns, filter_input_final: filterinputfinal, line_column: linecolumn, height: cardheight, width: cardwidth, position: $(this).position(), layout: JSON.parse(layout), data: graphdata, id: uniqueid, graph_subtype: graphsubtype, changed_text: JSON.parse(changedtext), config_color: configcolor, backgroundcolor: color, drange:drange,columnAlignmentSelectedOptions:columnAlignmentSelectedOptions, FormattersConfiguration:FormattersConfiguration,highlightcolumnheaderscolorlist:highlightcolumnheaderscolorlist })
            } else {
              chartConfigSaveListNew.push({ is_title: istitle, title_value: titlevalue, conditional_table: conditionaltable, header_alignment: headeralignment, header_fontstyle: headerfontstyle, header_fontsize: headerfontsize, header_fontweight: headerfontweight, header_color: headercolor, header_bgcolor: headerbgcolor, data_shadowon: datashadowon, data_shadecolor: datashadecolor, data_shadowX: datashadowX, data_shadowY: datashadowY, data_shadowblurry: datashadowblurry, data_shadowThick: datashadowThick, data_borderColor: databorderColor, data_borderStyle: databorderStyle, data_borderon: databorderon, data_borderThickness: databorderThickness, total_y: totaly, total_L: totalL,color: color, plot_bg_color: plotbgcolor, global_bg: globalbg, grad_color: gradcolor, global_bgcolor: globalbgcolor, global_ind_color: globalindcolor, element_label: elementlabel, config_element_color: configelementcolor, config_data_value: configdatavalue, config_valuesize: configvaluesize, config_titlesize: configtitlesize, config_label_placement: configlabelplacement, legend_x: legendx, legend_y: legendy, computed_number: computednumber, operation_n: operationn, agg_distinct: aggdistinct, operation: operation, operation_line: operation_line, tableName: tableName, chartheader: chartheader, config_x_axis_title: configxaxistitle, config_y_axis_title: configyaxistitle, chart_title: charttitle, config_yrange: configyrange, config_xrange: configxrange, config_gridlines: configgridlines, config_labels: configlabels, data_value: datavalue, x_axis: xaxis, y_axis: yaxis, second_column: secondcolumn, height: cardheight, filters: filtercolumns, filter_input_final: filterinputfinal, width: cardwidth, position: $(this).position(), id: uniqueid, graph_subtype: graphsubtype, backgroundcolor: color, config_color: configcolor, font_size: fontsize, titlefontsize: titlefontsize, img_icon:img_icon, drange:drange,columnAlignmentSelectedOptions:columnAlignmentSelectedOptions, FormattersConfiguration:FormattersConfiguration,highlightcolumnheaderscolorlist:highlightcolumnheaderscolorlist})
            }
          }
          if(["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graphsubtype))){
            chartConfigSaveListNew[index].pivot_report_data = latestconfig
          }
        })
        $(this).find('.commentboxcard').each(function () {
          const textboxvalue = $(this).find('.commentbox').html()
          const height = $(this).height()
          const width = $(this).width()
          if (String($(this).attr('data-id')) === 'undefined') {
            chartConfigSaveListNew.push({ chartType: 'Textbox', height: height, width: width, position: $(this).position(), textboxvalue: textboxvalue })
          } else {
            const id_text_editor = $(this).attr('data-id')
            chartConfigSaveListNew.push({ chartType: 'Textbox', height: height, width: width, position: $(this).position(), textboxvalue: textboxvalue, id_text_editor: id_text_editor })
          }
        })
        chartConfigDict.chartJson = chartConfigSaveListNew
      }

      chartConfigDetails.push(chartConfigDict)

      $(`#${$(this).parent().attr('id')}`).css('display', '')
    })
    analysisFinalJson.subTabChartDetails = chartConfigDetails
    let url_string = windowLocation
    let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
    let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
    let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
    let app_code2 = url_string.substring(f_occ+1,s_occ)
    let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
    if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
      current_dev_mode2 = "User"
    }
    if(sharedConfig["config"] == undefined){
      sharedConfig["config"] = [];
    }
    for(let i = 0; i < sharedConfig["config"].length; i++){
      var is_present = false
      $(`#analysisTabContent${analysisElementID}`).find('.chartDivSection').each(function () {
        $(this).find('.charts').each(function () {
          if($(this).attr("id") == sharedConfig["config"][i]["plot_id"]){
            is_present = true
          }
        })
      })
      if(sharedConfig["config"][i]["dashboard_type"] == "Plots"){
        if(!is_present){
          sharedConfig["config"].splice(i,1);
          i--;
        }

      }
    }
    for(let i = 0; i < sharedConfig["config"].length; i++){
      var is_present = false
      $(`#analysisTabContent${analysisElementID}`).find('.chartDivSection').each(function () {

        if($(this).attr("app_code") == sharedConfig["config"][i]["app_code"]){
          is_present = true
        }
      })
      if(sharedConfig["config"][i]["dashboard_type"] == "Tabs"){
        if(!is_present){
          sharedConfig["config"].splice(i,1);
          i--;
        }
      }
    }
    if(type == "analysis"){

      if (dashboardSave_){
        $.ajax({
          url: `/users/${urlPath}/userConfigSave/`,
          data: {
            operation: 'saveAnalysisTab',
            analysisDataDict: JSON.stringify(analysisFinalJson),
            shared_config: JSON.stringify(sharedConfig),
            screenURL: app_code2,
            element_id: analysisElementID
          },
          type: 'POST',
          dataType: 'json',
          success: function (data) {
            $('.standard_button_click').prop('disabled', false)
          },
          error: function () {
            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            $('.standard_button_click').prop('disabled', false)
          }
        })

      } else {
        $.ajax({
          url: `/users/${urlPath}/userConfigSave/`,
          data: {
            operation: 'saveAnalysisTabImport',
            shared_config: JSON.stringify(sharedConfig),
            screenURL: app_code2,
            element_id: analysisElementID
          },
          type: 'POST',
          dataType: 'json',
          success: function (data) {
            $('.standard_button_click').prop('disabled', false)
          },
          error: function () {
            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            $('.standard_button_click').prop('disabled', false)
          }
        })
      }
    } else {
      $.ajax({
        url: `/users/${urlPath}/userConfigSave/`,
        data: {
          operation: 'saveAnalysisTabList',
          analysisDataDict: JSON.stringify(analysisFinalJson),
          shared_config: JSON.stringify(sharedConfig),
          screenURL: app_code2,
          element_id: analysisElementID
        },
        type: 'POST',
        dataType: 'json',
        success: function (data) {
          $('.standard_button_click').prop('disabled', false)
        },
        error: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
          $('.standard_button_click').prop('disabled', false)
        }
      })
    }
  }

function plotFunction(plotDict, slicerColumn = "", slicerColumnValue = "", slicerColumnId = "", existingDivId = "", app_code_ = "", disable = false) {

  let  ajaxdata = {
      'tableName': plotDict.tableName,
      'conditional_table': plotDict.conditional_table,
      'x_axis': plotDict.x_axis,
      'y_axis': plotDict.y_axis,
      'second_column': plotDict.second_column,
      'operation': plotDict.operation,
      'operation_line': plotDict.operation_line,
      'graph_type': plotDict.graph_type,
      'graph_subtype': plotDict.graph_subtype,
      'color': plotDict.color,
      'filters':plotDict.filters,
      'line_column':plotDict.line_column,
      'filter_inputs':plotDict.filter_input_final,
      'slicerColumn': JSON.stringify(slicerColumn),
      'slicerColumnValue': JSON.stringify(slicerColumnValue),
      'computed_number':plotDict.computed_number,
      'is_title':plotDict.is_title,
      'title_value':plotDict.title_value,
      'operation_n':plotDict.operation_n,
      'agg_distinct':plotDict.agg_distinct,
      'total_y':plotDict.total_y,
      'total_L':plotDict.total_L,
      'drange': plotDict.drange,
      'app_code': app_code_,
      'columnAlignmentSelectedOptions':plotDict.columnAlignmentSelectedOptions,
      'highlightcolumnheaderscolorlist':plotDict.highlightcolumnheaderscolorlist,
      'FormattersConfiguration':plotDict.FormattersConfiguration,
  }
  if (String(plotDict.graph_type) === "undefined") {
      ajaxdata["plotDict"] = JSON.stringify(plotDict)
  }
  if (plotDict.tableName || plotDict.graph_subtype === 'Image') {
    $.ajax({
      url: `/users/${urlPath}/plotlyPlots/`,
      data: ajaxdata,
      type: "POST",
      dataType: "json",
      success: function (data) {

        try {
              $('.modalgraphs').each(function () {
                  $(this)[0].style.display = "none"

              })

          }
          finally{}
          let  chartDivId = existingDivId;
          if (String(existingDivId) === "") {
              chartDivId = (data.chartDivId + Math.random()).replace('.', '').replace(/\s/g, '')
      }

          let graph_subtype = data.graph_subtype
          let pivot_report_data = data.pivot_report_data
          let x_axis = data.x_axis
          let operation = data.operation
          let operation_line = plotDict.operation_line
          let e_id = data.e_id
          let y_axis = data.y_axis
          let second_column = data.second_column
          let tableName = plotDict.tableName
          let operation_n = plotDict.operation_n
          let computed_number = plotDict.computed_number
          let is_title = plotDict.is_title
          let title_value = plotDict.title_value
          let total_y = plotDict.total_y
          let total_L = plotDict.total_L
          let agg_distinct = plotDict.agg_distinct
          let id_axis_order = chartDivId + 'axis_order'
          let img_icon = plotDict.img_icon
          let id = chartDivId
          let id1 = chartDivId + 'color'
          let id2 = chartDivId + 'x_range'
          let id3 = chartDivId + 'y_range'
          let id4 = chartDivId + 'color2'
          let id5 = chartDivId + 'cancel'
          let id6 = chartDivId + 'card'
          $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
          let id7 = chartDivId + 'modal'
          let id8 = chartDivId + 'edit'
          let id9 = chartDivId + 'gridlines'
          let id10 = chartDivId + 'modalclose'
          let id11 = chartDivId + 'xtitle'
          let id12 = chartDivId + 'ytitle'
          let id13 = chartDivId + 'labeledit'
          let id14 = chartDivId + 'legend1'
          let id15 = chartDivId + 'legend2'
          let id16 = chartDivId + 'tabbutton'
          let id17 = chartDivId + 'tabdropdown'
          let id18 = chartDivId + 'resetlabels'
          let id19 = chartDivId + 'hiddendiv'
          let id20 = chartDivId + 'slicerConfig'
          let id21 = chartDivId + 'interaction'
          let id23 = chartDivId + 'visualtization'
          let id24 = chartDivId + 'gradient_color'
          let id22 = chartDivId + 'main_bgcolor'
          let id25 = chartDivId + 'threshold'
          let id26 = chartDivId + 'thresholdColor'
          let id27 = chartDivId + 'deltaGauge'
          let idOrderModal = chartDivId + 'orderModal'
          let idGaugeModal = chartDivId + 'gaugeModal'
          let id_agg_title = chartDivId + 'id_agg_title'
          let id_labels = chartDivId + 'labels'
          let id_table = chartDivId + 'table'
          let id_tableshow = chartDivId + 'id_tableshow'
          let id_tabledownload = chartDivId + 'id_tabledownload'
          let id_table_export = chartDivId + 'id_table_export'
          let id_tableicon = chartDivId + 'id_tableicon'
          let id_filter = chartDivId + 'filter'
          let id_filter_button = chartDivId + 'filter_button'
          let id_filter_close = chartDivId + 'filter_close'
          let id_filter_container = chartDivId + 'filter_container'
          let tabSlicerId = slicerColumnId;
          let id_showlabel = chartDivId + 'show_label'
          let id_position_legends = chartDivId + 'position_legends'
          let id_label_placement = chartDivId + 'label_placement'
          let id_shadow = chartDivId + 'id_shadow'
          let id_shadow_color = chartDivId + 'id_shadow_color'
          let id_xshadow = chartDivId + 'id_xshadow'
          let id_yshadow = chartDivId + 'id_yshadow'
          let id_blurshadow = chartDivId + 'id_blurshadow'
          let id_shadow_thickness = chartDivId + 'id_shadow_thickness'
          let id_border = chartDivId + 'id_border'
          let id_border_color = chartDivId + 'id_border_color'
          let id_border_thickness = chartDivId + 'id_border_thickness'
          let id_border_style = chartDivId + 'id_border_style'
          let id_header = chartDivId + 'chart_header'
          let id_body = chartDivId + 'chart_body'
          let id_header_bgcolor = chartDivId + 'header_bgcolor'
          let id_header_color = chartDivId + 'header_color'
          let id_header_fontsize = chartDivId + 'header_font_size'
          let id_header_fontweight = chartDivId + 'header_font_weight'
          let id_header_fontstyle = chartDivId + 'header_font_style'
          let id_label_fontsize = chartDivId + 'label_font_size'
          let id_label_color = chartDivId + 'label_color'
          let id_header_alignment = chartDivId + 'header_alignment'
          let id_condition_modal_edit = chartDivId + 'conditional_modal_edit'
          let id_columnAlignmentModal_edit = chartDivId + 'columnAlignmentModal_edit'
          let id_freeze_pane = chartDivId + 'freeze_pane'
          let id_condition = chartDivId + 'conditional_modal'
          let id_condition_container = chartDivId + 'conditional_modal_body'
          let id_condition_close = chartDivId + 'conditional_modal_close'
          let id_change_conditional_config = chartDivId + 'change_conditional_config'
          let id_change_freeze_config = chartDivId + 'freeze_pane_config'
          let id_img_icon = chartDivId + 'img_icon'
          let id_optionvalues = chartDivId + 'optionvalues'
          let id_optionvalues_line = chartDivId + 'optionvalues_line'
          let id_configure_pivot_charttype = chartDivId + '_configure_pivot_charttype'
          let id_configure_pivot_operation = chartDivId + '_configure_pivot_operation'
          let id_tableColunm_Rearrange = chartDivId +'colunm_Rearrange'
          let id_tableColunm_Rearrange_ul = chartDivId +'colunm_Rearrange_ul'
          let id_tableColunm_Rearrange_checkbox = chartDivId +'colunm_Rearrange_checkbox'
          let id_tableColunm_Rearrange_div =chartDivId +'colunm_Rearrange_div'
          let id_nestedtableColunm_Rearrange = chartDivId +'nestedTable_colunm_Rearrange'
          let id_nestedtableColunm_Rearrange_ul = chartDivId +'nestedcolunm_Rearrange_ul'
          let id_nestedtableColunm_Rearrange_checkbox = chartDivId +'nestedcolunm_Rearrange_checkbox'
          let id_nestedtableColunm_Rearrange_div =chartDivId +'nestedcolunm_Rearrange_div'
          let id_HighlightColHeaders = chartDivId +'HighlightColHeaders'
          let id_saveBtn_HighlightColHeaders = chartDivId +'saveBtn_HighlightColHeaders'
          let id_HighlightColHeaders_checkbox = chartDivId +'HighlightColHeaders_checkbox'
          let id_HighlightColHeaders_div = chartDivId +'HighlightColHeaders_div'
          let id_HighlightColHeaders_ul = chartDivId +'HighlightColHeaders_ul'
          let plotList=[]
          let filterModal =''
          let header_bgcolor =$(".global_header_bgcolor").val();
          let width =''
          let height =''
          let styletop = ''
          let left = ''
          let chartheader = ''
          let header_color = ''
          let header_fontsize = ''
          let header_fontweight = ''
          let header_fontstyle = ''
          let header_alignment = ''
          let label_color =''
          let label_fontsize =''
          let highlightcolumnheaderscolorlist
          let chart_height = 508.48
          let chart_width = 402.68492699999996
          let chart_bg_color = $(".themeColor").val();
          let chart_color = $(".themeColor1").val();
          let global_gradient = "no"
          let id_columnAlignmentModal = chartDivId + 'columnAlignmentModalID'
          let id_selectGlobalHeaderColumnAlignment = chartDivId + 'selectGlobalHeaderColumnAlignment'
          let id_selectGlobalContentColumnAlignment = chartDivId + 'selectGlobalContentColumnAlignment'
          let id_selectColumnAlignment = chartDivId + 'selectColumnAlignment'
          let id_ColumnAlignmentContainer = chartDivId + 'ColumnAlignmentContainer'
          let id_applyColumnAlignmentButton = chartDivId + 'applyColumnAlignmentButton'
          let id_FormattersModal_container = chartDivId + 'formatters_modal_body'
          let id_Formatters_edit = chartDivId + 'Formatters_edit'
          let id_FormattersModal_close = chartDivId + 'formatters_modal_close'
          let id_addFormatter = chartDivId + 'addFormatter'
          let id_FormattersModal = chartDivId + 'id_FormattersModalID'
          let id_FormattersModal_config = chartDivId + 'applyFormattersButton'
          let id_closeColumnAlignmentButton = chartDivId + 'closeColumnAlignmentButton'
          if (Object.keys(slicerTabConfigDict).includes(slicerColumnId)) {
              plotList = slicerTabConfigDict[slicerColumnId];
              plotList.push(id6);
          } else {
              plotList.push(id6);
          }
          slicerTabConfigDict[slicerColumnId] = plotList;
          slicerChangeUpdatePlots(app_code_);
          plotList = [];
          if (data.plotDict === undefined) {
              if(Object.keys(crossFilterDict1).includes(plotDict.tabNameID)){
                  plotList = crossFilterDict1[plotDict.tabNameID];
                  plotList.push({'id':chartDivId,'plot_type':graph_subtype})
              } else {
                  plotList.push({'id':chartDivId,'plot_type':graph_subtype})
              }
              crossFilterDict1[plotDict.tabNameID] = plotList
          } else {
              if(Object.keys(crossFilterDict1).includes(data.plotDict.tab_id)){
                  plotList = crossFilterDict1[data.plotDict.tab_id];
                  plotList.push({'id':chartDivId,'plot_type':graph_subtype})
              } else {
                  plotList.push({'id':chartDivId,'plot_type':graph_subtype})
              }
              crossFilterDict1[data.plotDict.tab_id] = plotList
          }
          if (Object.keys(slicerTabConnectDict).includes(id6) == false) {
              slicerTabConnectDict[id6] = [];
          }
          filterModal = $(`
          <div class="modal-dialog modalgraphs modal-full-height modal-right" id="${id_filter}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
          <div class="modal-content" style="width:23rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Filter</span>
          <button type="button" class="close" data-dismiss="modal" id="${id_filter_close}" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body" id="${id_filter_container}" style="max-height:26rem;overflow:auto">
          </div>
          </div>
          </div>
          `)

          let conditionalModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="${id_condition}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Conditional Formatting</span>
          <button type="button" class="close" data-dismiss="modal" id="${id_condition_close}" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          </div>
          <div class="modal-body conditional_data_body_edit" id="${id_condition_container}" style="max-height:26rem;overflow:auto">
          </div>
          <div class="modal-footer"><button type="button" id="${id_change_conditional_config}" class="btn btn-primary btn-xs rounded px-2">Apply</button></div>
          </div>
          </div>
          `)
          let columnAlignmentModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right"
          id="${id_columnAlignmentModal}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;right: 0 ;top : 10px;z-index: 1050;width:100%">
          <div class="modal-content">
                      <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                        <h6 class="modal-title" style="margin-left:auto;">Configure Column Alignment</h6>
                        <button type="button" class="close" id="${id_closeColumnAlignmentButton}">&times;</button>
                      </div>
                      <div class="modal-body" style="overflow: scroll;">
                        <div class="accordion" id="accordionColumnAlignmentCreateView">
                          <div class="card">
                            <div class="card-body">
                              <div class="row">
                                <div class="col-6">
                                  <label>Global Header Alignment:</label>
                                  <select class="select2 form-control selectGlobalHeaderColumnAlignment" id="${id_selectGlobalHeaderColumnAlignment}">
                                    <option value="left">Left</option>
                                    <option value="center" selected>Center</option>
                                    <option value="right">Right</option>
                                  </select>
                                </div>
                                <div class="col-6">
                                  <label>Global Content Alignment:</label>
                                  <select class="select2 form-control selectGlobalContentColumnAlignment" id="${id_selectGlobalContentColumnAlignment}">
                                    <option value="left">Left</option>
                                    <option value="center" selected>Center</option>
                                    <option value="right">Right</option>
                                  </select>
                                </div>
                              </div>
                              <hr>
                              <br>
                              <div class="row">
                                <div class="col-6">
                                  <label>Select Column:</label>
                                  <select class="select2 form-control selectColumnAlignment"
                                  id="${id_selectColumnAlignment}">
                                    <option value="">Select Column</option>
                                  </select>
                                </div>
                              </div>
                              <hr>
                              <br>
                              <div class="row">
                                <div class="col-4"><strong>Field</strong></div>
                                <div class="col-4"><strong>Header Alignment</strong></div>
                                <div class="col-4"><strong>Content Alignment</strong></div>
                              </div>
                              <br>
                              <div class="row" id="${id_ColumnAlignmentContainer}" style="max-height: 7rem;
                              overflow: auto;">

                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button class="btn btn-primary" type="button" id="${id_applyColumnAlignmentButton}">Apply</button>
                      </div>
                    </div>
          </div>
          `)
          let FormattersModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="${id_FormattersModal}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
            <div class="modal-content" style="width:42rem">
              <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Formatters</span>
                <button type="button" class="close" data-dismiss="modal" id="${id_FormattersModal_close}" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              </div>
              <div class="modal-body formatters_data_body_edit" id="${id_FormattersModal_container}" style="max-height:26rem;overflow:auto">
                <div>
                  <i class="fa-solid fa-plus fa-2x" id="${id_addFormatter}" data-toggle="tooltip" title="Add Formatter"></i>
                </div>
              </div>
              <div class="modal-footer"><button type="button" id="${id_FormattersModal_config}" class="btn btn-primary btn-xs rounded px-2">Apply</button></div>
            </div>
          </div>
          `)
          let freezeModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="freeze_pane_modal_${chartDivId}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
          <div class="modal-content" style="width:20rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Freeze Panes</span>
          <button type="button" class="close" data-dismiss="modal" id="freeze_pane_close_${chartDivId}" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          </div>
          <div class="modal-body conditional_data_body_edit" id="freeze_pane_body_${chartDivId}" style="max-height:26rem;overflow:auto">
          <label style="text-align: center;">Choose from which side :</label>
          <div style="display: flex;flex-direction: row;align-content: space-between;justify-content: space-around;align-items: center;margin-top: 33px;">
          <div class="custom-control custom-checkbox"><input type="checkbox" id="freezeprev_left_${chartDivId}" data-elementID="${chartDivId}" name="leftchart_${element_id}"  class="freezerunCheckbox checkboxinput custom-control-input" value="left"><label for="freezeprev_left_${chartDivId}" class="custom-control-label"> Left </label><br>
          </div>
          <div class="custom-control custom-checkbox">
          <input type="checkbox" id="freezeprev_right_${chartDivId}" data-elementID="${chartDivId}" name="rightchart_${element_id}" class="freezerunCheckbox checkboxinput custom-control-input" value="right">
          <label for="freezeprev_right_${chartDivId}" class="custom-control-label"> Right </label><br></div></div></div>
          <div class="modal-footer">
          <button type="button" id="apply_unfreezepane_${chartDivId}" class="btn btn-primary btn-xs rounded px-2">Unfreeze</button>
          <button type="button" id="apply_freezepane_${chartDivId}" class="btn btn-primary btn-xs rounded px-2">Freeze</button></div>
          </div>
          </div>
          `)
          let gaugeModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="${idGaugeModal}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.value}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">


          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Conditional Formatting</span>
          <button type="button" class="close" data-modal_id="${idGaugeModal}" data-dismiss="modal" onclick="closeGaugeModal.call(this)" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body conditional_data_body_edit"  style="max-height:26rem;">
              <i class="fa fa-plus-square fa-2x" data-toggle="tooltip" data-modal_id="${idGaugeModal}" title="" onclick="addIndCondition.call(this)" style="margin-left:97%;width:100%;color:var(--primary-color);cursor: pointer;" data-tooltip="Add condition"></i>
          </div>
          <div class="modal-footer">
              <button type="button" id="${idGaugeModal}SaveButton" class="btn btn-primary btn-xs rounded px-2">Apply</button>
          </div>
          </div>
          </div>
          `)
          let gaugeModalRange = $(`

          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="${idGaugeModal}Range" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.value}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">


          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Range Based Formatting</span>
          <button type="button" class="close" data-modal_id="${idGaugeModal}Range" data-dismiss="modal" onclick="closeGaugeModal.call(this)" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body conditional_data_body_edit"  style="max-height:26rem;">
              <i class="fa fa-plus-square fa-2x" data-toggle="tooltip" data-modal_id="${idGaugeModal}Range" title="" onclick="addIndConditionRange.call(this)" style="margin-left:97%;width:100%;color:var(--primary-color);cursor: pointer;" data-tooltip="Add condition"></i>
          </div>
          <div class="modal-footer">
              <button type="button" id="${idGaugeModal}RangeSaveButton" class="btn btn-primary btn-xs rounded px-2">Apply</button>
          </div>
          </div>
          </div>
          `)
          let displaySetting = 'inline-block';
          if(disable){
            displaySetting = 'none';
          }
          let orderModal = $(`
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="${idOrderModal}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axisdata}" data-y_axis="${data.y_axisdata}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
          left: 0 ;top : 10px;z-index: 1100">


          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Set preferred order</span>
          <button type="button" class="close" data-modal_id="${idOrderModal}" data-dismiss="modal" onclick="closeOrderModal.call(this)" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body conditional_data_body_edit"  style="max-height:26rem;">
          <div class="card">
            <div class="card-body " style="max-height:26rem; overflow-y:scroll; overflow-x: scroll; max-width:100%;">
              <table id="${idOrderModal}Table" class="display" style="width:100%;overflow-x: scroll;overflow-y:scroll;">
                <thead style="border-bottom:1px solid var(--primary-color)">
                  <tr style="text-align:center">
                    <th>Column value</th>
                    <th>Column order</th>
                  </tr>
                </thead>
                <tbody style="height: 80px;border-bottom:1px solid var(--primary-color);">
                </tbody>
              </table>
            </div>
          </div>
              </div>
          <div class="modal-footer">
              <button type="button" id="${idOrderModal}SaveButton" data-modal_id="${idOrderModal}" class="btn btn-primary btn-xs rounded px-2" onclick="saveOrderModal.call(this)" mappingDict = '${JSON.stringify(data.mappingDict)}'>Save</button>
          </div>
          </div>
          </div>
          `)
          let outerCard = ""
          if (data.plotDict === undefined) {
              if($(".global_header_bgcolor").val() == undefined){
                  header_bgcolor = "#ffffff"
              } else {
                header_bgcolor = $(".global_header_bgcolor").val()
              }
              if ($(".global_header_color").val() == undefined) {
                  header_color = "#000000"
              } else {
                header_color = $(".global_header_color").val()
              }
              header_fontsize = $(".global_header_fontsize").val() + "px !important"
              if($(".global_header_fontsize").val() == undefined){
                  header_fontsize = "16px"
              }

              header_fontweight = $(".global_header_fontweight").val() + " !important"
              if($(".global_header_fontweight").val() == undefined){
                  header_fontweight = 700
              }
              header_fontstyle = $(".global_header_fontstyle").val();
              if(header_fontstyle == undefined){
                  header_fontstyle = "Arial"
              }
              header_alignment = $(".global_header_alignment").val();
              if(header_alignment == undefined){
                  header_alignment = "left"
              }
              label_color = "#000000"
              label_fontsize = "16"

              outerCard = $(`<div class="card col-5 m-4 charts" app_code="${app_code_}" id="${id6}" style="position:absolute;height:560px;padding:0px;overflow:hidden;">
              <div class="card-header" id="${id_header}" style="padding:0.2rem 0.2rem; margin : 0.2 rem;background-color:${header_bgcolor};color:${header_color};">
              <div class="row">
              <div class = "col-md-10"  style = "padding-right: 0.1rem">
              <h5 class"card-title" style="margin-top: 0.5rem; line-height: 1.2;font-size:${header_fontsize};font-weight:${header_fontweight};font-family:${header_fontstyle};text-align:${header_alignment}">&nbsp;<span class="contentEditable">${data.chartHeader}</span></h5>  </div>
              <div class="col-md-1 handle_for_draggable_charts" style="padding-top: 0.5rem;"><i class="fa fa-arrows fa-lg"></i></div>
              <div class = "col-md-1" style = "padding-left:0px; padding-right: 1rem;padding-top: 0.5rem">
                  <div class="dropdown">
                      <i class="fa fa-cog" style="font-size:20px; display:${displaySetting};" data-event="hover" data-id_parent="${id6}" onmouseover="overflowContainer.call(this)"></i>
              <div class="dropdown-content" style="top: 1.5rem; right:0.0rem">
              <div class="row" style="font-size:1rem; padding-left:0.65rem" id="${id8}"> <button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fa fa-edit fa-lg"  id="${id8}" style="font-size:1.3rem;padding-top: 0.1rem;color:var(--primary-color)"></i> Configure</button></div>
              <div class="row" style="font-size:1rem; padding-left:0.65rem" id="${id_tableshow}"> <button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fa fa-table fa-lg" style="font-size:1.3rem;padding-top: 0.5rem;color:var(--primary-color)"></i> <span id="${id_tableicon}" style="padding-left:0.2em;"> Table</span></button></div>
              <div class="row" id="${id5}" style="font-size:1rem; padding-left:1rem"><button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp;<i class="fa fa-times fa-lg"  style="font-size:1.4rem;color:var(--primary-color)"></i>&nbsp; Delete</button></div>
              <div class="row" id="${id16}" style="font-size:1rem; padding-left:1.3rem"><div class="dropdown2-tab"><button data-id="${id17}" data-id_parent="${id6}" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> <i class="fas fa-arrow-alt-circle-right" style="font-size:1.2rem;color:var(--primary-color)"></i>&nbsp; Move </button>  <div class="dropdown2-content-tab" id = "${id17}" style="right: 8rem; top: 0rem; display:none; z-index:1100; min-width: 80px;">
              </div>
              </div>
              </div>
              <div class="row" style="font-size:1rem; padding-left:0.95rem" id="${id_filter_button}"> <button data-id="${id_filter_container}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fas fa-filter"  id="${id_filter_button}" style="padding-top: 0.1rem;color:var(--primary-color)"></i>&nbsp;&nbsp;Filter</button></div>
              </div>
              </div>
              </div>
              </div><div style="height:10px"></div></div>
              <div class="graphcontainerdiv"><div class="card-body-graph" id="${id}"></div>
              </div>
              <div class="tablecontainerdiv">
              <div style="width:100%;">
              <div class="row" style="margin-left:0.5em;">
              <div style="display: inline-block;">
              <button id="${id_tabledownload}" type="button" class="btn btn-primary btn-xs mx-2 mt-2 rounded px-2" style="display:none"><i class="fa fa-download mt-1" style="padding-right:0.5em;"></i>Export</button>
              </div>
              <div style="display: inline-block;">
              <button type="button" data-chart_id="${id}" data-slicer_id="${slicerColumnId}" data-chart_header="${data.chartHeader}" id="${id_table_export}" class="btn btn-primary export_data btn-xs mx-2 mt-2 rounded px-2" style="display:none"><i class="fa fa-download mt-1" style="padding-right:0.5em;"></i>Export underlying data</button>
              </div>
              </div>
              </div>
                  <div class="card-body-table" id="${id_table}" style="display:none"></div>
              </div>
              </div>`)
              filterModal = $(`
              <div class="modal-dialog modalgraphs modal-full-height modal-right" id="${id_filter}" data-chart_id="${id}" data-graph_subtype="${graph_subtype}" data-x_axis="${data.x_axis}" data-y_axis="${data.y_axis}" data-second_column="" data-operation="${plotDict.operation}" data-containerID="${id}" data-table_name="${plotDict.tableName}" role="document" style="display:none;float:right;  position: absolute;
              right: 0 ;top : 10px;z-index: 1050">
              <div class="modal-content" style="width:23rem">
              <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
              <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Filter</span>
              <button type="button" class="close" data-dismiss="modal" id="${id_filter_close}" aria-label="Close">
              <span aria-hidden="true">&times;</span>
              </button>
              </div>
              <div class="modal-body" id="${id_filter_container}" style="max-height:26rem;overflow:auto">
              </div>
              </div>
              </div>
              `)
          }
          else {
              width = data.plotDict.width + "px"
              height = data.plotDict.height + "px"
              styletop = data.plotDict.position.top + "px"
              left = data.plotDict.position.left + "px"
              chartheader = data.plotDict.chartheader
              header_bgcolor = data.plotDict.header_bgcolor
              header_color = data.plotDict.header_color
              label_color = data.plotDict.label_color
              label_fontsize = data.plotDict.label_fontsize + "px !important"
              header_fontsize = data.plotDict.header_fontsize + "px !important"
              header_fontweight = data.plotDict.header_fontweight + " !important"
              header_fontstyle = data.plotDict.header_fontstyle
              header_alignment = data.plotDict.header_alignment
              columnAlignmentSelectedOptions = data.plotDict.columnAlignmentSelectedOptions
              highlightcolumnheaderscolorlist = data.plotDict.highlightcolumnheaderscolorlist
              FormattersConfiguration = data.plotDict.FormattersConfiguration
              if(header_alignment == undefined){
                  header_alignment = "left"
              }
              if(header_bgcolor == undefined){
                  header_bgcolor = "#ffffff"
              }
              if(header_color == undefined){
                  header_color = "#000000"
              }
              if(data.plotDict.header_fontsize == undefined){
                  header_fontsize = "16px"
              }
              if(label_color == undefined){
                label_color = "#000000"
            }
            if(data.plotDict.header_fontsize == undefined){
                label_fontsize = "16px"
            }
              if(data.plotDict.header_fontweight == undefined){
                  header_fontweight = 700
              }
              if(header_fontstyle == undefined){
                  header_fontstyle = "Arial"
              }
              outerCard = $(`<div class="card charts" app_code="${app_code_}" id="${id6}" style="position:absolute;width:${width};height:${height};top:${styletop};left:${left};overflow:hidden;" highlightcolumnheaderscolorlist='${highlightcolumnheaderscolorlist}' data-column_alignment_table='${columnAlignmentSelectedOptions}' data-formatters_config_table='${FormattersConfiguration}'>
              <div class="card-header" id="${id_header}" style="padding: 0.2rem 0.2rem; margin : 0.2 rem;background-color:${header_bgcolor};color:${header_color};">
              <div class="row">
              <div class = "col-md-10"  style = "padding-right: 0.1rem">
              <h5 class"card-title" style="margin-top: 0.5rem; line-height: 1.2;font-size:${header_fontsize};font-weight:${header_fontweight};font-family:${header_fontstyle};text-align:${header_alignment}"><span class="contentEditable">${chartheader}</span></h5>  </div>
              <div class="col-md-1 handle_for_draggable_charts" style="padding-top: 0.5rem;"><i class="fa fa-arrows fa-lg"></i></div>
              <div class = "col-md-1" style = "padding-left:0px;padding-right: 1rem;padding-top: 0.5rem""><div class="dropdown"><i class="fa fa-cog" style="font-size:20px;display:${displaySetting};" data-event="hover" data-id_parent="${id6}" onmouseover="overflowContainer.call(this)"></i>
              <div class="dropdown-content" style="top: 1.5rem; right:0.0rem">
              <div class="row" style="font-size:1rem; padding-left:0.65rem" id="${id8}"> <button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fa fa-edit fa-lg"  id="${id8}" style="font-size:1.3rem;padding-top: 0.1rem;color:var(--primary-color)"></i> Configure</button></div>
              <div class="row" style="font-size:1rem; padding-left:0.65rem" id="${id_tableshow}"> <button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fa fa-table fa-lg" style="font-size:1.3rem;padding-top: 0.5rem;color:var(--primary-color)"></i> <span id="${id_tableicon}" style="padding-left:0.2em;"> Table</span></button></div>
              <div class="row" id="${id5}" style="font-size:1rem; padding-left:1rem"><button data-id="${id7}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp;<i class="fa fa-times fa-lg"  style="font-size:1.4rem;color:var(--primary-color)"></i>&nbsp; Delete</button></div>
              <div class="row" id="${id16}" style="font-size:1rem; padding-left:1.3rem"><div class="dropdown2-tab"><button data-id="${id17}" data-id_parent="${id6}" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> <i class="fas fa-arrow-alt-circle-right" style="font-size:1.2rem;color:var(--primary-color)"></i>&nbsp; Move </button>  <div class="dropdown2-content-tab" id = "${id17}" style="right: 8rem; top: 0rem; display:none; z-index:1100; min-width: 80px;">
              </div>
              </div>
              </div>
              <div class="row" style="font-size:1rem; padding-left:0.95rem" id="${id_filter_button}"> <button data-id="${id_filter_container}" data-id_parent="${id6}" onclick="overflowContainer.call(this)" type="button" style="border-width:0px;padding: 1px 1px;background-color: white;"> &nbsp; <i class="fas fa-filter"  id="${id_filter_button}" style="padding-top: 0.1rem;color:var(--primary-color)"></i>&nbsp;&nbsp;Filter</button></div>
              </div>
              </div>
              </div>
              </div><div style="height:10px"></div></div>
              <div class="graphcontainerdiv"><div class="card-body-graph" id="${id}"></div>
              </div>
              <div class="tablecontainerdiv">
              <div style="width:100%;">
              <div style="display: inline-block;">
              <button id="${id_tabledownload}" type="button" class="btn btn-primary btn-xs mx-2 mt-2 rounded px-2" style="display:none"><i class="fa fa-download mt-1" style="padding-right:0.5em;"></i>Export</button>
              </div>
              <div style="display: inline-block;">
              <button type="button" id="${id_table_export}" data-chart_id="${id}" data-slicer_id="${slicerColumnId}" data-chart_header="${data.chartHeader}" class="btn btn-primary export_data btn-xs mx-2 mt-2 rounded px-2" style="display:none"><i class="fa fa-download mt-1" style="padding-right:0.5em;"></i>Export underlying data</button>
              </div>
              </div>
              <div class="card-body-table" id="${id_table}" style="display:none"></div>
              </div>
              </div>`)
          }

if(["Landscape","Portrait"].includes($('.chartDivSection').attr('data-layout'))) {
  chart_height = 502
  chart_width = 462
}
if(chart_color == undefined){
  chart_color = "#b8860b"
}
if(String($(".global_gradient_color").prop("checked")) === 'true'){
  global_gradient = "yes"
}

// Variables for Different graph centralised
let setheaderFontHTML=`<label style="font-size:1.1rem">Set header font style:</label>
<select class="select2" name="border_style" id="${id_header_fontstyle}" style="font-size:1.1rem" >
<option value="">----------</option>
<option value="Arial">Arial</option>
<option value="Times New Roman">Times New Roman</option>
<option value="Helvetica">Helvetica</option>
<option value="Lucida Console">Lucida Console</option>
<option value="Courier New">Courier New</option>
<option value="Verdana">Verdana</option>
<option value="Trebuchet MS">Trebuchet MS</option>
<option value="auto">auto</option>
<option value="emoji">emoji</option>
<option value="cursive">cursive</option>
<option value="inherit">inherit</option>
<option value="initial">initial</option>
<option value="none">none</option>
<option value="math">math</option>
<option value="monospace">monospace</option>
<option value="serif">serif</option>
<option value="fangsong">fangsong</option>
<option value="fantasy">fantasy</option>
<option value="revert">revert</option>
<option value="FontAwesome">FontAwesome</option>
<option value="system-ui">system-ui</option>
<option value="ui-monospace">ui-monospace</option>
<option value="-webkit-pictograph">-webkit-pictograph</option>
<option value="-webkit-body">-webkit-body</option>
<option value="Trebuchet MS">Trebuchet MS</option>
<option value="Courier New">Courier New</option>
<option value="Andale Mono">Andale Mono</option>
<option value="Trebuchet MS">Trebuchet MS</option>
<option value="Comic Sans MS">Comic Sans MS</option>
</select>`

let borderStylehtml=`<select class="select2" name="border_style" id="${id_header_fontweight}" style="font-size:1.1rem" >
<option value="100">100</option>
<option value="200">200</option>
<option value="300">300</option>
<option value="400">400</option>
<option value="500">500</option>
<option value="600">600</option>
<option value="700">700</option>
<option value="800">800</option>
<option value="900">900</option>
<option value="bold">Bold</option>
<option value="bolder">Bolder</option>
<option value="inherit">Inherit</option>
<option value="lighter">Lighter</option>
<option value="Normal">Normal</option>
</select>`

let optionvaluesHTML =``
let optionvalues_lineHTML =``
optionvalues = fetchOptionsForOperation(data)
if(optionvalues.length > 0){
if(data.graph_subtype == 'Aggregation'){
  optionvaluesHTML = optionvaluesHTML + ` <br>
  <label style="font-size:1.1rem">Change operation for Aggregation:</label>
  <select class="select2" name="change_agg_operation" id="${id_optionvalues}" data-chart-id = "${id6}" tabSlicerId = "${tabSlicerId}" onchange="changeChartOperation.call(this, 'data-operation')" style="font-size:1.1rem" >`
  for (const i in optionvalues) {
    if(data.operation == optionvalues[i]){
      optionvaluesHTML = optionvaluesHTML + ` <option value= '${optionvalues[i]}' selected>${optionvalues[i]}</option>`
    }
    else{
      optionvaluesHTML = optionvaluesHTML + ` <option value= '${optionvalues[i]}' >${optionvalues[i]}</option>`
    }
  }
  optionvaluesHTML = optionvaluesHTML + `  </select>`

}
else{
  optionvaluesHTML = optionvaluesHTML + ` <br>
  <label style="font-size:1.1rem">Change operation for Y Axis:</label>
  <select class="select2" name="change_operation" id="${id_optionvalues}" data-chart-id = "${id6}" tabSlicerId = "${tabSlicerId}" onchange="changeChartOperation.call(this, 'data-operation')" style="font-size:1.1rem" >`
  for (const i in optionvalues) {
    if(data.operation == optionvalues[i].toLowerCase()){
      optionvaluesHTML = optionvaluesHTML + ` <option value= '${optionvalues[i]}' selected>${optionvalues[i]}</option>`
    }
    else{
      optionvaluesHTML = optionvaluesHTML + ` <option value= '${optionvalues[i]}' >${optionvalues[i]}</option>`
    }
  }
  optionvaluesHTML = optionvaluesHTML + `  </select>`
}
}
optionvalues_line = fetchOptionsForOperation(data, plotDict.line_column)
if(optionvalues_line.length > 0){
optionvalues_lineHTML = optionvalues_lineHTML + ` <br>
<label style="font-size:1.1rem">Change operation for Line:</label>
<select class="select2" name="change_operation_line" id="${id_optionvalues_line}" data-chart-id = "${id6}" tabSlicerId = "${tabSlicerId}" onchange="changeChartOperation.call(this, 'data-operation_line')" style="font-size:1.1rem" >`
for (const i in optionvalues_line) {
  if(operation_line == optionvalues_line[i]){
    optionvalues_lineHTML = optionvalues_lineHTML + ` <option value= '${optionvalues_line[i]}' selected>${optionvalues_line[i]}</option>`
  }
  else{
    optionvalues_lineHTML = optionvalues_lineHTML + ` <option value= '${optionvalues_line[i]}' >${optionvalues_line[i]}</option>`
  }
}
optionvalues_lineHTML = optionvalues_lineHTML + `  </select>`
}



//  Define Variables
let global_bg = ''
let shadowColor = ""
let shadowXOffset = ""
let shadowYOffset = ""
let shadowBlur = ""
let shadowThickness = ""
let shadowon = ""
let borderon = ""
let borderColor = ""
let borderStyle = ""
let borderThickness = ""
let x_axis_title = ""
let y_axis_title = ""
let y_axis_start = ""
let y_axis_end = ""
let element_label = ""
let color = ""
let label = ""
let data_labels = ""
let show_gridlines = ""
let plot_bg_color = ""
let grad_color = ""
let legend_x = ""
let legend_y = ""
let legend_position =""
let grid_id="show_gridlines"
let value = "Show Gridlines"
let label_value="show_labels"
let label_text = "Show Labes"
let element_color = ""

if (String(data.plotDict) !== "undefined"){
  shadowColor = data.plotDict.data_shadecolor
  global_bg = data.plotDict.global_bg;
  if(shadowColor === "undefined"){
      shadowColor = "#7A7575"
  }
  shadowXOffset = data.plotDict.data_shadowX
  if(shadowXOffset === "undefined"){
      shadowXOffset = 2
  }
  shadowYOffset = data.plotDict.data_shadowY
  if(shadowYOffset === "undefined"){
      shadowYOffset = 1
  }
  shadowBlur = data.plotDict.data_shadowblurry
  if(shadowBlur === "undefined"){
      shadowBlur = 10
  }
  shadowThickness = data.plotDict.data_shadowThick
  if(shadowThickness === "undefined"){
      shadowThickness = 6
  }
  shadowon = data.plotDict.data_shadowon
  if(shadowon === "undefined"){
      shadowon = "false"
  }
  borderStyle = data.plotDict.data_borderStyle
  if(borderStyle === "undefined"){
      borderStyle="solid"
  }
  borderColor = data.plotDict.data_borderColor
  if(borderColor === "undefined"){
      borderColor = "#000000"
  }
  borderThickness = data.plotDict.data_borderThickness
  if(borderThickness === "undefined"){
      borderThickness = 2
  }
  borderon = data.plotDict.data_borderon
  if(borderon === "undefined"){
      borderon = "false"
  }
  if(img_icon == undefined){
    img_icon = "/static/images/Base_theme/barchart.png"
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'label_fontsize')){
    label_fontsize = data.plotDict.label_fontsize
    if(label_fontsize === "undefined")
    {
     label_fontsize = 16
    }
  }

    if(Object.prototype.hasOwnProperty.call(data.plotDict, 'label_color')){
      label_color = data.plotDict.label_color
      if(label_color === "undefined")
      {
          label_color = "#000000"
      }
    }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_fontsize')){
      header_fontsize = data.plotDict.header_fontsize

      if(header_fontsize === "undefined")
      {
       header_fontsize = 16
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_fontweight')){
      header_fontweight= data.plotDict.config_x_axis_title
      if(header_fontweight === "undefined")
      {
          header_fontweight = 700
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_color')){
      header_color= data.plotDict.header_color
       if(header_color === "undefined")
      {
          header_color = "#000000"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_bgcolor')){
      header_bgcolor= data.plotDict.header_bgcolor
      if(header_bgcolor === "undefined")
      {
          header_bgcolor = "#ffffff"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_fontstyle')){
      header_fontstyle = data.plotDict.header_fontstyle
      if(header_fontstyle === "undefined")
      {
          header_fontstyle = "Arial"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_alignment')){
      header_alignment = data.plotDict.header_alignment
      if(header_alignment === "undefined"){
          header_alignment = "left"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'header_alignment')){
      header_alignment = data.plotDict.header_alignment
      if(header_alignment === "undefined"){
          header_alignment = "left"
      }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_x_axis_title')){
      x_axis_title = data.plotDict.config_x_axis_title
      if(x_axis_title === "undefined"){
          x_axis_title = ""
      }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_y_axis_title')){
      y_axis_title = data.plotDict.config_y_axis_title
      if(y_axis_title === "undefined"){
          y_axis_title = ""
      }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_xrange')){
      y_axis_start = data.plotDict.config_xrange
      if(String(y_axis_start) === "undefined"){
          y_axis_start = ""
      }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_yrange')){
      y_axis_end = data.plotDict.config_yrange
      if(y_axis_end === "undefined"){
                  y_axis_end = ""
              }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'element_label')){
      element_label = data.plotDict.element_label
      if(String(element_label) === "undefined"){
          element_label=""
      }
  }

  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_color')){
      color = data.plotDict.config_color
      if(String(color) === "undefined"){
          color = "#b8860b"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_element_color')){
      element_color = data.plotDict.config_element_color
      if(String(element_color) === "undefined"){
          element_color = "#b8860b"
      }
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_label_placement')){
      label = data.plotDict.config_label_placement
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_labels')){
      data_labels = data.plotDict.config_labels
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'config_gridlines')){
      show_gridlines = data.plotDict.config_gridlines
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'plot_bg_color')){
      plot_bg_color = data.plotDict.plot_bg_color;
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'grad_color')){
      grad_color = data.plotDict.grad_color;
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'data_shadecolor')){
      shadowColor = data.plotDict.data_shadecolor
  }
  if(Object.prototype.hasOwnProperty.call(data.plotDict, 'legend_x')){
      legend_x = data.plotDict.legend_x
      if(String(legend_x) === "undefined" || String(legend_x) === " ")
      {
          legend_x = ""
      }
  }
   if(Object.prototype.hasOwnProperty.call(data.plotDict, 'legend_y')){
      legend_y = data.plotDict.legend_y
      if(String(legend_y) === "undefined" || String(legend_y) === " ")
      {
          legend_y = ""
      }
  }


  if(['Pie chart','Sunburst','Donut_Chart'].includes(graph_subtype)){
      labels = data.plotDict.data[0].textposition
  }

  if(['Donut_Chart'].includes(graph_subtype)){
      labels = data.plotDict.data[0].textposition
      legend_position = data.plotDict.layout.legend.position
  }

}else{
  global_bg = "yes"
  shadowColor = $('.global_shadow_color').val()
  shadowXOffset = $('.global_shadow_x').val()
  shadowYOffset = $('.global_shadow_y').val()
  shadowBlur = $('.global_shadow_blur').val()
  shadowThickness = $('.global_shadow_thickness').val()
  shadowon = String($('.global_shadow').prop("checked"))
  borderon = String($('.global_border').prop("checked"))
  borderColor = $('.global_border_color').val()
  borderStyle = $('.global_border_style').val()
  borderThickness = $('.global_border_thickness').val()
  header_bgcolor =$(".global_header_bgcolor").val();
  header_color = $(".global_header_color").val();
  header_fontsize = $(".global_header_fontsize").val() + "px !important";
  header_fontweight = $(".global_header_fontweight").val() + " !important";
  header_fontstyle = $(".global_header_fontstyle").val();
  header_alignment = $(".global_header_alignment").val()
  if(header_alignment === "undefined")
  {
      header_alignment = "left"
  }
  if(header_bgcolor === "undefined"){
      header_bgcolor= "#ffffff"
  }
  if(header_color === "undefined"){
      header_color= "#000000"
  }
  if(header_fontstyle === "undefined"){
      header_fontstyle= "Arial"
  }
  if(header_fontsize === "undefined"){
      header_bgcolor= 16
  }
  if(header_fontweight === "undefined"){
      header_fontweight= 700
  }if(label_color==="undefined"){
    label_color="#000000"
  }
  if(label_fontsize === "undefined"){
    label_fontsize= 16
}
  x_axis_title = ""
  y_axis_title = ""
  y_axis_start = ""
  y_axis_end = ""
  element_color = "#b8860b"
  element_label = ""
  color = chart_color
  plot_bg_color = chart_bg_color
  grad_color = global_gradient
}

if(String(show_gridlines) === "hide_gridlines")
{
  value = "Hide Gridlines"
  grid_id = "hide_gridlines"
}else{
  grid_id="show_gridlines"
  value = "Show Gridlines"
}

if(String(data_labels) === "hide_labels")
{
  label_text = "Hide Labels"
  label_value = "hide_labels"
}

$(`#${id23}`).prop('checked', false);

let datatype_dict = {}
for (const i in data.datatype_list) {
  datatype_dict[data.datatype_list[i].field_name] =  data.datatype_list[i].data_type
}


// Dictionary Config for Different graph modals
let modalDataConfig ={
graph_subtype:graph_subtype,
x_axis:x_axis,
pivot_report_data:pivot_report_data,
operation:operation,
operation_line:operation_line,
e_id:e_id,
y_axis:y_axis,
second_column:second_column,
tableName:tableName,
operation_n:operation_n,
computed_number:computed_number,
is_title:is_title,
title_value:title_value,
total_y:total_y,
total_L:total_L,
agg_distinct:agg_distinct,
id_axis_order:id_axis_order,
id:id,
id1:id1,
id2:id2,
id3:id3,
id4:id4,
id5:id5,
id6:id6,
id7:id7,
id8:id8,
id9:id9,
id10:id10,
id11:id11,
id12:id12,
id13:id13,
id14:id14,
id15:id15,
id16:id16,
id17:id17,
id18:id18,
id19:id19,
id20:id20,
id21:id21,
id22:id22,
id23:id23,
id24:id24,
id25:id25,
id26:id26,
id27:id27,
id_configure_pivot_charttype:id_configure_pivot_charttype,
id_configure_pivot_operation:id_configure_pivot_operation,
idOrderModal:idOrderModal,
idGaugeModal:idGaugeModal,
id_agg_title:id_agg_title,
id_labels:id_labels,
id_table:id_table,
id_tableshow:id_tableshow,
id_tabledownload:id_tabledownload,
id_table_export:id_table_export,
id_tableicon:id_tableicon,
id_filter:id_filter,
id_filter_button:id_filter_button,
id_filter_close:id_filter_close,
id_filter_container:id_filter_container,
id_showlabel:id_showlabel,
id_position_legends:id_position_legends,
id_label_placement:id_label_placement,
id_shadow:id_shadow,
id_shadow_color:id_shadow_color,
id_xshadow:id_xshadow,
id_yshadow:id_yshadow,
id_blurshadow:id_blurshadow,
id_shadow_thickness:id_shadow_thickness,
id_border:id_border,
id_border_color:id_border_color,
id_border_thickness:id_border_thickness,
id_border_style:id_border_style,
id_header :id_header,
id_body:id_body,
id_header_bgcolor:id_header_bgcolor,
id_header_color:id_header_color,
id_header_fontsize:id_header_fontsize,
id_label_color:id_label_color,
id_label_fontsize:id_label_fontsize,
id_header_fontweight:id_header_fontweight,
id_header_fontstyle:id_header_fontstyle,
id_header_alignment:id_header_alignment,
id_condition_modal_edit:id_condition_modal_edit,
id_freeze_pane:id_freeze_pane,
id_condition:id_condition,
id_condition_container:id_condition_container,
id_FormattersModal_container:id_FormattersModal_container,
id_FormattersModal_close:id_FormattersModal_close,
id_addFormatter:id_addFormatter,
id_FormattersModal:id_FormattersModal,
id_Formatters_edit:id_Formatters_edit,
id_FormattersModal_config : id_FormattersModal_config,
id_condition_close:id_condition_close,
id_change_conditional_config:id_change_conditional_config,
id_change_freeze_config:id_change_freeze_config,
id_img_icon:id_img_icon,
id_optionvalues : id_optionvalues,
header_bgcolor :header_bgcolor,
header_color:header_color,
header_fontsize:header_fontsize,
label_color:label_color,
label_fontsize:label_fontsize,
header_fontweight:header_fontweight,
header_fontstyle:header_fontstyle,
header_alignment:header_alignment,
chart_height:chart_height,
chart_width:chart_width,
chart_bg_color:chart_bg_color,
chart_color:chart_color,
global_gradient:global_gradient,
borderStylehtml:borderStylehtml,
setheaderFontHTML:setheaderFontHTML,
x_axis_title:x_axis_title,
y_axis_title:y_axis_title,
y_axis_start:y_axis_start,
y_axis_end:y_axis_end,
element_color:element_color,
element_label:element_label,
color:color,
plot_bg_color:plot_bg_color,
grad_color : grad_color,
label_text:label_text,
label_value:label_value,
global_bg: global_bg,
shadowColor:shadowColor,
shadowXOffset:shadowXOffset,
shadowYOffset:shadowYOffset,
shadowBlur:shadowBlur,
shadowThickness:shadowThickness,
shadowon: shadowon,
borderon:borderon,
borderColor:borderColor,
borderStyle:borderStyle,
borderThickness:borderThickness,
label:label,
data_labels:data_labels,
show_gridlines:show_gridlines,
legend_x:legend_x,
legend_y:legend_y,
legend_position:legend_position,
grid_id:grid_id,
value:value,
mappingDict:data.mappingDict,
datatype_dict:datatype_dict,
optionvaluesHTML:optionvaluesHTML,
optionvalues_lineHTML:optionvalues_lineHTML,
tabSlicerId:tabSlicerId,
x_axisdata:data.x_axisdata,
y_axisdata:data.y_axisdata,
id_tableColunm_Rearrange:id_tableColunm_Rearrange,
id_tableColunm_Rearrange_ul:id_tableColunm_Rearrange_ul,
id_tableColunm_Rearrange_checkbox:id_tableColunm_Rearrange_checkbox,
id_tableColunm_Rearrange_div:id_tableColunm_Rearrange_div,
id_nestedtableColunm_Rearrange:id_nestedtableColunm_Rearrange,
id_nestedtableColunm_Rearrange_ul:id_nestedtableColunm_Rearrange_ul,
id_nestedtableColunm_Rearrange_checkbox:id_nestedtableColunm_Rearrange_checkbox,
id_nestedtableColunm_Rearrange_div:id_nestedtableColunm_Rearrange_div,
id_columnAlignmentModal:id_columnAlignmentModal,
id_selectGlobalHeaderColumnAlignment : id_selectGlobalHeaderColumnAlignment,
id_selectGlobalContentColumnAlignment : id_selectGlobalContentColumnAlignment,
id_selectColumnAlignment : id_selectColumnAlignment,
id_ColumnAlignmentContainer : id_ColumnAlignmentContainer,
id_applyColumnAlignmentButton : id_applyColumnAlignmentButton,
id_closeColumnAlignmentButton : id_closeColumnAlignmentButton,
id_columnAlignmentModal_edit:id_columnAlignmentModal_edit,
id_HighlightColHeaders:id_HighlightColHeaders,
id_HighlightColHeaders_checkbox:id_HighlightColHeaders_checkbox,
id_HighlightColHeaders_div:id_HighlightColHeaders_div,
id_HighlightColHeaders_ul:id_HighlightColHeaders_ul,
id_saveBtn_HighlightColHeaders:id_saveBtn_HighlightColHeaders,
}
//Configuration modal creation
if (String(graph_subtype) === 'Image') {
  let name = ''
  let image_name = ''
  var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
  if (data.plotDict === undefined) {
      outerCard = $(`
                  <div class="image_body charts" data-xaxis="${data.x_axis}" data-yaxis="${data.y_axis}" data-table_name="${tableName}" id="${id6}" style="box-shadow:none;margin:0em !important;cursor: move;position:absolute;width: 484px;height: 510px;padding:0px;overflow:hidden;">
                      <div class="card-header" id="${id_header}" style="display:none;padding:0.2rem 0.2rem; margin : 0.2 rem;background-color:${header_bgcolor};color:${header_color};">
                      <h5 class"card-title" style="margin-top: 0.5rem; line-height: 1.2;font-size:${header_fontsize};font-weight:${header_fontweight};font-family:${header_fontstyle};text-align:${header_alignment}"><span class="contentEditable">${chartheader}</span></h5>
                      <div class="col-md-1 handle_for_draggable_charts" style="padding-top: 0.5rem;"><i class="fa fa-arrows fa-lg"></i>
                      </div>
                  </div>
                  </div>
      `)
      outerCard.appendTo(`#${plotDict.tabNameID}`)
      name = data.e_id +  '_' + data.x_axis
      image_name = data.line_column
      $(`#${id6}`).append(`<img class=" handle_for_draggable_charts" style="width:100%;height:100%" src="data:image/png;base64,${data.line_column}" />`)
      outermodalCard.appendTo(`#${plotDict.tabNameID}`)
  }
  else{
      outerCard = $(`
              <div class="charts image_body handle_for_draggable_charts" data-xaxis="${data.x_axis}" data-yaxis="${data.y_axis}" data-table_name="${tableName}" id="${id6}" style="margin:0em !important;cursor:move;position:absolute;width:${width};height:${height};top:${styletop};left:${left};overflow:hidden;padding:0px;">
              <div class="card-header" id="${id_header}" style="display:none;padding:0.2rem 0.2rem; margin : 0.2 rem;background-color:${header_bgcolor};color:${header_color};">
                      <h5 class"card-title" style="margin-top: 0.5rem; line-height: 1.2;font-size:${header_fontsize};font-weight:${header_fontweight};font-family:${header_fontstyle};text-align:${header_alignment}"><span class="contentEditable">${chartheader}</span></h5>
                      <div class="col-md-1 handle_for_draggable_charts" style="padding-top: 0.5rem;"><i class="fa fa-arrows fa-lg"></i>
                      </div>
                  </div>
              </div>
      `)
      outerCard.appendTo(`#${data.plotDict.tab_id}`)
      name = data.plotDict.operation +  '_' + data.x_axis
      image_name = '/static/media/uploaded_images_plotly/' + data.second_column + '/' + name
      $(`#${id6}`).append(`<img class="handle_for_draggable_charts" style="width:100%;height:100%" src="data:image/png;base64,${data.line_column}" />`)
      outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
  }

  $(`#${id6}`).resizable();
  $(`#${id6}`).draggable();

  if(String(global_bg) === "yes")
  {
      $(`#${id23}`).prop('checked', true);
  }

  document.getElementById(id5).onclick = function () {
      name = $(this).attr("data-e_id") + "_" +$(this).attr("data-x_axis")
      var folder_name = $(this).attr("data-second_column")

      $.ajax({
          url: `/users/${urlPath}/delete_image/`,
          data: {
              'name': name,
              'folder_name':folder_name,
              'operation': 'remove_image',
          },
          type: "POST",
          dataType: "json",
          success: function (data) {
              document.getElementById(id6).remove();
              $(`#${id7}`).remove()
          },
          error: function () {
            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
          }
      })

      $('.charts').each(function () {

          $(this).css('opacity', '')
      })
  };

  // Configure modal close
  document.getElementById(id10).onclick = function () {
      let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
      resetOpacity(modaldiv,typeClass='charts')
  };

  $(`#${id6}`).on('dblclick', function() {
      var displayvalue = document.getElementById(id7).style.display
      var modalid = document.getElementById(id6)
      var offset = (parseFloat(modalid.offsetTop - 10)) + `px`;
      var offsetvalue = document.getElementById(id7).style.top
      document.getElementById(id7).style.top = offset
      document.getElementById(id7).style.display = "block";
      $('.charts').each(function () {

          if ($(this).attr('id') != `${id6}`) {

              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                  $(this).css('opacity', '0.5')
              }
          }
      })
      $(`#${id16}`).empty()
      $(`#${id16}`).append(`<option class="analysisDashboardmove" data-plotClass="${id6}" data-modalClass="${id7}" data-filterClass="${id_filter}" data-conditionalClass="${id_condition}" data-tab="" data-tab_ct="" disabled selected>-----------------------</option>`);
      $('.tabname').each(function () {
          tabrowname = ($(this).attr("data-tab_ct"))
          tablistname = $(this)[0].innerHTML
          $(`#${id16}`).append(`<option class="analysisDashboardmove" data-plotClass="${id6}" data-modalClass="${id7}" data-filterClass="${id_filter}" data-conditionalClass="${id_condition}" data-gaugemodal="${idGaugeModal}" data-tab="${tabrowname}" data-tab_ct="${tabrowname}">${tablistname}</option>`);
      })
  });

  $(`#${id16}`).change(function(){
      var element = $(`#${id16} :selected`).attr("data-tab_ct")
      var outercardappend = $(`#${id6}`)
      var modalClassName = $(`#${id16} :selected`).attr('data-modalClass')
      var modalcardappend = $(`#${modalClassName}`)
      $(`#${id6}`).draggable("destroy")
      $(`#${id6}`).css('position',"absolute")
      $(`#${id6}`).draggable({ containment: "parent" })
      outercardappend.appendTo(`#${element}`)
      modalcardappend.appendTo(`#${element}`)
      var modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
      document.getElementById(modaldiv).style.display = "none"
      $('.charts').each(function () {
          $(this).css('opacity', '')
      })
  })

  // var div_id = document.getElementById(id)
  $(`#${id_border_style}`).val(borderStyle)
  setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
  setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
  var div = document.getElementById(id6)
  var shadowCheckBox = document.getElementById(id_shadow)
  var borderCheckBox = document.getElementById(id_border)
  if (shadowon == "true"){
      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
      shadowCheckBox.checked=true;
  }else {
      let imtype = (data.x_axis).split(".");
      let imgtype = imtype[imtype.length - 1];
      if(imgtype == "ico"){
          div.style.boxShadow = "none"
      }
      else{
          div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
      }
      shadowCheckBox.checked=false;
      }

  if (borderon == "true"){
      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
      borderCheckBox.checked=true;
  }else {
      div.style.border = "none";
      borderCheckBox.checked=false;
  }
  $(`#${id6}`).attr("data-shadecolor", shadowColor)
  $(`#${id6}`).attr("data-borderStyle", borderStyle)
  $(`#${id6}`).attr("data-borderThickness", borderThickness)
  $(`#${id6}`).attr("data-borderColor", borderColor)
  $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
  $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
  $(`#${id23}`).click(function() {
      $(`#${id6}`).attr("data-globalbg", "no")
      if($(this).prop("checked")){
          $(`#${id6}`).attr("data-globalbg", "yes")
          let main_div = document.getElementById(id6)
          let checkBox = $('.global_shadow').prop("checked")
          let checkBox_border =$('.global_border').prop("checked")
          let shadowColor = $('.global_shadow_color').val()
          let shadowXOffset = $('.global_shadow_x').val()
          let shadowYOffset = $('.global_shadow_y').val()
          let shadowBlur = $('.global_shadow_blur').val()
          let shadowThickness = $('.global_shadow_thickness').val()
          change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
          let borderColor = $('.global_border_color').val()
          let borderThickness = $('.global_border_thickness').val()
          let borderStyle = $('.global_border_style').val()
          change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
          $(`#${id_shadow}`).prop("checked", checkBox);
          $(`#${id_border}`).prop("checked", checkBox_border);
          $(`#${id_shadow_color}`).val(shadowColor);
          $(`#${id_xshadow}`).val(shadowXOffset)
          $(`#${id_yshadow}`).val(shadowYOffset)
          $(`#${id_blurshadow}`).val(shadowBlur)
          $(`#${id_shadow_thickness}`).val(shadowThickness)
          $(`#${id_border_color}`).val(borderColor)
          $(`#${id_border_thickness}`).val(borderThickness)
          $(`#${id_border_style}`).val(borderStyle ).trigger("change")
          $(`#${id_border}`).val(checkBox_border)
          $(`#${id_shadow}`).val(checkBox)
          $(`#${id6}`).attr("data-shadecolor", shadowColor)
          $(`#${id6}`).attr("data-borderStyle", borderStyle)
          $(`#${id6}`).attr("data-borderThickness", borderThickness)
          $(`#${id6}`).attr("data-borderColor", borderColor)
          $(`#${id6}`).attr("data-borderon", checkBox_border)
          $(`#${id6}`).attr("data-shadowon", checkBox)
          $(`#${id6}`).attr("data-shadowThick", shadowThickness)
          $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
          $(`#${id6}`).attr("data-shadowY", shadowYOffset)
          $(`#${id6}`).attr("data-shadowX", shadowXOffset)
      }
      });
      if($(`#${id23}`).prop("checked"))
      {
      $(`#${id6}`).attr("data-globalbg", "yes")
      }
      else{
      $(`#${id6}`).attr("data-globalbg", "no")
      }
      $(".global_applyButton").click(function(){
      if($(`#${id23}`).prop("checked")){
      let main_div = document.getElementById(id6)
      let checkBox = $('.global_shadow').prop("checked")
      let checkBox_border =$('.global_border').prop("checked")
      let shadowColor = $('.global_shadow_color').val()
      let shadowXOffset = $('.global_shadow_x').val()
      let shadowYOffset = $('.global_shadow_y').val()
      let shadowBlur = $('.global_shadow_blur').val()
      let shadowThickness = $('.global_shadow_thickness').val()
      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
      let borderColor = $('.global_border_color').val()
      let borderThickness = $('.global_border_thickness').val()
      let borderStyle = $('.global_border_style').val()
      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
      $(`#${id_shadow}`).prop("checked", checkBox);
      $(`#${id_border}`).prop("checked", checkBox_border);
      $(`#${id_shadow_color}`).val(shadowColor);
      $(`#${id_xshadow}`).val(shadowXOffset)
      $(`#${id_yshadow}`).val(shadowYOffset)
      $(`#${id_blurshadow}`).val(shadowBlur)
      $(`#${id_shadow_thickness}`).val(shadowThickness)
      $(`#${id_border_color}`).val(borderColor)
      $(`#${id_border_thickness}`).val(borderThickness)
      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
      $(`#${id_border}`).val(checkBox_border)
      $(`#${id_shadow}`).val(checkBox)
      $(`#${id6}`).attr("data-shadecolor", shadowColor)
      $(`#${id6}`).attr("data-borderStyle", borderStyle)
      $(`#${id6}`).attr("data-borderThickness", borderThickness)
      $(`#${id6}`).attr("data-borderColor", borderColor)
      $(`#${id6}`).attr("data-borderon", checkBox_border)
      $(`#${id6}`).attr("data-shadowon", checkBox)
      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
      $(`#${id6}`).attr("data-shadowX", shadowXOffset)
      }
  });
}
if (String(graph_subtype) === 'Vertical_Bar') {
  var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (String(data.plotDict) === "undefined") {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  let x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  if(String(global_gradient) === "yes"){
                      color = chart_color
                                  var colordata = [];
                                  var colorlength = data.x_axisdata.length
                                  var backRGB = $(`#${id1}`).val()
                                  colordata.push(backRGB);
                                  for (let i = 0; i < colorlength-1; i++) {
                                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                                      var r = parseInt(previousHex[1], 16) * 0.8;
                                      var g = parseInt(previousHex[2], 16) * 0.8;
                                      var b = parseInt(previousHex[3], 16) * 0.8;

                                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                      colordata.push(newHex)
                                  }

                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(chart_color);
                      }
                  }


                  var tabledata = []
                  var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}}</b>`]

                  tabledata.push(data.x_axisdata)
                  tabledata.push(data.y_axisdata)

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'bar',
                      marker: {
                          color: colordata
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)


                  var layout = {
                      margin: { l: 40, r: 0, b: 10, t: 20, pad: 4 },
                      'height':chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis , data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis , data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize

                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      autosize: true
                  }

                  var trace2 = {
                      domain: { x: [0, 1], y: [0, 1] },
                      header: {
                          align: "center",
                          values: tableheaders,
                          font: { family: "Arial", size: 13, color: ["white"] },
                          fill: { color: 'var(--primary-color)' }
                      },
                      cells: {
                          align: "center",
                          values: tabledata,
                          font: { family: "Arial", size: 13, color: ["black"] }
                      },
                      type: 'table'
                  };
                  var layout2 = {
                      margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
                  }
                  var datatable = [trace2]
              }else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                var dataplot = data.plotDict.data
                  var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                  var tabledata = []
                  tabledata.push(data.x_axisdata)
                  tabledata.push(data.y_axisdata)


                  var trace2 = {
                      domain: { x: [0, 1], y: [0, 1] },
                      header: {
                          align: "center",
                          values: tableheaders,
                          font: { family: "Arial", size: 13, color: ["white"] },
                          fill: { color: 'var(--primary-color)' }
                      },
                      cells: {
                          align: "center",
                          values: tabledata,
                          font: { family: "Arial", size: 13, color: ["black"] }
                      },
                      type: 'table'
                  };
                  var layout2 = {
                      margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
                  }
                  var datatable = [trace2]
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  delete dataplot[0]["selectedpoints"]
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var layout = data.plotDict.layout
                  if(dataplot == 'string') dataplot=JSON.parse(dataplot)

                  var colorlength = data.x_axisdata.length
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      var color_old = dataplot[0].marker.color[0]
                  }
                  else
                  {
                      var color_old = dataplot[0].marker.color
                  }

                  if(color_old == undefined){
                      color_old = color
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                      var colordata = [];
                      if(grad_color == "yes"){
                          color = color
                          var backRGB = $(`#${id1}`).val()
                          colordata.push(backRGB);
                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }

                      }
                      else{
                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(color);
                          }
                      }
                      dataplot[0].marker = {color:colordata}
                  }
              }
              if(String(global_bg) === "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }
              if(String(grad_color) === "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }else{
                  $(`#${id24}`).prop('checked', false);
              }
              $(`#${id_label_placement}`).val(label)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)

              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype, 'tab_id': tab_id })
              var update = { text: [data.y_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              var div_id = document.getElementById(id)
              $(`#${id_border_style}`).val(borderStyle)

              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
              }

             // Set Header Properties
             setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_table_export}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id_table).style.display = "block"

                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              document.getElementById(id_tabledownload).onclick = function () {
                  let csvData = [];
                  let header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      let new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }

                      let csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      let blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      let link = document.createElement("a");
                      let url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

            gradientColorApply(id1,id6,id24,tester,colorlength =dataplot[0].x.length)


              $(`#${id23}`).click(function() {
                  let plotbg =''
                  let GradientColor =''
                  let GradientColor1 = ''
                  let main_div = ''
                  let h_bgcolor = ''
                  let h_color = ''
                  let h_font_size = ''
                  let h_font_weight =''
                  let h_font_style = ''
                  let alignment = ''
                  let checkBox = ''
                  let checkBox_border =''
                  let shadowColor = ''
                  let shadowXOffset = ''
                  let shadowYOffset = ''
                  let shadowBlur = ''
                  let shadowThickness = ''
                  let borderColor = ''
                  let borderThickness = ''
                  let borderStyle = ''
                  let colorList1 = [];
                  let colorlength = ''
                  let div
                  if(String($(this).prop("checked")) === 'true'){
                      plotbg = $('.myDiv').css("background-color");
                      GradientColor = $(".inner-div").css("background-color");
                      if(String($(".global_gradient_color").prop("checked")) === 'true'){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                  div = document.getElementById(id_header)
                  main_div = document.getElementById(id6)
                  h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                  h_font_style = $('.global_header_fontstyle').val()
                  change_header_fontstyle(main_div,div,h_font_style)
                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                  alignment = $('.global_header_alignment').val()
                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                  change_header_alignment(main_div,div,alignment)
                  $(`#${id6}`).attr("data-header_alignment", alignment )
                  checkBox = $('.global_shadow').prop("checked")
                  checkBox_border =$('.global_border').prop("checked")
                  shadowColor = $('.global_shadow_color').val()
                  shadowXOffset = $('.global_shadow_x').val()
                  shadowYOffset = $('.global_shadow_y').val()
                  shadowBlur = $('.global_shadow_blur').val()
                  shadowThickness = $('.global_shadow_thickness').val()
                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                  borderColor = $('.global_border_color').val()
                  borderThickness = $('.global_border_thickness').val()
                  borderStyle = $('.global_border_style').val()
                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                  $(`#${id_shadow}`).prop("checked", checkBox);
                  $(`#${id_border}`).prop("checked", checkBox_border);
                  $(`#${id_shadow_color}`).val(shadowColor);
                  $(`#${id_xshadow}`).val(shadowXOffset)
                  $(`#${id_yshadow}`).val(shadowYOffset)
                  $(`#${id_blurshadow}`).val(shadowBlur)
                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                  $(`#${id_border_color}`).val(borderColor)
                  $(`#${id_border_thickness}`).val(borderThickness)
                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                  $(`#${id_border}`).val(checkBox_border)
                  $(`#${id_shadow}`).val(checkBox)
                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                  $(`#${id6}`).attr("data-borderColor", borderColor)
                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                  $(`#${id6}`).attr("data-shadowon", checkBox)
                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                  if(data.plotDict != undefined){
                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                  }
                }else{
                        plotbg = $(`#${id22}`).val();
                        GradientColor1 = $(`#${id1}`).val();
                        $(`#${id6}`).attr("data-globalbg", "no")
                        GradientColor = hex2rgb(GradientColor1)
                        plotbg = hex2rgb(plotbg)
                    }

                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");
                  prevDiv = $(this);
                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  colorList1 = [];
                  colorlength = dataplot[0].x.length
                  let rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  let hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  let r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  let g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  let b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  let col= "#" + r1 +g1 + b1;
                  let backRGB2 = col;
                  rgb_plot = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb_plot[1]) ? "00" : hexDigits[(rgb_plot[1] - rgb_plot[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb_plot[2]) ? "00" : hexDigits[(rgb_plot[2] - rgb_plot[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb_plot[3]) ? "00" : hexDigits[(rgb_plot[3] - rgb_plot[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  plot_col= "#" + r1 +g1 + b1;
                  $(`#${id1}`).val(col)
                  $(`#${id22}`).val(plot_col)
                  $(`#${id6}`).attr("data-color", col)
                  $(`#${id6}`).attr("data-config_color", col)
                  $(`#${id6}`).attr("data-bgcolor", plot_col)
                  colorList1.push(backRGB2)
                  if($(`#${id24}`).prop("checked")){
                      for (let i = 0; i < colorlength - 1; i++) {
                          let previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          let r = parseInt(previousHex[1], 16) * 0.8;
                          let g = parseInt(previousHex[2], 16) * 0.8;
                          let b = parseInt(previousHex[3], 16) * 0.8;
                          let newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {
                          colorList1.push(backRGB2)
                          }
                  }
                  let update = { 'marker': { color: colorList1} };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                            });
                            if($(`#${id23}`).prop("checked"))
                            {
                              $(`#${id6}`).attr("data-globalbg", "yes")
                            }
                            else{
                              $(`#${id6}`).attr("data-globalbg", "no")
                            }

                            if($(`#${id24}`).prop("checked"))
                            {
                              $(`#${id6}`).attr("data-grad_color", "yes")
                            }
                            else{
                              $(`#${id6}`).attr("data-grad_color", "no")
                            }
                              plotbg = $(".myDiv").css("background-color");
                              var GradientColor = $(".inner-div").css("background-color");
                              $(`#${id6}`).attr("data-global_bg_color", plotbg)
                              $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                          $(".global_applyButton").click(function(){

                              plotbg = $('.myDiv').css("background-color");
                              var GradientColor = $(".inner-div").css("background-color");
                              $(`#${id6}`).attr("data-global_bg_color", plotbg)
                              $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                              if($(`#${id23}`).prop("checked")){
                                  plotbg = $('.myDiv').css("background-color");

                                  var GradientColor = $(".inner-div").css("background-color");
                                  $(prevDiv).css("border", "0px");

                                  $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");
                                  prevDiv = $('.myDiv');

                                  if($(".global_gradient_color").prop("checked")){
                                      $(`#${id24}`).prop('checked', true)
                                      $(`#${id6}`).attr("data-grad_color", "yes")
                                      layout["plot_bgcolor"]= plotbg
                                      layout["paper_bgcolor"]= plotbg
                                      var colorList1 = [];
                                      var colorlength =  dataplot[0].x.length


                                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                      col= "#" + r1 +g1 + b1;
                                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                      bg_col= "#" + r1 +g1 + b1;
                                      $(`#${id1}`).val(col)
                                      $(`#${id22}`).val(bg_col)
                                      $(`#${id6}`).attr("data-color", col)
                                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                                      var backRGB2 = col;
                                      var backRGB2 = col;



                                      colorList1.push(backRGB2)
                                      for (let i = 0; i < colorlength - 1; i++) {
                                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                                          var r = parseInt(previousHex[1], 16) * 0.8;
                                          var g = parseInt(previousHex[2], 16) * 0.8;
                                          var b = parseInt(previousHex[3], 16) * 0.8;


                                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                          colorList1.push(newHex)
                                      }


                                      var update = { 'marker': { color: colorList1} };


                                      Plotly.restyle(tester, update)
                                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                                      Plotly.relayout(tester, layout)
                                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))


                                  }
                                  else{
                                      $(`#${id24}`).prop('checked', false)
                                      $(`#${id6}`).attr("data-grad_color", "no")
                                      layout["plot_bgcolor"]= plotbg
                                      layout["paper_bgcolor"]= plotbg
                                      var colorList1 = [];
                                      var colorlength =  dataplot[0].x.length


                                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                      col= "#" + r1 +g1 + b1;
                                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                      bg_col= "#" + r1 +g1 + b1;
                                      $(`#${id1}`).val(col)
                                      $(`#${id22}`).val(bg_col)
                                      var backRGB2 = col;
                                      var backRGB2 = col;
                                      $(`#${id6}`).attr("data-color", col)

                                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                                      colorList1.push(backRGB2)
                                      var colordata2 = [];

                                      for (let i = 0; i < colorlength; i++) {
                                          colordata2.push(backRGB2);
                                      }
                                      var update = { 'marker': { color: colordata2 } };
                                      Plotly.restyle(tester, update)
                                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                                      Plotly.relayout(tester, layout)
                                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                                  }
                                  var div = document.getElementById(id_header)
                                  var main_div = document.getElementById(id6)
                                  var h_bgcolor = $('.global_header_bgcolor').val()
                                  change_header_bgcolor(main_div,div,h_bgcolor)
                                  var h_color = $('.global_header_color').val()
                                  change_header_color(main_div,div,h_color)
                                  var h_font_size = $('.global_header_fontsize').val()
                                  change_header_fontsize(main_div,div,h_font_size)
                                  var h_font_weight = $('.global_header_fontweight').val()
                                  change_header_fontweight(main_div,div,h_font_weight)
                                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                                  $(`#${id_header_color}`).val(h_color)
                                  $(`#${id_header_fontsize}`).val(h_font_size)
                                  $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                              }

                              $(`#${id6}`).attr("data-header_color", h_color )
                              $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                              $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                              $(`#${id6}`).attr("data-header_fontweight", h_font_weight )

                          });


                          document.getElementById(id22).onchange = function () {
                              var colorlength =  dataplot[0].x.length
                              var colordata2 = [];
                              var backRGB1 = this.value;
                              for (let i = 0; i < colorlength; i++) {
                                  colordata2.push(backRGB1);
                              }
                              layout["plot_bgcolor"]= backRGB1
                              layout["paper_bgcolor"]= backRGB1
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              $(`#${id6}`).attr("data-bgcolor", backRGB1)

                          }
                          color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              $(`#${id6}`).attr("data-config_color", color)
                          var bgcolor = $(`#${id22}`).val()

                          $(`#${id6}`).attr("data-bgcolor", bgcolor)
                          document.getElementById(id_label_placement).onchange = function () {
                              var selectValue = document.getElementById(id_label_placement).value
                              if(selectValue == "inside"){
                                  var update = {
                                      textinfo:'',
                                      textposition:'inside',
                                  };
                                  Plotly.restyle(tester, update,0)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              }
                              if(selectValue == "outside"){
                                  var update = {
                                      textposition:'outside',
                                  };
                                  Plotly.restyle(tester, update,0)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              }
                              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
                          }
                          var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)

                          document.getElementById(id1).onchange = function () {

                              if($(`#${id24}`).prop("checked"))
                              {
                                  color = $(this).val()
                                  var colordata2 = [];
                                  var colorlength =  dataplot[0].x.length
                                  var backRGB = $(`#${id1}`).val()
                                  colordata2.push(backRGB);
                                  for (let i = 0; i < colorlength-1; i++) {
                                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                                      var r = parseInt(previousHex[1], 16) * 0.8;
                                      var g = parseInt(previousHex[2], 16) * 0.8;
                                      var b = parseInt(previousHex[3], 16) * 0.8;

                                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                      colordata2.push(newHex)
                                  }
                                  var update = { 'marker': { color: colordata2 } };
                                  Plotly.restyle(tester, update)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              }

                              else{

                                  var colorlength =  dataplot[0].x.length
                                  var colordata2 = [];
                                  var backRGB = $(this).val();
                                  for (let i = 0; i < colorlength; i++) {
                                      colordata2.push(backRGB);
                                  }
                                  var update = { 'marker': { color: colordata2 } };
                                  Plotly.restyle(tester, update)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              }
                              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)
                          }

                          color = $(`#${id1}`).val()
                          $(`#${id6}`).attr("data-color", color)
                          var config_color = $(`#${id1}`).val()
                          $(`#${id6}`).attr("data-config_color", config_color)

                          document.getElementById(id2).onchange = function () {
                              var textbox2length = document.getElementById(id3).value.length;
                              var textbox2value = document.getElementById(id3).value;
                              var textbox1value = document.getElementById(id2).value;
                               y_axis_end = tester.layout.yaxis.range[1]
                              var gridlines_value = tester.layout.yaxis.showgrid
                              y_axis_title = tester.layout.yaxis.title.text
                              let layout={}
                              if (textbox2length == 0) {
                                  layout = {
                                      yaxis: {
                                          range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              }
                              else {
                                  layout = {
                                      yaxis: {
                                          range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              };
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_xrange = $(`#${id2}`).val()
                      $(`#${id6}`).attr("data-config_xrange", config_xrange)

                          }
                          document.getElementById(id3).onchange = function () {
                              var textbox1length = document.getElementById(id2).value.length;
                              var textbox2value = document.getElementById(id3).value;
                              var textbox1value = document.getElementById(id2).value;
                              y_axis_start = tester.layout.yaxis.range[0]
                              var gridlines_value = tester.layout.yaxis.showgrid
                              y_axis_title = tester.layout.yaxis.title.text


                              if (textbox1length == 0) {
                                  var layout = {
                                      yaxis: {
                                          range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              }
                              else {
                                  var layout = {
                                      yaxis: {
                                          range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              };
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
                          }
                          var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)

                        //  Change xaxis title

                          document.getElementById(id11).onchange = function () {
                              var xaxistitlevalue = document.getElementById(id11).value;
                              var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                              var x_axis_categoryorder = data_layout.xaxis.categoryorder
                              var x_axis_categoryarray = data_layout.xaxis.categoryarray
                              var gridlines_value = tester.layout.yaxis.showgrid




                              var layout = {
                                  xaxis: {
                                      showgrid: gridlines_value, automargin: true, title: {
                                          standoff: 20,
                                          text: xaxistitlevalue, font: {
                                              family: "Arial"
                                          }
                                      },
                                      categoryorder:x_axis_categoryorder,
                                      categoryarray:x_axis_categoryarray
                                  }


                              }
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_x_axis_title = $(`#${id11}`).val()
                              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)


                          }

                          document.getElementById(id12).onchange = function () {
                              var yaxistitlevalue = document.getElementById(id12).value;
                              y_axis_start = tester.layout.yaxis.range[0]
                               y_axis_end = tester.layout.yaxis.range[1]

                              var gridlines_value = tester.layout.yaxis.showgrid




                              var layout = {
                                  yaxis: {
                                      range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                          standoff: 20,
                                          text: yaxistitlevalue, font: {
                                              family: "Arial"
                                          }
                                      }
                                  }
                              }

                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))


                              var config_y_axis_title = $(`#${id12}`).val()
                              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
                          }
                          var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
                          var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
                          myPlot.on('plotly_click', function (data){
                              if(document.getElementById(id7).style.display=="block"){
                                  var pn = '',
                                      tn = '',
                                      colors = [];
                                  for(let i = 0; i < data.points.length; i++){
                                          pn = data.points[i].pointNumber;
                                          tn = data.points[i].curveNumber;
                                          colors = data.points[i].data.marker.color;
                                  }
                                  var color = document.getElementById(id4).value
                                  colors[pn] = color;
                                  var update = {'marker': {color: colors}}
                                  Plotly.restyle(tester, update, [tn])
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                                  var config_element_color = $(`#${id4}`).val()
                                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                              }
                              else{
                                  var filter = data.points[0].label
                                  var filtercolumn = x_axis

                                  $.ajax({
                                      url: `/users/${urlPath}/drilldown_plot/`,

                                      data: {
                                          "filter" : filter,
                                          "filtercolumn" : filtercolumn,
                                          "aggregation":$(`#${id_filter}`).attr('data-operation'),
                                          "tableName":$(`#${id_filter}`).attr('data-table_name'),
                                          "chart_id":id,
                                          "operation":"drilldown_table"
                                      },
                                      type: "POST",
                                      dataType: "json",
                                      success: function (data) {
                                      $( "#drilldowncontainer" ).empty();
                                      $( "#drilldowncontainer" ).append(`
                                        <table id="drilldowncontainer_table" class="display" style="width:100%;overflow-x: scroll;overflow-y:scroll;">
                                          <thead style="border-bottom:1px solid var(--primary-color)" >
                                            <tr></tr>
                                          </thead>
                                          <tbody style="border-bottom:1px solid var(--primary-color);">
                                          </tbody>
                                        </table>
                                      `);

                                      $("#drilldownmodal").modal("show")
                                          var columns=[]
                                          for (let i in data.tableheaders){
                                              columns.push({data:data.tableheaders[i]})
                                              $(`#drilldowncontainer_table`).find('thead tr').append(`<th>${data.tableheaders[i]}</th>`)
                                          }

                                          $(`#drilldowncontainer_table`).DataTable({
                                            data: data.tablevalues,
                                            columns: columns,
                                            autoWidth: false,
                                            scrollY: '50vh',
                                            scrollCollapse: true,
                                            scrollX: '110%',
                                            orderCellsTop: true,
                                            responsive: true,
                                            stateSave: true,
                                            deferRender: true,
                                            paging: true,
                                            lengthMenu: [[1, 5, 50, -1], [1, 5, 50, 'All']],
                                            pageLength: 10,
                                            dom: 'lfBrtip',
                                            sScrollX: '100%',
                                            scrollX: true,
                                            buttons: [
                                              {
                                                extend: 'collection',
                                                text: 'Export',
                                                buttons: [
                                                  {
                                                    extend: 'excel',
                                                    title: '',
                                                    exportOptions: {
                                                      columns: ':visible:not(.noVis)'
                                                    }
                                                  },
                                                  {
                                                    extend: 'csv',
                                                    title: '',
                                                    exportOptions: {
                                                      columns: ':visible:not(.noVis)'
                                                    }
                                                  },
                                                  {
                                                    extend: 'pdf',
                                                    title: '',
                                                    exportOptions: {
                                                      columns: ':visible:not(.noVis)'
                                                    }
                                                  }
                                                ]
                                              }

                                            ],
                                            columnDefs: [
                                              {
                                                targets: '_all',
                                                className: 'dt-center allColumnClass all buttons_export_class'
                                              }

                                            ],
                                          }).columns.adjust()
                                          var aggregation=$(`#${id_filter}`).attr('data-operation')
                                          var table_name=$(`#${id_filter}`).attr('data-table_name')
                                          var chart_id=$(`#${id_filter}`).attr('data-chart_id')
                                          y_axis=$(`#${id_filter}`).attr('data-y_axis')
                                          $('#drildown_select_category').empty()
                                          $('#drildown_plot').empty()
                                          var STRING=`<div class="row"><div class="form-group col-4">
                                          <label class="acies_label col-md-12">Select Categorical Column:</label>
                                          <select id="select_category_drill_down" class="select2 form-control" name="sel"
                                          required data-chart_id="${chart_id}" data-table_name="${table_name}" data-aggregation="${aggregation}" data-y_axis="${y_axis}">
                                          <option val="" disabled selected>--------------------</option>`
                                          for(j in data.categorical_columns){
                                              STRING+=`<option value="${data.categorical_columns[j]}">${fieldToVerbose(data.categorical_columns[j] , data.mappingDict)}</option>`
                                          }
                                          STRING+=`</select>
                                          </div>
                                          </div><br><br>`
                                          

                                          $('#drildown_select_category').append(STRING)
                                          $('.select2').select2()
                                          $('.export_drilldown').off('click').on('click', function(){
                                              var csvData = [];
                                              var header = data.tableheaders
                                              csvData.push(header);
                                              for (let i=0;i<data.table_values.length;i++)
                                              {
                                                  csvData.push(data.table_values[i])
                                              }
                                                  var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                                                  var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                                                  var link = document.createElement("a");
                                                  var url = URL.createObjectURL(blob);
                                                  link.setAttribute("href", url);
                                                  var graph_title = (document.getElementById(id).parentElement.parentElement.getElementsByTagName("h5")[0].innerText)
                                                  link.setAttribute("download", `${graph_title}` + "_drill-down_data" + ".csv");
                                                  link.style.visibility = 'hidden';
                                                  document.body.appendChild(link);
                                                  link.click();
                                                  document.body.removeChild(link);
                                          })
                                          $('#select_category_drill_down').on('select2:select', function () {

                                          $('#drildown_plot').empty()
                                      var categorydrilldown = $(this).val()

                                          $.ajax({
                                              url: `/users/${urlPath}/drilldown_plot/`,

                                              data: {
                                                  "filter" : filter,
                                                  "filtercolumn" : filtercolumn,
                                                  "categorydrilldown" : categorydrilldown,
                                                  "y_axis": $(this).attr('data-y_axis'),
                                                  "aggregation":$(this).attr('data-aggregation'),
                                                  "tableName":$(this).attr('data-table_name'),
                                                  "chart_id":$(this).attr('data-chart_id'),
                                                  'operation':"drilldown_plot"
                                              },
                                              type: "POST",
                                              dataType: "json",
                                              success: function (data) {
                                                  color=document.getElementById(id1).value
                                                  var tracedrill = {
                                                      x: data.x_axisdata,
                                                      y: data.y_axisdata,
                                                      type: 'bar',
                                                      marker: {
                                                          color: color
                                                      }
                                                  };

                                                  var dataplotdrill = [tracedrill]
                                                  var drilldowndiv = document.getElementById("drildown_plot")
                                                  var myPlotdrill = document.getElementById("drildown_plot")
                                                  
                                                  var layoutdrill = {
                                                      margin: { l: 80, r: 10, b: 330, t: 35, pad: 10 },
                                                      'height': 800,
                                                      yaxis: {
                                                          title: {
                                                              standoff: 20,
                                                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                                                  family: "Arial"
                                                              }
                                                          }, showgrid: false, 'automargin': true, font: {
                                                              family: "Arial"
                                                          }
                                                      },
                                                      xaxis: {
                                                          title: {
                                                              standoff: 20,
                                                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                                                  family: "Arial"
                                                              }
                                                          },
                                                          showgrid: false, 'automargin': true, font:{
                                                              family: "Arial"
                                                          }
                                                      },
                                                      autosize: true
                                                  }   
                                                  var configdrill = { responsive: true, displaylogo: false}
                                                  Plotly.newPlot(drilldowndiv, dataplotdrill, layoutdrill, configdrill)
                                                      }
                                                  })

                                          })

                                      },
                                      error: function () {
                                          alert("Error");
                                      }
                                  })
                              }
                          })

                          document.getElementById(id5).onclick = function () {
                              var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                              deletePlotId6FromSlicerDict(maindiv);
                              deleteUpdatePlotID5(id5,maindiv)
                              $(`#${id_filter}`).remove()
                              $(`#${id7}`).remove()
                          };
                          document.getElementById(id10).onclick = function () {
                              let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                              resetOpacity(modaldiv,typeClass='charts')
                          };



                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                          var config_gridlines = $(`#${id9}`).val()
                          $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

                          document.getElementById(id9).onclick = function () {
                              var gridlinesvalue = document.getElementById(id9).value
                              var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                              var x_axis_categoryorder = data_layout.xaxis.categoryorder
                              var x_axis_categoryarray = data_layout.xaxis.categoryarray
                              y_axis_title = tester.layout.yaxis.title.text
                              var x_axis_title = tester.layout.xaxis.title.text

                              if (gridlinesvalue == "show_gridlines") {
                                  var layout2 = {
                                      yaxis: {
                                          showgrid: true, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                         }, xaxis: {
                                          showgrid: true, automargin: true, title: {
                                              standoff: 20,
                                              text: x_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          },
                                          categoryorder :  x_axis_categoryorder,
                                          categoryarray :  x_axis_categoryarray
                                      }
                                  };
                                  document.getElementById(id9).value = "hide_gridlines"
                                  document.getElementById(id9).innerHTML = "Hide Gridlines"
                              }
                              if (gridlinesvalue == "hide_gridlines") {
                                  var layout2 = {
                                      yaxis: {
                                          showgrid: false, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }, xaxis: {
                                          showgrid: false, automargin: true, title: {
                                              standoff: 20,
                                              text: x_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          },
                                          categoryorder :  x_axis_categoryorder,
                                          categoryarray :  x_axis_categoryarray
                                      }
                                  };
                                  document.getElementById(id9).value = "show_gridlines"
                                  document.getElementById(id9).innerHTML = "Show Gridlines"

                              }
                              Plotly.relayout(tester, layout2)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

                          };
                          var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
                          document.getElementById(id_labels).onclick = function () {
                              var labelsvalue = document.getElementById(id_labels).value

                              if (labelsvalue == "show_labels") {
                                  var y_axisdata = tester.data[0].y

                                  y_axisdata = y_axisdata.map(function (each_element) {
                                      return Number(each_element.toFixed(2));
                                  });

                                  var update = tester.data
                                  update[0]['text'] = y_axisdata.map(String),
                                  update[0]['mode'] =  'markers+text',
                                  update[0]['textposition'] = 'outside'

                                  document.getElementById(id_labels).value = "hide_labels"
                                  document.getElementById(id_labels).innerHTML = "Hide Labels"
                              }
                              if (labelsvalue == "hide_labels") {
                                  var update = tester.data

                                  delete update[0]["text"]
                                  delete update[0]["textposition"]
                                  document.getElementById(id_labels).value = "show_labels"
                                  document.getElementById(id_labels).innerHTML = "Show Labels"
                              }

                              Plotly.redraw(tester, update)
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

                          };

                          document.getElementById(id8).onclick = function () {
                              document.getElementById(id_filter).style.display = "none";
                              var modalid = document.getElementById(id6)
                              var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                              var offsetvalue = document.getElementById(id7).style.top
                              document.getElementById(id7).style.top = offset

                              var displayvalue = document.getElementById(id7).style.display

                              if (displayvalue == "none") {
                                  $(`#${id20}`).empty();
                                  var Slicer_ColumnId = ""
                                  for (slicer in slicerTabConfigDict){
                                          plotlist= slicerTabConfigDict[slicer]
                                          if(plotlist.includes(id6)){
                                              Slicer_ColumnId = slicer
                                          }
                                  }

                                  $(`.${Slicer_ColumnId}`).each(function(){
                                      let slicerP = $(this).attr("data-slicerColumn");
                                      let html = `
                                      <div id="div_id_active" class="custom-control custom-checkbox">
                                              <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
                                              <label for="${id20}${slicerP}" class="custom-control-label">
                                                  ${slicerP}
                                              </label>
                                          </div>
                                      `
                                      $(`#${id20}`).append(html);
                                      if (Object.keys(slicerTabConnectDict).includes(id6)) {
                                          let unConnectSlicer = slicerTabConnectDict[id6];
                                          if (unConnectSlicer.includes(slicerP)) {
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                          } else {
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true);
                                          }
                                      }
                                      $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
                                          var plotChartDiv = $(this).attr('data-parentId6');
                                          let connectVal = $(this).prop('checked');
                                          if (connectVal === false) {
                                              if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
                                                  slicerTabConnectDict[plotChartDiv].push($(this).attr('name'));
                                              }
                                          } else {
                                              if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
                                                  let index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'));
                                                  slicerTabConnectDict[plotChartDiv].splice(index, 1);
                                              };
                                          };
                                          slicerChangeUpdatePlots(app_code_);
                                          var slicerClass = $(this).attr('data-slicerClass');
                                          var unConSlicerParam = $(this).attr('name');
                                          $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select');
                                      });
                                  });

                                  document.getElementById(id7).style.display = "block";

                                  $('.charts').each(function () {

                                      if ($(this).attr('id') != `${id6}`) {
                                          if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                              $(this).css('opacity', '0.5')
                                          }
                                      }
                                  })
                              }
                              else {
                                  document.getElementById(id7).style.display = "none"
                                  $('.charts').each(function () {

                                      $(this).css('opacity', '')
                                  })
                              }
                          };
                          document.getElementById(id_filter_button).onclick = function () {
                              document.getElementById(id7).style.display = "none"
                              var modalid = document.getElementById(id6)
                              var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                              var offsetvalue = document.getElementById(id_filter).style.top
                              document.getElementById(id_filter).style.top = offset

                              var displayvalue = document.getElementById(id_filter).style.display

                              if (displayvalue == "none") {
                                  document.getElementById(id_filter).style.display = "block";
                                  $('.charts').each(function () {
                                      if ($(this).attr('id') != `${id6}`) {
                                          if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                              $(this).css('opacity', '0.5')
                                          }
                                      }
                                  })

                              }
                              else {
                                  document.getElementById(id_filter).style.display = "none"
                                  $('.charts').each(function () {

                                      $(this).css('opacity', '')
                                  })
                              }
                          };
                          try {
                              var changed_text = data.plotDict.changed_text
                          }
                          catch (err) {
                              var changed_text = []

                          }
                          myPlot.on('plotly_afterplot', function () {
                              d3.selectAll(".xaxislayer-above").selectAll('text')
                                  .on("click", function (d) {

                                      var labels = tester.data[0].x
                                      var position = d.x
                                      var text = d.text
                                      var labeleditvalue = document.getElementById(id13).value;

                                      var dict = {}
                                      dict[text] = labeleditvalue
                                      changed_text.push(dict)
                                      labels[position] = labeleditvalue;



                                      var update = { "x": [labels] };

                                      Plotly.restyle(tester, update)
                                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))



                                      $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                                      element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)


                                  });
                          });
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                          document.getElementById(id18).onclick = function () {
                              var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                              Plotly.restyle(tester, update)
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          }
                          // Resizable Card
                          chartResizeable(id6,tester)
                          myPlot.on('plotly_selected', function (data) {
                                  points_array = data.points
                                  var points = []
                                  for (let i = 0; i < points_array.length; i++) {
                                      points.push(points_array[i].label)
                                  }

                                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                                  reset_function(crossfilterdict,'x')

                          })
                          myPlot.on('plotly_deselect', function () {
                              var resetdict = { 'id': chartDivId }
                              reset_function(resetdict)

                          })
                        }


          if (String(graph_subtype) === 'Bubble_Chart') {
            let outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      z: data.second_columndata,
                      mode: 'markers',
                      marker: {
                        color: colordata,
                        size: data.second_columndata
                      },
                    };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 70, r: 10, b: 30, t: 15, pad: 10 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize

                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      autosize: true
                    };

              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var layout = data.plotDict.layout

                  var colorlength = data.x_axisdata.length
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      var color_old = dataplot[0].marker.color[0]
                  }
                  else
                  {
                      var color_old = dataplot[0].marker.color
                  }
                  if(color_old == undefined){
                      color_old = color
                  }
                  if(dataplot[0].marker.color.length  != colorlength){
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      z:data.second_columndata,
                      mode: 'markers',
                      marker: {
                        color: colordata,
                        size: data.second_columndata
                      },
                    };

                  var dataplot = [trace1]
                  }
              }
              $(`#${id_label_placement}`).val(label)
            var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)

              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype, 'tab_id': tab_id })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]
              var update = { text: [data.x_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )

              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[0].z[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }


                          document.getElementById(id_tableshow).onclick = function () {
                              datatable[0].cells.values[0] = dataplot[0].x
                              datatable[0].cells.values[1] = dataplot[0].y
                              datatable[0].cells.values[2] = dataplot[0].z

                              if (document.getElementById(id_tableicon).innerText == 'Table') {
                                  document.getElementById(id_tableicon).innerText = 'Graph'

                                  document.getElementById(id).style.display = "none"
                                  document.getElementById(id_table).style.display = "block"
                                  $(`#${id_tabledownload}`).css('display','block');
                                  $(`#${id_table_export}`).css('display','block');
                                  var datatablediv = document.getElementById(id_table)
                                  Plotly.newPlot(datatablediv, datatable, layout2, config);
                              }
                              else {
                                  document.getElementById(id_tableicon).innerText = 'Table'
                                  document.getElementById(id).style.display = "block"
                                  document.getElementById(id_table).style.display = "none"
                                  $(`#${id_tabledownload}`).css('display','none');
                                  $(`#${id_table_export}`).css('display','none');
                              }
                          }





                          $(`#${id23}`).click(function() {
                              if($(this).prop("checked")){
                                  plotbg = $('.myDiv').css("background-color");

                                  var GradientColor = $(".inner-div").css("background-color");
                                  $(`#${id6}`).attr("data-globalbg", "yes")
                                  $(`#${id6}`).attr("data-bgcolor", plotbg)
                                   var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                              }
                              else{
                                  plotbg = $(`#${id22}`).val();
                                  var GradientColor1 = $(`#${id1}`).val();
                                  $(`#${id6}`).attr("data-globalbg", "no")
                                  $(`#${id6}`).attr("data-bgcolor", plotbg)

                                  var GradientColor = hex2rgb(GradientColor1)
                                  plotbg = hex2rgb(plotbg)
                              }
                              $(prevDiv).css("border", "0px");
                              $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                              $(this).css("border-spacing" ," 15px 15px 15px 15px");


                              prevDiv = $(this);

                              layout["plot_bgcolor"]= plotbg
                              layout["paper_bgcolor"]= plotbg
                              var colorList1 = [];
                              var colorlength = dataplot[0].x.length


                              rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              col= "#" + r1 +g1 + b1;
                              var backRGB2 = col;
                              var backRGB2 = col;
                              rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)
                              $(`#${id6}`).attr("data-config_color", col)
                              colorList1.push(backRGB2)


                              var update = { 'marker': { color: backRGB2,size: data.second_columndata } };



                              Plotly.restyle(tester, update)
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                            });
                            if($(`#${id23}`).prop("checked"))
                            {
                              $(`#${id6}`).attr("data-globalbg", "yes")
                            }
                            else{
                              $(`#${id6}`).attr("data-globalbg", "no")
                            }


                            plotbg = $(".myDiv").css("background-color");
                              var GradientColor = $(".inner-div").css("background-color");
                              $(`#${id6}`).attr("data-global_bg_color", plotbg)
                              $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                              $(".global_applyButton").click(function(){
                              plotbg = $('.myDiv').css("background-color");
                              var GradientColor = $(".inner-div").css("background-color");
                              $(`#${id6}`).attr("data-global_bg_color", plotbg)
                              $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                              if($(`#${id23}`).prop("checked")){
                                  plotbg = $('.myDiv').css("background-color");

                                  var GradientColor = $(".inner-div").css("background-color");


                                  $(prevDiv).css("border", "0px");

                                  $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                                  prevDiv = $('.myDiv');

                                  layout["plot_bgcolor"]= plotbg
                                  layout["paper_bgcolor"]= plotbg
                                  var colorList1 = [];
                                  var colorlength = dataplot[0].x.length


                                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                  col= "#" + r1 +g1 + b1;
                                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                                  bg_col= "#" + r1 +g1 + b1;
                                  $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)

                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                                  var backRGB2 = col;
                                  var backRGB2 = col;

                                  colorList1.push(backRGB2)


                                  var update = { 'marker': { color: backRGB2,size: data.second_columndata } };



                                  Plotly.restyle(tester, update)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                                  Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var div = document.getElementById(id_header)
                              var main_div = document.getElementById(id6)
                              var h_bgcolor = $('.global_header_bgcolor').val()
                              change_header_bgcolor(main_div,div,h_bgcolor)
                              var h_color = $('.global_header_color').val()
                              change_header_color(main_div,div,h_color)
                              var h_font_size = $('.global_header_fontsize').val()
                              change_header_fontsize(main_div,div,h_font_size)
                              var h_font_weight =$('.global_header_fontweight').val()
                              change_header_fontweight(main_div,div,h_font_weight)
                              $(`#${id_header_bgcolor}`).val(h_bgcolor)
                              $(`#${id_header_color}`).val(h_color)
                              $(`#${id_header_fontsize}`).val(h_font_size)
                             $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                              $(`#${id6}`).attr("data-header_color", h_color )
                              $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                              $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                              $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                              var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                              }

                          });

                          document.getElementById(id22).onchange = function () {

                              var colorlength = dataplot[0].x.length


                              var colordata2 = [];
                              var backRGB1 = this.value;

                              for (let i = 0; i < colorlength; i++) {
                                  colordata2.push(backRGB1);
                              }
                              layout["plot_bgcolor"]= backRGB1
                              layout["paper_bgcolor"]= backRGB1




                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              $(`#${id6}`).attr("data-bgcolor", backRGB1)

                          }
                          color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              $(`#${id6}`).attr("data-config_color", color)
                          var bgcolor = $(`#${id22}`).val()
                          $(`#${id6}`).attr("data-bgcolor", bgcolor)
                          var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

                          document.getElementById(id_label_placement).onchange = function () {
                              var selectValue = document.getElementById(id_label_placement).value

                              if(selectValue == "top"){
                                  var update = {
                                      textposition:'top center',
                                  };
                                  Plotly.restyle(tester, update,0)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              }
                              if(selectValue == "bottom"){
                                  var update = {
                                      textposition:'bottom center',
                                  };
                                  Plotly.restyle(tester, update,0)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              }
                              if(selectValue == "center"){
                                  var update = {
                                      textposition:'center',
                                  };
                                  Plotly.restyle(tester, update,0)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              }
                          }

                          document.getElementById(id_labels).onclick = function () {
                              var labelsvalue = document.getElementById(id_labels).value
                              var x_axisdata = tester.data[0].x
                              if (labelsvalue == "show_labels") {
                                  var update = {
                                      mode: 'markers+text',
                                      text: [x_axisdata],
                                      textposition: 'center',
                                  };
                                  Plotly.restyle(tester, update)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                                  document.getElementById(id_labels).value = "hide_labels"
                                  document.getElementById(id_labels).innerHTML = "Hide Labels"
                              }
                              if (labelsvalue == "hide_labels") {
                                  var update = {
                                      mode: 'markers',
                                      text: '',
                                      textposition: 'bottom center',
                                  };
                                  Plotly.restyle(tester, update)
                                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                                  document.getElementById(id_labels).value = "show_labels"
                                  document.getElementById(id_labels).innerHTML = "Show Labels"
                              }
                              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
                          };

                          document.getElementById(id1).onchange = function () {

                              var colorlength = dataplot[0].x.length


                              var colordata2 = [];
                              var backRGB = this.value;

                              for (let i = 0; i < colorlength; i++) {
                                  colordata2.push(backRGB);
                              }


                              var update = { 'marker': { color: colordata2,size: data.second_columndata } };
                              Plotly.restyle(tester, update)
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              $(`#${id6}`).attr("data-color", backRGB)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)
                          }
                          color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)


                          document.getElementById(id2).onchange = function () {
                              var textbox2length = document.getElementById(id3).value.length;
                              var textbox2value = document.getElementById(id3).value;
                              var textbox1value = document.getElementById(id2).value;
                               y_axis_end = tester.layout.yaxis.range[1]
                              var gridlines_value = tester.layout.yaxis.showgrid
                              y_axis_title = tester.layout.yaxis.title.text




                              if (textbox2length == 0) {
                                  var layout = {
                                      yaxis: {
                                          range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              }
                              else {
                                  var layout = {
                                      yaxis: {
                                          range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              };
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)


                          }
                          document.getElementById(id3).onchange = function () {
                              var textbox1length = document.getElementById(id2).value.length;
                              var textbox2value = document.getElementById(id3).value;
                              var textbox1value = document.getElementById(id2).value;
                              y_axis_start = tester.layout.yaxis.range[0]
                              var gridlines_value = tester.layout.yaxis.showgrid
                              y_axis_title = tester.layout.yaxis.title.text


                              if (textbox1length == 0) {
                                  var layout = {
                                      yaxis: {
                                          range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              }
                              else {
                                  var layout = {
                                      yaxis: {
                                          range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  }
                              };
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

                          }
                          var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
                          document.getElementById(id5).onclick = function () {
                              var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                              deletePlotId6FromSlicerDict(maindiv);
                              deleteUpdatePlotID5(id5,maindiv)
                              $(`#${id_filter}`).remove()
                              $(`#${id7}`).remove()

                          };
                          var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
                          document.getElementById(id9).onclick = function () {
                              var gridlinesvalue = document.getElementById(id9).value
                              y_axis_title = tester.layout.yaxis.title.text
                              var x_axis_title = tester.layout.xaxis.title.text


                              if (gridlinesvalue == "show_gridlines") {
                                  var layout2 = {
                                      yaxis: {
                                          showgrid: true, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }, xaxis: {
                                          showgrid: true, automargin: true, title: {
                                              standoff: 20,
                                              text: x_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  };
                                  document.getElementById(id9).value = "hide_gridlines"
                                  document.getElementById(id9).innerHTML = "Hide Gridlines"
                              }
                              if (gridlinesvalue == "hide_gridlines") {
                                  var layout2 = {
                                      yaxis: {
                                          showgrid: false, automargin: true, title: {
                                              standoff: 20,
                                              text: y_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }, xaxis: {
                                          showgrid: false, automargin: true, title: {
                                              standoff: 20,
                                              text: x_axis_title, font: {
                                                  family: "Arial"
                                              }
                                          }
                                      }
                                  };
                                  document.getElementById(id9).value = "show_gridlines"
                                  document.getElementById(id9).innerHTML = "Show Gridlines"

                              }
                              Plotly.relayout(tester, layout2)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

                          };
                          document.getElementById(id10).onclick = function () {
                              let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                              resetOpacity(modaldiv,typeClass='charts')
                          };
                          document.getElementById(id11).onchange = function () {
                              var xaxistitlevalue = document.getElementById(id11).value;

                              var gridlines_value = tester.layout.yaxis.showgrid




                              var layout = {
                                  xaxis: {
                                      showgrid: gridlines_value, automargin: true, title: {
                                          standoff: 20,
                                          text: xaxistitlevalue, font: {
                                              family: "Arial"
                                          }
                                      }
                                  }


                              }
                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                              var config_x_axis_title = $(`#${id11}`).val()
                              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)


                          }

                          document.getElementById(id12).onchange = function () {
                              var yaxistitlevalue = document.getElementById(id12).value;
                              y_axis_start = tester.layout.yaxis.range[0]
                               y_axis_end = tester.layout.yaxis.range[1]

                              var gridlines_value = tester.layout.yaxis.showgrid




                              var layout = {
                                  yaxis: {
                                      range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                          standoff: 20,
                                          text: yaxistitlevalue, font: {
                                              family: "Arial"
                                          }
                                      }
                                  }
                              }

                              Plotly.relayout(tester, layout)
                              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                              var config_y_axis_title = $(`#${id12}`).val()
                              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

                          }
                          var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

                          document.getElementById(id8).onclick = function () {
                              document.getElementById(id_filter).style.display = "none";
                              var modalid = document.getElementById(id6)
                              var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                              var offsetvalue = document.getElementById(id7).style.top
                              document.getElementById(id7).style.top = offset

                              var displayvalue = document.getElementById(id7).style.display

                              if (displayvalue == "none") {
                                  $(`#${id20}`).empty();
                                  var Slicer_ColumnId = ""
                                  for (slicer in slicerTabConfigDict){
                                          plotlist= slicerTabConfigDict[slicer]
                                          if(plotlist.includes(id6)){
                                              Slicer_ColumnId = slicer
                                          }
                                  }


                                  $(`.${Slicer_ColumnId}`).each(function(){
                                      let slicerP = $(this).attr("data-slicerColumn");
                                      let html = `
                                      <div id="div_id_active" class="custom-control custom-checkbox">
                                              <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
                                              <label for="${id20}${slicerP}" class="custom-control-label">
                                                  ${slicerP}
                                              </label>
                                          </div>
                                      `
                                      $(`#${id20}`).append(html);
                                      if (Object.keys(slicerTabConnectDict).includes(id6)) {
                                          let unConnectSlicer = slicerTabConnectDict[id6];
                                          if (unConnectSlicer.includes(slicerP)) {
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                          } else {
                                              $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true);
                                          }
                                      }
                                      $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
                                          var plotChartDiv = $(this).attr('data-parentId6');
                                          let connectVal = $(this).prop('checked');
                                          if (connectVal === false) {
                                              if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
                                                  slicerTabConnectDict[plotChartDiv].push($(this).attr('name'));
                                              }
                                          } else {
                                              if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
                                                  let index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'));
                                                  slicerTabConnectDict[plotChartDiv].splice(index, 1);
                                              };
                                          };
                                          slicerChangeUpdatePlots(app_code_);
                                          var slicerClass = $(this).attr('data-slicerClass');
                                          var unConSlicerParam = $(this).attr('name');
                                          $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select');
                                      });
                                  });

                                  document.getElementById(id7).style.display = "block";

                                  $('.charts').each(function () {

                                      if ($(this).attr('id') != `${id6}`) {
                                          if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                              $(this).css('opacity', '0.5')
                                          }
                                      }
                                  })
                              }
                              else {
                                  document.getElementById(id7).style.display = "none"
                                  $('.charts').each(function () {

                                      $(this).css('opacity', '')
                                  })
                              }
                          };
                          document.getElementById(id_filter_button).onclick = function () {
                              document.getElementById(id7).style.display = "none"
                              var modalid = document.getElementById(id6)
                              var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                              var offsetvalue = document.getElementById(id_filter).style.top
                              document.getElementById(id_filter).style.top = offset

                              var displayvalue = document.getElementById(id_filter).style.display

                              if (displayvalue == "none") {
                                  document.getElementById(id_filter).style.display = "block";

                                  $('.charts').each(function () {
                                      if ($(this).attr('id') != `${id6}`) {
                                          if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                              $(this).css('opacity', '0.5')
                                          }
                                      }
                                  })
                              }
                              else {
                                  document.getElementById(id_filter).style.display = "none"
                                  $('.charts').each(function () {

                                      $(this).css('opacity', '')
                                  })
                              }
                          };
                          try {
                              var changed_text = data.plotDict.changed_text
                          }
                          catch (err) {
                              var changed_text = []

                          }
                          individual_color_data = data
                          myPlot.on('plotly_click', function (data) {

                              if(document.getElementById(id7).style.display=="block"){
                                  var pn = '',
                                      tn = '',
                                      colors = [];
                                  for(let i = 0; i < data.points.length; i++){
                                          pn = data.points[i].pointNumber;
                                          tn = data.points[i].curveNumber;
                                          colors = data.points[i].data.marker.color;
                                  }
                                      
                                  
                                 

                                  var color = document.getElementById(id4).value
                                  colors[pn] = color;
                                  var data_update = {
                                      'marker':{color: colors,size:individual_color_data.second_columndata},
                                  };
                                  Plotly.restyle(tester, data_update)
                                   $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              }


                          });

                          // Resizable Card
                          chartResizeable(id6,tester)
                          myPlot.on('plotly_selected', function (data) {

                              points_array = data.points
                              var points = []
                              for (let i = 0; i < points_array.length; i++) {
                                  points.push(points_array[i].x)
                              }

                              var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                              reset_function(crossfilterdict,'x')
                      })


          }
          if (String(graph_subtype) === 'Vertical_Histogram') {
            var outermodalCard =plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  if(global_gradient == "yes")
                  {
                      color = color
                      var colordata = [];
                      var colorlength = data.x_axisdata.length
                      var backRGB = color
                      colordata.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }
                  }
                  else{
                     var colordata = chart_color
                  }



                  var trace1 = {
                      x: data.x_axisdata,
                      type: 'histogram',
                      marker: {
                          color: colordata
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(chartDivId)
                  var myPlot = document.getElementById(chartDivId)
                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize

                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      autosize: true
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)


                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
              tabledata.push(data.x_axisdata)
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              Plotly.newPlot(tester, dataplot, layout, config)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              // apply Gradient Color
              gradientColorApply(id1,id6,id24,tester,colorlength =dataplot[0].x.length)



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }


                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)


                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;
                      var colordata2 = [];
                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))


                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                  $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked"))
                  {
                      color =$(this).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(this).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      }
                  else{
                      var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }
                  var update = { 'marker': { color: colordata2 } };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", backRGB)
                  var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
                  }
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text
                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)



              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
                  $(`#${id_filter}`).remove()
                  $(`#${id7}`).remove()
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text


                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Close Filter Modal
              closeFilterModal(id_filter_close)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var labeleditvalue = document.getElementById(id13).value;

                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))

                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)

              }

            // Resizable Card
            chartResizeable(id6,tester)
          }
          if (String(graph_subtype) ==='Cumulative_Histogram') {
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))


                  if(global_gradient == "yes")
                  {

                      var colordata = [];
                      var colorlength = data.x_axisdata.length
                      var backRGB = color
                      colordata.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }


                  var trace1 = {
                      x: data.x_axisdata,
                      type: 'histogram',
                      cumulative: { enabled: true },
                      marker: {
                          color: colordata
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      autosize: true
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  var layout = data.plotDict.layout

                  var colorlength = data.x_axisdata.length}
              var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
              tabledata.push(data.x_axisdata)
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]
              // apply Gradient Color
              gradientColorApply(id1,id6,id24,tester,colorlength =dataplot[0].x.length)




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }


                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length

                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var colordata2 = [];

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                      $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked")){

                      color =$(this).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(this).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }
                  else{

                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(this).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "no")
                  }

                   $(`#${id6}`).attr("data-color", backRGB)
                   $(`#${id6}`).attr("data-config_color", backRGB)
              }
              var backRGB = $(`#${id1}`).val();
              $(`#${id6}`).attr("data-color", backRGB)
              $(`#${id6}`).attr("data-config_color", backRGB)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)


              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text

                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Close Filter Modal
              closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var labeleditvalue = document.getElementById(id13).value;

                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Waterfall') {

              var outermodalCard =plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.y_axisdata.length
                  var colordata = [];
                  var measure = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  x_axisdata2.push('Total')

                  x_axisdata.push('Total')
                  if(y_axisdata != undefined){
                      if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')



                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));


                  var trace1 = {
                      x: x_axisdata,
                      y: y_axisdata,
                      type: "waterfall",
                      orientation: "v",
                      measure: measure,
                      mode:'markers',
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}}

                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",

                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  var colorlength = data.x_axisdata.length
                  var measure = [];

                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  x_axisdata2.push('Total')

                  x_axisdata.push('Total')
                  if(y_axisdata != undefined){
                      if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
                  measure.push('total')
                  dataplot[0].x = x_axisdata
                  dataplot[0].y = y_axisdata
                  dataplot[0].measure = measure

                  var layout = data.plotDict.layout

              }
            var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { text: [data.y_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              $(`#${id_border_style}`).val(borderStyle)

              document.getElementById(id1).onchange = function () {


                  var backRGB = this.value;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backRGB);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: backRGB}},
                                  increasing: { marker: { color: backRGB} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", backRGB)
                  $(`#${id6}`).attr("data-config_color", backRGB)
              }

              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )


              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");

                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      var colour = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = $(`#${id1}`).val();
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;


                              $(`#${id22}`).val(plot_col)

                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){

                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)

                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                              $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                              $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                              $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                              var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  var colordata2 = [];
                  var backRGB1 = this.value;
                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
            $(`#${id6}`).attr("data-color", color)
            $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value

                  if (labelsvalue == "show_labels") {
                      var y_axisdata = tester.data[0].y

                      y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element);
                      });

                      var update = tester.data
                      update[0]['mode'] = "markers+text",
                      update[0]['text'] = y_axisdata.map(String),
                      update[0]['textposition'] = 'outside'

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data
                      delete update[0]["mode"]
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text

                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Close Filter Modal
              closeFilterModal(id_filter_close)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
              $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                  points_array = data.points
                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].x)
                  }
                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'x')

          })
          }
          if (String(graph_subtype) === 'Horizontal_Waterfall') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.y_axisdata.length
                  var colordata = [];
                  var measure = [];

                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  y_axisdata2.push('Total')

                  y_axisdata.push('Total')
                  if(x_axisdata != undefined){
                      if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var trace1 = {
                      x: x_axisdata,
                      y: y_axisdata,
                      type: "waterfall",
                      orientation: "h",
                      measure: measure,
                      mode:'markers',
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}}

                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  var colorlength = data.x_axisdata.length
                  var measure = [];
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  y_axisdata2.push('Total')

                  y_axisdata.push('Total')
                  if(x_axisdata != undefined){
                      if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  measure.push('total')
                  dataplot[0].x = x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[0].measure = measure

                  var layout = data.plotDict.layout



              }

            var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { text: [data.x_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backRGB);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: backRGB}},
                                  increasing: { marker: { color: backRGB} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", backRGB)
                  $(`#${id6}`).attr("data-config_color", backRGB)
              }
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.yaxis.range[1]
              var x_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = $(`#${id1}`).val();
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  plot_col= "#" + r1 +g1 + b1;


                  $(`#${id22}`).val(plot_col)

                  $(`#${id6}`).attr("data-bgcolor", plot_col)




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)

                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                              $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                              $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                              $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                              var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color",color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.xaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value

                  if (labelsvalue == "show_labels") {
                      var x_axisdata = tester.data[0].x

                      x_axisdata = x_axisdata.map(function (each_element) {
                          return Number(each_element);
                      });

                      var update = tester.data
                      update[0]['mode'] = "markers+text",
                      update[0]['text'] = x_axisdata.map(String),
                          update[0]['textposition'] = 'outside'
                      update[0]['textangle'] = 90
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data
                      delete update[0]["mode"]
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
                  document.getElementById(maindiv).remove();
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text


                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
              $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                  points_array = data.points
                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].y)
                  }
                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'y')

          })
          }
          if (String(graph_subtype) === 'Scatter') {

              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var colordata = [];
                  var new_colordata = []
                  var new_x_axislist = []
                  if(global_gradient == "yes")
                  {
                      for (let i = 0; i < data.x_axisdata.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (data.x_axisdata.length); i++) {
                              colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'markers',
                      marker: {
                          color: colordata
                      },
                  };
                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)



                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  var colorlength = data.x_axisdata.length
                  var colordata = dataplot[0].marker.color
                  if(dataplot[0].marker.color.length  != colorlength){
                      var colordata = [];
                      var new_colordata = []
                  var new_x_axislist = []
                    x_axis = data.x_axis
                    y_axis = data.y_axis


                      if(grad_color == "yes")
                  {
                      for (let i = 0; i < data.x_axisdata.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;
                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (data.x_axisdata.length); i++) {
                              colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }

                  }
                  dataplot[0].marker.color = colordata

                  var layout = data.plotDict.layout


              }
              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }
              if($(`#${id24}`).prop("checked"))
              {
                $(`#${id6}`).attr("data-grad_color", "yes")
              }
              else{
                $(`#${id6}`).attr("data-grad_color", "no")
              }
              plotbg = $(".myDiv").css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)

              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)

                              $(`#${id6}`).attr("data-config_color", color)
              $(`#${id_label_placement}`).val(label)

              var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }


              $(`#${id24}`).click(function() {
                  if($(this).prop("checked")){

                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      var new_x_axislist = []
                      var new_colordata = []
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colordata2.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }
                  else{

                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "no")
                  }
                })

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)


              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                              datatable[0].cells.values[0] = dataplot[0].x
                              datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          $(`#${id6}`).attr("data-grad_color", "yes")
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          $(`#${id6}`).attr("data-grad_color", "no")
                      }

                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)


                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      var new_x_axislist = []
                      var new_colordata = []
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = col
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = col
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colorList1.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }
                  }
                  else{
                      var backRGB2 = col
                      colorList1.push(backRGB2)
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }
                  var update = { 'marker': { color: colorList1} };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          $(`#${id6}`).attr("data-grad_color", "yes")
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var new_x_axislist = []
                      var new_colordata = []
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = col
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = col
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colorList1.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }
                      var update = { 'marker': { color: colorList1} };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          $(`#${id6}`).attr("data-grad_color", "no")
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var colordata2 = [];

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                      $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });


              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              var update = { text: [data.y_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  if (labelsvalue == "show_labels") {
                      var y_axisdata = tester.data[0].y
                      var update = {
                          mode: 'markers+text',
                          text: [y_axisdata],
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'markers',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              };

              document.getElementById(id1).onchange = function () {


                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var new_x_axislist = []
                      var new_colordata = []
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colordata2.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }

                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }
                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text
                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      var config_element_color = $(`#${id4}`).val()
                      $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }
              });

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {
                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              }

              // Resizable Card
              chartResizeable(id6,tester)

               myPlot.on('plotly_selected', function (data) {
                      points_array = data.points
                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].x)
                      }
                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'x')

              })
              myPlot.on('plotly_deselect', function () {
                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)

              })
          }
          if (String(graph_subtype) === '3D_Scatter') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      z: data.second_columndata,
                      type: 'scatter3d',
                      mode: 'markers',
                      marker: {
                          color: colordata
                      },
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 60, b: 60, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[0].z = data.second_columndata
                  var colorlength = data.x_axisdata.length
                  var colordata = dataplot[0].marker.color
                  if(dataplot[0].marker.color.length  != colorlength){
                      var colordata = [];
                      x_axis = data.x_axis
                      y_axis = data.y_axis

                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }
                  dataplot[0].marker.color = colordata

                  var layout = data.plotDict.layout



              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { text: [data.y_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[0].z[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[0].z

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'markers+text',
                          text: [y_axisdata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'markers',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              };

              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length
                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }


                  var update = { 'marker': { color: colordata2 } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
              $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }


             // Resizable Card
             chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === '3D_Mesh') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      z: data.second_columndata,
                      type: 'mesh3d',
                      color: color,
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 60, b: 60, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[0].z = data.second_columndata
                  var colorlength = data.x_axisdata.length
                  var colordata = []
                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }

                  var layout = data.plotDict.layout

              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { text: [data.y_axisdata],}
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[0].z[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[0].z
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })





              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                     var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;

                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  var backRGB2 = col;
                  var backRGB2 = col;

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { "color": backRGB2 }

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $(this);

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                      var update = { "color": backRGB2 }

                      Plotly.restyle(tester, update)


                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'markers+text',
                          text: [y_axisdata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'markers',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }


                  var update = { "color": backRGB }

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                      }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";
                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))

                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }
                // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) ==='2D_Histogram_Contour') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata;
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'histogram2d',
                      colorscale: color,
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]
              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)



                  var update = { colorscale: backRGB2 };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)



                      var update = { colorscale: backRGB2 };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;
                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }
                  var update = { colorscale: backRGB };


                  Plotly.restyle(tester, update)

                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };

              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });

                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
              $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)

              }
              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Box') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))


                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: color
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)



                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }
              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { 'marker': { color: backRGB2} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");

                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          colorList1.push(backRGB2)
                      }


                      var update = { 'marker': { color: backRGB2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)


              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }


                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)

                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                $(`#${id6}`).attr("data-color", color)
                var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });
                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Violin') {

            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))


                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: color
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]





              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { 'marker': { color: backRGB2} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $(this);

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }


                      var update = { 'marker': { color: backRGB2} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }


                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
            myPlot.on('plotly_click', function (data) {
               if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)


              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)


              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });
                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Dot_Plot') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var new_colordata = []
                  var new_x_axislist = []
                  if(global_gradient == "yes")
                  {
                      for (let i = 0; i < data.x_axisdata.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (data.x_axisdata.length); i++) {
                              colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'markers',
                      marker: {
                          color: colordata,
                          symbol: 'circle',
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  var colorlength = data.x_axisdata.length
                  var colordata = dataplot[0].marker.color
                  if(dataplot[0].marker.color.length  != colorlength){
                      var colordata = [];
                      var new_colordata = []
                  var new_x_axislist = []
                      x_axis = data.x_axis
                      y_axis = data.y_axis
                      if(grad_color == "yes"){

                      for (let i = 0; i < data.x_axisdata.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (data.x_axisdata.length); i++) {
                              colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }
                  }
                  dataplot[0].marker.color = colordata
                  var layout = data.plotDict.layout



              }
              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }
              if($(`#${id24}`).prop("checked"))
              {
                $(`#${id6}`).attr("data-grad_color", "yes")
              }
              else{
                $(`#${id6}`).attr("data-grad_color", "no")
              }
              plotbg = $(".myDiv").css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                $(`#${id24}`).click(function() {
                  if($(this).prop("checked")){

                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      var new_x_axislist = []
                      var new_colordata = []
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colordata2.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }
                  else{

                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "no")
                  }
                })

              $(`#${id_label_placement}`).val(label)

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.y_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {

                              datatable[0].cells.values[0] = dataplot[0].x
                              datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      $(`#${id_table_export}`).css('display','block');
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          $(`#${id6}`).attr("data-grad_color", "yes")
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          $(`#${id6}`).attr("data-grad_color", "no")
                      }

                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)


                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      var new_x_axislist = []
                      var new_colordata = []
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = col
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = col
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colorList1.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }
                  }
                  else{
                      var backRGB2 = col
                      colorList1.push(backRGB2)
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }
                  var update = { 'marker': { color: colorList1} };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          $(`#${id6}`).attr("data-grad_color", "yes")
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var new_x_axislist = []
                      var new_colordata = []
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = col
                          if(new_x_axislist.includes(dataplot[0].x[i]) == false){
                              new_x_axislist.push(dataplot[0].x[i])
                          }
                      }
                      var backRGB = col
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colorList1.push(new_colordata[new_x_axislist.indexOf(dataplot[0].x[i])])
                          }
                      var update = { 'marker': { color: colorList1} };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          $(`#${id6}`).attr("data-grad_color", "no")
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var colordata2 = [];

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                      $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });


              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var new_x_axislist = []
                      var new_colordata = []
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      for (let i = 0; i < dataplot[0].x.length; i++) {
                          var backRGB = color
                          if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                              new_x_axislist.push(data.x_axisdata[i])
                          }
                      }
                      var backRGB = color
                      new_colordata.push(backRGB);
                          for (let i = 0; i < (new_x_axislist.length)-1; i++){
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                  var r = parseInt(previousHex[1], 16) * 0.8;
                                  var g = parseInt(previousHex[2], 16) * 0.8;
                                  var b = parseInt(previousHex[3], 16) * 0.8;

                                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                  new_colordata.push(newHex)
                          }
                          for (let i = 0; i < (dataplot[0].x.length); i++) {
                              colordata2.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                          }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }

                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                      var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
              });

              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)


              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'markers+text',
                          text: [y_axisdata],
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'markers',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))

                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                  points_array = data.points
                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].y)
                  }

                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'y')

              })
          }
          if (String(graph_subtype) === 'Horizontal_Box') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      orientation: 'h'
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(dataplot[0].x)
              tabledata.push(dataplot[0].y)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { 'marker': { color: backRGB2} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }


                      var update = { 'marker': { color: backRGB2} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Violin') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      orientation: 'h'
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)

                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }



                  var update = { 'marker': { color: backRGB2} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          colorList1.push(backRGB2)
                      }


                      var update = { 'marker': { color: backRGB2} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)
              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) == 'Scatter_with_Straight_Lines_and_Markers') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines+markers',
                      marker: {
                          color: colordata
                      },
                      line: {
                          color: color,
                          width: 2
                      }

                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',

                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var colordata = dataplot[0].marker.color
                  if(dataplot[0].marker.color.length  != colorlength){
                      var colordata = [];
                      x_axis = data.x_axis
                      y_axis = data.y_axis

                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }
                  dataplot[0].marker.color = colordata




                  var layout = data.plotDict.layout


              }
              $(`#${id_label_placement}`).val(label)

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.y_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
              }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                              datatable[0].cells.values[0] = dataplot[0].x
                              datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      $(`#${id_table_export}`).css('display','block');
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                                  }
                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                      var update = {
                          'marker': { color: colorList1 }, line: {
                              color: backRGB2,
                              width: 2
                          }
                      };





                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                      var update = {
                          'marker': { color: colorList1 }, line: {
                              color: backRGB2,
                              width: 2
                          }
                      };




                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }


              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }


                  var update = {
                      'marker': { color: colordata2 }, line: {
                          color: backRGB,
                          width: 2
                      }
                  };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)

                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)


              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+markers+text',
                          text: [y_axisdata],
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines+markers',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

              var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };

              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });

                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;
                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)

                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });
                          var update = { "x": [labels] };


                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)


                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }

             // Resizable Card
              chartResizeable(id6,tester)

          }
      if (String(graph_subtype) === 'Pie_Chart') {
              var newcolor1
              x_axis = data.x_axis
              y_axis = data.y_axis
              modalDataConfig['x_axis'] = data.x_axis
               modalDataConfig['y_axis'] = data.y_axis
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)


            if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var colorList=[]
                  var backRGB= color
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }


                  var trace1 = {
                      values: data.y_axisdata,
                      labels: data.x_axisdata,
                      sort: false,
                      type: 'pie',
                      marker: {
                          colors: colorList
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                       legend: { "orientation": "h" },
                       margin: { l: 40, r: 40, b: 40, t: 10, pad: 4 },
                       sort: false
                   }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].labels = data.x_axisdata
                  dataplot[0].values = data.y_axisdata
                  dataplot[0]['sort'] = false
                  var colorList=[]
                  var colorlength = data.x_axisdata.length
                  var backRGB = color
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }
                  if (plotDict.config_element_color != undefined&& plotDict.config_element_color.startsWith("[")) {
                    dataplot[0].marker.colors = JSON.parse(plotDict.config_element_color)
                  } else {
                    dataplot[0].marker.colors = colorList
                  }


                  var layout = data.plotDict.layout
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata

              }
              var config = { responsive: true, displaylogo: false }

              $(`#${id_label_placement}`).val(label).trigger("change")

              $(`#${id_position_legends}`).val(legend_position).trigger("change")
              Plotly.newPlot(tester, dataplot, layout, config)

              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              newcolor1=tester.data[0].marker.colors
              $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].labels.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].labels[i])
                      new_data.push(dataplot[0].values[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].labels
                  datatable[0].cells.values[1] = dataplot[0].values
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })

              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))





              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].labels.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  for (let i = 0; i < colorlength - 1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv =$('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].labels.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }

                      var update = { 'marker': { colors: colorList1} };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].labels.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].labels.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))


                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id_showlabel).onclick = function () {
                   var labelvalue = document.getElementById(id_showlabel).value
                   if (labelvalue == "hide_labels") {
                      var update = {textinfo:'none',}
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                       document.getElementById(id_showlabel).value = "show_labels"
                       document.getElementById(id_showlabel).innerHTML = "Show Labels"
                   }
                   else{
                      var update = {textinfo:'',}
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_showlabel).value = "hide_labels"
                      document.getElementById(id_showlabel).innerHTML = "Hide Labels"
                   }
                   var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
               }

               var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
               document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value
                  if(selectValue == "inside"){
                      var update = {
                          textinfo:'',
                          textposition:'inside',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "outside"){
                      var update = {
                          textposition:'outside',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
               document.getElementById(id_position_legends).onchange = function () {
                  var selectValue = document.getElementById(id_position_legends).value
                  if(selectValue == "bottom_centre"){
                      var layout = {
                          legend: { "orientation": "h",position:'bottom_centre' },
                      }
                      Plotly.relayout(tester, layout)
                     $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                     }
                     if(selectValue == "top_centre"){
                      var layout = {
                          legend: {y:1.5, x:0.3,position:'top_centre'},
                      }
                      Plotly.relayout(tester, layout)
                     $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                     var update = {
                      textinfo:'',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                     }
                  if(selectValue == "top_left"){

                      var layout = {
                           legend: {
                              yanchor:"top",
                              y:2,
                              xanchor:"right",
                              x:0,
                              position:'top_left'
                           }
                         };

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  }
                  if(selectValue == "top_right"){
                    var layout = {
                       legend: {
                           yanchor:"top",
                           y:2,
                           xanchor:"left",
                           x:2,
                           position:'top_right'
                        }
                      };

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  }
                  if(selectValue == "bottom_left"){
                  var layout = {
                       legend: {
                          yanchor:"top",
                          y:0,
                          xanchor:"right",
                          x:0,
                          position:'bottom_left'
                       }
                     };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  }
                  if(selectValue == "bottom_right"){
                     var layout = {
                         legend: {
                            yanchor:"top",
                            y:0,
                            xanchor:"right",
                            x:2,
                            position:'bottom_right'
                         }
                       };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  }
               }
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              newcolor1=JSON.parse($(`#${id6}`).attr("data-data"))
              $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1[0].marker.colors))

              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [],
                      pn = data.points[0].pointNumber,
                      tn = data.points[0].curveNumber;



                  for (let i = 0; i < data.points.length; i++) {

                      colors = data.points[0].data.marker.colors;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { colors: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))
                  }


              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          let slicerP = $(this).attr("data-slicerColumn");
                          let html = `
                          <div id="div_id_active" class="custom-control custom-checkbox">
                                  <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
                                  <label for="${id20}${slicerP}" class="custom-control-label">
                                      ${slicerP}
                                  </label>
                              </div>
                          `
                          $(`#${id20}`).append(html);
                          if (Object.keys(slicerTabConnectDict).includes(id6)) {
                            let unConnectSlicer = slicerTabConnectDict[id6];
                            if (unConnectSlicer.includes(slicerP)) {
                                $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                            } else {
                                $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true);
                            }
                          }
                          $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
                              var plotChartDiv = $(this).attr('data-parentId6');
                              let connectVal = $(this).prop('checked');
                              if (connectVal === false) {
                                if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
                                  slicerTabConnectDict[plotChartDiv].push($(this).attr('name'));
                                }
                              }
                              else {
                                if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
                                  let index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'));
                                  slicerTabConnectDict[plotChartDiv].splice(index, 1);
                                };
                              };
                              slicerChangeUpdatePlots(app_code_);
                              var slicerClass = $(this).attr('data-slicerClass');
                              var unConSlicerParam = $(this).attr('name');
                              $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select');
                          });
                      });

                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_relayout', function (data) {
                          var pie_data = tester.data[0].labels
                          if(data.hiddenlabels != undefined){
                            var points = pie_data.filter(n => !data.hiddenlabels.includes(n))
                            var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id') }
                            reset_function(crossfilterdict,'x')
                          }



              })
          }
          if (String(graph_subtype) === 'Bubble_Map') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo('#card')
                  var tab_id = 'main_page'
                  outermodalCard.appendTo('#card')
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  x_axis = data.x_axis
                  y_axis = data.y_axis


                  var dataplot = [{
                      type: 'scattergeo',
                      mode: 'markers',
                      locations: ['KWT', 'ARE', 'EGY'],
                      hoverinfo: 'text',
                      text: [20, 30, 15],
                      marker: {
                          size: [20, 30, 15],
                          color: colordata,
                          line: {
                              color: 'black'
                          }
                      },
                  }];

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      geo: {
                          'resolution': 110,
                          'showcountries': true,
                          'showocean': true,
                          'oceancolor': "#D6F1FF",
                          'center': { 'lat': 23, 'lon': 45 },
                          'projection': { 'scale': 2.5 }
                      },
                      margin: { l: 0, r: 10, b: 5, t: 5, pad: 2 },
                  };

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)

                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].labels = data.x_axisdata
                  dataplot[0].values = data.y_axisdata

                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))


              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }

              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                            
                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }

              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          let slicerP = $(this).attr("data-slicerColumn");
                          let html = `
                          <div id="div_id_active" class="custom-control custom-checkbox">
                                  <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
                                  <label for="${id20}${slicerP}" class="custom-control-label">
                                      ${slicerP}
                                  </label>
                              </div>
                          `
                          $(`#${id20}`).append(html);
                          if (Object.keys(slicerTabConnectDict).includes(id6)) {
                              let unConnectSlicer = slicerTabConnectDict[id6];
                              if (unConnectSlicer.includes(slicerP)) {
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                              } else {
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true);
                              }
                          }
                          $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
                              var plotChartDiv = $(this).attr('data-parentId6');
                              let connectVal = $(this).prop('checked');
                              if (connectVal === false) {
                                  if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
                                      slicerTabConnectDict[plotChartDiv].push($(this).attr('name'));
                                  }
                              } else {
                                  if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
                                      let index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'));
                                      slicerTabConnectDict[plotChartDiv].splice(index, 1);
                                  };
                              };
                              slicerChangeUpdatePlots(app_code_);
                              var slicerClass = $(this).attr('data-slicerClass');
                              var unConSlicerParam = $(this).attr('name');
                              $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select');
                          });
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Chloropeth_Map') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo('#card')
                  var tab_id = 'main_page'
                  outermodalCard.appendTo('#card')
                  var colordata = data.colordata
                  x_axis = data.x_axis
                  y_axis = data.y_axis



                  var dataplot = [{
                      type: 'choropleth',
                      zmin: 0,
                      zmax: 50,
                      colorscale: [
                          [0, colordata[0]], [0.2, colordata[1]],
                          [0.4, colordata[2]], [0.6, colordata[3]],
                          [0.8, colordata[4]], [1, colordata[5]]
                      ],
                      locations: ['KWT', 'ARE', 'EGY'],
                      z: [20, 30, 15],
                  }];
                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      geo: {
                          'resolution': 110,
                          'showcountries': true,
                          'showocean': true,
                          'oceancolor': "#D6F1FF",
                          'center': { 'lat': 23, 'lon': 45 },
                          'projection': { 'scale': 2.5 }
                      },
                      margin: { l: 0, r: 10, b: 5, t: 5, pad: 2 },
                  };

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].labels = data.x_axisdata
                  dataplot[0].values = data.y_axisdata


                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })

              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))


              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)

              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              myPlot.on('plotly_click', function (data) {



                  var pn = '',
                      tn = '',
                      colors = [],
                      pn = data.points[0].pointNumber,
                      tn = data.points[0].curveNumber;



                  for (let i = 0; i < data.points.length; i++) {

                      colors = data.points[0].data.marker.colors;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { colors: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Sunburst') {

          $(`#${id_label_placement}`).val(label)
              $(`#${id_position_legends}`).val(legend_position)
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  second_column = data.second_column
                  var colorList = [];
                  var backRGB = color;
                  var colorList = []
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }
                  var trace1 = {
                      values: data.second_columndata,
                      labels: data.y_axisdata,
                      parents: data.x_axisdata,
                      sort: false,
                      ids: data.sunburst_id,
                      type: 'sunburst',
                      branchvalues: "total",
                      marker: { colors: colorList }
                  };

                  var dataplot = [trace1]

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: { "orientation": "h",sort: false, },
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      sort: false,
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id

                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].labels = data.y_axisdata
                  dataplot[0].values = data.second_columndata
                  dataplot[0].parents = data.x_axisdata
                  dataplot[0]['sort'] = false
                  dataplot[0].ids = data.sunburst_id
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  var colorList = [];
                  var backRGB = color;
                  var colorList = []
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  if (plotDict.config_element_color != undefined&& plotDict.config_element_color.startsWith("[")) {
                    dataplot[0].marker.colors = JSON.parse(plotDict.config_element_color)
                  } else {
                    dataplot[0].marker.colors = colorList
                  }





                  var colordata = data.colordata

                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              newcolor1=tester.data[0].marker.colors
              $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`,`<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].labels.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].labels[i])
                      new_data.push(dataplot[0].parents[i])
                      new_data.push(dataplot[0].values[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].labels
                  datatable[0].cells.values[1] = dataplot[0].parents
                  datatable[0].cells.values[2] = dataplot[0].values
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].values.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1 } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].values.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {


                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }

                      var update = { 'marker': { colors: colorList1 } };

                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].values.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].values.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)


              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id_showlabel).onclick = function () {
                  var labelvalue = document.getElementById(id_showlabel).value
                  if (labelvalue == "hide_labels") {
                     var update = {textinfo:'none',}
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_showlabel).value = "show_labels"
                      document.getElementById(id_showlabel).innerHTML = "Show Labels"
                  }
                  else{
                     var update = {textinfo:'',}
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                     document.getElementById(id_showlabel).value = "hide_labels"
                     document.getElementById(id_showlabel).innerHTML = "Hide Labels"
                  }
                  var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              }

              var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                 newcolor1=JSON.parse($(`#${id6}`).attr("data-data"))
              $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1[0].marker.colors))
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [],
                      pn = data.points[0].pointNumber,
                      tn = data.points[0].curveNumber;



                  for (let i = 0; i < data.points.length; i++) {

                      colors = data.points[0].data.marker.colors;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { colors: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  $(`#${id6}`).attr("data-config_element_color", JSON.stringify(tester.data[0].marker.colors))
                  }

              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);

                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_relayout', function (data) {
                      var pie_data = tester.data[0].labels
                      if(data.hiddenlabels != undefined){
                        var points = pie_data.filter(n => !data.hiddenlabels.includes(n))
                        var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id') }
                        reset_function(crossfilterdict,'x')
                      }

              })
          }
      if (String(graph_subtype) === 'Donut_Chart') {
            var newcolor1
            let labels = ""
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var colorList = [];
                  var backRGB = color;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  labels = data.x_axisdata;
                  var trace1 = {
                      values: data.y_axisdata,
                      labels: data.x_axisdata,
                      type: 'pie',
                      sort: false,
                      hole: .5,
                      marker: {
                          colors: colorList
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: { "orientation": "h",sort: false, },
                      margin: { l: 40, r: 40, b: 20, t: 10, pad: 4 },
                      sort: false,
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  labels = data.x_axisdata;
                  dataplot[0].labels = data.x_axisdata
                  dataplot[0].values = data.y_axisdata
                  dataplot[0]['sort'] = false
                  colordata = data.colordata
                  var colorList=[]
                  var colorlength = data.x_axisdata.length
                  var backRGB= color
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                }

                  if (plotDict.config_element_color != undefined&& plotDict.config_element_color.startsWith("[")) {
                     dataplot[0].marker.colors = JSON.parse(plotDict.config_element_color)
                  } else {
                    dataplot[0].marker.colors = colorList
                  }
                  var layout = data.plotDict.layout
                  var colorlength = data.x_axisdata.length
              }

              var config = { responsive: true, displaylogo: false }
              $(`#${id_label_placement}`).val(labels).trigger("change")

              $(`#${id_position_legends}`).val(legend_position).trigger("change")
              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              newcolor1=tester.data[0].marker.colors
              $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].labels.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].labels[i])
                      new_data.push(dataplot[0].values[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].labels
                  datatable[0].cells.values[1] = dataplot[0].values
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })


              $(`#${id23}`).click(function() {
                if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].labels.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1 } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].labels.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {


                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }

                      var update = { 'marker': { colors: colorList1 } };



                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].labels.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].labels.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id_showlabel).onclick = function () {
                  var labelvalue = document.getElementById(id_showlabel).value
                  if (labelvalue == "hide_labels") {
                     var update = {textinfo:'none',}
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_showlabel).value = "show_labels"
                      document.getElementById(id_showlabel).innerHTML = "Show Labels"
                  }
                  else{
                     var update = {textinfo:'',}
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                     document.getElementById(id_showlabel).value = "hide_labels"
                     document.getElementById(id_showlabel).innerHTML = "Hide Labels"
                  }
                  var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              }
              var config_labels = $(`#${id_showlabel}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)


              document.getElementById(id_label_placement).onchange = function () {
                 var selectValue = document.getElementById(id_label_placement).value
                 if(selectValue == "inside"){
                     var update = {
                         textinfo:'',
                         textposition:'inside',
                     };
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                 }
                 if(selectValue == "outside"){
                     var update = {
                         textposition:'outside',
                     };
                     Plotly.restyle(tester, update,0)
                     $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                 }
                 var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
             }
             var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              document.getElementById(id_position_legends).onchange = function () {
                 var selectValue = document.getElementById(id_position_legends).value
                 if(selectValue == "bottom_centre"){
                  var layout = {
                      legend: { "orientation": "h",position:"bottom_centre" },
                  }
                  Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 }
                 if(selectValue == "top_centre"){
                  var layout = {
                      legend: {y:1.5, x:0.3,position:"top_centre"},
                      margin: { l: 60, r: 10, b: 20, t: 10, pad: 4 },
                  }
                  Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 var update = {
                  textinfo:'',
                  };
                  Plotly.restyle(tester, update,0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                 }
                 if(selectValue == "top_left"){

                     var layout = {
                          legend: {
                             yanchor:"top",
                             y:2,
                             xanchor:"right",
                             x:0,
                             position:"top_left"
                          }
                        };

                 Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 }
                 if(selectValue == "top_right"){
                   var layout = {
                      legend: {
                          yanchor:"top",
                          y:2,
                          xanchor:"left",
                          x:2,
                          position:"top_right"
                       }
                     };

                 Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 }
                 if(selectValue == "bottom_left"){
                 var layout = {
                      legend: {
                         yanchor:"top",
                         y:0,
                         xanchor:"right",
                         x:0,
                         position:"bottom_left"
                      }
                    };
                 Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 }
                 if(selectValue == "bottom_right"){
                    var layout = {
                        legend: {
                           yanchor:"top",
                           y:0,
                           xanchor:"right",
                           x:2,
                           position:"bottom_right"
                        }
                      };
                 Plotly.relayout(tester, layout)
                 $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                 }
              }

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

                  newcolor1=JSON.parse($(`#${id6}`).attr('data-data'))
                  $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1[0].marker.colors))
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [],
                      pn = data.points[0].pointNumber,
                      tn = data.points[0].curveNumber;



                  for (let i = 0; i < data.points.length; i++) {

                      colors = data.points[0].data.marker.colors;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { colors: colors } };
                  Plotly.restyle(tester, update, [tn])
                    $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                    $(`#${id6}`).attr(
                      "data-config_element_color",
                      JSON.stringify(tester.data[0].marker.colors)
                    );
                  }


              });


              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_relayout', function (data) {
                      var pie_data = tester.data[0].labels
                      if(data.hiddenlabels != undefined){
                        var points = pie_data.filter(n => !data.hiddenlabels.includes(n))
                        var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id') }
                        reset_function(crossfilterdict,'x')
                      }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              })

          }
          if (String(graph_subtype) === 'Treemap') {

            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  var parents = []
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  for (let i = 0; i < colorlength; i++) {
                      parents.push("");
                  }
                  var colorList = [];
                  var backRGB = color;
                  var colorList = []
                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }


                  var trace1 = {
                      values: data.y_axisdata,
                      labels: data.x_axisdata,
                      parents: parents,
                      type: 'treemap',
                      sort: false,
                      marker: {
                          colors: colorList
                      },
                      textinfo: "label+value "
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: { "orientation": "h",sort: false, },
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      sort: false,
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id

                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].labels = data.x_axisdata
                  dataplot[0].values = data.y_axisdata
                  dataplot[0]['sort'] = false
                  colordata = data.colordata





                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)

              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].labels.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].labels[i])
                      new_data.push(dataplot[0].values[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].labels
                  datatable[0].cells.values[1] = dataplot[0].values

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].labels.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1 } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].labels.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {


                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }

                      var update = { 'marker': { colors: colorList1 } };



                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].labels.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)


              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].labels.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)

                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)

              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                          newcolor1=JSON.parse($(`#${id6}`).attr('data-data'))
                          $(`#${id6}`).attr("data-config_element_color", JSON.stringify(newcolor1[0].marker.colors))
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [],
                      pn = data.points[0].pointNumber,
                      tn = data.points[0].curveNumber;



                  for (let i = 0; i < data.points.length; i++) {

                      colors = data.points[0].data.marker.colors;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { colors: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

            // Resizable Card
            chartResizeable(id6,tester)

              myPlot.on('plotly_relayout', function (data) {

                  var pie_data = tester.data[0].labels
                  if(data.hiddenlabels != undefined){
                    var points = pie_data.filter(n => !data.hiddenlabels.includes(n))
                    var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id') }
                    reset_function(crossfilterdict,'x')
                  }

              })
          }
          if (String(graph_subtype) === 'Line') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: color
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  var layout = data.plotDict.layout




                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
              }
              $(`#${id_label_placement}`).val(label)
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.y_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

    $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }
                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                  for (let i = 0; i < colorlength - 1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }


                  var update = { 'marker': { color: backRGB2} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: backRGB2} };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)


              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [y_axisdata],
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              };


              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

                  var config_gridlines = $(`#${id9}`).val()
                  $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray

                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }
              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Multiple_Line_Chart') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(colordata);
                  }

                  var dataplot = []
                  var color_value = chart_color
                  for(var y in data.y_axisdata){

                      var trace1 = {
                          x: data.x_axisdata,
                          y: data.y_axisdata[y],
                          mode: 'lines+markers',
                          text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                          marker: {
                              color: color_value
                          },
                          name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }



                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,

                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data

                  for (let j=0;j<dataplot.length;j++)
                      {

                          dataplot[j].x = data.x_axisdata
                          dataplot[j].y = data.y_axisdata[j]

                      }

                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
              }
              $(`#${id_label_placement}`).val(label)

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.y_axisdata.length;i++){
                  var update = {
                      text: [data.y_axisdata[i]],
                  };
                  Plotly.restyle(tester, update,[i])
              }

              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []

              var tableheaders = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
              for(var i=0;i < y_axis.length;i++){
                  tableheaders.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
              }

              tabledata.push(data.x_axisdata)
              for(var i=0;i<y_axisdata;i++){
                 tabledata.push(data.y_axisdata[i])
              }


              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  for(var i=0;i < y_axis.length;i++){
                      header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                  }

                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].y[i])
                      }

                      csvData.push(new_data)
                  }


                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {

                  datatable[0].cells.values[0] = dataplot[0].x
                  for(var i=1;i<=dataplot.length;i++){
                      datatable[0].cells.values[i] = dataplot[i-1].y
                  }

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                      triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                                }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;

                  var color_value = backRGB2
                  for(var i=0;i<data.y_axisdata.length;i++){
                      color_value = color_value
                      backRGB = color_value;

                      var update = {

                          marker: {
                              color: color_value
                          }
                      }

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(color_value)[0] * 0.6
                      var g = hexToRgb(color_value)[1] * 0.6
                      var b = hexToRgb(color_value)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])


                  }
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)





                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }



                  var color_value = backRGB2
                  for(var i=0;i<data.y_axisdata.length;i++){
                      var color_value = color_value
                      var backRGB = color_value;
                      var update = {

                          marker: {
                              color: color_value
                          }
                      }

                      var colorList1=[]
                      colorList1.push(color_value)


                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(color_value)[0] * 0.6
                      var g = hexToRgb(color_value)[1] * 0.6
                      var b = hexToRgb(color_value)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])
                      color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

                  }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                  $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
              $(`#${id6}`).attr("data-config_labels", config_labels)



              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){

                      for(var i=0;i<data.y_axisdata.length;i++){

                          var update = {


                                  textposition:'top center',

                          }


                          Plotly.restyle(tester, update,[i])
                      }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      for(var i=0;i<data.y_axisdata.length;i++){

                          var update = {


                                  textposition:'bottom center',

                          }


                          Plotly.restyle(tester, update,[i])
                      }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      for(var i=0;i<data.y_axisdata.length;i++){

                          var update = {


                                  textposition:'center',

                          }


                          Plotly.restyle(tester, update,[i])
                      }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value

                  var y_axisdata = tester.data[0].y

                  if (labelsvalue == "show_labels") {
                      for(var i=0;i<tester.data.length;i++){

                          var update = {
                              mode: 'lines+text',
                              text: [tester.data[i].y],
                              textposition: 'bottom center',
                          };
                          Plotly.restyle(tester, update,[i])
                      }

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              };


              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;

                  var color_value = backRGB

                  for(var i=0;i<data.y_axisdata.length;i++){

                      var update = {

                          marker: {
                              color: color_value
                          }
                      }

                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])
                      color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

                  }
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)





                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,

                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,

                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid



                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,

                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,

                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

                  var config_gridlines = $(`#${id9}`).val()
                  $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);

                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }


              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Area') {


            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      fill: 'tozeroy',
                      marker: {
                          color: color
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial"
                              }
                          }, showgrid: false, automargin: true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial",

                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata


                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
              }
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.y_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  var update = { 'marker': { color: backRGB2 } };





                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)


                      var update = { 'marker': { color: backRGB2} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [y_axisdata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {
                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }
              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Area') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      fill: 'tozeroy',
                      marker: {
                          color: color
                      }
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true,
                          tickangle: 45, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata


                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }

              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.x_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Horizontal');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                    var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Horizontal');
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  var update = { 'marker': { color: backRGB2 } };



                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv =$('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var update = { 'marker': { color: backRGB2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var x_axisdata = tester.data[0].x
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [x_axisdata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)

              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='card_charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
                          let slicerP = $(this).attr("data-slicerColumn");
                          let html = `
                          <div id="div_id_active" class="custom-control custom-checkbox">
                                  <input type="checkbox" name="${slicerP}" data-slicerClass="${Slicer_ColumnId}" data-parentId6="${id6}" class="${id20}slicerConnectConfig checkboxinput custom-control-input" data-slicerColumn="${slicerP}" id="${id20}${slicerP}">
                                  <label for="${id20}${slicerP}" class="custom-control-label">
                                      ${slicerP}
                                  </label>
                              </div>
                          `
                          $(`#${id20}`).append(html);
                          if (Object.keys(slicerTabConnectDict).includes(id6)) {
                              let unConnectSlicer = slicerTabConnectDict[id6];
                              if (unConnectSlicer.includes(slicerP)) {
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', false);
                              } else {
                                  $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).prop('checked', true);
                              }
                          }
                          $(`.${id20}slicerConnectConfig[name="${slicerP}"]`).off('change').on('change', function(){
                              var plotChartDiv = $(this).attr('data-parentId6');
                              let connectVal = $(this).prop('checked');
                              if (connectVal === false) {
                                  if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name')) == false) {
                                      slicerTabConnectDict[plotChartDiv].push($(this).attr('name'));
                                  }
                              } else {
                                  if (slicerTabConnectDict[plotChartDiv].includes($(this).attr('name'))) {
                                      let index = slicerTabConnectDict[plotChartDiv].indexOf($(this).attr('name'));
                                      slicerTabConnectDict[plotChartDiv].splice(index, 1);
                                  };
                              };
                              slicerChangeUpdatePlots(app_code_);
                              var slicerClass = $(this).attr('data-slicerClass');
                              var unConSlicerParam = $(this).attr('name');
                              $(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val($(`.${slicerClass}[data-slicerColumn="${unConSlicerParam}"]`).val()).trigger('select2:select');
                          });
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.card charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Stepped_Line') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)


              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: color
                      },
                      line: { shape: 'hv' },
                  };


                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata


                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              $(`#${id_label_placement}`).val(label)
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.y_axisdata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
    $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  var update = { 'marker': { color: backRGB2 } };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var update = { 'marker': { color: backRGB2 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;

                  var update = { 'marker': { color: backRGB } };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  y_axis_title = tester.layout.yaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  y_axis_title = tester.layout.yaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }

              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [y_axisdata],
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
               var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  var x_axis_title = tester.layout.xaxis.title.text
                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
              var config_y_axis_title = $(`#${id12}`).val()
              $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Line_Stacked') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            modalDataConfig['second_column'] = data.second_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)


              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: color
                      },
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: data.x_axisdata,
                      y: data.second_columndata,
                      mode: 'lines',
                      marker: {
                          color: newcolor
                      },
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                        title:{

                          showgrid: false, automargin: true,
                          font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[1].x = data.x_axisdata
                  dataplot[1].y = data.second_columndata
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length

              }
              $(`#${id_label_placement}`).val(label)
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {
                  text: [data.second_columndata],
              };
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_label_placement}`).val(label)

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])


                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value

                  if(selectValue == "top"){
                      var update = {
                          textposition:'top center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "bottom"){
                      var update = {
                          textposition:'bottom center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "center"){
                      var update = {
                          textposition:'center',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [y_axisdata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      var update1 = {
                          mode: 'lines+text',
                          text: [data.second_columndata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update1)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
              $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)

              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              }
              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))

                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Grouped_Box') {
              x_axis = data.x_axis
              y_axis = data.y_axis
              second_column = data.second_column
              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig['second_column'] = data.second_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };

                  var trace2 = {
                      x: data.x_axisdata,
                      y: data.second_columndata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: newcolor
                      },
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      boxmode: 'group',
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                        title:{
                          showgrid: false, automargin: true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[1].x = data.x_axisdata
                  dataplot[1].y = data.second_columndata
                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


   $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])



                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                   $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
               var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
              $(`#${id6}`).attr("data-legend_x", legend_x)
              legend_y = $(`#${id15}`).val()
              $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });
                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Grouped_Violin') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            modalDataConfig['second_column'] = data.second_column
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };

                  var trace2 = {
                      x: data.x_axisdata,
                      y: data.second_columndata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: newcolor
                      },
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };

                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      violinmode: 'group',
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                        title:{
                          showgrid: false, automargin: true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)

                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[1].x = data.x_axisdata
                  dataplot[1].y = data.second_columndata
                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }



              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };
                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)

                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });
                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }

          if (String(graph_subtype) === 'Vertical_Area_Stacked') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)



                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: color
                      },
                      fill: 'tozeroy',
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: data.x_axisdata,
                      y: data.second_columndata,
                      mode: 'lines',
                      marker: {
                          color: newcolor
                      },
                      fill: 'tonexty',
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title:{
                          showgrid: false, automargin: true,
                           font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[1].x = data.x_axisdata
                  dataplot[1].y = data.second_columndata

                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = {"text": [data.y_axisdata], }
              var update2 = { "text": [data.second_columndata],}

              Plotly.restyle(tester, update, [0])
              Plotly.restyle(tester, update2, [1])
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                   $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.6
                  var g = hexToRgb(backRGB2)[1] * 0.6
                  var b = hexToRgb(backRGB2)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])


                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var y_axisdata = tester.data[0].y
                  var second_columndata = tester.data[1].y
                  if (labelsvalue == "show_labels") {
                      var update = {
                          mode: 'lines+text',
                          text: [y_axisdata],
                          textposition: 'top',
                      };

                      var update1 = {
                          mode: 'lines+text',
                          text: [second_columndata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update, [0])
                      Plotly.restyle(tester, update1, [1])
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              automargin: true,
                              showgrid: false
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);

                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
              $(`#${id6}`).attr("data-legend_x", legend_x)
              legend_y = $(`#${id15}`).val()
              $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

             // Resizable Card
             chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Bar') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  if(global_gradient == "yes")
                  {
                      color =$(`#${id1}`).val()
                      var colordata = [];
                      var colorlength = data.x_axisdata.length
                      var backRGB = $(`#${id1}`).val()
                      colordata.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }
                  }
                  else{
                      color =$(`#${id1}`).val()
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(color);
                      }
                  }


                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'bar',
                      mode:'markers',
                      marker: {
                          color: colordata,
                      },
                      orientation: 'h',

                  };

                  var dataplot = [trace1]


                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, automargin: true, font: {
                              family: "Arial",
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  delete dataplot[0]["selectedpoints"]
                  var layout = data.plotDict.layout
                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      var color_old = dataplot[0].marker.color[0]
                  }
                  else
                  {
                      var color_old = dataplot[0].marker.color
                  }
                  if(color_old == undefined){
                      color_old = color
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                      var colordata = [];
                      if(grad_color == "yes"){
                          color = color
                          var backRGB = $(`#${id1}`).val()
                          colordata.push(backRGB);
                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }

                      }
                      else{
                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(color);
                          }
                      }
                      dataplot[0].marker = {color:colordata}
                  }
              }
              $(`#${id_label_placement}`).val(label)

              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { text: [data.x_axisdata] }
              Plotly.restyle(tester, update)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Horizontal');
            }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]

                 // apply Gradient Color
                 gradientColorApply(id1,id6,id24,tester,colorlength =dataplot[0].x.length)



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Horizontal');
                                }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }


                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id6}`).attr("data-grad_color", "yes")
                          $(`#${id24}`).prop('checked', true)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id6}`).attr("data-grad_color", "no")
                          $(`#${id24}`).prop('checked', false)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var colordata2 = [];
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id_label_placement).onchange = function () {
                  var selectValue = document.getElementById(id_label_placement).value
                  if(selectValue == "inside"){
                      var update = {
                          textinfo:'',
                          textposition:'inside',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  if(selectValue == "outside"){
                      var update = {
                          textposition:'outside',
                      };
                      Plotly.restyle(tester, update,0)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }
                  var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
              }
              var config_label_placement = $(`#${id_label_placement}`).val()
                  $(`#${id6}`).attr("data-config_label_placement", config_label_placement)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }

                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  }
                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value

                  if (labelsvalue == "show_labels") {
                      var x_axisdata = tester.data[0].x

                      x_axisdata = x_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                      });

                      var update = tester.data
                      update[0]['text'] = x_axisdata.map(String),
                      update[0]['mode'] = "markers+text",
                          update[0]['textposition'] = 'outside'
                      update[0]['textangle'] = 90
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data

                      delete update[0]["text"]
                      delete update[0]["mode"]
                      delete update[0]["textposition"]
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }

              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var yaxis_categoryorder = data_layout.yaxis.categoryorder
                  var yaxis_categoryarray =  data_layout.yaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text
                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:yaxis_categoryorder,
                              categoryarray:yaxis_categoryarray
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:yaxis_categoryorder,
                              categoryarray:yaxis_categoryarray
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)




              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points

                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].label)
                      }

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'y')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)



              })


          }

          if (String(graph_subtype) === 'Horizontal_Histogram') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  if(global_gradient == "yes")
                  {
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = data.x_axisdata.length
                      var backRGB = $(`#${id1}`).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }

                  }
                  else{
                      colordata2 = $(`#${id1}`).val()
                  }
                  var trace1 = {
                      y: data.x_axisdata,
                      type: 'histogram',
                      marker: {
                          color: colordata2
                      },
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, automargin: true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)

                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].y = data.x_axisdata

                  var layout = data.plotDict.layout




              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
              tabledata.push(data.x_axisdata)
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].y.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].y

                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]

                 // apply Gradient Color
                 gradientColorApply(id6,id24,tester,colorlength =dataplot[0].y.length)




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].y.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }


                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].y.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].y.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                      var colordata2 = [];

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                      var checkBox_border =$('.global_border').prop("checked")
                      var shadowColor = $('.global_shadow_color').val()
                      var shadowXOffset = $('.global_shadow_x').val()
                      var shadowYOffset = $('.global_shadow_y').val()
                      var shadowBlur = $('.global_shadow_blur').val()
                      var shadowThickness = $('.global_shadow_thickness').val()
                      change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                      var borderColor = $('.global_border_color').val()
                      var borderThickness = $('.global_border_thickness').val()
                      var borderStyle = $('.global_border_style').val()
                      change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                      $(`#${id_shadow}`).prop("checked", checkBox);
                      $(`#${id_border}`).prop("checked", checkBox_border);
                      $(`#${id_shadow_color}`).val(shadowColor);
                      $(`#${id_xshadow}`).val(shadowXOffset)
                      $(`#${id_yshadow}`).val(shadowYOffset)
                      $(`#${id_blurshadow}`).val(shadowBlur)
                      $(`#${id_shadow_thickness}`).val(shadowThickness)
                      $(`#${id_border_color}`).val(borderColor)
                      $(`#${id_border_thickness}`).val(borderThickness)
                      $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                      $(`#${id_border}`).val(checkBox_border)
                      $(`#${id_shadow}`).val(checkBox)
                      $(`#${id6}`).attr("data-shadecolor", shadowColor)
                      $(`#${id6}`).attr("data-borderStyle", borderStyle)
                      $(`#${id6}`).attr("data-borderThickness", borderThickness)
                      $(`#${id6}`).attr("data-borderColor", borderColor)
                      $(`#${id6}`).attr("data-borderon", checkBox_border)
                      $(`#${id6}`).attr("data-shadowon", checkBox)
                      $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                      $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                      $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                      $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].y.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)


              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].y.length
                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].y.length
                      var backRGB = $(`#${id1}`).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      var colorlength = dataplot[0].y.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "no")
                  }
                  color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              $(`#${id6}`).attr("data-config_color", color)
              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid
                  var x_axis_title = tester.layout.xaxis.title.text




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  var x_axis_title = tester.layout.xaxis.title.text
                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Funnel') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  if(global_gradient == "yes"){
                      color =$(`#${id1}`).val()
                      var colordata = [];
                      var colorlength = data.x_axisdata.length
                      var backRGB = $(`#${id1}`).val()
                      colordata.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }
                  }
                  else{
                      for (let i = 0; i < colorlength; i++) {
                          colordata.push(chart_color);
                      }

                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'funnel',
                      marker: {
                          color: colordata,
                      },
                  };
                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          },
                          tickangle: 45,
                          automargin: true
                      },

                  }
              }
              else {


                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  delete dataplot[0]["selectedpoints"]

                  var layout = data.plotDict.layout

                  var colorlength = data.x_axisdata.length
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      var color_old = dataplot[0].marker.color[0]
                  }
                  else
                  {
                      var color_old = dataplot[0].marker.color
                  }
                  if(color_old == undefined){
                      color_old = color
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                      var colordata=[];
                      if(grad_color == "yes"){
                          color = color
                          var backRGB = $(`#${id1}`).val()
                          colordata.push(backRGB);
                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }

                      }
                      else{
                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(color);
                          }
                      }
                  dataplot[0].marker = {color:colordata}
                  }

              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })

              // apply Gradient Color
              gradientColorApply(id1,id6,id24,tester,colorlength =dataplot[0].x.length)



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                      }
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      for (let i = 0; i < colorlength - 1; i++) {

                          colorList1.push(backRGB2)
                      }
                  }


                  var update = { 'marker': { color: colorList1} };


                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }

                if($(`#${id24}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-grad_color", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-grad_color", "no")
                }
                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');
                      if($(".global_gradient_color").prop("checked")){
                          $(`#${id24}`).prop('checked', true)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      for (let i = 0; i < colorlength - 1; i++) {
                          var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                          var r = parseInt(previousHex[1], 16) * 0.8;
                          var g = parseInt(previousHex[2], 16) * 0.8;
                          var b = parseInt(previousHex[3], 16) * 0.8;

                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                          colorList1.push(newHex)
                      }


                      var update = { 'marker': { color: colorList1} };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      else{
                          $(`#${id24}`).prop('checked', false)
                          layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var colordata2 = [];

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                      }
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                  }
              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  if($(`#${id24}`).prop("checked")){
                      $(`#${id6}`).attr("data-grad_color", "yes")
                      color =$(`#${id1}`).val()
                      var colordata2 = [];
                      var colorlength = dataplot[0].x.length
                      var backRGB = $(`#${id1}`).val()
                      colordata2.push(backRGB);

                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata2[colordata2.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata2.push(newHex)
                          }


                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "yes")
                  }
                  else{
                      $(`#${id6}`).attr("data-grad_color", "no")
                      var colorlength = dataplot[0].x.length
                      var colordata2 = [];
                      var backRGB = $(`#${id1}`).val();
                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      $(`#${id6}`).attr("data-grad_color", "no")
                  }
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                            tn = '',
                            colors = [];
                        for(let i = 0; i < data.points.length; i++){
                              pn = data.points[i].pointNumber;
                              tn = data.points[i].curveNumber;
                              colors = data.points[i].data.marker.color;
                      }
                            
                        
                       

                        var color = document.getElementById(id4).value
                        colors[pn] = color;
                        var update = {'marker': {color: colors}}
                        Plotly.restyle(tester, update, [tn])
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }


              });
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }


                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = outermodalCard.find(`#${id13}`)[0].value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))


                      });
              });
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {

                      points_array = data.points


                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].y)
                      }

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'y')

              })


              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)



              })
          }
          if (String(graph_subtype) === 'Funnel_Stacked') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if(data.plotDict === undefined)
              {
              outerCard.appendTo(`#${plotDict.tabNameID}`)
              outermodalCard.appendTo(`#${plotDict.tabNameID}`)
              filterModal.appendTo(`#${plotDict.tabNameID}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var colorlength = data.x_axisdata.length
              var colordata = [];
              var colordatasecond = [];

              x_axis = data.x_axis
              y_axis = data.y_axis
              var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
              var backRGB = color

              const hexToRgb = hex =>
                  hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                      , (m, r, g, b) => '#' + r + r + g + g + b + b)
                      .substring(1).match(/.{2}/g)
                      .map(x => parseInt(x, 16))
              var r = hexToRgb(backRGB)[0] * 0.9
              var g = hexToRgb(backRGB)[1] * 0.9
              var b = hexToRgb(backRGB)[2] * 0.9


              var newcolor = rgb2hex(r, g, b)


              for (let i = 0; i < colorlength; i++) {
                  colordata.push(color);
              }
              for (let i = 0; i < colorlength; i++) {
                  colordatasecond.push(newcolor);
              }

              var trace1 = {
                  x: data.x_axisdata,
                  y: data.y_axisdata,
                  type: 'funnel',
                  marker: {
                      color: colordata,
                  },
                  name: fieldToVerbose(x_axis, data.mappingDict)
              };
              var trace2 = {
                  x: data.second_columndata,
                  y: data.y_axisdata,
                  type: 'funnel',
                  marker: {
                      color: colordatasecond,
                  },
                  name: fieldToVerbose(data.second_column, data.mappingDict)
              };

              var data_plot = [trace1, trace2]
              var tester = document.getElementById(id)
              var myPlot = document.getElementById(id)

              var layout = {
                  hovermode: 'closest',
                  funnelmode: "stack",
                  'height':chart_height,
                  'width': chart_width,
                  margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                  'plot_bgcolor' : chart_bg_color,
                  'paper_bgcolor': chart_bg_color,
                  yaxis: {
                      title: {
                          standoff: 20,
                          text: fieldToVerbose(y_axis, data.mappingDict), font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      }, showgrid: false, font: {
                          family: "Arial"
                      },
                      tickangle: 45,
                      automargin: true
                  },

              }
          }
          else
          {
              outerCard.appendTo(`#${data.plotDict.tab_id}`)
              var tab_id = data.plotDict.tab_id
              outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

              filterModal.appendTo(`#${data.plotDict.tab_id}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var tester = document.getElementById(id)
              var myPlot = document.getElementById(id)
              var data_plot = data.plotDict.data
              data_plot[0].x = data.x_axisdata
              data_plot[0].y = data.y_axisdata
              data_plot[1].x = data.second_columndata
              data_plot[1].y = data.y_axisdata
              var colorlength = data.x_axisdata.length
              var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
              var colordata = [];
              var colordata2 = [];
              var colorlength = data.x_axisdata.length
              var colordata = data_plot[0].marker.color
              var colordata2 = data_plot[1].marker.color
              if(data_plot[0].marker.color.length  != colorlength){
                  var colordata = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }
              }
              if(data_plot[1].marker.color.length  != colorlength){
                  var colordata2 = [];
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  const hexToRgb = hex =>
                  hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                      , (m, r, g, b) => '#' + r + r + g + g + b + b)
                      .substring(1).match(/.{2}/g)
                      .map(x => parseInt(x, 16))
              var r = hexToRgb(color)[0] * 0.9
              var g = hexToRgb(color)[1] * 0.9
              var b = hexToRgb(color)[2] * 0.9


              var newcolor = rgb2hex(r, g, b)


                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(newcolor);
                  }
              }
              data_plot[0].marker.color = colordata
              data_plot[1].marker.color = colordata2
              var layout = data.plotDict.layout
              var colorlength = data.x_axisdata.length
          }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, data_plot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.second_columndata)
              tabledata.push(data.y_axisdata)


              var trace3 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace3]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<data_plot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(data_plot[0].x[i])
                      new_data.push(data_plot[1].x[i])
                      new_data.push(data_plot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = data_plot[0].x
                  datatable[0].cells.values[1] = data_plot[1].x
                  datatable[0].cells.values[2] = data_plot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = data_plot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)




                  var colordata2 = [];
                  var colordata3 = [];

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB2);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordata3.push(newcolor);
                  }
                  var update = { 'marker': { color: colordata2 } };
                  var update2 = { 'marker': { color: colordata3 } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = data_plot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var colordata2 = [];
                  var colordata3 = [];

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB2);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordata3.push(newcolor);
                  }
                  var update = { 'marker': { color: colordata2 } };
                  var update2 = { 'marker': { color: colordata3 } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                                      var main_div = document.getElementById(id6)
                                      var h_bgcolor = $('.global_header_bgcolor').val()
                                      change_header_bgcolor(main_div,div,h_bgcolor)
                                      var h_color = $('.global_header_color').val()
                                      change_header_color(main_div,div,h_color)
                                      var h_font_size = $('.global_header_fontsize').val()
                                      change_header_fontsize(main_div,div,h_font_size)
                                      var h_font_weight =$('.global_header_fontweight').val()
                                      change_header_fontweight(main_div,div,h_font_weight)
                                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                                      $(`#${id_header_color}`).val(h_color)
                                      $(`#${id_header_fontsize}`).val(h_font_size)
                                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = data_plot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })




              document.getElementById(id1).onchange = function () {
                  var colorlength = data_plot[0].x.length


                  var colordata2 = [];
                  var colordata3 = [];

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.9
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordata3.push(newcolor);
                  }
                  var update = { 'marker': { color: colordata2 } };
                  var update2 = { 'marker': { color: colordata3 } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }


              });
              var config_element_color = $(`#${id4}`).val()
              $(`#${id6}`).attr("data-config_element_color", config_element_color)
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              }
              var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };
                          Plotly.restyle(tester, update, [0])
                          Plotly.restyle(tester, update, [1])

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {
                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {

                  points_array = data.points


                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].y)
                  }

                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'y')

          })
          }
          if (String(graph_subtype) === 'Funnel_Area') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = []
                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))

                  color = chart_color
                  var colordata = [];
                  var colorlength = data.x_axisdata.length
                  var backRGB = $(`#${id1}`).val()
                  colordata.push(backRGB);
                  for (let i = 0; i < colorlength-1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colordata.push(newHex)
                  }
                  var trace1 = {
                      text: data.x_axisdata,
                      values: data.y_axisdata,
                      type: 'funnelarea',
                      marker: {
                          colors: colordata,
                      },
                  };

                  var dataplot = [trace1]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize

                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          },
                          tickangle: 45,
                          automargin: true
                      },

                  }
              }
              else {


                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id

                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].text = data.x_axisdata
                  dataplot[0].values = data.y_axisdata

                  var layout = data.plotDict.layout
                  color = color
                  var colordata = [];
                  var colorlength = data.x_axisdata.length
                  var backRGB = $(`#${id1}`).val()
                  colordata.push(backRGB);
                  for (let i = 0; i < colorlength-1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colordata.push(newHex)
                  }
                  dataplot[0].marker.colors = colordata


                  var colorlength = data.x_axisdata.length
                  var colordata = data.colordata
              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].text.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)


                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1 } };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].text.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)

                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList1 } };


                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].text.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                   document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].text.length

                  var colorList = [];
                  var backRGB = this.value;
                  var backRGB = this.value;

                  colorList.push(backRGB)
                  for (let i = 0; i < colorlength - 1; i++) {


                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                  var update = { 'marker': { colors: colorList } };
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              myPlot.on('plotly_click', function (data) {



                  var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Area_Stacked') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            modalDataConfig['second_column'] = data.second_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordatasecond = [];
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var backRGB = color

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.9
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push(newcolor);
                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: color
                      },
                      fill: 'tozeroy',
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: data.second_columndata,
                      y: data.y_axisdata,
                      mode: 'lines',
                      marker: {
                          color: newcolor
                      },
                      fill: 'tonexty',
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: {
                          orientation: 'h'
                      },
                      barmode: 'stack',
                      hovermode: 'closest',

                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true,  text: fieldToVerbose(x_axis, data.mappingDict),
                          font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                    }
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  dataplot[1].x = data.second_columndata
                  dataplot[1].y = data.y_axisdata
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { "text": [data.x_axisdata], }
              var update2 = { "text": [data.second_columndata],}
              Plotly.restyle(tester, update, [0])
              Plotly.restyle(tester, update2, [1])
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.second_columndata)
              tabledata.push(data.y_axisdata)


              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)

              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Horizontal');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[1].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[1].x
                  datatable[0].cells.values[2] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Horizontal');
                              }



                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)


                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)


                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  if (labelsvalue == "show_labels") {
                      var x_axisdata = tester.data[0].x
                      var second_columndata = tester.data[1].x
                      var update = {
                          mode: 'lines+text',
                          text: [x_axisdata],
                          textposition: 'top',
                      };
                      var update1 = {
                          mode: 'lines+text',
                          text: [second_columndata],
                          textposition: 'top',
                      };
                      Plotly.restyle(tester, update, [0])
                      Plotly.restyle(tester, update1, [1])
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = {
                          mode: 'lines',
                          text: '',
                          textposition: 'bottom center',
                      };
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };


              document.getElementById(id1).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var colordata3 = [];

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.9
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordata3.push(newcolor);
                  }
                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: true, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }
              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))

                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)
                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Bar_Stacked') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = undefined
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.y_axisdata.length
                  var colordata = [];
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var backRGB = color

                  var dataplot = []
                  var color_value = chart_color

                  for(var x in data.x_axisdata){
                    colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                      colordata.push(color_value);
                    }

                      var trace1 = {
                          x: data.x_axisdata[x],
                          y: data.y_axisdata,
                          type: 'bar',
                          mode:'markers',
                          text:fieldToVerbose(data.x_axisdata[x], data.mappingDict),
                          marker: {
                              color: colordata
                          },
                          orientation: 'h',
                          name: fieldToVerbose(data.x_axis[x], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      legend: {
                          orientation: 'h'
                      },
                      barmode: 'stack',
                      hovermode: 'closest',

                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(y_axis, data.mappingDict),
                               font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true,
                          font: {
                              family: "Arial",
                              color:label_color,
                              ize:label_fontsize
                          }
                      },
                    }
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  for (let j=0;j<dataplot.length;j++)
                      {
                          dataplot[j].x = data.x_axisdata[j]
                          dataplot[j].y = data.y_axisdata
                          delete dataplot[j]["selectedpoints"]
                      }

                  var layout = data.plotDict.layout


                  var color_old = []
                  var colorlength = data.y_axisdata.length
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      for (let j=0;j<dataplot.length;j++)
                      {
                        color_old.push(dataplot[j].marker.color[0])
                      }
                  }
                  else
                  {
                    for (let j=0;j<dataplot.length;j++)
                    {
                      color_old.push(dataplot[j].marker.color)
                    }
                  }
                  if(color_old.indexOf(undefined) != -1){
                    color_old = []
                      color_old.push(color)
                      for (let j=1;j<dataplot.length;j++){
                      backRGB = color_old[j-1]
                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6

                      var newcolor = rgb2hex(r, g, b)
                      color_old.push(newcolor)
                      }
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                    for (let j=0;j<dataplot.length;j++){
                      var colordata = [];
                      for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_old[j]);
                      }
                    dataplot[j].marker = {color:colordata}
                  }
                  }

              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.x_axisdata.length;i++){
                var update = {
                    text: [data.x_axisdata[i]],
                };
                Plotly.restyle(tester, update,[i])
              }
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = []
              for(var i=0;i < x_axis.length;i++){
                tableheaders.push(`<b>${fieldToVerbose(data.x_axis[i], data.mappingDict)}</b>`)
              }
              tableheaders.push(`<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`)
              for(var i=0;i<x_axisdata;i++){
                tabledata.push(data.x_axisdata[i])
              }
              tabledata.push(data.y_axisdata)



              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Horizontal');
            }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = []
                  for(var i=0;i < x_axis.length;i++){
                    header.push(fieldToVerbose(data.x_axis[i], data.mappingDict))
                  }
                  header.push(`${fieldToVerbose(data.y_axis, data.mappingDict)}`)
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].x[i])
                      }
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  for(var i=0;i<dataplot.length;i++){
                    datatable[0].cells.values[i] = dataplot[i].x
                  }
                  datatable[0].cells.values[dataplot.length] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Horizontal');
                                }


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length

                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  var color_value = backRGB2
                  var color_update=[]
                  for(var i=0;i<data.x_axisdata.length;i++){
                    color_value = color_value
                    backRGB = color_value;
                    color_update=[]
                    for(var i=0;i<colorlength;i++){
                        color_update.push(color_value);
                    }

                    var update = {
                      marker: {
                      color: color_update
                      }
                    }

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(color_value)[0] * 0.6
                    var g = hexToRgb(color_value)[1] * 0.6
                    var b = hexToRgb(color_value)[2] * 0.6

                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])
                  }
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                              colorList1.push(backRGB2)
                              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              $(`#${id6}`).attr("data-config_color", color)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var color_value = backRGB2
                      var colorlength = dataplot[0].x.length
                      var color_update=[]
                      for(var i=0;i<data.x_axisdata.length;i++){
                          var color_value = color_value
                          var backRGB = color_value;

                          color_update=[]
                          for(var i=0;i<colorlength;i++){
                              color_update.push(color_value);
                          }
                          var update = {

                              marker: {
                                  color: color_update
                              }
                          }

                          var colorList1=[]
                          colorList1.push(color_value)


                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(color_value)[0] * 0.6
                          var g = hexToRgb(color_value)[1] * 0.6
                          var b = hexToRgb(color_value)[2] * 0.6


                          var newcolor = rgb2hex(r, g, b)
                          color_value = newcolor

                          Plotly.restyle(tester, update,[i])

                      }
                      color = $(`#${id1}`).val()
                      $(`#${id6}`).attr("data-color", color)
                      $(`#${id6}`).attr("data-config_color", color)

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {

                var backRGB = this.value;
                var color_value = backRGB
                var colorlength = dataplot[0].x.length
                var color_update = []
                for(var i=0;i<data.x_axisdata.length;i++){
                  color_update = []
                  for (let i = 0; i < colorlength; i++) {
                    color_update.push(color_value);
                }
                var update = {

                  marker: {
                        color: color_value
                    }
                }

                var colorList1=[]
                colorList1.push(color_value)
                var backRGB = color_value;

                const hexToRgb = hex =>
                    hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                        , (m, r, g, b) => '#' + r + r + g + g + b + b)
                        .substring(1).match(/.{2}/g)
                        .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.6
                var g = hexToRgb(backRGB)[1] * 0.6
                var b = hexToRgb(backRGB)[2] * 0.6


                var newcolor = rgb2hex(r, g, b)
                color_value = newcolor

                Plotly.restyle(tester, update,[i])
              }

                 $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)


              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var update = tester.data
                  if (labelsvalue == "show_labels") {
                    for(var i=0;i<tester.data.length;i++){
                      var x_axisdata = tester.data[i].x
                      x_axisdata = x_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                        });
                        if(i == 0) update[i]['mode'] = 'markers+text'
                        update[i]['text'] = x_axisdata.map(String),
                        update[i]['textposition'] = 'inside'
                        update[i]['textangle'] = 90
                      }
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[0]["mode"]
                      for(var i=1;i<tester.data.length;i++){
                        delete update[i]["text"]
                        delete update[i]["textposition"]
                      }
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: true, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray

                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)

              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }
              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points

                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].label)
                      }

                      var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'y')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)
              })
          }
          if (String(graph_subtype) === 'Horizontal_Grouped_Box') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordatasecond = [];
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.8
                  var g = hexToRgb(backRGB)[1] * 0.8
                  var b = hexToRgb(backRGB)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push(newcolor);
                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      orientation: 'h',
                      name: fieldToVerbose(data.x_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: data.second_columndata,
                      y: data.y_axisdata,
                      type: 'box',
                      boxpoints: false,
                      marker: {
                          color: newcolor
                      },
                      orientation: 'h',
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: {
                          orientation: 'h'
                      },
                      boxmode: 'group',
                      hovermode: 'closest',

                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  dataplot[1].x = data.second_columndata
                  dataplot[1].y = data.y_axisdata

                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.second_columndata)
              tabledata.push(data.y_axisdata)


              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[1].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[1].x
                  datatable[0].cells.values[2] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]




              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.8
                  var g = hexToRgb(backRGB2)[1] * 0.8
                  var b = hexToRgb(backRGB2)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])



                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.8
                  var g = hexToRgb(backRGB2)[1] * 0.8
                  var b = hexToRgb(backRGB2)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                                      var main_div = document.getElementById(id6)
                                      var h_bgcolor = $('.global_header_bgcolor').val()
                                      change_header_bgcolor(main_div,div,h_bgcolor)
                                      var h_color = $('.global_header_color').val()
                                      change_header_color(main_div,div,h_color)
                                      var h_font_size = $('.global_header_fontsize').val()
                                      change_header_fontsize(main_div,div,h_font_size)
                                      var h_font_weight =$('.global_header_fontweight').val()
                                      change_header_fontweight(main_div,div,h_font_weight)
                                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                                      $(`#${id_header_color}`).val(h_color)
                                      $(`#${id_header_fontsize}`).val(h_font_size)
                                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)



                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var colordata3 = [];

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.8
                  var g = hexToRgb(backRGB)[1] * 0.8
                  var b = hexToRgb(backRGB)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)

                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Horizontal_Grouped_Violin') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column

              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig['second_column'] = data.second_column
                var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordatasecond = [];
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var backRGB = color;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.8
                  var g = hexToRgb(backRGB)[1] * 0.8
                  var b = hexToRgb(backRGB)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  for (let i = 0; i < colorlength; i++) {
                      colordata.push(color);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push(newcolor);
                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: color
                      },
                      orientation: 'h',
                      name: fieldToVerbose(data.x_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: data.second_columndata,
                      y: data.y_axisdata,
                      type: 'violin',
                      boxpoints: false,
                      marker: {
                          color: newcolor
                      },
                      orientation: 'h',
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      violinmode: 'group',
                      legend: {
                          orientation: 'h'
                      },
                      boxmode: 'group',
                      hovermode: 'closest',

                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata

                  dataplot[1].x = data.second_columndata
                  dataplot[1].y = data.y_axisdata

                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length

              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].x[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].x
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  var colordata2 = [];
                  var colordata3 = [];

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.8
                  var g = hexToRgb(backRGB2)[1] * 0.8
                  var b = hexToRgb(backRGB2)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var colordata2 = [];
                  var colordata3 = [];

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.8
                  var g = hexToRgb(backRGB2)[1] * 0.8
                  var b = hexToRgb(backRGB2)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB2 } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])


                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length

                  var colordata2 = [];
                  var colordata3 = [];

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.8
                  var g = hexToRgb(backRGB)[1] * 0.8
                  var b = hexToRgb(backRGB)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)
                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {
                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)

              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          $.each(labels, function (k, v) {
                              if (v == text) {
                                  labels[k] = labeleditvalue;
                              }
                          });



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)
          }

          if (String(graph_subtype) === 'Horizontal_Waterfall_Grouped') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column
              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig['second_column'] = data.second_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordatasecond = [];

                  var measure = [];

                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var x_axisdata2 = data.second_columndata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  y_axisdata2.push('Total')

                  y_axisdata.push('Total')
                  if(x_axisdata != undefined){
                      if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
              if(x_axisdata2 != undefined)
                  {
                      if (Number.isInteger((x_axisdata2.reduce((a, b) => a + b, 0)))) {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push('goldenrod');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var trace1 = {
                      x: x_axisdata,
                      y: y_axisdata,
                      type: "waterfall",
                      orientation: "h",
                      measure: measure,
                      mode:'markers',
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}},
                      name: fieldToVerbose(data.x_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: x_axisdata2,
                      y: y_axisdata,
                      type: "waterfall",
                      orientation: "h",
                      measure: measure,
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}},
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      legend: { orientation: "h" },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      barmode: 'group',
                      hovermode: 'closest',
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          }, showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true,font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                    }
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordatasecond = []
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  var x_axisdata = data.x_axisdata
                  var measure = []
                  var y_axisdata = data.y_axisdata
                  var x_axisdata2 = data.second_columndata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  y_axisdata2.push('Total')
                  var colordata=[]
                  y_axisdata.push('Total')
                  if(x_axisdata != undefined){
                      if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
              if(x_axisdata2 != undefined)
                  {
                      if (Number.isInteger((x_axisdata2.reduce((a, b) => a + b, 0)))) {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push('goldenrod');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')

                  dataplot[0].x = x_axisdata
                  dataplot[0].y = y_axisdata
                  dataplot[1].x = x_axisdata2
                  dataplot[1].y = y_axisdata
                  dataplot[0].measure = measure
                  dataplot[1].measure = measure
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length

              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { "text": [data.x_axisdata], }
              var update2 = { "text": [data.second_columndata],}
              Plotly.restyle(tester, update, [0])
              Plotly.restyle(tester, update2, [1])
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.second_columndata)
              tabledata.push(data.y_axisdata)


              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)

                document.getElementById(id1).onchange = function () {


                  var backRGB = this.value;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backRGB);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: backRGB}},
                                  increasing: { marker: { color: backRGB} },
                                  totals: { marker: { color:newHex}}
                              };

                              Plotly.restyle(tester, update,[0])
                              var update1 = { decreasing: { marker: { color: backRGB}},
                              increasing: { marker: { color: backRGB} },
                              totals: { marker: { color:newHex}}}
                              Plotly.restyle(tester, update1,[1])
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              $(`#${id6}`).attr("data-config_color", color)



              }
              color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
               setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[1].x[i])
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[1].x
                  datatable[0].cells.values[2] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]


              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                       var GradientColor = $(".inner-div").css("background-color");

                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };

                  Plotly.restyle(tester, update,[0])
                  var update1 = { decreasing: { marker: { color: plot_col}},
                  increasing: { marker: { color: plot_col} },
                  totals: { marker: { color:newHex}}}
                  Plotly.restyle(tester, update1,[1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  var colordata2 = [];
                  var colordata3 = [];

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9


                  var newcolor = rgb2hex(r, g, b)

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB2);
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordata3.push(newcolor);
                  }
                  var update = { 'marker': { color: colordata2 } };
                  var update2 = { 'marker': { color: colordata3 } };


                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])




                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");


                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };

                  Plotly.restyle(tester, update,[0])
                  var update1 = { decreasing: { marker: { color: plot_col}},
                  increasing: { marker: { color: plot_col} },
                  totals: { marker: { color:newHex}}}
                  Plotly.restyle(tester, update1,[1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-color", col)
                      $(`#${id6}`).attr("data-config_color", col)

                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var colordata2 = [];
                      var colordata3 = [];

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB2)[0] * 0.9
                      var g = hexToRgb(backRGB2)[1] * 0.9
                      var b = hexToRgb(backRGB2)[2] * 0.9


                      var newcolor = rgb2hex(r, g, b)

                      for (let i = 0; i < colorlength; i++) {
                          colordata2.push(backRGB2);
                      }
                      for (let i = 0; i < colorlength; i++) {
                          colordata3.push(newcolor);
                      }
                      var update = { 'marker': { color: colordata2 } };
                      var update2 = { 'marker': { color: colordata3 } };


                      Plotly.restyle(tester, update, [0])
                      Plotly.restyle(tester, update2, [1])

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)


              }
              $(`#${id6}`).attr("data-bgcolor", $(`#${id22}`).val())


              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              var config_labels = $(`#${id_labels}`).val()
              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {

                  var labelsvalue = document.getElementById(id_labels).value

                  if (labelsvalue == "show_labels") {
                      var x_axisdata = tester.data[0].x
                      var x_axisdata2 = tester.data[1].x

                      x_axisdata = x_axisdata.map(function (each_element) {
                          return Number(each_element);
                      });
                      x_axisdata2 = x_axisdata2.map(function (each_element) {
                          return Number(each_element);
                      });

                      var update = tester.data
                      update[0]['mode'] = "markers+text",
                      update[0]['text'] = x_axisdata.map(String),
                          update[0]['textposition'] = 'outside'
                      update[0]['textangle'] = 90
                      update[1]['text'] = x_axisdata2.map(String),
                          update[1]['textposition'] = 'outside'
                      update[1]['textangle'] = 90

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data

                      delete update[0]["text"]
                      delete update[0]["mode"]
                      delete update[0]["textposition"]
                      delete update[1]["text"]
                      delete update[1]["textposition"]
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  y_axis_title = tester.layout.yaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: true, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              };
              document.getElementById(id5).onclick = function () {
                  let maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset
                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                  points_array = data.points



                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].y)
                  }


                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'y')

          })
          }
          if (String(graph_subtype) === 'Horizontal_Bar_Grouped') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = undefined
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.y_axisdata.length
                  var colordata = [];
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  var backRGB2 = color
                  var dataplot = []
                  var color_value = chart_color
                  for(var x in data.x_axisdata){
                    colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                      colordata.push(color_value);
                    }

                      var trace1 = {
                          x: data.x_axisdata[x],
                          y: data.y_axisdata,
                          type: 'bar',
                          mode:'markers',
                          text:fieldToVerbose(data.x_axisdata[x], data.mappingDict),
                          marker: {
                              color: colordata
                          },
                          orientation: 'h',
                          name: fieldToVerbose(data.x_axis[x], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      legend: { orientation: "h" },
                      barmode: 'group',
                      hovermode: 'closest',
                      margin: { l: 0, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(y_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, font: {
                              family: "Arial"
                          }, tickangle: 45,
                          automargin: true
                      },
                      xaxis: {
                        title:{
                          showgrid: false, automargin: true,
                          font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                    }
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  for (let j=0;j<dataplot.length;j++)
                      {
                          dataplot[j].x = data.x_axisdata[j]
                          dataplot[j].y = data.y_axisdata
                          delete dataplot[j]["selectedpoints"]
                      }

                  var layout = data.plotDict.layout

                  var color_old = []
                  var colorlength = data.y_axisdata.length
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                    for (let j=0;j<dataplot.length;j++)
                    {
                      color_old.push(dataplot[j].marker.color[0])
                    }
                  }
                  else
                  {
                    for (let j=0;j<dataplot.length;j++)
                    {
                      color_old.push(dataplot[j].marker.color)
                    }
                  }
                  if(color_old.indexOf(undefined) != -1){
                    color_old = []
                    color_old.push(color)
                    for (let j=1;j<dataplot.length;j++){
                    backRGB = color_old[j-1]
                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6

                    var newcolor = rgb2hex(r, g, b)
                    color_old.push(newcolor)
                    }
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                    for (let j=0;j<dataplot.length;j++){
                      var colordata = [];
                      for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_old[j]);
                      }
                    dataplot[j].marker = {color:colordata}
                  }
                  }

              }
              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.x_axisdata.length;i++){
                var update = {
                    text: [data.x_axisdata[i]],
                };
                Plotly.restyle(tester, update,[i])
              }
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              var tabledata = []
              var tableheaders = []
              for(var i=0;i < x_axis.length;i++){
                tableheaders.push(`<b>${fieldToVerbose(data.x_axis[i], data.mappingDict)}</b>`)
              }
              tableheaders.push(`<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`)
              for(var i=0;i<x_axisdata;i++){
                tabledata.push(data.x_axisdata[i])
              }
              tabledata.push(data.y_axisdata)


              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Horizontal');
              }
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = []
                  for(var i=0;i < x_axis.length;i++){
                    header.push(fieldToVerbose(data.x_axis[i], data.mappingDict))
                  }
                  header.push(`${fieldToVerbose(data.y_axis, data.mappingDict)}`)
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].x[i])
                      }
                      new_data.push(dataplot[0].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                for(var i=0;i<dataplot.length;i++){
                  datatable[0].cells.values[i] = dataplot[i].x
                }
                datatable[0].cells.values[dataplot.length] = dataplot[0].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var x_axis_end = tester.layout.xaxis.range[1]
              var x_axis_start = tester.layout.xaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Horizontal');
                                }


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length

                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  plot_col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  var color_value = backRGB2
                  var color_update=[]

                  for(var i=0;i<data.x_axisdata.length;i++){
                    color_value = color_value
                    backRGB = color_value;
                    color_update=[]
                    for(var i=0;i<colorlength;i++){
                        color_update.push(color_value);
                    }

                    var update = {
                      marker: {
                      color: color_update
                      }
                    }

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(color_value)[0] * 0.6
                    var g = hexToRgb(color_value)[1] * 0.6
                    var b = hexToRgb(color_value)[2] * 0.6

                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])
                  }
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                              colorList1.push(backRGB2)
                              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              $(`#${id6}`).attr("data-config_color", color)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;


                      colorList1.push(backRGB2)
                      var color_value = backRGB2
                      var colorlength = dataplot[0].x.length
                      var color_update=[]
                      for(var i=0;i<data.x_axisdata.length;i++){
                          var color_value = color_value
                          var backRGB = color_value;

                          color_update=[]
                          for(var i=0;i<colorlength;i++){
                              color_update.push(color_value);
                          }
                          var update = {

                              marker: {
                                  color: color_update
                              }
                          }

                          var colorList1=[]
                          colorList1.push(color_value)


                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(color_value)[0] * 0.6
                          var g = hexToRgb(color_value)[1] * 0.6
                          var b = hexToRgb(color_value)[2] * 0.6


                          var newcolor = rgb2hex(r, g, b)
                          color_value = newcolor

                          Plotly.restyle(tester, update,[i])

                      }
                      color = $(`#${id1}`).val()
                      $(`#${id6}`).attr("data-color", color)
                      $(`#${id6}`).attr("data-config_color", color)


                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                   $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                var backRGB = this.value;
                var color_value = backRGB
                var colorlength = dataplot[0].x.length
                var color_update = []
                for(var i=0;i<data.x_axisdata.length;i++){
                  color_update = []
                  for (let i = 0; i < colorlength; i++) {
                    color_update.push(color_value);
                }
                var update = {

                  marker: {
                        color: color_value
                    }
                }

                var colorList1=[]
                colorList1.push(color_value)
                var backRGB = color_value;

                const hexToRgb = hex =>
                    hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                        , (m, r, g, b) => '#' + r + r + g + g + b + b)
                        .substring(1).match(/.{2}/g)
                        .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.6
                var g = hexToRgb(backRGB)[1] * 0.6
                var b = hexToRgb(backRGB)[2] * 0.6


                var newcolor = rgb2hex(r, g, b)
                color_value = newcolor

                Plotly.restyle(tester, update,[i])
              }

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)

                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var update = tester.data
                  if (labelsvalue == "show_labels") {
                    for(var i=0;i<tester.data.length;i++){
                      var x_axisdata = tester.data[i].x
                      x_axisdata = x_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                        });
                        if(i == 0) update[i]['mode'] = 'markers+text'
                        update[i]['text'] = x_axisdata.map(String),
                        update[i]['textposition'] = 'inside'
                        update[i]['textangle'] = 90
                      }
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data

                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[0]["mode"]
                      for(var i=1;i<tester.data.length;i++){
                        delete update[i]["text"]
                        delete update[i]["textposition"]
                      }
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_end = tester.layout.xaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, x_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  var x_axis_start = tester.layout.xaxis.range[0]
                  var gridlines_value = tester.layout.xaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          xaxis: {
                              range: [x_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          xaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };


                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)

                  }

              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  let gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_title = tester.layout.yaxis.title.text
                  let layout2 = ''
                  if (String(gridlinesvalue) === "show_gridlines") {
                      layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: true, automargin: true,
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (String(gridlinesvalue) === "hide_gridlines") {
                      layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true, tickangle: 45, title: {
                                  standoff: 20,
                                  text: y_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:y_axis_categoryorder,
                              categoryarray:y_axis_categoryarray
                          }, xaxis: {
                              showgrid: false, automargin: true
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  let configgridlines = $(`#${id9}`).val()
                  $(`#${id6}`).attr("data-config_gridlines", configgridlines)

              };
              document.getElementById(id5).onclick = function () {
                  let maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id7).style.top
                  document.getElementById(id7).style.top = offset
                  var displayvalue = document.getElementById(id7).style.display

                  if (String(displayvalue)  === "none") {
                      $(`#${id20}`).empty();
                      Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
                      ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              document.getElementById(id12).onchange = function () {
                  var yaxistitlevalue = document.getElementById(id12).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var y_axis_categoryorder = data_layout.yaxis.categoryorder
                  var y_axis_categoryarray = data_layout.yaxis.categoryarray
                  y_axis_start = tester.layout.yaxis.range[0]
                   y_axis_end = tester.layout.yaxis.range[1]

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      yaxis: {
                          range: [y_axis_start, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20, tickangle: 45,
                              text: yaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:y_axis_categoryorder,
                          categoryarray:y_axis_categoryarray
                      }
                  }

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }

                          var config_y_axis_title = $(`#${id12}`).val()
                          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              if(document.getElementById(id14)!=null){
              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
            }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }
              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".yaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].y
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "y": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "y": [JSON.parse(JSON.stringify(y_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)


              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points


                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].y)
                      }

                      var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'y')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)
              })
          }
          if (String(graph_subtype) === 'Vertical_Bar_Grouped') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = undefined
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];

                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  var dataplot = []
                  var color_value = chart_color
                  for(var y in data.y_axisdata){
                    colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_value);
                    }

                      var trace1 = {
                          x: data.x_axisdata,
                          y: data.y_axisdata[y],
                          type: 'bar',
                          text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                          marker: {
                              color: colordata
                          },
                          name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      barmode: 'group',
                      hovermode: 'closest',
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                        title:{
                          showgrid: false, 'automargin': true,
                           font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  for (let j=0;j<dataplot.length;j++)
                      {
                          dataplot[j].x = data.x_axisdata
                          dataplot[j].y = data.y_axisdata[j]
                          delete dataplot[j]["selectedpoints"]
                      }
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
                  var color_old = []
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      for (let j=0;j<dataplot.length;j++)
                      {
                        color_old.push(dataplot[j].marker.color[0])
                      }
                  }
                  else
                  {
                      for (let j=0;j<dataplot.length;j++)
                        {
                          color_old.push(dataplot[j].marker.color)
                        }
                  }
                  if(color_old.indexOf(undefined) != -1){
                      color_old = []
                      color_old.push(color)
                      for (let j=1;j<dataplot.length;j++){
                      backRGB = color_old[j-1]
                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6

                      var newcolor = rgb2hex(r, g, b)
                      color_old.push(newcolor)
                      }
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                      for (let j=0;j<dataplot.length;j++){
                        var colordata = [];
                        for (let i = 0; i < colorlength; i++) {
                          colordata.push(color_old[j]);
                        }
                      dataplot[j].marker = {color:colordata}
                    }
                  }
              }

              var config = { responsive: true, displaylogo: false}
              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.y_axisdata.length;i++){
                var update = {
                    text: [data.y_axisdata[i]],
                };
                Plotly.restyle(tester, update,[i])
              }
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
              for(var i=0;i < y_axis.length;i++){
                tableheaders.push(`<b>${fieldToVerbose(data.y_axis[i], data.mappingDict)}</b>`)
              }

              tabledata.push(data.x_axisdata)
              for(var i=0;i<y_axisdata;i++){
                 tabledata.push(data.y_axisdata[i])
              }

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
              }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  for(var i=0;i < y_axis.length;i++){
                      header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                  }
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].y[i])
                      }

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  for(var i=1;i<=dataplot.length;i++){
                      datatable[0].cells.values[i] = dataplot[i-1].y
                  }
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical');
                                  }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  var color_value = backRGB2
                  var color_update=[]
                  for(var i=0;i<data.y_axisdata.length;i++){
                      color_value = color_value
                      backRGB = color_value;
                      color_update=[]
                      for(var i=0;i<colorlength;i++){
                          color_update.push(color_value);
                      }

                      var update = {

                          marker: {
                              color: color_update
                          }
                      }

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(color_value)[0] * 0.6
                      var g = hexToRgb(color_value)[1] * 0.6
                      var b = hexToRgb(color_value)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])


                  }
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var color_value = backRGB2
                      var colorlength = dataplot[0].x.length
                      var color_update=[]
                      for(var i=0;i<data.y_axisdata.length;i++){
                          var color_value = color_value
                          var backRGB = color_value;

                          color_update=[]
                          for(var i=0;i<colorlength;i++){
                              color_update.push(color_value);
                          }
                          var update = {

                              marker: {
                                  color: color_update
                              }
                          }

                          var colorList1=[]
                          colorList1.push(color_value)


                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(color_value)[0] * 0.6
                          var g = hexToRgb(color_value)[1] * 0.6
                          var b = hexToRgb(color_value)[2] * 0.6


                          var newcolor = rgb2hex(r, g, b)
                          color_value = newcolor

                          Plotly.restyle(tester, update,[i])

                      }

                      color = $(`#${id1}`).val()
                      $(`#${id6}`).attr("data-color", color)
                      $(`#${id6}`).attr("data-config_color", color)

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)


              document.getElementById(id1).onchange = function () {
                var backRGB = this.value;
                  var color_value = backRGB
                  var colorlength = dataplot[0].x.length
                  var color_update = []
                  for(var i=0;i<data.y_axisdata.length;i++){
                    color_update = []
                    for (let i = 0; i < colorlength; i++) {
                      color_update.push(color_value);
                  }

                    var update = {

                        marker: {
                            color: color_value
                        }
                    }

                    var colorList1=[]
                    colorList1.push(color_value)
                    var backRGB = color_value;

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])
                  }

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var update = tester.data
                  if (labelsvalue == "show_labels") {
                    for(var i=0;i<tester.data.length;i++){
                      var y_axisdata = tester.data[i].y

                      y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                      });
                      if(i == 0) update[i]['mode'] = 'markers+text'
                      update[i]['text'] = y_axisdata.map(String),
                      update[i]['textposition'] = 'outside'
                    }

                    $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"

                  }
                  if (labelsvalue == "hide_labels") {
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[0]["mode"]
                      for(var i=1;i<tester.data.length;i++){
                        delete update[i]["text"]
                        delete update[i]["textposition"]
                      }

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"

                    }
                    Plotly.redraw(tester, update)
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };

                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv);
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                      var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                      var x_axis_categoryorder = data_layout.xaxis.categoryorder
                      var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points



                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].label)
                      }

                      var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'x')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)



              })
          }
          if (String(graph_subtype) === 'Bar_Grouped_and_Line') {
              x_axis = data.x_axis
              y_axis = data.y_axis
              second_column = undefined
              var line_column = data.line_column
              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig[line_column] = line_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)


              if (data.plotDict === undefined) {
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-line_column", line_column)
                  $(`#${id6}`).attr("data-operation_line", operation_line)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordataline = 'black'
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;

                  var dataplot = []
                  var color_value = chart_color
                  for(var y in data.y_axisdata){
                   colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                          colordata.push(color_value);
                      }
                      var trace1 = {
                          x: data.x_axisdata,
                          y: data.y_axisdata[y],
                          type: 'bar',
                          text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                          marker: {
                              color: colordata
                          },
                          name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }

                  var trace2 = {
                      x: data.x_axisdata,
                      y: data.line_columndata,
                      type: 'scatter',
                      marker: {
                          color: colordataline,
                      },
                      text: data.line_columndata,
                      textposition: 'top',
                      name: fieldToVerbose(data.line_column, data.mappingDict)
                  };
                  dataplot.push(trace2)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      barmode: 'group',
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      hovermode: 'closest',
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                        title:{
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {

                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  total_y = data.total_y
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-line_column", line_column)
                  $(`#${id6}`).attr("data-operation_line", operation_line)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  for (let j=0;j<dataplot.length-1;j++)
                      {
                          dataplot[j].x = data.x_axisdata
                          dataplot[j].y = data.y_axisdata[j]
                          delete dataplot[j]["selectedpoints"]
                      }
                  dataplot[dataplot.length-1].x = data.x_axisdata
                  dataplot[dataplot.length-1].y = data.line_columndata
                  delete dataplot[dataplot.length-1]["selectedpoints"]
                  var layout = data.plotDict.layout



                  var colorlength = data.x_axisdata.length
                  var color_old = []
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                    for (let j=0;j<dataplot.length-1;j++)
                    {
                      color_old.push(dataplot[j].marker.color[0])
                    }
                  }
                  else
                  {
                    for (let j=0;j<dataplot.length-1;j++)
                    {
                      color_old.push(dataplot[j].marker.color)
                    }
                  }
                  if(color_old.indexOf(undefined) != -1){
                    color_old = []
                    color_old.push(color)
                    for (let j=1;j<dataplot.length-1;j++){
                    backRGB = color_old[j-1]
                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6

                    var newcolor = rgb2hex(r, g, b)
                    color_old.push(newcolor)
                    }
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                    for (let j=0;j<dataplot.length-1;j++){
                      var colordata = [];
                      for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_old[j]);
                      }
                      dataplot[j].marker = {color:colordata}
                    }
                  }
              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.y_axisdata.length;i++){
                var update = {
                    text: [data.y_axisdata[i]],
                };
                Plotly.restyle(tester, update,[i])
              }
              var update3 = {name: [fieldToVerbose(data.line_column, data.mappingDict)],text: [data.line_columndata],};
              Plotly.restyle(tester, update3, [dataplot.length-1])
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
              for(var i=0;i < y_axis.length;i++){
                tableheaders.push(`<b>${fieldToVerbose(data.y_axis[i], data.mappingDict)}</b>`)
              }
              tableheaders.push(`<b>${fieldToVerbose(data.line_column, data.mappingDict)}</b>`)

              tabledata.push(data.x_axisdata)
              for(var i=0;i<y_axisdata;i++){
                 tabledata.push(data.y_axisdata[i])
              }
              tabledata.push(data.line_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
          }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  for(var i=0;i < y_axis.length;i++){
                      header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                  }
                  header.push(`${fieldToVerbose(data.line_column, data.mappingDict)}`)
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].y[i])
                      }
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  for(var i=1;i<=dataplot.length;i++){
                    datatable[0].cells.values[i] = dataplot[i-1].y
                }
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]


                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(`#${id23}`).click(function() {
                    plotbg = $('.myDiv').css("background-color");
                    var GradientColor = $(".inner-div").css("background-color");
                    $(`#${id6}`).attr("data-global_bg_color", plotbg)
                    $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                    if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                        var GradientColor = $(".inner-div").css("background-color");


                        $(prevDiv).css("border", "0px");

                        $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                        prevDiv = $('.myDiv');

                        layout["plot_bgcolor"]= plotbg
                        layout["paper_bgcolor"]= plotbg
                        var colorList1 = [];
                        var colorlength = dataplot[0].x.length


                        rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                        var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                        r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                        g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                        b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                        col= "#" + r1 +g1 + b1;
                        rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                        var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                        r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                        g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                        b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                        bg_col= "#" + r1 +g1 + b1;
                        $(`#${id1}`).val(col)
                                    $(`#${id22}`).val(bg_col)
                                    $(`#${id6}`).attr("data-color", col)
                                    $(`#${id6}`).attr("data-config_color", col)
                                        $(`#${id6}`).attr("data-bgcolor", bg_col)
                        var backRGB2 = col;
                        var backRGB2 = col;

                        colorList1.push(backRGB2)
                        var color_value = backRGB2
                        var colorlength = dataplot[0].x.length
                        var color_update=[]
                        for (var i = 0; i < data.y_axisdata.length; i++) {
                          var color_value = color_value;
                          var backRGB = color_value;

                          color_update = [];
                          for (var j = 0; j < colorlength; j++) {
                            color_update.push(color_value);
                          }

                          var update = {
                            marker: {
                              color: color_update
                            }
                          };

                          var colorList1 = [];
                          colorList1.push(color_value);

                          const hexToRgb = hex =>
                            hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16));
                          var r = hexToRgb(color_value)[0] * 0.6;
                          var g = hexToRgb(color_value)[1] * 0.6;
                          var b = hexToRgb(color_value)[2] * 0.6;

                          var newcolor = rgb2hex(r, g, b);
                          color_value = newcolor;

                          Plotly.restyle(tester, update, [i]);
                        }
                        color = $(`#${id1}`).val()
                        $(`#${id6}`).attr("data-color", color)
                        $(`#${id6}`).attr("data-config_color", color)

                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                        Plotly.relayout(tester, layout)
                        $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                        var div = document.getElementById(id_header)
                        var main_div = document.getElementById(id6)
                        var h_bgcolor = $('.global_header_bgcolor').val()
                        change_header_bgcolor(main_div,div,h_bgcolor)
                        var h_color = $('.global_header_color').val()
                        change_header_color(main_div,div,h_color)
                        var h_font_size = $('.global_header_fontsize').val()
                        change_header_fontsize(main_div,div,h_font_size)
                        var h_font_weight =$('.global_header_fontweight').val()
                        change_header_fontweight(main_div,div,h_font_weight)
                        $(`#${id_header_bgcolor}`).val(h_bgcolor)
                        $(`#${id_header_color}`).val(h_color)
                        $(`#${id_header_fontsize}`).val(h_font_size)
                      $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                    var h_font_style = $('.global_header_fontstyle').val()
                                    change_header_fontstyle(main_div,div,h_font_style)
                                    $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                    var alignment = $('.global_header_alignment').val()
                                    $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                    change_header_alignment(main_div,div,alignment)
                                    $(`#${id6}`).attr("data-header_alignment", alignment )
                        $(`#${id6}`).attr("data-header_color", h_color )
                        $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                        $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                        $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                        var checkBox = $('.global_shadow').prop("checked")
                                    var checkBox_border =$('.global_border').prop("checked")
                                    var shadowColor = $('.global_shadow_color').val()
                                    var shadowXOffset = $('.global_shadow_x').val()
                                    var shadowYOffset = $('.global_shadow_y').val()
                                    var shadowBlur = $('.global_shadow_blur').val()
                                    var shadowThickness = $('.global_shadow_thickness').val()
                                    change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                    var borderColor = $('.global_border_color').val()
                                    var borderThickness = $('.global_border_thickness').val()
                                    var borderStyle = $('.global_border_style').val()
                                    change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                    $(`#${id_shadow}`).prop("checked", checkBox);
                                    $(`#${id_border}`).prop("checked", checkBox_border);
                                    $(`#${id_shadow_color}`).val(shadowColor);
                                    $(`#${id_xshadow}`).val(shadowXOffset)
                                    $(`#${id_yshadow}`).val(shadowYOffset)
                                    $(`#${id_blurshadow}`).val(shadowBlur)
                                    $(`#${id_shadow_thickness}`).val(shadowThickness)
                                    $(`#${id_border_color}`).val(borderColor)
                                    $(`#${id_border_thickness}`).val(borderThickness)
                                    $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                    $(`#${id_border}`).val(checkBox_border)
                                    $(`#${id_shadow}`).val(checkBox)
                                    $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                    $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                    $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                    $(`#${id6}`).attr("data-borderColor", borderColor)
                                    $(`#${id6}`).attr("data-borderon", checkBox_border)
                                    $(`#${id6}`).attr("data-shadowon", checkBox)
                                    $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                    $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                    $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                    $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                    }
                  });
                  $(".global_applyButton").click(function(){
                    plotbg = $('.myDiv').css("background-color");
                    var GradientColor = $(".inner-div").css("background-color");
                    $(`#${id6}`).attr("data-global_bg_color", plotbg)
                    $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                    if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                        var GradientColor = $(".inner-div").css("background-color");


                        $(prevDiv).css("border", "0px");

                        $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                        prevDiv = $('.myDiv');

                        layout["plot_bgcolor"]= plotbg
                        layout["paper_bgcolor"]= plotbg
                        var colorList1 = [];
                        var colorlength = dataplot[0].x.length


                        rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                        var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                        r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                        g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                        b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                        col= "#" + r1 +g1 + b1;
                        rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                        var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                        r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                        g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                        b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                        bg_col= "#" + r1 +g1 + b1;
                        $(`#${id1}`).val(col)
                                    $(`#${id22}`).val(bg_col)
                                    $(`#${id6}`).attr("data-color", col)
                                    $(`#${id6}`).attr("data-config_color", col)
                                        $(`#${id6}`).attr("data-bgcolor", bg_col)
                        var backRGB2 = col;
                        var backRGB2 = col;

                        colorList1.push(backRGB2)
                        var color_value = backRGB2
                        var colorlength = dataplot[0].x.length
                        var color_update=[]
                        for (var i = 0; i < data.y_axisdata.length; i++) {
                          var color_value = color_value;
                          var backRGB = color_value;

                          color_update = [];
                          for (var j = 0; j < colorlength; j++) {
                            color_update.push(color_value);
                          }

                          var update = {
                            marker: {
                              color: color_update
                            }
                          };

                          var colorList1 = [];
                          colorList1.push(color_value);

                          const hexToRgb = hex =>
                            hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16));
                          var r = hexToRgb(color_value)[0] * 0.6;
                          var g = hexToRgb(color_value)[1] * 0.6;
                          var b = hexToRgb(color_value)[2] * 0.6;

                          var newcolor = rgb2hex(r, g, b);
                          color_value = newcolor;

                          Plotly.restyle(tester, update, [i]);
                        }
                        color = $(`#${id1}`).val()
                        $(`#${id6}`).attr("data-color", color)
                        $(`#${id6}`).attr("data-config_color", color)

                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                        Plotly.relayout(tester, layout)
                        $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                        var div = document.getElementById(id_header)
                        var main_div = document.getElementById(id6)
                        var h_bgcolor = $('.global_header_bgcolor').val()
                        change_header_bgcolor(main_div,div,h_bgcolor)
                        var h_color = $('.global_header_color').val()
                        change_header_color(main_div,div,h_color)
                        var h_font_size = $('.global_header_fontsize').val()
                        change_header_fontsize(main_div,div,h_font_size)
                        var h_font_weight =$('.global_header_fontweight').val()
                        change_header_fontweight(main_div,div,h_font_weight)
                        $(`#${id_header_bgcolor}`).val(h_bgcolor)
                        $(`#${id_header_color}`).val(h_color)
                        $(`#${id_header_fontsize}`).val(h_font_size)
                      $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                    var h_font_style = $('.global_header_fontstyle').val()
                                    change_header_fontstyle(main_div,div,h_font_style)
                                    $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                    var alignment = $('.global_header_alignment').val()
                                    $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                    change_header_alignment(main_div,div,alignment)
                                    $(`#${id6}`).attr("data-header_alignment", alignment )
                        $(`#${id6}`).attr("data-header_color", h_color )
                        $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                        $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                        $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                        var checkBox = $('.global_shadow').prop("checked")
                                    var checkBox_border =$('.global_border').prop("checked")
                                    var shadowColor = $('.global_shadow_color').val()
                                    var shadowXOffset = $('.global_shadow_x').val()
                                    var shadowYOffset = $('.global_shadow_y').val()
                                    var shadowBlur = $('.global_shadow_blur').val()
                                    var shadowThickness = $('.global_shadow_thickness').val()
                                    change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                    var borderColor = $('.global_border_color').val()
                                    var borderThickness = $('.global_border_thickness').val()
                                    var borderStyle = $('.global_border_style').val()
                                    change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                    $(`#${id_shadow}`).prop("checked", checkBox);
                                    $(`#${id_border}`).prop("checked", checkBox_border);
                                    $(`#${id_shadow_color}`).val(shadowColor);
                                    $(`#${id_xshadow}`).val(shadowXOffset)
                                    $(`#${id_yshadow}`).val(shadowYOffset)
                                    $(`#${id_blurshadow}`).val(shadowBlur)
                                    $(`#${id_shadow_thickness}`).val(shadowThickness)
                                    $(`#${id_border_color}`).val(borderColor)
                                    $(`#${id_border_thickness}`).val(borderThickness)
                                    $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                    $(`#${id_border}`).val(checkBox_border)
                                    $(`#${id_shadow}`).val(checkBox)
                                    $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                    $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                    $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                    $(`#${id6}`).attr("data-borderColor", borderColor)
                                    $(`#${id6}`).attr("data-borderon", checkBox_border)
                                    $(`#${id6}`).attr("data-shadowon", checkBox)
                                    $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                    $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                    $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                    $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                    }
                  });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)



              document.getElementById(id1).onchange = function () {
                  var colorlength = dataplot[0].x.length
                  var backRGB = this.value;
                  var color_value = backRGB
                  var color_update = []
                  for(var i=0;i<data.y_axisdata.length;i++){
                    color_update = []
                    for (let i = 0; i < colorlength; i++) {
                      color_update.push(color_value);
                  }
                    var update = {

                        marker: {
                            color: color_update
                        }
                    }

                    var colorList1=[]
                    colorList1.push(color_value)
                    var backRGB = color_value;

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])
                  }
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)


              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var update = tester.data
                  if (labelsvalue == "show_labels") {
                    for(var i=0;i<tester.data.length-1;i++){
                      var y_axisdata = tester.data[i].y

                      y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                      });

                      if(i == 0) update[i]['mode'] = 'scatter+text'
                      update[i]['text'] = y_axisdata.map(String),
                      update[i]['textposition'] = 'outside'

                    }
                    var y_axisdata = tester.data[tester.data.length-1].y
                    y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                      });
                      update[i]['mode'] = 'lines+text+markers'
                      update[i]['text'] = y_axisdata.map(String),
                      update[i]['textposition'] = 'outside'

                    document.getElementById(id_labels).value = "hide_labels"
                    document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {

                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[0]["mode"]
                      for(var i=1;i<tester.data.length-1;i++){
                        delete update[i]["text"]
                        delete update[i]["textposition"]
                      }
                      delete update[tester.data.length-1]["text"]
                      delete update[tester.data.length-1]["textposition"]
                      delete update[tester.data.length-1]["mode"]


                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                  Plotly.redraw(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              myPlot.on('plotly_click', function (data) {



                  var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };

                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
                  var config_y_axis_title = $(`#${id12}`).val()
                  $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
              }
              var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points



                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].label)
                      }

                      var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'x')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)



              })
          }
          if (String(graph_subtype) === 'Bar_Stacked_and_Line') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = undefined
            var line_column = data.line_column
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig[line_column] = line_column
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)


            if (data.plotDict === undefined) {
                outerCard.appendTo(`#${plotDict.tabNameID}`)
                var tab_id = plotDict.tabNameID
                outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                orderModal.appendTo(`#${plotDict.tabNameID}`)
                $(`#${id6}`).attr("data-operation_line", operation_line)
                $(`#${id6}`).attr("data-line_column", line_column)
                filterModal.appendTo(`#${plotDict.tabNameID}`)
                $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                var colorlength = data.x_axisdata.length
                var colordata = [];
                var colordataline = 'black'
                var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                var backRGB = color;

                var dataplot = []
                var color_value = chart_color
                for(var y in data.y_axisdata){
                  colordata = [];
                  for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_value);
                    }
                    var trace1 = {
                        x: data.x_axisdata,
                        y: data.y_axisdata[y],
                        type: 'bar',
                        text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                        marker: {
                            color: colordata
                        },
                        name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                    };
                    dataplot.push(trace1)
                    var colorList1=[]
                    colorList1.push(color_value)
                    var backRGB = color_value;

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor
                }

                var trace2 = {
                    x: data.x_axisdata,
                    y: data.line_columndata,
                    type: 'scatter',
                    marker: {
                        color: colordataline,
                    },
                    text: data.line_columndata,
                    textposition: 'top',
                    name: fieldToVerbose(data.line_column, data.mappingDict)
                };
                dataplot.push(trace2)
                var tester = document.getElementById(id)
                var myPlot = document.getElementById(id)

                var layout = {
                    barmode: 'stack',
                    'height': chart_height,
                    'width': chart_width,
                    'plot_bgcolor' : chart_bg_color,
                    'paper_bgcolor': chart_bg_color,
                    hovermode: 'closest',
                    margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                    yaxis: {
                      title:{
                        showgrid: false, 'automargin': true, font: {
                            family: "Arial",
                            color:label_color,
                            size:label_fontsize
                        }
                      }
                    },
                    xaxis: {
                        title: {
                            standoff: 20,
                            text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                family: "Arial",
                                color:label_color,
                                size:label_fontsize
                            }
                        },
                        categoryorder: "category ascending",
                        showgrid: false, 'automargin': true, font: {
                            family: "Arial"
                        }
                    },
                }
            }
            else {
                outerCard.appendTo(`#${data.plotDict.tab_id}`)
                var tab_id = data.plotDict.tab_id
                outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                $(`#${id6}`).attr("data-line_column", line_column)
                $(`#${id6}`).attr("data-operation_line", operation_line)
                filterModal.appendTo(`#${data.plotDict.tab_id}`)
                orderModal.appendTo(`#${data.plotDict.tab_id}`)
                $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                var tester = document.getElementById(id)
                var myPlot = document.getElementById(id)
                var dataplot = data.plotDict.data
                for (let j=0;j<dataplot.length-1;j++)
                    {
                        dataplot[j].x = data.x_axisdata
                        dataplot[j].y = data.y_axisdata[j]
                        delete dataplot[j]["selectedpoints"]
                    }
                dataplot[dataplot.length-1].x = data.x_axisdata
                dataplot[dataplot.length-1].y = data.line_columndata
                delete dataplot[dataplot.length-1]["selectedpoints"]
                var layout = data.plotDict.layout

                var colorlength = data.x_axisdata.length
                var color_old = []
                if(typeof(dataplot[0].marker.color) == 'object')
                {
                  for (let j=0;j<dataplot.length-1;j++)
                  {
                    color_old.push(dataplot[j].marker.color[0])
                  }
                }
                else
                {
                  for (let j=0;j<dataplot.length-1;j++)
                  {
                    color_old.push(dataplot[j].marker.color)
                  }
                }
                if(color_old.indexOf(undefined) != -1){
                  color_old = []
                  color_old.push(color)
                  for (let j=1;j<dataplot.length-1;j++){
                  backRGB = color_old[j-1]
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6

                  var newcolor = rgb2hex(r, g, b)
                  color_old.push(newcolor)
                  }
                }
                if(dataplot[0].marker.color.length != colorlength){
                  for (let j=0;j<dataplot.length-1;j++){
                    var colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                      colordata.push(color_old[j]);
                    }
                    dataplot[j].marker = {color:colordata}
                  }
                }
            }

            var config = { responsive: true, displaylogo: false}

            Plotly.newPlot(tester, dataplot, layout, config)

            for(var i=0;i<data.y_axisdata.length;i++){
              var update = {
                  text: [data.y_axisdata[i]],
              };
              Plotly.restyle(tester, update,[i])
            }
            var update3 = {name: [fieldToVerbose(data.line_column, data.mappingDict)],text: [data.line_columndata],};
            Plotly.restyle(tester, update3, [2])
            $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
            var tabledata = []
            var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
            for(var i=0;i < y_axis.length;i++){
              tableheaders.push(`<b>${fieldToVerbose(data.y_axis[i], data.mappingDict)}</b>`)
            }
            tableheaders.push(`<b>${fieldToVerbose(data.line_column, data.mappingDict)}</b>`)

            tabledata.push(data.x_axisdata)
            for(var i=0;i<y_axisdata;i++){
                tabledata.push(data.y_axisdata[i])
            }
            tabledata.push(data.line_columndata)

            var trace2 = {
                domain: { x: [0, 1], y: [0, 1] },
                header: {
                    align: "center",
                    values: tableheaders,
                    font: { family: "Arial", size: 13, color: ["white"] },
                    fill: { color: 'var(--primary-color)' }
                },
                cells: {
                    align: "center",
                    values: tabledata,
                    font: { family: "Arial", size: 13, color: ["black"] }
                },
                type: 'table'
            };
            var layout2 = {
                margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
            }
            var datatable = [trace2]
            if(global_bg == "yes")
            {
                $(`#${id23}`).prop('checked', true);
            }

            $(`#${id_border_style}`).val(borderStyle)
            setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
            setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
            setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
            var div = document.getElementById(id6)
                var shadowCheckBox = document.getElementById(id_shadow)
                var borderCheckBox = document.getElementById(id_border)
                if (shadowon == "true"){

                    div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                    shadowCheckBox.checked=true;
                   }

                else {
                    div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                    shadowCheckBox.checked=false;
                  }

                if (borderon == "true"){


                    div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                    borderCheckBox.checked=true;
                   }

                else {

                    div.style.border = "none";
                    borderCheckBox.checked=false;
                  }
            $(`#${id6}`).attr("data-shadecolor", shadowColor)
            $(`#${id6}`).attr("data-borderStyle", borderStyle)
            $(`#${id6}`).attr("data-borderThickness", borderThickness)
            $(`#${id6}`).attr("data-borderColor", borderColor)
            $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
            $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
            $(`#${id6}`).attr("data-shadowThick", shadowThickness)
            $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
            $(`#${id6}`).attr("data-shadowY", shadowYOffset)
            $(`#${id6}`).attr("data-shadowX", shadowXOffset)
            $(`#${id_header_fontweight}`).val(header_fontweight)
            $(`#${id6}`).attr("data-header_color", header_color )
            $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
            $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
            $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
            $(`#${id_header_fontstyle}`).val(header_fontstyle)
            $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
            $(`#${id_header_alignment}`).val(header_alignment)
            $(`#${id6}`).attr("data-header_alignment", header_alignment )
            if(data.plotDict != undefined){
              setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
        }

            setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

            document.getElementById(id_tabledownload).onclick = function () {
                var csvData = [];
                var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                for(var i=0;i < y_axis.length;i++){
                    header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                }
                header.push(`${fieldToVerbose(data.line_column, data.mappingDict)}`)
                csvData.push(header);

                for (let i=0;i<dataplot[0].x.length;i++)
                {
                    var new_data=[]
                    new_data.push(dataplot[0].x[i])
                    for (let j=0;j<dataplot.length;j++)
                    {
                        new_data.push(dataplot[j].y[i])
                    }
                    csvData.push(new_data)
                }
                    var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                    var link = document.createElement("a");
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

            }
            document.getElementById(id_tableshow).onclick = function () {
              datatable[0].cells.values[0] = dataplot[0].x
              for(var i=1;i<=dataplot.length;i++){
                datatable[0].cells.values[i] = dataplot[i-1].y
              }
                if (document.getElementById(id_tableicon).innerText == 'Table') {
                    document.getElementById(id_tableicon).innerText = 'Graph'
                    $(`#${id_tabledownload}`).css('display','block');
                    document.getElementById(id).style.display = "none"
                    document.getElementById(id_table).style.display = "block"
                    $(`#${id_table_export}`).css('display','block');
                    var datatablediv = document.getElementById(id_table)
                    Plotly.newPlot(datatablediv, datatable, layout2, config);
                }
                else {
                    document.getElementById(id_tableicon).innerText = 'Table'
                    document.getElementById(id).style.display = "block"
                    document.getElementById(id_table).style.display = "none"
                    $(`#${id_tabledownload}`).css('display','none');
                    $(`#${id_table_export}`).css('display','none');
                }
            }
            crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
             y_axis_end = tester.layout.yaxis.range[1]
            y_axis_start = tester.layout.yaxis.range[0]

            $(`#${id23}`).click(function() {
                if($(this).prop("checked")){
                    plotbg = $('.myDiv').css("background-color");

                    var GradientColor = $(".inner-div").css("background-color");
                    $(`#${id6}`).attr("data-globalbg", "yes")
                    $(`#${id6}`).attr("data-bgcolor", plotbg)
                     var div = document.getElementById(id_header)
                var main_div = document.getElementById(id6)
                var h_bgcolor = $('.global_header_bgcolor').val()
                change_header_bgcolor(main_div,div,h_bgcolor)
                var h_color = $('.global_header_color').val()
                change_header_color(main_div,div,h_color)
                var h_font_size = $('.global_header_fontsize').val()
                change_header_fontsize(main_div,div,h_font_size)
                var h_font_weight =$('.global_header_fontweight').val()
                change_header_fontweight(main_div,div,h_font_weight)
                $(`#${id_header_bgcolor}`).val(h_bgcolor)
                $(`#${id_header_color}`).val(h_color)
                $(`#${id_header_fontsize}`).val(h_font_size)
               $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                var h_font_style = $('.global_header_fontstyle').val()
                                change_header_fontstyle(main_div,div,h_font_style)
                                $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                var alignment = $('.global_header_alignment').val()
                                $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                change_header_alignment(main_div,div,alignment)
                                $(`#${id6}`).attr("data-header_alignment", alignment )
                                var checkBox = $('.global_shadow').prop("checked")
                                var checkBox_border =$('.global_border').prop("checked")
                                var shadowColor = $('.global_shadow_color').val()
                                var shadowXOffset = $('.global_shadow_x').val()
                                var shadowYOffset = $('.global_shadow_y').val()
                                var shadowBlur = $('.global_shadow_blur').val()
                                var shadowThickness = $('.global_shadow_thickness').val()
                                change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                var borderColor = $('.global_border_color').val()
                                var borderThickness = $('.global_border_thickness').val()
                                var borderStyle = $('.global_border_style').val()
                                change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                $(`#${id_shadow}`).prop("checked", checkBox);
                                $(`#${id_border}`).prop("checked", checkBox_border);
                                $(`#${id_shadow_color}`).val(shadowColor);
                                $(`#${id_xshadow}`).val(shadowXOffset)
                                $(`#${id_yshadow}`).val(shadowYOffset)
                                $(`#${id_blurshadow}`).val(shadowBlur)
                                $(`#${id_shadow_thickness}`).val(shadowThickness)
                                $(`#${id_border_color}`).val(borderColor)
                                $(`#${id_border_thickness}`).val(borderThickness)
                                $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                $(`#${id_border}`).val(checkBox_border)
                                $(`#${id_shadow}`).val(checkBox)
                                $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                $(`#${id6}`).attr("data-borderColor", borderColor)
                                $(`#${id6}`).attr("data-borderon", checkBox_border)
                                $(`#${id6}`).attr("data-shadowon", checkBox)
                                $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                if(data.plotDict != undefined){
                                  triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                            }


                }
                else{
                    plotbg = $(`#${id22}`).val();
                    var GradientColor1 = $(`#${id1}`).val();
                    $(`#${id6}`).attr("data-globalbg", "no")
                    $(`#${id6}`).attr("data-bgcolor", plotbg)

                    var GradientColor = hex2rgb(GradientColor1)
                    plotbg = hex2rgb(plotbg)
                }
                $(prevDiv).css("border", "0px");
                $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                $(this).css("border-spacing" ," 15px 15px 15px 15px");


                prevDiv = $(this);

                layout["plot_bgcolor"]= plotbg
                layout["paper_bgcolor"]= plotbg
                var colorList1 = [];
                var colorlength = dataplot[0].x.length


                rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                col= "#" + r1 +g1 + b1;
                var backRGB2 = col;
                var backRGB2 = col;
                var color_value = backRGB2
                var color_update=[]
                for(var i=0;i<data.y_axisdata.length;i++){
                    backRGB = color_value;
                    color_update=[]
                    for(var i=0;i<colorlength;i++){
                        color_update.push(color_value);
                    }

                    var update = {

                        marker: {
                            color: color_update
                        }
                    }

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(color_value)[0] * 0.6
                    var g = hexToRgb(color_value)[1] * 0.6
                    var b = hexToRgb(color_value)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])


                }
                rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                            var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                            r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                            g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                            b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                            plot_col= "#" + r1 +g1 + b1;

                            $(`#${id1}`).val(col)
                            $(`#${id22}`).val(plot_col)
                            $(`#${id6}`).attr("data-color", col)
                            $(`#${id6}`).attr("data-config_color", col)
                            $(`#${id6}`).attr("data-bgcolor", plot_col)

                color = $(`#${id1}`).val()
                $(`#${id6}`).attr("data-color", color)
                $(`#${id6}`).attr("data-config_color", color)

                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

              });
              if($(`#${id23}`).prop("checked"))
              {
                $(`#${id6}`).attr("data-globalbg", "yes")
              }
              else{
                $(`#${id6}`).attr("data-globalbg", "no")
              }


              plotbg = $(".myDiv").css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                $(".global_applyButton").click(function(){
                plotbg = $('.myDiv').css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                if($(`#${id23}`).prop("checked")){
                    plotbg = $('.myDiv').css("background-color");

                    var GradientColor = $(".inner-div").css("background-color");


                    $(prevDiv).css("border", "0px");

                    $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                    prevDiv = $('.myDiv');

                    layout["plot_bgcolor"]= plotbg
                    layout["paper_bgcolor"]= plotbg
                    var colorList1 = [];
                    var colorlength = dataplot[0].x.length


                    rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                    var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                    r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                    g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                    b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                    col= "#" + r1 +g1 + b1;
                    rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                    var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                    r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                    g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                    b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                    bg_col= "#" + r1 +g1 + b1;
                    $(`#${id1}`).val(col)
                                $(`#${id22}`).val(bg_col)
                                $(`#${id6}`).attr("data-color", col)
                                $(`#${id6}`).attr("data-config_color", col)
                                    $(`#${id6}`).attr("data-bgcolor", bg_col)
                    var backRGB2 = col;
                    var backRGB2 = col;

                    colorList1.push(backRGB2)
                    var color_value = backRGB2
                    var colorlength = dataplot[0].x.length
                    var color_update=[]
                    for(var i=0;i<data.y_axisdata.length;i++){
                        var color_value = color_value
                        var backRGB = color_value;

                        color_update=[]
                        for(var i=0;i<colorlength;i++){
                            color_update.push(color_value);
                        }
                        var update = {

                            marker: {
                                color: color_update
                            }
                        }

                        var colorList1=[]
                        colorList1.push(color_value)


                        const hexToRgb = hex =>
                            hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                .substring(1).match(/.{2}/g)
                                .map(x => parseInt(x, 16))
                        var r = hexToRgb(color_value)[0] * 0.6
                        var g = hexToRgb(color_value)[1] * 0.6
                        var b = hexToRgb(color_value)[2] * 0.6


                        var newcolor = rgb2hex(r, g, b)
                        color_value = newcolor

                        Plotly.restyle(tester, update,[i])

                    }
                    color = $(`#${id1}`).val()
                    $(`#${id6}`).attr("data-color", color)
                    $(`#${id6}`).attr("data-config_color", color)

                    $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                    Plotly.relayout(tester, layout)
                    $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                    var div = document.getElementById(id_header)
                    var main_div = document.getElementById(id6)
                    var h_bgcolor = $('.global_header_bgcolor').val()
                    change_header_bgcolor(main_div,div,h_bgcolor)
                    var h_color = $('.global_header_color').val()
                    change_header_color(main_div,div,h_color)
                    var h_font_size = $('.global_header_fontsize').val()
                    change_header_fontsize(main_div,div,h_font_size)
                    var h_font_weight =$('.global_header_fontweight').val()
                    change_header_fontweight(main_div,div,h_font_weight)
                    $(`#${id_header_bgcolor}`).val(h_bgcolor)
                    $(`#${id_header_color}`).val(h_color)
                    $(`#${id_header_fontsize}`).val(h_font_size)
                  $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                var h_font_style = $('.global_header_fontstyle').val()
                                change_header_fontstyle(main_div,div,h_font_style)
                                $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                var alignment = $('.global_header_alignment').val()
                                $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                change_header_alignment(main_div,div,alignment)
                                $(`#${id6}`).attr("data-header_alignment", alignment )
                    $(`#${id6}`).attr("data-header_color", h_color )
                    $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                    $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                    $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                    var checkBox = $('.global_shadow').prop("checked")
                                var checkBox_border =$('.global_border').prop("checked")
                                var shadowColor = $('.global_shadow_color').val()
                                var shadowXOffset = $('.global_shadow_x').val()
                                var shadowYOffset = $('.global_shadow_y').val()
                                var shadowBlur = $('.global_shadow_blur').val()
                                var shadowThickness = $('.global_shadow_thickness').val()
                                change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                var borderColor = $('.global_border_color').val()
                                var borderThickness = $('.global_border_thickness').val()
                                var borderStyle = $('.global_border_style').val()
                                change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                $(`#${id_shadow}`).prop("checked", checkBox);
                                $(`#${id_border}`).prop("checked", checkBox_border);
                                $(`#${id_shadow_color}`).val(shadowColor);
                                $(`#${id_xshadow}`).val(shadowXOffset)
                                $(`#${id_yshadow}`).val(shadowYOffset)
                                $(`#${id_blurshadow}`).val(shadowBlur)
                                $(`#${id_shadow_thickness}`).val(shadowThickness)
                                $(`#${id_border_color}`).val(borderColor)
                                $(`#${id_border_thickness}`).val(borderThickness)
                                $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                $(`#${id_border}`).val(checkBox_border)
                                $(`#${id_shadow}`).val(checkBox)
                                $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                $(`#${id6}`).attr("data-borderColor", borderColor)
                                $(`#${id6}`).attr("data-borderon", checkBox_border)
                                $(`#${id6}`).attr("data-shadowon", checkBox)
                                $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                }

            });

            document.getElementById(id22).onchange = function () {

                var colorlength = dataplot[0].x.length


                var colordata2 = [];
                var backRGB1 = this.value;

                for (let i = 0; i < colorlength; i++) {
                    colordata2.push(backRGB1);
                }
                layout["plot_bgcolor"]= backRGB1
                layout["paper_bgcolor"]= backRGB1




                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                $(`#${id6}`).attr("data-bgcolor", backRGB1)

            }
            color = $(`#${id1}`).val()
                $(`#${id6}`).attr("data-color", color)
                $(`#${id6}`).attr("data-config_color", color)
            var bgcolor = $(`#${id22}`).val()
            $(`#${id6}`).attr("data-bgcolor", bgcolor)



            document.getElementById(id1).onchange = function () {
                var colorlength = dataplot[0].x.length
                var backRGB = this.value;
                var color_value = backRGB
                var color_update = []
                for(var i=0;i<data.y_axisdata.length;i++){
                  color_update = []
                  for (let i = 0; i < colorlength; i++) {
                    color_update.push(color_value);
                }
                  var update = {

                      marker: {
                          color: color_update
                      }
                  }

                  var colorList1=[]
                  colorList1.push(color_value)
                  var backRGB = color_value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)
                  color_value = newcolor

                  Plotly.restyle(tester, update,[i])
                }

                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

color = $(`#${id1}`).val()
                            $(`#${id6}`).attr("data-color", color)
                            var config_color = $(`#${id1}`).val()
                $(`#${id6}`).attr("data-config_color", config_color)
            }
            color = $(`#${id1}`).val()
                            $(`#${id6}`).attr("data-color", color)

            var config_color = $(`#${id1}`).val()
            $(`#${id6}`).attr("data-config_color", config_color)
            document.getElementById(id_filter_button).onclick = function () {
                document.getElementById(id7).style.display = "none"
                var modalid = document.getElementById(id6)
                var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                var offsetvalue = document.getElementById(id_filter).style.top
                document.getElementById(id_filter).style.top = offset

                var displayvalue = document.getElementById(id_filter).style.display

                if (displayvalue == "none") {
                    document.getElementById(id_filter).style.display = "block";

                    $('.charts').each(function () {
                        if ($(this).attr('id') != `${id6}`) {
                            if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                $(this).css('opacity', '0.5')
                            }
                        }
                    })
                }
                else {
                    document.getElementById(id_filter).style.display = "none"
                    $('.charts').each(function () {

                        $(this).css('opacity', '')
                    })
                }
            };

                        // Close Filter Modal
                        closeFilterModal(id_filter_close)


            var config_labels = $(`#${id_labels}`).val()
                            $(`#${id6}`).attr("data-config_labels", config_labels)
            document.getElementById(id_labels).onclick = function () {
                var labelsvalue = document.getElementById(id_labels).value

                if (labelsvalue == "show_labels") {
                  var update = tester.data
                  for(var i=0;i<tester.data.length-1;i++){
                    var y_axisdata = tester.data[i].y

                    y_axisdata = y_axisdata.map(function (each_element) {
                        return Number(each_element.toFixed(2));
                    });
                    if(i == 0) update[i]['mode'] = 'scatter+text'
                    update[i]['text'] = y_axisdata.map(String),
                    update[i]['textposition'] = 'outside'

                  }
                  update[tester.data.length-1]['text'] = [tester.data[tester.data.length-1].y],
                  update[tester.data.length-1]['textposition'] = 'bottom center'
                  update[tester.data.length-1]['mode'] = 'lines+text+markers'

                  document.getElementById(id_labels).value = "hide_labels"
                  document.getElementById(id_labels).innerHTML = "Hide Labels"
                }
                if (labelsvalue == "hide_labels") {
                    var update = tester.data

                    delete update[0]["text"]
                    delete update[0]["textposition"]
                    delete update[0]["mode"]
                    for(var i=1;i<tester.data.length-1;i++){
                      delete update[i]["text"]
                      delete update[i]["textposition"]
                    }
                    delete update[tester.data.length-1]["text"]
                    delete update[tester.data.length-1]["textposition"]
                    delete update[tester.data.length-1]["mode"]
                    $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                    document.getElementById(id_labels).value = "show_labels"
                    document.getElementById(id_labels).innerHTML = "Show Labels"
                }
                Plotly.redraw(tester, update)
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                var config_labels = $(`#${id_labels}`).val()
                            $(`#${id6}`).attr("data-config_labels", config_labels)
            };
            document.getElementById(id2).onchange = function () {
                var textbox2length = document.getElementById(id3).value.length;
                var textbox2value = document.getElementById(id3).value;
                var textbox1value = document.getElementById(id2).value;
                 y_axis_end = tester.layout.yaxis.range[1]
                var gridlines_value = tester.layout.yaxis.showgrid




                if (textbox2length == 0) {
                    var layout = {
                        yaxis: {
                            range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                        }
                    }
                }
                else {
                    var layout = {
                        yaxis: {
                            range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                        }
                    }
                };
                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                var config_xrange = $(`#${id2}`).val()
                $(`#${id6}`).attr("data-config_xrange", config_xrange)
            }
            document.getElementById(id3).onchange = function () {
                var textbox1length = document.getElementById(id2).value.length;
                var textbox2value = document.getElementById(id3).value;
                var textbox1value = document.getElementById(id2).value;
                y_axis_start = tester.layout.yaxis.range[0]
                var gridlines_value = tester.layout.yaxis.showgrid


                if (textbox1length == 0) {
                    var layout = {
                        yaxis: {
                            range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                        }
                    }
                }
                else {
                    var layout = {
                        yaxis: {
                            range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                        }
                    }
                };
                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                var config_yrange = $(`#${id3}`).val()
                            $(`#${id6}`).attr("data-config_yrange", config_yrange)

            }
            var config_xrange = $(`#${id2}`).val()
                        $(`#${id6}`).attr("data-config_xrange", config_xrange)
                        var config_yrange = $(`#${id3}`).val()
                        $(`#${id6}`).attr("data-config_yrange", config_yrange)
            myPlot.on('plotly_click', function (data) {



                var pn = '',
                    tn = '',
                    colors = [];
                for (let i = 0; i < data.points.length; i++) {
                    pn = data.points[i].pointNumber;
                    tn = data.points[i].curveNumber;
                    colors = data.points[i].data.marker.color;
                };

                color = document.getElementById(id4).value
                colors[pn] = color;



                var update = { 'marker': { color: colors } };
                Plotly.restyle(tester, update, [tn])
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                var config_element_color = $(`#${id4}`).val()
                $(`#${id6}`).attr("data-config_element_color", config_element_color)
            });
            var config_element_color = $(`#${id4}`).val()
                        $(`#${id6}`).attr("data-config_element_color", config_element_color)
            var config_gridlines = $(`#${id9}`).val()
            $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
            document.getElementById(id9).onclick = function () {
                var gridlinesvalue = document.getElementById(id9).value
                var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                var x_axis_categoryorder = data_layout.xaxis.categoryorder
                var x_axis_categoryarray = data_layout.xaxis.categoryarray
                var x_axis_title = tester.layout.xaxis.title.text

                if (gridlinesvalue == "show_gridlines") {
                    var layout2 = {
                        yaxis: {
                            showgrid: true, automargin: true
                        }, xaxis: {
                            showgrid: true, automargin: true, title: {
                                standoff: 20,
                                text: x_axis_title, font: {
                                    family: "Arial"
                                }
                            },
                            categoryorder:x_axis_categoryorder,
                            categoryarray:x_axis_categoryarray
                        }
                    };
                    document.getElementById(id9).value = "hide_gridlines"
                    document.getElementById(id9).innerHTML = "Hide Gridlines"
                }
                if (gridlinesvalue == "hide_gridlines") {
                    var layout2 = {
                        yaxis: {
                            showgrid: false, automargin: true
                        }, xaxis: {
                            showgrid: false, automargin: true, title: {
                                standoff: 20,
                                text: x_axis_title, font: {
                                    family: "Arial"
                                }
                            },
                            categoryorder:x_axis_categoryorder,
                            categoryarray:x_axis_categoryarray
                        }
                    };
                    document.getElementById(id9).value = "show_gridlines"
                    document.getElementById(id9).innerHTML = "Show Gridlines"

                }
                Plotly.relayout(tester, layout2)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                var config_gridlines = $(`#${id9}`).val()
                            $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
            };
            document.getElementById(id5).onclick = function () {
                var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                deletePlotId6FromSlicerDict(maindiv);
                deleteUpdatePlotID5(id5,maindiv)
            };
            document.getElementById(id10).onclick = function () {
                let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                resetOpacity(modaldiv,typeClass='charts')
            };
            document.getElementById(id8).onclick = function () {

                var modalid = document.getElementById(id6)


                var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                var offsetvalue = document.getElementById(id7).style.top

                document.getElementById(id7).style.top = offset



                var displayvalue = document.getElementById(id7).style.display

                if (displayvalue == "none") {
                    $(`#${id20}`).empty();
                    var Slicer_ColumnId = ""
                    for (slicer in slicerTabConfigDict){
                        plotlist= slicerTabConfigDict[slicer]
                        if(plotlist.includes(id6)){
                            Slicer_ColumnId = slicer
                        }
                }
                    $(`.${Slicer_ColumnId}`).each(function(){
           ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                    });
                    document.getElementById(id7).style.display = "block";

                    $('.charts').each(function () {

                        if ($(this).attr('id') != `${id6}`) {
                            if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                $(this).css('opacity', '0.5')
                            }
                        }
                    })
                }
                else {
                    document.getElementById(id7).style.display = "none"
                    $('.charts').each(function () {

                        $(this).css('opacity', '')
                    })
                }
            };
            document.getElementById(id11).onchange = function () {
                var xaxistitlevalue = document.getElementById(id11).value;
                var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                var x_axis_categoryorder = data_layout.xaxis.categoryorder
                var x_axis_categoryarray = data_layout.xaxis.categoryarray
                var gridlines_value = tester.layout.yaxis.showgrid




                var layout = {
                    xaxis: {
                        showgrid: gridlines_value, automargin: true, title: {
                            standoff: 20,
                            text: xaxistitlevalue, font: {
                                family: "Arial"
                            }
                        },
                        categoryorder:x_axis_categoryorder,
                        categoryarray:x_axis_categoryarray
                    }


                }
                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                var config_x_axis_title = $(`#${id11}`).val()
                $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
                var config_y_axis_title = $(`#${id12}`).val()
                $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
            }
            var config_x_axis_title = $(`#${id11}`).val()
                $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

            document.getElementById(id14).onchange = function () {
                var legendvalue1 = document.getElementById(id14).value;
                var update = { name: legendvalue1 }

                Plotly.restyle(tester, update, 0)
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                legend_x = $(`#${id14}`).val()
                $(`#${id6}`).attr("data-legend_x", legend_x)


            }
            document.getElementById(id15).onchange = function () {
                var legendvalue2 = document.getElementById(id15).value;
                var update = { name: legendvalue2 }

                Plotly.restyle(tester, update, 1)
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                legend_y = $(`#${id15}`).val()
                $(`#${id6}`).attr("data-legend_y", legend_y)
            }

            legend_x = $(`#${id14}`).val()
                $(`#${id6}`).attr("data-legend_x", legend_x)
                legend_y = $(`#${id15}`).val()
                $(`#${id6}`).attr("data-legend_y", legend_y)


            try {
                var changed_text = data.plotDict.changed_text
            }
            catch (err) {
                var changed_text = []

            }
            myPlot.on('plotly_afterplot', function () {
                d3.selectAll(".xaxislayer-above").selectAll('text')
                    .on("click", function (d) {

                        var labels = tester.data[0].x
                        var position = d.x
                        var text = d.text
                        var labeleditvalue = document.getElementById(id13).value;

                        var dict = {}
                        dict[text] = labeleditvalue
                        changed_text.push(dict)
                        labels[position] = labeleditvalue;



                        var update = { "x": [labels] };

                        Plotly.restyle(tester, update)
                        $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                        $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                        element_label = $(`#${id13}`).val()
                        $(`#${id6}`).attr("data-element_label", element_label)

                    });
            });
            element_label = $(`#${id13}`).val()
                                    $(`#${id6}`).attr("data-element_label", element_label)
            document.getElementById(id18).onclick = function () {


                var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                Plotly.restyle(tester, update)
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

            }

            // Resizable Card
            chartResizeable(id6,tester)

            myPlot.on('plotly_selected', function (data) {
                    points_array = data.points



                    var points = []
                    for (let i = 0; i < points_array.length; i++) {
                        points.push(points_array[i].label)
                    }

                    var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                    var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                    reset_function(crossfilterdict,'x')

            })
            myPlot.on('plotly_deselect', function () {




                var resetdict = { 'id': chartDivId }
                reset_function(resetdict)



            })
        }
        if (String(graph_subtype) === 'Bar_Stacked_and_Multiple_Line') {
          x_axis = data.x_axis
          y_axis = data.y_axis
          second_column = undefined
          var line_column = data.line_column
          modalDataConfig['x_axis'] = data.x_axis
          modalDataConfig['y_axis'] = data.y_axis
          modalDataConfig[line_column] = line_column
          var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

          if (data.plotDict === undefined) {
              outerCard.appendTo(`#${plotDict.tabNameID}`)
              outermodalCard.appendTo(`#${plotDict.tabNameID}`)
              filterModal.appendTo(`#${plotDict.tabNameID}`)
              orderModal.appendTo(`#${plotDict.tabNameID}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-line_column", line_column)
              $(`#${id6}`).attr("data-operation_line",operation_line)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var colorlength = data.x_axisdata.length
              var colordata = [];
              var tab_id = plotDict.tabNameID
              var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
              var backRGB = color;

              var colordataline=[];
              var dataplot = []
              var color_value = chart_color
              for(var y in data.y_axisdata){
                colordata = [];
                for (let i = 0; i < colorlength; i++) {
                      colordata.push(color_value);
                  }
                  var trace1 = {
                      x: data.x_axisdata,
                      y: data.y_axisdata[y],
                      type: 'bar',
                      text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                      marker: {
                          color: colordata
                      },
                      name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                  };
                  dataplot.push(trace1)
                  var colorList1=[]
                  colorList1.push(color_value)
                  var backRGB = color_value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)
                  color_value = newcolor
              }

              backRGB = color_value
              const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
              var r = hexToRgb(backRGB)[0] * 0.9
              var g = hexToRgb(backRGB)[1] * 0.9
              var b = hexToRgb(backRGB)[2] * 0.9
              newcolor = rgb2hex(r, g, b)
              backRGB = newcolor

                for(var line in data.line_columndata){
                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6

                    var newcolor = rgb2hex(r, g, b)
                    var color_value = newcolor

                    var trace1 = {
                        x: data.x_axisdata,
                        y: data.line_columndata[line],
                        mode: 'scatter',
                        text:data.line_columndata[line],
                        marker: {
                            color: color_value
                        },
                        textposition: 'top',
                        name: fieldToVerbose(data.line_column[line], data.mappingDict)
                    };
                    dataplot.push(trace1)
                    colordataline.push(color_value)
                    var backRGB = color_value;

               }
                var tester = document.getElementById(id)
                var myPlot = document.getElementById(id)
                var layout = {
                  barmode: 'stack',
                  'height': chart_height,
                  'width': chart_width,
                  'plot_bgcolor' : chart_bg_color,
                  'paper_bgcolor': chart_bg_color,
                  hovermode: 'closest',
                  margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                  yaxis: {
                    title:{
                      showgrid: false, 'automargin': true, font: {
                          family: "Arial",
                          color:label_color,
                          size:label_fontsize
                      }
                    }
                  },
                  xaxis: {
                      title: {
                          standoff: 20,
                          text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      categoryorder: "category ascending",
                      showgrid: false, 'automargin': true, font: {
                          family: "Arial"
                      }
                  },
              }
          }
          else{
              outerCard.appendTo(`#${data.plotDict.tab_id}`)
              var tab_id = data.plotDict.tab_id
              outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
              $(`#${id6}`).attr("data-line_column", line_column)
              $(`#${id6}`).attr("data-operation_line",operation_line)
              filterModal.appendTo(`#${data.plotDict.tab_id}`)
              orderModal.appendTo(`#${data.plotDict.tab_id}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var tester = document.getElementById(id)
              var myPlot = document.getElementById(id)
              var dataplot = data.plotDict.data
              let j = 0
              for (j=0;j<data.y_axisdata.length;j++)
              {
                  dataplot[j].x = data.x_axisdata
                  dataplot[j].y = data.y_axisdata[j]
                  delete dataplot[j]["selectedpoints"]
              }
              for (let i=0;i<data.line_columndata.length;i++)
                    {
                        dataplot[i+j].x = data.x_axisdata
                        dataplot[i+j].y = data.line_columndata[i]
                        delete dataplot[i+j]["selectedpoints"]

                    }
              var layout = data.plotDict.layout
              var colorlength = data.x_axisdata.length
              var colordata = data.colordata
              var color_old = []
              var color_old_line = []
              if(typeof(dataplot[0].marker.color) == 'object')
              {
                let j = 0
                for (j=0;j<data.y_axisdata.length;j++)
                {
                  color_old.push(dataplot[j].marker.color[0])
                }
                for (let i=0;i<data.line_columndata.length;i++)
                {
                  color_old_line.push(dataplot[i+j].marker.color[0])
                }
              }
              else
              {

                let j =0
                for (j=0;j<dataplot.length-1;j++)
                {
                  color_old.push(dataplot[j].marker.color)
                }
                for (let i=0;i<data.line_columndata.length;i++)
                {
                  color_old_line.push(dataplot[i+j].marker.color)
                }
              }
              if(color_old.indexOf(undefined) != -1){
                color_old = []
                color_old.push(color)
                for (let j=0;j<data.y_axisdata.length;j++){
                backRGB = color_old[j-1]
                const hexToRgb = hex =>
                    hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                        , (m, r, g, b) => '#' + r + r + g + g + b + b)
                        .substring(1).match(/.{2}/g)
                        .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.6
                var g = hexToRgb(backRGB)[1] * 0.6
                var b = hexToRgb(backRGB)[2] * 0.6

                var newcolor = rgb2hex(r, g, b)
                color_old.push(newcolor)
                }
              }
              if(color_old_line.indexOf(undefined) != -1){
                var backRGB = color
                for (let j=0;j<data.y_axisdata.length;j++){
                const hexToRgb = hex =>
                    hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                        , (m, r, g, b) => '#' + r + r + g + g + b + b)
                        .substring(1).match(/.{2}/g)
                        .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.6
                var g = hexToRgb(backRGB)[1] * 0.6
                var b = hexToRgb(backRGB)[2] * 0.6

                var newcolor = rgb2hex(r, g, b)
                backRGB = newcolor
                }
                const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.9
                var g = hexToRgb(backRGB)[1] * 0.9
                var b = hexToRgb(backRGB)[2] * 0.9
                newcolor = rgb2hex(r, g, b)
                backRGB = newcolor

                color_old_line = []
                color_old_line.push(backRGB)
                for (let j=1;j<data.line_columndata.length;j++){
                backRGB = color_old_line[j-1]
                const hexToRgb = hex =>
                    hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                        , (m, r, g, b) => '#' + r + r + g + g + b + b)
                        .substring(1).match(/.{2}/g)
                        .map(x => parseInt(x, 16))
                var r = hexToRgb(backRGB)[0] * 0.6
                var g = hexToRgb(backRGB)[1] * 0.6
                var b = hexToRgb(backRGB)[2] * 0.6

                var newcolor = rgb2hex(r, g, b)
                color_old_line.push(newcolor)
                }
              }
              if(dataplot[0].marker.color.length != colorlength){
                for (let j=0;j<data.y_axisdata.length;j++){
                  var colordata = [];
                  for (let i = 0; i < colorlength; i++) {
                    colordata.push(color_old[j]);
                  }
                  dataplot[j].marker = {color:colordata}
                }
              }
              $(`#${id_label_placement}`).val(label)
          }
          var config = { responsive: true, displaylogo: false}
          Plotly.newPlot(tester, dataplot, layout, config)
          var j = 0
          for(j=0;j<data.y_axisdata.length;j++){
            var update = {
                text: [data.y_axisdata[j]],
            };
            Plotly.restyle(tester, update,[j])
          }
          for(var i=0;i<data.line_columndata.length;i++){
              var update = {
                  text: [data.line_columndata[i]],
              };
              Plotly.restyle(tester, update,[i+j])
          }
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
          var tabledata = []
          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
          for(var i=0;i < y_axis.length;i++){
            tableheaders.push(`<b>${fieldToVerbose(data.y_axis[i], data.mappingDict)}</b>`)
          }
          for(var i=0;i < line_column.length;i++){
              tableheaders.push(`<b>${fieldToVerbose(data.line_column[i], data.mappingDict)}</b>`)
          }
          tabledata.push(data.x_axisdata)
          for(var i=0;i<y_axisdata;i++){
              tabledata.push(data.y_axisdata[i])
          }
          for(var i=0;i<data.line_columndata;i++){
              tabledata.push(data.line_columndata[i])
          }

          var trace2 = {
              domain: { x: [0, 1], y: [0, 1] },
              header: {
                  align: "center",
                  values: tableheaders,
                  font: { family: "Arial", size: 13, color: ["white"] },
                  fill: { color: 'var(--primary-color)' }
              },
              cells: {
                  align: "center",
                  values: tabledata,
                  font: { family: "Arial", size: 13, color: ["black"] }
              },
              type: 'table'
          };
          var layout2 = {
              margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
          }
          var datatable = [trace2]
          if(global_bg == "yes")
          {
              $(`#${id23}`).prop('checked', true);
          }

          if(grad_color == "yes")
          {
              $(`#${id24}`).prop('checked', true);
          }
          else{
              $(`#${id24}`).prop('checked', false);
          }
          $(`#${id_border_style}`).val(borderStyle)
            setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
            setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
            setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
            var div = document.getElementById(id6)
                var shadowCheckBox = document.getElementById(id_shadow)
                var borderCheckBox = document.getElementById(id_border)
                if (shadowon == "true"){

                    div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                    shadowCheckBox.checked=true;
                   }

                else {
                    div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                    shadowCheckBox.checked=false;
                  }

                if (borderon == "true"){


                    div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                    borderCheckBox.checked=true;
                   }

                else {

                    div.style.border = "none";
                    borderCheckBox.checked=false;
                  }
            $(`#${id6}`).attr("data-shadecolor", shadowColor)
            $(`#${id6}`).attr("data-borderStyle", borderStyle)
            $(`#${id6}`).attr("data-borderThickness", borderThickness)
            $(`#${id6}`).attr("data-borderColor", borderColor)
            $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
            $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
            $(`#${id6}`).attr("data-shadowThick", shadowThickness)
            $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
            $(`#${id6}`).attr("data-shadowY", shadowYOffset)
            $(`#${id6}`).attr("data-shadowX", shadowXOffset)

            $(`#${id_header_fontweight}`).val(header_fontweight)
            $(`#${id6}`).attr("data-header_color", header_color )
            $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
            $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
            $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
            $(`#${id_header_fontstyle}`).val(header_fontstyle)
            $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
            $(`#${id_header_alignment}`).val(header_alignment)
            $(`#${id6}`).attr("data-header_alignment", header_alignment )
            if(data.plotDict != undefined){
              setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
        }

            setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
            document.getElementById(id_tabledownload).onclick = function () {
                var csvData = [];
                var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                for(var i=0;i < y_axis.length;i++){
                    header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                }
                for(var i=0;i < line_column.length;i++){
                    header.push(fieldToVerbose(data.line_column[i], data.mappingDict))
                }
                  csvData.push(header);
                  for (let i=0;i<dataplot[0].x.length;i++){
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      for (var j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].y[i])
                      }
                      csvData.push(new_data)
                }
                var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                    var link = document.createElement("a");
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
              }

              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  for(var i=1;i<=dataplot.length;i++){
                    datatable[0].cells.values[i] = dataplot[i-1].y
                  }
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical')
                              }


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                            var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                            r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                            g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                            b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                            plot_col= "#" + r1 +g1 + b1;

                            $(`#${id1}`).val(col)
                            $(`#${id22}`).val(plot_col)
                            $(`#${id6}`).attr("data-color", col)
                            $(`#${id6}`).attr("data-config_color", col)
                            $(`#${id6}`).attr("data-bgcolor", plot_col)

                colorList1.push(backRGB2)
                var color_value = backRGB2
                var color_update=[]
                var i = 0
                for(i=0;i<data.y_axisdata.length;i++){
                    backRGB = color_value;
                    color_update=[]
                    for(var i=0;i<colorlength;i++){
                        color_update.push(color_value);
                    }

                    var update = {

                        marker: {
                            color: color_update
                        }
                    }

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(color_value)[0] * 0.6
                    var g = hexToRgb(color_value)[1] * 0.6
                    var b = hexToRgb(color_value)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])

                }
                  backRGB = newcolor
                  let hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.9
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.9
                  newcolor = rgb2hex(r, g, b)
                  backRGB = newcolor
                  for(var j=0;j<data.line_columndata.length;j++){
                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6

                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      var update = {

                          marker: {
                              color: color_value
                          }
                      }
                      Plotly.restyle(tester, update,[i+j])
                      backRGB = color_value;

                  }
                  color = $(`#${id1}`).val()
                $(`#${id6}`).attr("data-color", color)
                $(`#${id6}`).attr("data-config_color", color)

                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                Plotly.relayout(tester, layout)
                $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
              });
              if($(`#${id23}`).prop("checked"))
              {
                $(`#${id6}`).attr("data-globalbg", "yes")
              }
              else{
                $(`#${id6}`).attr("data-globalbg", "no")
              }
              plotbg = $(".myDiv").css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)

                $(".global_applyButton").click(function(){
                plotbg = $('.myDiv').css("background-color");
                var GradientColor = $(".inner-div").css("background-color");
                $(`#${id6}`).attr("data-global_bg_color", plotbg)
                $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                if($(`#${id23}`).prop("checked")){
                    plotbg = $('.myDiv').css("background-color");

                    var GradientColor = $(".inner-div").css("background-color");


                    $(prevDiv).css("border", "0px");

                    $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                    prevDiv = $('.myDiv');

                    layout["plot_bgcolor"]= plotbg
                    layout["paper_bgcolor"]= plotbg
                    var colorList1 = [];
                    var colorlength = dataplot[0].x.length


                    rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                    var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                    r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                    g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                    b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                    col= "#" + r1 +g1 + b1;
                    rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                    var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                    r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                    g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                    b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                    bg_col= "#" + r1 +g1 + b1;
                    $(`#${id1}`).val(col)
                    $(`#${id22}`).val(bg_col)
                    $(`#${id6}`).attr("data-color", col)
                    $(`#${id6}`).attr("data-config_color", col)
                                    $(`#${id6}`).attr("data-bgcolor", bg_col)
                    var backRGB2 = col;
                    var backRGB2 = col;

                    colorList1.push(backRGB2)
                    for (let i = 0; i < colorlength - 1; i++) {
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList1[colorList1.length - 1]);
                      var r = parseInt(previousHex[1], 16) * 0.8;
                      var g = parseInt(previousHex[2], 16) * 0.8;
                      var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList1.push(newHex)
                  }


                  hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB2)[0] * 0.9
                  var g = hexToRgb(backRGB2)[1] * 0.9
                  var b = hexToRgb(backRGB2)[2] * 0.9

                  var color_value = backRGB2
                  var colorlength = dataplot[0].x.length
                  var color_update=[]
                  var i = 0
                  for(i=0;i<data.y_axisdata.length;i++){
                      var color_value = color_value
                      var backRGB = color_value;

                      color_update=[]
                      for(var j=0;j<colorlength;j++){
                          color_update.push(color_value);
                      }
                      var update = {

                          marker: {
                              color: color_update
                          }
                      }

                      var colorList1=[]
                      colorList1.push(color_value)


                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(color_value)[0] * 0.6
                      var g = hexToRgb(color_value)[1] * 0.6
                      var b = hexToRgb(color_value)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])

                  }

                  backRGB = color_value
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.9
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.9
                  var newcolor = rgb2hex(r, g, b)
                  backRGB = newcolor
               for(var j=0;j<data.line_columndata.length;j++){
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6

                  var newcolor = rgb2hex(r, g, b)
                  color_value = newcolor
                  var update = {

                      marker: {
                          color: color_value
                      }
                  }
                  var colorList1=[]
                  colorList1.push(color_value)
                  backRGB = color_value

                  Plotly.restyle(tester, update,[i+j])
                  color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)

              }


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                              var h_font_style = $('.global_header_fontstyle').val()
                              change_header_fontstyle(main_div,div,h_font_style)
                              $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                              var alignment = $('.global_header_alignment').val()
                              $(`#${id_header_alignment}`).val(alignment).trigger("change")
                              change_header_alignment(main_div,div,alignment)
                              $(`#${id6}`).attr("data-header_alignment", alignment )
                  $(`#${id6}`).attr("data-header_color", h_color )
                  $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                  $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                  $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                  var checkBox = $('.global_shadow').prop("checked")
                              var checkBox_border =$('.global_border').prop("checked")
                              var shadowColor = $('.global_shadow_color').val()
                              var shadowXOffset = $('.global_shadow_x').val()
                              var shadowYOffset = $('.global_shadow_y').val()
                              var shadowBlur = $('.global_shadow_blur').val()
                              var shadowThickness = $('.global_shadow_thickness').val()
                              change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                              var borderColor = $('.global_border_color').val()
                              var borderThickness = $('.global_border_thickness').val()
                              var borderStyle = $('.global_border_style').val()
                              change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                              $(`#${id_shadow}`).prop("checked", checkBox);
                              $(`#${id_border}`).prop("checked", checkBox_border);
                              $(`#${id_shadow_color}`).val(shadowColor);
                              $(`#${id_xshadow}`).val(shadowXOffset)
                              $(`#${id_yshadow}`).val(shadowYOffset)
                              $(`#${id_blurshadow}`).val(shadowBlur)
                              $(`#${id_shadow_thickness}`).val(shadowThickness)
                              $(`#${id_border_color}`).val(borderColor)
                              $(`#${id_border_thickness}`).val(borderThickness)
                              $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                              $(`#${id_border}`).val(checkBox_border)
                              $(`#${id_shadow}`).val(checkBox)
                              $(`#${id6}`).attr("data-shadecolor", shadowColor)
                              $(`#${id6}`).attr("data-borderStyle", borderStyle)
                              $(`#${id6}`).attr("data-borderThickness", borderThickness)
                              $(`#${id6}`).attr("data-borderColor", borderColor)
                              $(`#${id6}`).attr("data-borderon", checkBox_border)
                              $(`#${id6}`).attr("data-shadowon", checkBox)
                              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              }

          });
          document.getElementById(id22).onchange = function () {

            var colorlength = dataplot[0].x.length


            var colordata2 = [];
            var backRGB1 = this.value;

            for (let i = 0; i < colorlength; i++) {
                colordata2.push(backRGB1);
            }
            layout["plot_bgcolor"]= backRGB1
            layout["paper_bgcolor"]= backRGB1




            Plotly.relayout(tester, layout)
            $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
            $(`#${id6}`).attr("data-bgcolor", backRGB1)

        }
        color = $(`#${id1}`).val()
            $(`#${id6}`).attr("data-color", color)
            $(`#${id6}`).attr("data-config_color", color)
        var bgcolor = $(`#${id22}`).val()
        $(`#${id6}`).attr("data-bgcolor", bgcolor)
        var config_labels = $(`#${id_labels}`).val()
                          $(`#${id6}`).attr("data-config_labels", config_labels)

            document.getElementById(id_label_placement).onchange = function () {
            var selectValue = document.getElementById(id_label_placement).value

            if(selectValue == "top"){

                for(var i=0;i<data.line_columndata.length;i++){

                    var update = {


                            textposition:'top center',

                    }


                    Plotly.restyle(tester, update,[i+2])
                }
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
            }
            if(selectValue == "bottom"){
                for(var i=0;i<data.line_columndata.length;i++){

                    var update = {


                            textposition:'bottom center',

                    }


                    Plotly.restyle(tester, update,[i+2])
                }
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
            }
            if(selectValue == "center"){
                for(var i=0;i<data.line_columndata.length;i++){

                    var update = {


                            textposition:'center',

                    }


                    Plotly.restyle(tester, update,[i+2])
                }
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
            }
            var config_label_placement = $(`#${id_label_placement}`).val()
            $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
        }
        var config_label_placement = $(`#${id_label_placement}`).val()
            $(`#${id6}`).attr("data-config_label_placement", config_label_placement)
        document.getElementById(id_labels).onclick = function () {
            var labelsvalue = document.getElementById(id_labels).value
            var update = tester.data
            if (labelsvalue == "show_labels") {
              for(var i=0;i<tester.data.length;i++){
                var y_axisdata = tester.data[i].y

                y_axisdata = y_axisdata.map(function (each_element) {
                    return Number(each_element.toFixed(2));
                });
                if(tester.data[i].type == 'bar'){
                if(i == 0) update[i]['mode'] = 'scatter+text'
                update[i]['text'] = y_axisdata.map(String),
                update[i]['textposition'] = 'outside'
                }
                else{
                update[i]['text'] = [tester.data[i].y],
                update[i]['textposition'] = 'bottom center'
                update[i]['mode'] = 'lines+text+markers'
                }

              }
                $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                document.getElementById(id_labels).value = "hide_labels"
                document.getElementById(id_labels).innerHTML = "Hide Labels"
            }
            if (labelsvalue == "hide_labels") {
              delete update[0]["text"]
              delete update[0]["textposition"]
              delete update[0]["mode"]
              for(var i=1;i<tester.data.length;i++){
                delete update[i]["text"]
                delete update[i]["textposition"]
              }
                document.getElementById(id_labels).value = "show_labels"
                document.getElementById(id_labels).innerHTML = "Show Labels"
            }

            Plotly.redraw(tester, update)

            $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

            var config_labels = $(`#${id_labels}`).val()
                        $(`#${id6}`).attr("data-config_labels", config_labels)

        };
        document.getElementById(id1).onchange = function () {
            var colorlength = dataplot[0].x.length

            var backRGB = this.value;
            var color_value = backRGB
            var color_update = []
            var i = 0
            for(i=0;i<data.y_axisdata.length;i++){
              color_update = []
              for (let j = 0; j < colorlength; j++) {
                color_update.push(color_value);
            }
              var update = {

                  marker: {
                      color: color_update
                  }
              }

              var colorList1=[]
              colorList1.push(color_value)
              var backRGB = color_value;

              const hexToRgb = hex =>
                  hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                      , (m, r, g, b) => '#' + r + r + g + g + b + b)
                      .substring(1).match(/.{2}/g)
                      .map(x => parseInt(x, 16))
              var r = hexToRgb(backRGB)[0] * 0.6
              var g = hexToRgb(backRGB)[1] * 0.6
              var b = hexToRgb(backRGB)[2] * 0.6


              var newcolor = rgb2hex(r, g, b)
              color_value = newcolor

              Plotly.restyle(tester, update,[i])
            }
            backRGB = color_value
            const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
            var r = hexToRgb(backRGB)[0] * 0.9
            var g = hexToRgb(backRGB)[1] * 0.9
            var b = hexToRgb(backRGB)[2] * 0.9
            var newcolor = rgb2hex(r, g, b)
            backRGB = newcolor
            for(var j=0;j<data.line_columndata.length;j++){
                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6

                  var newcolor = rgb2hex(r, g, b)
                  color_value = newcolor

                  var update = {

                      marker: {
                          color: color_value
                      }
                  }

                  var colorList1=[]
                  colorList1.push(color_value)
                  backRGB = color_value;
                  Plotly.restyle(tester, update,[i+j])
                  color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-color", color)
              $(`#${id6}`).attr("data-config_color", color)

              }
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

    color = $(`#${id1}`).val()
                        $(`#${id6}`).attr("data-color", color)
                        var config_color = $(`#${id1}`).val()
            $(`#${id6}`).attr("data-config_color", config_color)
        }
        color = $(`#${id1}`).val()
                        $(`#${id6}`).attr("data-color", color)

        var config_color = $(`#${id1}`).val()
        $(`#${id6}`).attr("data-config_color", config_color)

        document.getElementById(id_filter_button).onclick = function () {
            document.getElementById(id7).style.display = "none"
            var modalid = document.getElementById(id6)
            var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
            var offsetvalue = document.getElementById(id_filter).style.top
            document.getElementById(id_filter).style.top = offset

            var displayvalue = document.getElementById(id_filter).style.display

            if (displayvalue == "none") {
                document.getElementById(id_filter).style.display = "block";

                $('.charts').each(function () {
                    if ($(this).attr('id') != `${id6}`) {
                        if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                            $(this).css('opacity', '0.5')
                        }
                    }
                })
            }
            else {
                document.getElementById(id_filter).style.display = "none"
                $('.charts').each(function () {

                    $(this).css('opacity', '')
                })
            }
        };

                    // Close Filter Modal
                    closeFilterModal(id_filter_close)


        var config_labels = $(`#${id_labels}`).val()
                        $(`#${id6}`).attr("data-config_labels", config_labels)

        document.getElementById(id2).onchange = function () {
            var textbox2length = document.getElementById(id3).value.length;
            var textbox2value = document.getElementById(id3).value;
            var textbox1value = document.getElementById(id2).value;
                y_axis_end = tester.layout.yaxis.range[1]
            var gridlines_value = tester.layout.yaxis.showgrid

            if (textbox2length == 0) {
                var layout = {
                    yaxis: {
                        range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true, title: {
                            standoff: 20,

                        }
                    }
                }
            }
            else {
                var layout = {
                    yaxis: {
                        range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                            standoff: 20,

                        }
                    }
                }
            };
            Plotly.relayout(tester, layout)
            $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
            var config_xrange = $(`#${id2}`).val()
            $(`#${id6}`).attr("data-config_xrange", config_xrange)
        }
        document.getElementById(id3).onchange = function () {
          var textbox1length = document.getElementById(id2).value.length;
          var textbox2value = document.getElementById(id3).value;
          var textbox1value = document.getElementById(id2).value;
          y_axis_start = tester.layout.yaxis.range[0]
          var gridlines_value = tester.layout.yaxis.showgrid



          if (textbox1length == 0) {
              var layout = {
                  yaxis: {
                      range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                          standoff: 20,

                      }
                  }
              }
          }
          else {
              var layout = {
                  yaxis: {
                      range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true, title: {
                          standoff: 20,

                      }
                  }
              }
          };
          Plotly.relayout(tester, layout)
          $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
          var config_yrange = $(`#${id3}`).val()
                      $(`#${id6}`).attr("data-config_yrange", config_yrange)

      }
      var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
                  var config_yrange = $(`#${id3}`).val()
                  $(`#${id6}`).attr("data-config_yrange", config_yrange)
      myPlot.on('plotly_click', function (data) {



          var pn = '',
              tn = '',
              colors = [];
          for (let i = 0; i < data.points.length; i++) {
              pn = data.points[i].pointNumber;
              tn = data.points[i].curveNumber;
              colors = data.points[i].data.marker.color;
          };

          color = document.getElementById(id4).value
          colors[pn] = color;



          var update = { 'marker': { color: colors } };
          Plotly.restyle(tester, update, [tn])
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
          var config_element_color = $(`#${id4}`).val()
          $(`#${id6}`).attr("data-config_element_color", config_element_color)
      });
      var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
      var config_gridlines = $(`#${id9}`).val()
      $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
      document.getElementById(id9).onclick = function () {
          var gridlinesvalue = document.getElementById(id9).value
          var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
          var x_axis_categoryorder = data_layout.xaxis.categoryorder
          var x_axis_categoryarray = data_layout.xaxis.categoryarray
          var x_axis_title = tester.layout.xaxis.title.text

          if (gridlinesvalue == "show_gridlines") {
              var layout2 = {
                  yaxis: {
                      showgrid: true, automargin: true
                  }, xaxis: {
                      showgrid: true, automargin: true, title: {
                          standoff: 20,
                          text: x_axis_title, font: {
                              family: "Arial"
                          }
                      },
                      categoryorder:x_axis_categoryorder,
                      categoryarray:x_axis_categoryarray

                  }
              };
              document.getElementById(id9).value = "hide_gridlines"
              document.getElementById(id9).innerHTML = "Hide Gridlines"
          }
          if (gridlinesvalue == "hide_gridlines") {
              var layout2 = {
                  yaxis: {
                      showgrid: false, automargin: true
                  }, xaxis: {
                      showgrid: false, automargin: true, title: {
                          standoff: 20,
                          text: x_axis_title, font: {
                              family: "Arial"
                          }
                      },
                      categoryorder:x_axis_categoryorder,
                      categoryarray:x_axis_categoryarray
                  }
              };
              document.getElementById(id9).value = "show_gridlines"
              document.getElementById(id9).innerHTML = "Show Gridlines"

          }
          Plotly.relayout(tester, layout2)
          $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
          var config_gridlines = $(`#${id9}`).val()
                      $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
      };
      document.getElementById(id5).onclick = function () {
          var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
          deletePlotId6FromSlicerDict(maindiv);
          deleteUpdatePlotID5(id5,maindiv)
      };
      document.getElementById(id10).onclick = function () {
          let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
          resetOpacity(modaldiv,typeClass='charts')
      };
      document.getElementById(id8).onclick = function () {

          var modalid = document.getElementById(id6)


          var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


          var offsetvalue = document.getElementById(id7).style.top

          document.getElementById(id7).style.top = offset



          var displayvalue = document.getElementById(id7).style.display

          if (displayvalue == "none") {
              $(`#${id20}`).empty();
              var Slicer_ColumnId = ""
              for (slicer in slicerTabConfigDict){
                  plotlist= slicerTabConfigDict[slicer]
                  if(plotlist.includes(id6)){
                      Slicer_ColumnId = slicer
                  }
          }
              $(`.${Slicer_ColumnId}`).each(function(){
     ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
              });
              document.getElementById(id7).style.display = "block";

              $('.charts').each(function () {

                  if ($(this).attr('id') != `${id6}`) {
                      if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                          $(this).css('opacity', '0.5')
                      }
                  }
              })
          }
          else {
              document.getElementById(id7).style.display = "none"
              $('.charts').each(function () {

                  $(this).css('opacity', '')
              })
          }
      };
      document.getElementById(id11).onchange = function () {
          var xaxistitlevalue = document.getElementById(id11).value;
          var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
          var x_axis_categoryorder = data_layout.xaxis.categoryorder
          var x_axis_categoryarray = data_layout.xaxis.categoryarray
          var gridlines_value = tester.layout.yaxis.showgrid




          var layout = {
              xaxis: {
                  showgrid: gridlines_value, automargin: true, title: {
                      standoff: 20,
                      text: xaxistitlevalue, font: {
                          family: "Arial"
                      }
                  },
                  categoryorder:x_axis_categoryorder,
                  categoryarray:x_axis_categoryarray
              }


          }
          Plotly.relayout(tester, layout)
          $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
          var config_x_axis_title = $(`#${id11}`).val()
          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)
          var config_y_axis_title = $(`#${id12}`).val()
          $(`#${id6}`).attr("data-config_y_axis_title", config_y_axis_title)
      }
      var config_x_axis_title = $(`#${id11}`).val()
          $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

      document.getElementById(id14).onchange = function () {
          var legendvalue1 = document.getElementById(id14).value;
          var update = { name: legendvalue1 }

          Plotly.restyle(tester, update, 0)
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
          legend_x = $(`#${id14}`).val()
          $(`#${id6}`).attr("data-legend_x", legend_x)


      }
      document.getElementById(id15).onchange = function () {
          var legendvalue2 = document.getElementById(id15).value;
          var update = { name: legendvalue2 }

          Plotly.restyle(tester, update, 1)
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

          legend_y = $(`#${id15}`).val()
          $(`#${id6}`).attr("data-legend_y", legend_y)
      }

      legend_x = $(`#${id14}`).val()
          $(`#${id6}`).attr("data-legend_x", legend_x)
          legend_y = $(`#${id15}`).val()
          $(`#${id6}`).attr("data-legend_y", legend_y)


      try {
          var changed_text = data.plotDict.changed_text
      }
      catch (err) {
          var changed_text = []

      }
      myPlot.on('plotly_afterplot', function () {
          d3.selectAll(".xaxislayer-above").selectAll('text')
              .on("click", function (d) {

                  var labels = tester.data[0].x
                  var position = d.x
                  var text = d.text
                  var labeleditvalue = document.getElementById(id13).value;

                  var dict = {}
                  dict[text] = labeleditvalue
                  changed_text.push(dict)
                  labels[position] = labeleditvalue;



                  var update = { "x": [labels] };

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                  element_label = $(`#${id13}`).val()
                  $(`#${id6}`).attr("data-element_label", element_label)

              });
      });
      element_label = $(`#${id13}`).val()
                              $(`#${id6}`).attr("data-element_label", element_label)
      document.getElementById(id18).onclick = function () {


          var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
          Plotly.restyle(tester, update)
          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

      }

      // Resizable Card
      chartResizeable(id6,tester)

      myPlot.on('plotly_selected', function (data) {
              points_array = data.points



              var points = []
              for (let i = 0; i < points_array.length; i++) {
                  points.push(points_array[i].label)
              }

              var unique = points.filter((v, i, a) => a.indexOf(v) === i);

              var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
              reset_function(crossfilterdict,'x')

      })
      myPlot.on('plotly_deselect', function () {




          var resetdict = { 'id': chartDivId }
          reset_function(resetdict)



      })
  }
          if (String(graph_subtype) === 'Stacked_Histogram') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = data.second_column
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            modalDataConfig['second_column'] = data.second_column
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

          if (data.plotDict === undefined) {
              outerCard.appendTo(`#${plotDict.tabNameID}`)
              outermodalCard.appendTo(`#${plotDict.tabNameID}`)
              filterModal.appendTo(`#${plotDict.tabNameID}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var colorlength = data.x_axisdata.length
              var colordata = [];

              var colordatasecond = [];
              var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
              var r = parseInt(previousHex[1], 16) * 0.8;
              var g = parseInt(previousHex[2], 16) * 0.8;
              var b = parseInt(previousHex[3], 16) * 0.8;


              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

              var trace1 = {
                  x: data.x_axisdata,
                  type: 'histogram',
                  marker: {
                      color: color,
                  },
                  name: fieldToVerbose(data.x_axis, data.mappingDict)
              };

              var trace2 = {
                  x: data.y_axisdata,
                  type: 'histogram',
                  marker: {
                      color: newHex
                  },
                  name: fieldToVerbose(data.y_axis, data.mappingDict)
              };

              var data_plot = [trace1, trace2]

              var tester = document.getElementById(id)
              var myPlot = document.getElementById(id)
              var layout = {
                  barmode: 'stack',
                  hovermode: 'closest',
                  'height':chart_height,
                  'width': chart_width,
                  margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                  'plot_bgcolor' : chart_bg_color,
                  'paper_bgcolor': chart_bg_color,
                  yaxis: {
                    title:{
                      showgrid: false, 'automargin': true, font: {
                          family: "Arial",
                          color:label_color,
                          size:label_fontsize
                      }
                    }
                  },
                  xaxis: {
                      title: {
                          standoff: 20,
                          text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                      },
                      showgrid: false, 'automargin': true, font: {
                          family: "Arial"
                      }
                  },
              }
          }
          else {
              outerCard.appendTo(`#${data.plotDict.tab_id}`)
              var tab_id = data.plotDict.tab_id
              outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
              filterModal.appendTo(`#${data.plotDict.tab_id}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              var tester = document.getElementById(id)
              var myPlot = document.getElementById(id)
              var data_plot = data.plotDict.data
              data_plot[0].x = data.x_axisdata
              data_plot[1].x = data.y_axisdata
              var colorlength = data.x_axisdata.length
              var colordata = [];
              var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
              var colorlength = data.x_axisdata.length
              var layout = data.plotDict.layout
          }
              var config = { responsive: true, displaylogo: false }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              Plotly.newPlot(tester, data_plot, layout, config)

              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<data_plot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(data_plot[0].x[i])
                      new_data.push(data_plot[1].x[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = data_plot[0].x
                  datatable[0].cells.values[1] = data_plot[1].x
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })

               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")

                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");
                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = data_plot[0].x.length
                  rgb_bg = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                  r1= isNaN(rgb_bg[1]) ? "00" : hexDigits[(rgb_bg[1] - rgb_bg[1] % 16) / 16] + hexDigits[rgb_bg[1] % 16];
                                  g1= isNaN(rgb_bg[2]) ? "00" : hexDigits[(rgb_bg[2] - rgb_bg[2] % 16) / 16] + hexDigits[rgb_bg[2] % 16];
                                  b1= isNaN(rgb_bg[3]) ? "00" : hexDigits[(rgb_bg[3] - rgb_bg[3] % 16) / 16] + hexDigits[rgb_bg[3] % 16];
                                  bg_col= "#" + r1 +g1 + b1;
                                           $(`#${id22}`).val(bg_col)
                                           $(`#${id6}`).attr("data-bgcolor", bg_col)
                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                  var update = { 'marker': { color: col} };
                  var update2 = { 'marker': { color: newHex } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                   $(`#${id1}`).val(col)
                  $(`#${id6}`).attr("data-config_color", col)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)


              $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");

                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = data_plot[0].x.length


                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  rgb_bg = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                                  r1= isNaN(rgb_bg[1]) ? "00" : hexDigits[(rgb_bg[1] - rgb_bg[1] % 16) / 16] + hexDigits[rgb_bg[1] % 16];
                                  g1= isNaN(rgb_bg[2]) ? "00" : hexDigits[(rgb_bg[2] - rgb_bg[2] % 16) / 16] + hexDigits[rgb_bg[2] % 16];
                                  b1= isNaN(rgb_bg[3]) ? "00" : hexDigits[(rgb_bg[3] - rgb_bg[3] % 16) / 16] + hexDigits[rgb_bg[3] % 16];
                                  bg_col= "#" + r1 +g1 + b1;
                                           $(`#${id22}`).val(bg_col)
                                           $(`#${id6}`).attr("data-bgcolor", bg_col)
                                   rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;
                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                  var update = { 'marker': { color: col} };
                  var update2 = { 'marker': { color: newHex } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id1}`).val(col)
                  $(`#${id6}`).attr("data-config_color", col)
                  $(`#${id6}`).attr("data-color", col)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = data_plot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id1).onchange = function () {
                  var colorlength = data_plot[0].x.length
                  var colordata2 = [];
                  var colordata3 = [];

                  var backRGB = this.value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.8
                  var g = hexToRgb(backRGB)[1] * 0.9
                  var b = hexToRgb(backRGB)[2] * 0.8


                  var newcolor = rgb2hex(r, g, b)

                  var update = { 'marker': { color: backRGB } };
                  var update2 = { 'marker': { color: newcolor } };

                  Plotly.restyle(tester, update, [0])
                  Plotly.restyle(tester, update2, [1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              }

              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid

                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              // Close Filter Modal
              closeFilterModal(id_filter_close)

              // Resizable Card
              chartResizeable(id6,tester)
          }
          if (String(graph_subtype) === 'Vertical_Waterfall_Grouped') {
              x_axis = data.x_axis
              y_axis = data.y_axis
              second_column = data.second_column
              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig['second_column'] = data.second_column
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
          $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
          $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];

                  var colordatasecond = [];
                  var measure = [];

                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var y_axisdata2 = data.second_columndata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  x_axisdata2.push('Total')

                  x_axisdata.push('Total')
                  if(y_axisdata != undefined){
                      if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
                  if(y_axisdata2 != undefined){
                      if (Number.isInteger((y_axisdata2.reduce((a, b) => a + b, 0)))) {
                          y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push('goldenrod');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));


                  var trace1 = {
                      x: x_axisdata,
                      y: y_axisdata,
                      type: "waterfall",
                      measure: measure,
                      mode:'markers',
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}},
                      name: fieldToVerbose(data.y_axis, data.mappingDict)
                  };
                  var trace2 = {
                      x: x_axisdata,
                      y: y_axisdata2,
                      type: "waterfall",
                      measure: measure,
                      decreasing: { marker: { color: color}},
                      increasing: { marker: { color: color} },
                      totals: { marker: { color: newHex}},
                      name: fieldToVerbose(data.second_column, data.mappingDict)
                  };
                  var dataplot = [trace1, trace2]
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      barmode: 'group',
                      hovermode: 'closest',
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      'height': chart_height,
                      'width': chart_width,
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      yaxis: {
                        title:{
                          showgrid: false, 'automargin': true,
                          font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)

                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  var colorlength = data.x_axisdata.length
                  var measure = [];

                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var second_columndata = data.second_columndata
                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  x_axisdata2.push('Total')

                  x_axisdata.push('Total')
                  if(y_axisdata != undefined){
                      if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
                  if(second_columndata != undefined){
                      if (Number.isInteger((second_columndata.reduce((a, b) => a + b, 0)))) {
                          second_columndata.push((second_columndata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          second_columndata.push((second_columndata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  measure.push('total')
                  dataplot[0].x = x_axisdata
                  dataplot[0].y = y_axisdata
                  dataplot[0].measure = measure
                  dataplot[1].x = x_axisdata
                  dataplot[1].y = second_columndata
                  dataplot[1].measure = measure

                  var layout = data.plotDict.layout


              }

              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config)
              var update = { "text": [data.y_axisdata], }
              var update2 = { "text": [data.second_columndata],}
              Plotly.restyle(tester, update, [0])
              Plotly.restyle(tester, update2, [1])
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)

              document.getElementById(id1).onchange = function () {


                  var backRGB = this.value;
                  var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backRGB);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: backRGB}},
                                  increasing: { marker: { color: backRGB} },
                                  totals: { marker: { color:newHex}}
                              };

                              Plotly.restyle(tester, update,[0])
                              var update1 = { decreasing: { marker: { color: backRGB}},
                              increasing: { marker: { color: backRGB} },
                              totals: { marker: { color:newHex}}}
                              Plotly.restyle(tester, update1,[1])
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              $(`#${id6}`).attr("data-config_color", color)



              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)

                              $(`#${id6}`).attr("data-config_color", color)

              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[1].y[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[1].y
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");

                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };

                  Plotly.restyle(tester, update,[0])
                  var update1 = { decreasing: { marker: { color: plot_col}},
                  increasing: { marker: { color: plot_col} },
                  totals: { marker: { color:newHex}}}
                  Plotly.restyle(tester, update1,[1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg

                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;


                              $(`#${id22}`).val(plot_col)

                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");

                      var rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(plot_col)
                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(plot_col);
                  var r = parseInt(previousHex[1], 16) * 0.8;
                  var g = parseInt(previousHex[2], 16) * 0.8;
                  var b = parseInt(previousHex[3], 16) * 0.8;

                  var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));

                  var update = {
                                  decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                              };

                  Plotly.restyle(tester, update,[0])
                  var update1 = { decreasing: { marker: { color: plot_col}},
                                  increasing: { marker: { color: plot_col} },
                                  totals: { marker: { color:newHex}}
                                };
                  Plotly.restyle(tester, update1,[1])


                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  $(`#${id6}`).attr("data-color", plot_col)
                  $(`#${id6}`).attr("data-config_color",plot_col)

                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_column= "#" + r1 +g1 + b1;


                              $(`#${id22}`).val(plot_column)

                              $(`#${id6}`).attr("data-bgcolor", plot_column)


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length

                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value

                  if (labelsvalue == "show_labels") {
                      var y_axisdata = tester.data[0].y
                      var y_axisdata2 = tester.data[1].y

                      y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element);
                      });
                      y_axisdata2 = y_axisdata2.map(function (each_element) {
                          return Number(each_element);
                      });

                      var update = tester.data
                      update[0]['mode'] = "markers+text",
                      update[0]['text'] = y_axisdata.map(String),
                          update[0]['textposition'] = 'outside'
                      update[1]['text'] = y_axisdata2.map(String),
                          update[1]['textposition'] = 'outside'

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      var update = tester.data
                      delete update[0]["mode"]
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[1]["text"]
                      delete update[1]["textposition"]
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }

                  Plotly.redraw(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)
              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value

                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              }
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;

                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          }
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              }
              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)


              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              myPlot.on('plotly_afterplot', function () {
                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {

                          var labels = tester.data[0].x
                          var position = d.x
                          var text = d.text
                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                  points_array = data.points



                  var points = []
                  for (let i = 0; i < points_array.length; i++) {
                      points.push(points_array[i].x)
                  }


                  var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                  reset_function(crossfilterdict,'x')

          })
          }
          if (String(graph_subtype) === 'Vertical_Bar_Stacked') {
            x_axis = data.x_axis
            y_axis = data.y_axis
            second_column = undefined
            modalDataConfig['x_axis'] = data.x_axis
            modalDataConfig['y_axis'] = data.y_axis
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  orderModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var colorlength = data.x_axisdata.length
                  var colordata = [];

                  var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                  var backRGB = color;


                  var dataplot = []
                  var color_value = chart_color
                  for(var y in data.y_axisdata){
                    colordata = [];
                    for (let i = 0; i < colorlength; i++) {
                      colordata.push(color_value);
                    }

                      var trace1 = {
                          x: data.x_axisdata,
                          y: data.y_axisdata[y],
                          type: 'bar',
                          text:fieldToVerbose(data.y_axisdata[y], data.mappingDict),
                          marker: {
                              color: colordata
                          },
                          name: fieldToVerbose(data.y_axis[y], data.mappingDict)
                      };
                      dataplot.push(trace1)
                      var colorList1=[]
                      colorList1.push(color_value)
                      var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                  }
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)

                  var layout = {
                      barmode: 'stack',
                      hovermode: 'closest',
                      margin: { l: 40, r: 0, b: 20, t: 10, pad: 4 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                      yaxis: {
                        title:{
                          showgrid: false, 'automargin': true,
                          font: {
                              family: "Arial",
                              color:label_color,
                              size:label_fontsize
                          }
                        }
                      },
                      xaxis: {
                          title: {
                              standoff: 20,
                              text: fieldToVerbose(data.x_axis, data.mappingDict), font: {
                                  family: "Arial",
                                  color:label_color,
                                  size:label_fontsize
                              }
                          },
                          categoryorder: "category ascending",
                          showgrid: false, 'automargin': true, font: {
                              family: "Arial"
                          }
                      },
                  }
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  orderModal.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  for (let j=0;j<dataplot.length;j++)
                      {

                          dataplot[j].x = data.x_axisdata
                          dataplot[j].y = data.y_axisdata[j]
                          delete dataplot[j]["selectedpoints"]

                      }
                  var layout = data.plotDict.layout


                  var colorlength = data.x_axisdata.length
                  var color_old = []
                  if(typeof(dataplot[0].marker.color) == 'object')
                  {
                      for (let j=0;j<dataplot.length;j++)
                      {
                        color_old.push(dataplot[j].marker.color[0])
                      }
                  }
                  else
                  {
                      for (let j=0;j<dataplot.length;j++)
                        {
                          color_old.push(dataplot[j].marker.color)
                        }
                  }
                  if(color_old.indexOf(undefined) != -1){
                      color_old = []
                      color_old.push(color)
                      for (let j=1;j<dataplot.length;j++){
                      backRGB = color_old[j-1]
                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6

                      var newcolor = rgb2hex(r, g, b)
                      color_old.push(newcolor)
                      }
                  }
                  if(dataplot[0].marker.color.length != colorlength){
                    for (let j=0;j<dataplot.length;j++){
                      var colordata = [];
                      for (let i = 0; i < colorlength; i++) {
                        colordata.push(color_old[j]);
                      }
                    dataplot[j].marker = {color:colordata}
                  }
                }
              }

              var config = { responsive: true, displaylogo: false}

              Plotly.newPlot(tester, dataplot, layout, config)
              for(var i=0;i<data.y_axisdata.length;i++){
                var update = {
                    text: [data.y_axisdata[i]],
                };
                Plotly.restyle(tester, update,[i])
              }
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]
              for(var i=0;i < y_axis.length;i++){
                tableheaders.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
              }

              tabledata.push(data.x_axisdata)
              for(var i=0;i<y_axisdata;i++){
                 tabledata.push(data.y_axisdata[i])
              }

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              if(data.plotDict != undefined){
                setAxisOrderValues(data.plotDict, id_axis_order, idOrderModal, order_type = 'Vertical');
              }

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]
                  for(var i=0;i < y_axis.length;i++){
                      header.push(fieldToVerbose(data.y_axis[i], data.mappingDict))
                  }
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      for (let j=0;j<dataplot.length;j++)
                      {
                          new_data.push(dataplot[j].y[i])
                      }

                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  for(var i=1;i<=dataplot.length;i++){
                      datatable[0].cells.values[i] = dataplot[i-1].y
                  }
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'
                      $(`#${id_tabledownload}`).css('display','block');
                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
               y_axis_end = tester.layout.yaxis.range[1]
              y_axis_start = tester.layout.yaxis.range[0]



              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  if(data.plotDict != undefined){
                                    triggerAxisOrderValues(data.plotDict , id_axis_order, idOrderModal, order_type = 'Vertical');
                                  }

                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength =  dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  var color_value = backRGB2
                  for(var i=0;i<data.y_axisdata.length;i++){
                      color_value = color_value
                      backRGB = color_value;

                      var update = {

                          marker: {
                              color: color_value
                          }
                      }

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(color_value)[0] * 0.6
                      var g = hexToRgb(color_value)[1] * 0.6
                      var b = hexToRgb(color_value)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor

                      Plotly.restyle(tester, update,[i])


                  }
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-color", GradientColor)
                      $(`#${id6}`).attr("data-config_color", GradientColor)
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength =  dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var color_value = backRGB2
                      for(var i=0;i<data.y_axisdata.length;i++){
                          var color_value = color_value
                          var backRGB = color_value;
                          var update = {

                              marker: {
                                  color: color_value
                              }
                          }

                          var colorList1=[]
                          colorList1.push(color_value)


                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(color_value)[0] * 0.6
                          var g = hexToRgb(color_value)[1] * 0.6
                          var b = hexToRgb(color_value)[2] * 0.6


                          var newcolor = rgb2hex(r, g, b)
                          color_value = newcolor

                          Plotly.restyle(tester, update,[i])

                      }

                      color = $(`#${id1}`).val()
                      $(`#${id6}`).attr("data-color", color)
                      $(`#${id6}`).attr("data-config_color", color)

                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength =  dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id1).onchange = function () {
                  var backRGB = this.value;
                  var color_value = backRGB
                  for(var i=0;i<data.y_axisdata.length;i++){

                    var update = {

                        marker: {
                            color: color_value
                        }
                    }

                    var colorList1=[]
                    colorList1.push(color_value)
                    var backRGB = color_value;

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor

                    Plotly.restyle(tester, update,[i])
                  }

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)



              var config_color = $(`#${id1}`).val()
              $(`#${id6}`).attr("data-config_color", config_color)
              var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)

              document.getElementById(id_labels).onclick = function () {
                  var labelsvalue = document.getElementById(id_labels).value
                  var update = tester.data
                  if (labelsvalue == "show_labels") {
                    for(var i=0;i<tester.data.length;i++){
                      var y_axisdata = tester.data[i].y

                      y_axisdata = y_axisdata.map(function (each_element) {
                          return Number(each_element.toFixed(2));
                      });

                      if(i == 0) update[i]['mode'] = 'markers+text'
                      update[i]['text'] = y_axisdata.map(String),
                      update[i]['textposition'] = 'outside'
                    }

                      document.getElementById(id_labels).value = "hide_labels"
                      document.getElementById(id_labels).innerHTML = "Hide Labels"
                  }
                  if (labelsvalue == "hide_labels") {
                      delete update[0]["text"]
                      delete update[0]["textposition"]
                      delete update[0]["mode"]
                      for(var i=1;i<tester.data.length;i++){
                        delete update[i]["text"]
                        delete update[i]["textposition"]
                      }
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      document.getElementById(id_labels).value = "show_labels"
                      document.getElementById(id_labels).innerHTML = "Show Labels"
                  }
                Plotly.redraw(tester, update)
                  var config_labels = $(`#${id_labels}`).val()
                              $(`#${id6}`).attr("data-config_labels", config_labels)
              };
              document.getElementById(id2).onchange = function () {
                  var textbox2length = document.getElementById(id3).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                   y_axis_end = tester.layout.yaxis.range[1]
                  var gridlines_value = tester.layout.yaxis.showgrid




                  if (textbox2length == 0) {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, y_axis_end], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_xrange = $(`#${id2}`).val()
                  $(`#${id6}`).attr("data-config_xrange", config_xrange)
              }
              document.getElementById(id3).onchange = function () {
                  var textbox1length = document.getElementById(id2).value.length;
                  var textbox2value = document.getElementById(id3).value;
                  var textbox1value = document.getElementById(id2).value;
                  y_axis_start = tester.layout.yaxis.range[0]
                  var gridlines_value = tester.layout.yaxis.showgrid


                  if (textbox1length == 0) {
                      var layout = {
                          yaxis: {
                              range: [y_axis_start, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  }
                  else {
                      var layout = {
                          yaxis: {
                              range: [textbox1value, textbox2value], showgrid: gridlines_value, automargin: true
                          }
                      }
                  };
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_yrange = $(`#${id3}`).val()
                              $(`#${id6}`).attr("data-config_yrange", config_yrange)

              }
              var config_xrange = $(`#${id2}`).val()
                          $(`#${id6}`).attr("data-config_xrange", config_xrange)
                          var config_yrange = $(`#${id3}`).val()
                          $(`#${id6}`).attr("data-config_yrange", config_yrange)
              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
                  myPlot.on('plotly_click', function (data) {

                  if(document.getElementById(id7).style.display=="block"){
                      var pn = '',
                      tn = '',
                      colors = [];
                  for (let i = 0; i < data.points.length; i++) {
                      pn = data.points[i].pointNumber;
                      tn = data.points[i].curveNumber;
                      colors = data.points[i].data.marker.color;
                  };

                  color = document.getElementById(id4).value
                  colors[pn] = color;



                  var update = { 'marker': { color: colors } };
                  Plotly.restyle(tester, update, [tn])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  var config_element_color = $(`#${id4}`).val()
                  $(`#${id6}`).attr("data-config_element_color", config_element_color)
                  }


              });
              var config_element_color = $(`#${id4}`).val()
                          $(`#${id6}`).attr("data-config_element_color", config_element_color)
              var config_gridlines = $(`#${id9}`).val()
              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)


              document.getElementById(id9).onclick = function () {
                  var gridlinesvalue = document.getElementById(id9).value
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var x_axis_title = tester.layout.xaxis.title.text

                  if (gridlinesvalue == "show_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: true, automargin: true
                          }, xaxis: {
                              showgrid: true, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "hide_gridlines"
                      document.getElementById(id9).innerHTML = "Hide Gridlines"
                  }
                  if (gridlinesvalue == "hide_gridlines") {
                      var layout2 = {
                          yaxis: {
                              showgrid: false, automargin: true
                          }, xaxis: {
                              showgrid: false, automargin: true, title: {
                                  standoff: 20,
                                  text: x_axis_title, font: {
                                      family: "Arial"
                                  }
                              },
                              categoryorder:x_axis_categoryorder,
                              categoryarray:x_axis_categoryarray
                          }
                      };
                      document.getElementById(id9).value = "show_gridlines"
                      document.getElementById(id9).innerHTML = "Show Gridlines"

                  }
                  Plotly.relayout(tester, layout2)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_gridlines = $(`#${id9}`).val()
                              $(`#${id6}`).attr("data-config_gridlines", config_gridlines)

              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


              document.getElementById(id11).onchange = function () {
                  var xaxistitlevalue = document.getElementById(id11).value;
                  var data_layout = JSON.parse($(`#${id6}`).attr("data-layout"))
                  var x_axis_categoryorder = data_layout.xaxis.categoryorder
                  var x_axis_categoryarray = data_layout.xaxis.categoryarray
                  var gridlines_value = tester.layout.yaxis.showgrid




                  var layout = {
                      xaxis: {
                          showgrid: gridlines_value, automargin: true, title: {
                              standoff: 20,
                              text: xaxistitlevalue, font: {
                                  family: "Arial"
                              }
                          },
                          categoryorder:x_axis_categoryorder,
                          categoryarray:x_axis_categoryarray
                      }


                  }
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              }
              var config_x_axis_title = $(`#${id11}`).val()
                  $(`#${id6}`).attr("data-config_x_axis_title", config_x_axis_title)

              document.getElementById(id14).onchange = function () {
                  var legendvalue1 = document.getElementById(id14).value;
                  var update = { name: legendvalue1 }

                  Plotly.restyle(tester, update, 0)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)


              }
              document.getElementById(id15).onchange = function () {
                  var legendvalue2 = document.getElementById(id15).value;
                  var update = { name: legendvalue2 }

                  Plotly.restyle(tester, update, 1)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)

              }

              legend_x = $(`#${id14}`).val()
                  $(`#${id6}`).attr("data-legend_x", legend_x)
                  legend_y = $(`#${id15}`).val()
                  $(`#${id6}`).attr("data-legend_y", legend_y)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              myPlot.on('plotly_afterplot', function () {

                  d3.selectAll(".xaxislayer-above").selectAll('text')
                      .on("click", function (d) {


                          var position = d.x
                          var text = d.text
                          var labels = tester.data[0].x

                          var labeleditvalue = document.getElementById(id13).value;

                          var dict = {}
                          dict[text] = labeleditvalue
                          changed_text.push(dict)
                          labels[position] = labeleditvalue;



                          var update = { "x": [labels] };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
                          element_label = $(`#${id13}`).val()
                          $(`#${id6}`).attr("data-element_label", element_label)

                      });
              });
              element_label = $(`#${id13}`).val()
                                      $(`#${id6}`).attr("data-element_label", element_label)
              document.getElementById(id18).onclick = function () {


                  var update = { "x": [JSON.parse(JSON.stringify(x_axisdata2))] }
                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

              }

              // Resizable Card
              chartResizeable(id6,tester)

              myPlot.on('plotly_selected', function (data) {
                      points_array = data.points



                      var points = []
                      for (let i = 0; i < points_array.length; i++) {
                          points.push(points_array[i].label)
                      }

                      var unique = points.filter((v, i, a) => a.indexOf(v) === i);

                      var crossfilterdict = { 'points': points, 'id': chartDivId, 'tab-id':$('#'+chartDivId).parent().parent().parent().attr('id')}
                      reset_function(crossfilterdict,'x')

              })
              myPlot.on('plotly_deselect', function () {




                  var resetdict = { 'id': chartDivId }
                  reset_function(resetdict)


              })
          }
          if (String(graph_subtype) === 'Angular_Gauge') {
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`);
                  gaugeModal.appendTo(`#${plotDict.tabNameID}`)
                  gaugeModalRange.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)

                  let mainId = $(`#${id6}`).closest(".tab-content").attr("id").replace("analysisTabContent","")
                  let range1 = []
                  range1.unshift({"range":[1,100],"color":"#ffffff"});
                  $("#conditionModalRange"+mainId+"SaveButton").each(function() {
                      let {dataValue} = returnGaugeColorRange($(this),[{"value":data.value}])
                      if(dataValue.length > 0){
                        range1 = dataValue;
                        populateGaugeModalRange(idGaugeModal+"Range",dataValue)
                      } else{
                        dataValue = range1;
                      }

                      $("#"+idGaugeModal+"RangeButton").attr("data-value",JSON.stringify(dataValue))

                  })
                  $("#conditionModal"+mainId+"SaveButton").each(function() {
                      let {dataValue, gaugeBarColor} = returnGaugeColor($(this),[{"value":data.value}])
                      if(gaugeBarColor != "") {
                          color = gaugeBarColor
                      }
                      $("#"+idGaugeModal+"Button").attr("data-value",JSON.stringify(dataValue))
                      $("#"+idGaugeModal+"Button").attr("data-color",color)
                      populateGaugeModal(idGaugeModal,dataValue)
                  })
                  if(parseInt($("#"+"delta"+mainId).val()) != NaN){
                      $("#"+id27).val(parseInt($("#"+"delta"+mainId).val())).trigger("change")
                      $("#"+id26).val($("#"+"thresholdColor"+mainId).val()).trigger("change")
                      $("#"+id25).val($("#"+"threshold"+mainId).val()).trigger("change")
                      var trace1 = {
                          x:data.x_axisdata,
                          y:data.y_axisdata,
                          delta: { reference: parseInt($("#"+"delta"+mainId).val()) },
                          second_columndata:data.second_columndata,
                          value: data.value,
                          title: { text: fieldToVerbose(y_axis, data.mappingDict) + "-" + fieldToVerbose(data.second_column, data.mappingDict) },
                          type: "indicator",
                          mode: "gauge+number+delta",
                          gauge: { axis: { range: [null, data.value * 1.1],tickwidth: 1, tickcolor: "darkblue" }, bar: { color: color },
                              steps: range1,
                              threshold: {
                                  line: { color:$("#"+"thresholdColor"+mainId).val() , width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+"threshold"+mainId).val()
                              }
                          },
                      }
                  } else {
                      var trace1 = {
                          x:data.x_axisdata,
                          y:data.y_axisdata,
                          second_columndata:data.second_columndata,
                          value: data.value,
                          title: { text: fieldToVerbose(y_axis, data.mappingDict) + "-" + fieldToVerbose(data.second_column, data.mappingDict) },
                          type: "indicator",
                          mode: "gauge+number",
                          gauge: { axis: { range: [null, data.value * 1.1],tickwidth: 1, tickcolor: "darkblue" }, bar: { color: color },
                              steps: range1,
                              threshold: {
                                  line: { color:$("#"+"thresholdColor"+mainId).val() , width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+"threshold"+mainId).val()
                              }
                          },
                      }
                  }
                  var dataplot = [trace1]

                  var layout = {
                      margin: { l: 0, r: 0, b: 0, t: 20, pad: 1 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                  }

                  var tester = document.getElementById(id)
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  gaugeModal.appendTo(`#${data.plotDict.tab_id}`)
                  gaugeModalRange.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  if(data.plotDict.hasOwnProperty("thresholdConfig")){
                      var threshold1 = data.plotDict.thresholdConfig
                      for(let i = 0; i < threshold1.length; i++ ){
                          if(threshold1[i].hasOwnProperty(data.plotDict.chartDivId)){
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("delta")){
                                  if(parseInt(threshold1[i][data.plotDict.chartDivId]["delta"]) != NaN){
                                      dataplot[0].mode = "gauge+number+delta"
                                      dataplot[0].delta = { reference: parseInt(threshold1[i][data.plotDict.chartDivId]["delta"]) }
                                  }
                                  $("#"+data.plotDict.chartDivId+"threshold").val(threshold1[i][data.plotDict.chartDivId]["threshold"])
                                  $("#"+data.plotDict.chartDivId+"thresholdColor").val(threshold1[i][data.plotDict.chartDivId]["color"])
                                  $("#"+data.plotDict.chartDivId+"deltaGauge").val(threshold1[i][data.plotDict.chartDivId]["delta"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barColorConfig")){
                                  let dataValue = JSON.parse(threshold1[i][data.plotDict.chartDivId]["barColorConfig"])
                                  let g_id = data.plotDict.chartDivId+"gaugeModal"
                                  populateGaugeModal(g_id,dataValue)
                                  $("#"+data.plotDict.chartDivId+"gaugeModalButton").attr("data-value",threshold1[i][data.plotDict.chartDivId]["barColorConfig"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barRangeConfig")){
                                  let dataValue = JSON.parse(threshold1[i][data.plotDict.chartDivId]["barRangeConfig"])
                                  let g_id = data.plotDict.chartDivId+"gaugeModalRange"
                                  populateGaugeModalRange(g_id,dataValue)
                                  $("#"+data.plotDict.chartDivId+"gaugeModalRangeButton").attr("data-value",threshold1[i][data.plotDict.chartDivId]["barRangeConfig"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barColor")){
                                  $("#"+data.plotDict.chartDivId+"gaugeModalButton").attr("data-color",threshold1[i][data.plotDict.chartDivId]["barColor"])
                              }
                          }
                      }
                  }
                  dataplot[0].value = data.value
                  dataplot[0].gauge.axis.range = [null, data.value * 1.1]
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[0].second_columndata = data.second_columndata

                  var layout = data.plotDict.layout



              }
              var config = { responsive: true, displaylogo: false }

              Plotly.newPlot(tester, dataplot, layout, config);
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

              if(grad_color == "yes")
              {
                  $(`#${id24}`).prop('checked', true);
              }
              else{
                  $(`#${id24}`).prop('checked', false);
              }
              $("#"+id6).find(".bg-arc").css("opacity",0.3)
              $("#"+idGaugeModal+"SaveButton").on("click",function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($("#"+id25).val())
                      }
                  }
                  let { dataValue, gaugeBarColor } = returnGaugeColor($(this),attr)
                  attr[0]["gauge"]["bar"] = {"color":gaugeBarColor}
                  $("#"+id_.replace("card","")+"gaugeModalButton").attr("data-value",JSON.stringify(dataValue));
                  $("#"+id_.replace("card","")+"gaugeModalButton").attr("data-color",gaugeBarColor)
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+idGaugeModal+"RangeSaveButton").on("click",function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($("#"+id25).val())
                      }
                  }
                  let { dataValue } = returnGaugeColorRange($(this),attr)
                  attr[0]["gauge"]["steps"] = dataValue
                  $("#"+id_.replace("card","")+"gaugeModalRangeButton").attr("data-value",JSON.stringify(dataValue));
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).find(".bg-arc").css("opacity",0.3)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id25).blur(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($(this).val() == null || $(this).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($(this).val())
                      }
                  }
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id26).change(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id26.replace("thresholdColor","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  let threshold_
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      threshold_ = undefined
                  } else {
                      threshold_ = parseInt($("#"+id25).val())
                  }
                  attr[0]["gauge"]["threshold"] = {
                      line: { color: $(this).val(), width: 4 },
                      thickness: 0.75,
                      value: threshold_
                  }
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id27).blur(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  var update
                  let id_ = id27.replace("deltaGauge","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  if ($(this).val() == null || $(this).val() == undefined){
                      update = {
                          mode: mode_,
                          delta: {},
                          gauge: attr[0]["gauge"]
                      }
                      attr[0]["delta"] = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      update = {
                          mode: mode_,
                          delta: { reference: parseInt($(this).val()) },
                          gauge: attr[0]["gauge"]
                      }
                      attr[0]["delta"] = { reference: parseInt($(this).val()) }
                  }
                  Plotly.update(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[0].second_columndata[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[0].second_columndata
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")


                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length


                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)
                  let id6_ = id6.replace("card","");
                  var update = {}
                  let range1 = []
                  let attr = {}
                  $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
                      let {dataValue} = returnGaugeColorRange($(this),attr)
                      range1 = dataValue
                  })
                  if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
                      var update = {
                          "mode": "gauge+number+delta",
                          delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
                          "value": [data.value],
                          "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB2 },
                              steps: range1,
                              threshold: {
                                  line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+id6_+"threshold").val()
                              }
                          },
                          "x" : [data.x_axisdata],
                      "y" : [data.y_axisdata],
                      "second_columndata" : [data.second_columndata]
                      }
                  } else {
                      var update = {
                          "value": [data.value],
                          "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB2 },
                              steps: range1,
                              threshold: {
                                  line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+id6_+"threshold").val()
                              }
                          },
                          "x" : [data.x_axisdata],
                      "y" : [data.y_axisdata],
                      "second_columndata" : [data.second_columndata]
                      }

                  }

                  Plotly.restyle(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  setTimeout(() => {
                      $("#"+id6.replace("card","")+"threshold").trigger("blur");
                      $("#"+id6.replace("card","")+"gaugeModalSaveButton").trigger("click");
                      $("#"+id6).find("bg-arc").css("opacity",0.3)
                  },1000)
                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");

                      $(`#${id6}`).attr("data-color", GradientColor)
                      $(`#${id6}`).attr("data-config_color", GradientColor)
                                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $('.myDiv');

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                      $(`#${id22}`).val(bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      let id6_ = id6.replace("card","");
                      var update = {}
                      let attr = {}
                      let range1 = []
                      $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
                          let {dataValue} = returnGaugeColorRange($(this),attr)
                          range1 = dataValue
                      })
                      if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
                          var update = {
                              "mode": "gauge+number+delta",
                              delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
                              "value": [data.value],
                              "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB2 },
                                  steps: range1,
                                  threshold: {
                                      line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                      thickness: 0.75,
                                      value: $("#"+id6_+"threshold").val()
                                  }
                              },
                              "x" : [data.x_axisdata],
                          "y" : [data.y_axisdata],
                          "second_columndata" : [data.second_columndata]
                          }
                      } else {
                          var update = {
                              "value": [data.value],
                              "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB2 },
                                  steps: range1,
                                  threshold: {
                                      line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                      thickness: 0.75,
                                      value: $("#"+id6_+"threshold").val()
                                  }
                              },
                              "x" : [data.x_axisdata],
                          "y" : [data.y_axisdata],
                          "second_columndata" : [data.second_columndata]
                          }

                      }

                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      setTimeout(() => {
                          $("#"+id6.replace("card","")+"threshold").trigger("blur");
                          $("#"+id6.replace("card","")+"gaugeModalSaveButton").trigger("click");
                          $("#"+id6).find("bg-arc").css("opacity",0.3)
                      },1000)
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                    $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)
              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;
                  let id6_ = id6.replace("card","");
                  var update = {}
                  let attr = {}
                  let range1 = []
                  $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
                      let {dataValue} = returnGaugeColorRange($(this),attr)
                      range1 = dataValue
                  })
                  if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
                      var update = {
                          "mode": "gauge+number+delta",
                          delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
                          "value": [data.value],
                          "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB },
                              steps: range1,
                              threshold: {
                                  line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+id6_+"threshold").val()
                              }
                          },
                          "x" : [data.x_axisdata],
                      "y" : [data.y_axisdata],
                      "second_columndata" : [data.second_columndata]
                      }
                  } else {
                      var update = {
                          "value": [data.value],
                          "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: backRGB },
                              steps: range1,
                              threshold: {
                                  line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+id6_+"threshold").val()
                              }
                          },
                          "x" : [data.x_axisdata],
                      "y" : [data.y_axisdata],
                      "second_columndata" : [data.second_columndata]
                      }

                  }

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              //Resizable card
              chartResizeable(id6,tester)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
          }
          if (String(graph_subtype) === 'Bullet_Gauge') {
              x_axis = data.x_axis
              y_axis = data.y_axis
              second_column = data.second_column
              var title = y_axis + "-" + data.second_column
              modalDataConfig['x_axis'] = data.x_axis
              modalDataConfig['y_axis'] = data.y_axis
              modalDataConfig['second_column'] = data.second_column
              modalDataConfig[title] = title
              var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)

              if (data.plotDict === undefined) {

                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  var tab_id = plotDict.tabNameID
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`);
                  gaugeModal.appendTo(`#${plotDict.tabNameID}`)
                  gaugeModalRange.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  let mainId = $(`#${id6}`).closest(".tab-content").attr("id").replace("analysisTabContent","")
                  let range1 = []
                  $("#conditionModalRange"+mainId+"SaveButton").each(function() {
                      let {dataValue} = returnGaugeColorRange($(this),[{"value":data.value}])
                      range1 = dataValue
                      $("#"+idGaugeModal+"RangeButton").attr("data-value",JSON.stringify(dataValue))
                      populateGaugeModalRange(idGaugeModal+"Range",dataValue)
                  })
                  $("#conditionModal"+mainId+"SaveButton").each(function() {
                      let {dataValue, gaugeBarColor} = returnGaugeColor($(this),[{"value":data.value}])
                      if(gaugeBarColor != "") {
                          color = gaugeBarColor
                      }
                      $("#"+idGaugeModal+"Button").attr("data-value",JSON.stringify(dataValue))
                      $("#"+idGaugeModal+"Button").attr("data-color",color)
                      populateGaugeModal(idGaugeModal,dataValue)
                  })
                  if(parseInt($("#"+"delta"+mainId).val()) != NaN){
                      $("#"+id27).val(parseInt($("#"+"delta"+mainId).val())).trigger("change")
                      $("#"+id26).val($("#"+"thresholdColor"+mainId).val()).trigger("change")
                      $("#"+id25).val($("#"+"threshold"+mainId).val()).trigger("change")
                      var trace1 = {
                          x:data.x_axisdata,
                          y:data.y_axisdata,
                          delta: { reference: parseInt($("#"+"delta"+mainId).val()) },
                          second_columndata:data.second_columndata,
                          value: data.value,
                          title: { text: fieldToVerbose(y_axis, data.mappingDict) + "-" + fieldToVerbose(data.second_column, data.mappingDict) },
                          type: "indicator",
                          mode: "gauge+number+delta",
                          gauge: { axis: { range: [null, data.value * 1.1],tickwidth: 1, tickcolor: "darkblue" }, bar: { color: color },
                              shape: "bullet",
                              steps: range1,
                              threshold: {
                                  line: { color:$("#"+"thresholdColor"+mainId).val() , width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+"threshold"+mainId).val()
                              }
                          },
                      }
                  } else {
                      var trace1 = {
                          x:data.x_axisdata,
                          y:data.y_axisdata,
                          second_columndata:data.second_columndata,
                          value: data.value,
                          title: { text: fieldToVerbose(y_axis, data.mappingDict) + "-" + fieldToVerbose(data.second_column, data.mappingDict) },
                          type: "indicator",
                          mode: "gauge+number",
                          gauge: { axis: { range: [null, data.value * 1.1],tickwidth: 1, tickcolor: "darkblue" }, bar: { color: color },
                              shape: "bullet",
                              steps: range1,
                              threshold: {
                                  line: { color:$("#"+"thresholdColor"+mainId).val() , width: 4 },
                                  thickness: 0.75,
                                  value: $("#"+"threshold"+mainId).val()
                              }
                          },
                      }
                  }
                  var dataplot = [trace1]

                  var layout = {
                      margin: { l: 60, r: 0, b: 0, t: 20, pad: 1 },
                      'height': chart_height,
                      'width': chart_width,
                      'plot_bgcolor' : chart_bg_color,
                      'paper_bgcolor': chart_bg_color,
                  }
                  var tester = document.getElementById(id)
              }
              else {
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  var tab_id = data.plotDict.tab_id
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  gaugeModal.appendTo(`#${data.plotDict.tab_id}`)
                  gaugeModalRange.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)
                  var dataplot = data.plotDict.data
                  if(data.plotDict.hasOwnProperty("thresholdConfig")){
                      var threshold1 = data.plotDict.thresholdConfig
                      for(let i = 0; i < threshold1.length; i++ ){
                          if(threshold1[i].hasOwnProperty(data.plotDict.chartDivId)){
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("delta")){
                                  if(parseInt(threshold1[i][data.plotDict.chartDivId]["delta"]) != NaN){
                                      dataplot[0].mode = "gauge+number+delta"
                                      dataplot[0].delta = { reference: parseInt(threshold1[i][data.plotDict.chartDivId]["delta"]) }
                                  }
                                  $("#"+data.plotDict.chartDivId+"threshold").val(threshold1[i][data.plotDict.chartDivId]["threshold"])
                                  $("#"+data.plotDict.chartDivId+"thresholdColor").val(threshold1[i][data.plotDict.chartDivId]["color"])
                                  $("#"+data.plotDict.chartDivId+"deltaGauge").val(threshold1[i][data.plotDict.chartDivId]["delta"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barColorConfig")){
                                  let dataValue = JSON.parse(threshold1[i][data.plotDict.chartDivId]["barColorConfig"])
                                  let g_id = data.plotDict.chartDivId+"gaugeModal"
                                  populateGaugeModal(g_id,dataValue)
                                  $("#"+data.plotDict.chartDivId+"gaugeModalButton").attr("data-value",threshold1[i][data.plotDict.chartDivId]["barColorConfig"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barRangeConfig")){
                                  let dataValue = JSON.parse(threshold1[i][data.plotDict.chartDivId]["barRangeConfig"])
                                  let g_id = data.plotDict.chartDivId+"gaugeModalRange"
                                  populateGaugeModalRange(g_id,dataValue)
                                  $("#"+data.plotDict.chartDivId+"gaugeModalRangeButton").attr("data-value",threshold1[i][data.plotDict.chartDivId]["barRangeConfig"])
                              }
                              if(threshold1[i][data.plotDict.chartDivId].hasOwnProperty("barColor")){
                                  $("#"+data.plotDict.chartDivId+"gaugeModalButton").attr("data-color",threshold1[i][data.plotDict.chartDivId]["barColor"])
                              }
                          }
                      }
                  }
                  dataplot[0].value = data.value
                  dataplot[0].gauge.axis.range = [null, data.value * 1.1]
                  dataplot[0].x = data.x_axisdata
                  dataplot[0].y = data.y_axisdata
                  dataplot[0].second_columndata = data.second_columndata
                  var layout = data.plotDict.layout




              }
              var config = { responsive: true, displaylogo: false }
              Plotly.newPlot(tester, dataplot, layout, config);
              crossFilterlist.push({ 'id': chartDivId, 'tester': tester, 'graph_subtype': graph_subtype })
              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)

              var trace2 = {
                  domain: { x: [0, 1], y: [0, 1] },
                  header: {
                      align: "center",
                      values: tableheaders,
                      font: { family: "Arial", size: 13, color: ["white"] },
                      fill: { color: 'var(--primary-color)' }
                  },
                  cells: {
                      align: "center",
                      values: tabledata,
                      font: { family: "Arial", size: 13, color: ["black"] }
                  },
                  type: 'table'
              };
              var layout2 = {
                  margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
              }
              var datatable = [trace2]
              $("#"+id6).find(".bg-arc").css("opacity",0.3)
              $("#"+idGaugeModal+"SaveButton").on("click",function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($("#"+id25).val())
                      }
                  }
                  let { dataValue, gaugeBarColor } = returnGaugeColor($(this),attr)
                  attr[0]["gauge"]["bar"] = {"color":gaugeBarColor}
                  $("#"+id_.replace("card","")+"gaugeModalButton").attr("data-value",JSON.stringify(dataValue));
                  $("#"+id_.replace("card","")+"gaugeModalButton").attr("data-color",gaugeBarColor)
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+idGaugeModal+"RangeSaveButton").on("click",function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($("#"+id25).val())
                      }
                  }
                  let { dataValue } = returnGaugeColorRange($(this),attr)
                  attr[0]["gauge"]["steps"] = dataValue
                  $("#"+id_.replace("card","")+"gaugeModalRangeButton").attr("data-value",JSON.stringify(dataValue));
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).find(".bg-arc").css("opacity",0.3)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id25).blur(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id25.replace("threshold","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  if ($(this).val() == null || $(this).val() == undefined){
                      attr[0]["gauge"]["threshold"] = {}
                  } else {
                      attr[0]["gauge"]["threshold"] = {
                          line: { color: $("#"+id26).val(), width: 4 },
                          thickness: 0.75,
                          value: parseInt($(this).val())
                      }
                  }
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id26).change(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  let id_ = id26.replace("thresholdColor","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  let delta
                  if ($("#"+id27).val() == null || $("#"+id27).val() == undefined){
                      delta = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      delta = { reference: parseInt($("#"+id27).val())}
                  }
                  let threshold_
                  if ($("#"+id25).val() == null || $("#"+id25).val() == undefined){
                      threshold_ = undefined
                  } else {
                      threshold_ = parseInt($("#"+id25).val())
                  }
                  attr[0]["gauge"]["threshold"] = {
                      line: { color: $(this).val(), width: 4 },
                      thickness: 0.75,
                      value: threshold_
                  }
                  var update = {
                      mode: mode_,
                      delta:delta,
                      gauge: attr[0]["gauge"],
                  }
                  Plotly.restyle(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              $("#"+id27).blur(function() {
                  var tester = document.getElementById(id)
                  var mode_ = "gauge+number"
                  var update
                  let id_ = id27.replace("deltaGauge","card")
                  let attr = JSON.parse($("#"+id_).attr("data-data"))
                  if ($(this).val() == null || $(this).val() == undefined){
                      update = {
                          mode: mode_,
                          delta: {},
                          gauge: attr[0]["gauge"]
                      }
                      attr[0]["delta"] = {}
                  } else {
                      mode_ = "gauge+number+delta"
                      update = {
                          mode: mode_,
                          delta: { reference: parseInt($(this).val()) },
                          gauge: attr[0]["gauge"]
                      }
                      attr[0]["delta"] = { reference: parseInt($(this).val()) }
                  }
                  Plotly.update(tester, update)
                  $("#"+id_).attr("data-data",JSON.stringify(attr))
              })
              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }


              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)
              $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)

              document.getElementById(id_tabledownload).onclick = function () {
                  var csvData = [];
                  var header = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`, `${fieldToVerbose(data.y_axis, data.mappingDict)}`, `${fieldToVerbose(data.second_column, data.mappingDict)}`]
                  csvData.push(header);

                  for (let i=0;i<dataplot[0].x.length;i++)
                  {
                      var new_data=[]
                      new_data.push(dataplot[0].x[i])
                      new_data.push(dataplot[0].y[i])
                      new_data.push(dataplot[0].second_columndata[i])
                      csvData.push(new_data)
                  }
                      var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                      var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                      var link = document.createElement("a");
                      var url = URL.createObjectURL(blob);
                      link.setAttribute("href", url);
                      link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                      link.style.visibility = 'hidden';
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);

              }
              document.getElementById(id_tableshow).onclick = function () {
                  datatable[0].cells.values[0] = dataplot[0].x
                  datatable[0].cells.values[1] = dataplot[0].y
                  datatable[0].cells.values[2] = dataplot[0].second_columndata
                  if (document.getElementById(id_tableicon).innerText == 'Table') {
                      document.getElementById(id_tableicon).innerText = 'Graph'

                      document.getElementById(id).style.display = "none"
                      document.getElementById(id_table).style.display = "block"
                      $(`#${id_tabledownload}`).css('display','block');
                      $(`#${id_table_export}`).css('display','block');
                      var datatablediv = document.getElementById(id_table)
                      Plotly.newPlot(datatablediv, datatable, layout2, config);
                  }
                  else {
                      document.getElementById(id_tableicon).innerText = 'Table'
                      document.getElementById(id).style.display = "block"
                      document.getElementById(id_table).style.display = "none"
                      $(`#${id_tabledownload}`).css('display','none');
                      $(`#${id_table_export}`).css('display','none');
                  }
              }

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");
                      $(`#${id6}`).attr("data-globalbg", "yes")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)
                       var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      plotbg = $(`#${id22}`).val();
                      var GradientColor1 = $(`#${id1}`).val();
                      $(`#${id6}`).attr("data-globalbg", "no")
                      $(`#${id6}`).attr("data-bgcolor", plotbg)

                      var GradientColor = hex2rgb(GradientColor1)
                      plotbg = hex2rgb(plotbg)
                  }
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  prevDiv = $(this);

                  layout["plot_bgcolor"]= plotbg
                  layout["paper_bgcolor"]= plotbg
                  var colorList1 = [];
                  var colorlength = dataplot[0].x.length
                  rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                  var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                  r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                  g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                  b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                  col= "#" + r1 +g1 + b1;
                  var backRGB2 = col;
                  var backRGB2 = col;
                  rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                              var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                              r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                              g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                              b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                              plot_col= "#" + r1 +g1 + b1;

                              $(`#${id1}`).val(col)
                              $(`#${id22}`).val(plot_col)
                              $(`#${id6}`).attr("data-color", col)
                              $(`#${id6}`).attr("data-config_color", col)
                              $(`#${id6}`).attr("data-bgcolor", plot_col)

                  colorList1.push(backRGB2)

                  var update = { gauge: { axis: { range: [null, data.value * 1.1] }, shape: "bullet", bar: { color: backRGB2 } } }

                  Plotly.restyle(tester, update)

                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }


                plotbg = $(".myDiv").css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");
                  var GradientColor = $(".inner-div").css("background-color");
                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).attr("data-global_ind_color", GradientColor)
                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      var GradientColor = $(".inner-div").css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");


                      prevDiv = $(this);

                      layout["plot_bgcolor"]= plotbg
                      layout["paper_bgcolor"]= plotbg
                      var colorList1 = [];
                      var colorlength = dataplot[0].x.length


                      rgb = GradientColor.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      col= "#" + r1 +g1 + b1;
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      $(`#${id1}`).val(col)
                                  $(`#${id22}`).val(bg_col)
                                  $(`#${id6}`).attr("data-color", col)
                                  $(`#${id6}`).attr("data-config_color", col)
                                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      var backRGB2 = col;
                      var backRGB2 = col;

                      colorList1.push(backRGB2)
                      var update = { gauge: { axis: { range: [null, data.value * 1.1] }, shape: "bullet", bar: { color: backRGB2 } } }
                      Plotly.restyle(tester, update)
                      $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      Plotly.relayout(tester, layout)
                      $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                      var div = document.getElementById(id_header)
                      var main_div = document.getElementById(id6)
                      var h_bgcolor = $('.global_header_bgcolor').val()
                      change_header_bgcolor(main_div,div,h_bgcolor)
                      var h_color = $('.global_header_color').val()
                      change_header_color(main_div,div,h_color)
                      var h_font_size = $('.global_header_fontsize').val()
                      change_header_fontsize(main_div,div,h_font_size)
                      var h_font_weight =$('.global_header_fontweight').val()
                      change_header_fontweight(main_div,div,h_font_weight)
                      $(`#${id_header_bgcolor}`).val(h_bgcolor)
                      $(`#${id_header_color}`).val(h_color)
                      $(`#${id_header_fontsize}`).val(h_font_size)
                     $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).attr("data-header_color", h_color )
                      $(`#${id6}`).attr("data-header_bgcolor", h_bgcolor )
                      $(`#${id6}`).attr("data-header_fontsize", h_font_size )
                      $(`#${id6}`).attr("data-header_fontweight", h_font_weight )
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)

                  }

              });

              document.getElementById(id22).onchange = function () {

                  var colorlength = dataplot[0].x.length


                  var colordata2 = [];
                  var backRGB1 = this.value;

                  for (let i = 0; i < colorlength; i++) {
                      colordata2.push(backRGB1);
                  }
                  layout["plot_bgcolor"]= backRGB1
                  layout["paper_bgcolor"]= backRGB1




                  Plotly.relayout(tester, layout)
                  $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
                  $(`#${id6}`).attr("data-bgcolor", backRGB1)

              }
              color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  $(`#${id6}`).attr("data-config_color", color)
              var bgcolor = $(`#${id22}`).val()
              $(`#${id6}`).attr("data-bgcolor", bgcolor)

              document.getElementById(id8).onclick = function () {

                  var modalid = document.getElementById(id6)


                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;


                  var offsetvalue = document.getElementById(id7).style.top

                  document.getElementById(id7).style.top = offset



                  var displayvalue = document.getElementById(id7).style.display

                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

              document.getElementById(id5).onclick = function () {
                  var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
                  deletePlotId6FromSlicerDict(maindiv);
                  deleteUpdatePlotID5(id5,maindiv)
              };
              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };

              document.getElementById(id1).onchange = function () {

                  var backRGB = this.value;
                  var update = { gauge: { axis: { range: [null, data.value * 1.1] }, shape: "bullet", bar: { color: backRGB } } }

                  Plotly.restyle(tester, update)
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-color", color)
                  var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)
              }
              color = $(`#${id1}`).val()
                              $(`#${id6}`).attr("data-color", color)
                              var config_color = $(`#${id1}`).val()
                  $(`#${id6}`).attr("data-config_color", config_color)

              document.getElementById(id_filter_button).onclick = function () {
                  document.getElementById(id7).style.display = "none"
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)

                          // Resizable Card
                          chartResizeable(id6,tester)

          }
          if(String(graph_subtype) === "Table"){

            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if(data.plotDict === undefined){
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  conditionalModal.appendTo(`#${plotDict.tabNameID}`)
                  columnAlignmentModal.appendTo(`#${plotDict.tabNameID}`)
                  FormattersModal.appendTo(`#${plotDict.tabNameID}`)
                  freezeModal.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`);
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  $(`#${id6}`).attr("data-second_column", data.second_column)
              }
              else{
                  var tab_height = (data.plotDict.height - 55) + "px"
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  conditionalModal.appendTo(`#${data.plotDict.tab_id}`)
                  columnAlignmentModal.appendTo(`#${data.plotDict.tab_id}`)
                  FormattersModal.appendTo(`#${data.plotDict.tab_id}`)
                  freezeModal.appendTo(`#${data.plotDict.tab_id}`)
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              }

              // Close Condition Modal
              closeConditionModal(id_condition_close)
              document.getElementById(`freeze_pane_close_${chartDivId}`).onclick = function () {
                  var modaldiv = document.getElementById(`freeze_pane_close_${chartDivId}`).parentElement.parentElement.parentElement.id

                  document.getElementById(modaldiv).style.display = "none"
                  $('.freezerunCheckbox').prop('checked', false);

                  $('.charts').each(function () {
                      $(this).css('opacity', '')
                  })

              };

              document.getElementById(id_HighlightColHeaders_checkbox).onclick = function () {
                var highlightColHeadersDiv = document.getElementById(id_HighlightColHeaders_div);
                if (this.checked) {
                  highlightColHeadersDiv.style.display = 'block';
                } else {
                  highlightColHeadersDiv.style.display = 'none';
                }
                let columnNames = data.x_axis.map(x => ({ data: fieldToVerbose(x, data.mappingDict) }));
                let highlightcolumnheaderscolorlist = {};
                if (data.plotDict && data.plotDict.highlightcolumnheaderscolorlist && data.plotDict.highlightcolumnheaderscolorlist!=="undefined") {
                  highlightcolumnheaderscolorlist = JSON.parse(data.plotDict && data.plotDict.highlightcolumnheaderscolorlist)
                  if(highlightcolumnheaderscolorlist.allColumns){
                     allColumnHeadersBG_color= highlightcolumnheaderscolorlist.allColumns.bgColor
                     allColumnHeadersFont_color= highlightcolumnheaderscolorlist.allColumns.fontColor
                  }else{
                      allColumnHeadersBG_color="#ffffff"
                      allColumnHeadersFont_color= "#000000"
                  }
                }else{
                  allColumnHeadersBG_color="#ffffff"
                  allColumnHeadersFont_color= "000000"
                }
                let colHeaderHTML = `<li value="allColumnHeadersBG" class="my-2 btn btn-sm btn-light col d-flex justify-content-center align-items-center"><span style="width: 50%; text-align: center;">All Columns Headers</span> <span style="width: 25%;display: flex;flex-direction: column;justify-content: center;align-items: center;"><label for="allColumnHeadersBG_color" style="    font-weight: unset !important;">Background</label><input type="color" id="allColumnHeadersBG_color" value="${allColumnHeadersBG_color}"></span><span style="width: 25%;display: flex;flex-direction: column;justify-content: center;align-items: center;"><label for="allColumnHeadersFont_color" style="font-weight: unset !important;">Font</label><input type="color" id="allColumnHeadersFont_color" value="${allColumnHeadersFont_color}"></span></li>`;

                columnNames.forEach((c) => {
                  let BGcolor, Fontcolor;
                  if (highlightcolumnheaderscolorlist[c.data]) {
                    BGcolor = highlightcolumnheaderscolorlist[c.data].bgColor;
                    Fontcolor = highlightcolumnheaderscolorlist[c.data].fontColor;
                  }
                  if (BGcolor && Fontcolor) {
                    colHeaderHTML += `<li value="${c.data}ColumnHeaderBG" class="my-2 btn btn-sm btn-light col d-flex justify-content-center align-items-center">
                      <span style="width: 50%; text-align: center;">${c.data}</span>
                      <span style="width: 25%;display: flex;flex-direction: column;justify-content: center;align-items: center;">
                        <label for="${c.data}ColumnHeaderBG_color" style="font-weight: unset !important;">Background</label>
                        <input type="color" id="${c.data}ColumnHeaderBG_color" class="ColumnHeaderBG_color" value="${BGcolor}">
                      </span>
                      <span style="width: 25%;display: flex;flex-direction: column;justify-content: center;align-items: center;">
                        <label for="${c.data}ColumnHeaderFont_color" style="font-weight: unset !important;">Font</label>
                        <input type="color" id="${c.data}ColumnHeaderFont_color" class="ColumnHeaderFont_color" value="${Fontcolor}">
                      </span>
                    </li>`;
                  } else {
                    colHeaderHTML += `<li value="${c.data}ColumnHeaderBG"  class="my-2 btn btn-sm btn-light col d-flex justify-content-center align-items-center">
                      <span style="width: 50%; text-align: center;">${c.data}</span>
                      <span style="width: 50%; text-align: center;">
                        <label for="${c.data}ColumnHeaderBG_color" style="font-weight: unset !important;">Background</label>
                        <input type="color" id="${c.data}ColumnHeaderBG_color" class="ColumnHeaderBG_color" value="#ffffff"></span>
                      <span style="width: 25%; text-align: center;">
                        <label for="${c.data}ColumnHeaderFont_color" style="font-weight: unset !important;" >Font</label>
                        <input type="color" id="${c.data}ColumnHeaderFont_color" class="ColumnHeaderFont_color" value="#000000"></span>
                    </li>`;
                  }
                });
                document.getElementById(id_HighlightColHeaders_ul).innerHTML = colHeaderHTML;
                let ulElement = document.getElementById(id_HighlightColHeaders_ul);
                document.getElementById('allColumnHeadersBG_color').addEventListener('change', function() {
                  let bgColorInputs = ulElement.querySelectorAll('.ColumnHeaderBG_color');
                  let allHeadersColor = this.value;
                  bgColorInputs.forEach(function(input) {
                    input.value = allHeadersColor;
                  })
                })
                document.getElementById('allColumnHeadersFont_color').addEventListener('change', function() {
                  let fontColorInputs = ulElement.querySelectorAll('.ColumnHeaderFont_color');
                  let allHeadersColor = this.value;
                  fontColorInputs.forEach(function(input) {
                    input.value = allHeadersColor;
                  })
                })
              };

              document.getElementById(id_saveBtn_HighlightColHeaders).onclick = function () {
                let headersList = document.getElementById(id_HighlightColHeaders_ul).getElementsByTagName('li');
                let highlightColumnHeadersColorObj = {};
                // Add the "allColumns" key-value pair to the object
                highlightColumnHeadersColorObj["allColumns"] = {
                  bgColor: document.getElementById('allColumnHeadersBG_color').value,
                  fontColor: document.getElementById('allColumnHeadersFont_color').value
                };
                for (let i = 0; i < headersList.length; i++) {
                  let bgInput = headersList[i].querySelector('.ColumnHeaderBG_color');
                  let fontInput = headersList[i].querySelector('.ColumnHeaderFont_color');
                  if (bgInput && fontInput) {
                    let headerName = headersList[i].getAttribute('value').replace('ColumnHeaderBG','');
                    let bgColor = bgInput.value;
                    let fontColor = fontInput.value;
                    highlightColumnHeadersColorObj[headerName] = {
                      bgColor: bgColor,
                      fontColor: fontColor
                    };
                  }
                }
                $(`#${id6}`).attr("highlightcolumnheaderscolorlist",JSON.stringify(highlightColumnHeadersColorObj));
                highlightcolumnheaderscolorlist = highlightColumnHeadersColorObj;
                // Use the draw() method to redraw the table with updated settings
                $(`#table_example${id}`).DataTable().draw();
              };

              function setColumnAlignmentOptions(selectedOptions) {
                // Get the selected options from the global configuration
                var globalConfig = selectedOptions[0].global_config;
                $(document.getElementById(id_selectGlobalHeaderColumnAlignment)).val(globalConfig.globalHeaderColumnAlignment).trigger('change');
                $(document.getElementById(id_selectGlobalContentColumnAlignment)).val(globalConfig.globalContentColumnAlignment).trigger('change');
                // Get the selected options from the columns configuration
                var columnsConfig = selectedOptions[0].columns_config;
                for (var i = 0; i < columnsConfig.length; i++) {
                  var column = columnsConfig[i];
                  var columnName = column.columnName;
                  var header_alignment = column.header;
                  var content_alignment = column.content;

                  // Check if columnName already exists
                  if (!$(`strong[data-value="${columnName}"]`).length) {
                    $(document.getElementById(id_ColumnAlignmentContainer)).append(`
                      <div class="row col-12 my-1">
                        <div class="col-4">
                          <span class="removeAlignment" style="color:var(--primary,var(--primary-color));cursor: pointer;">&times;</span> &nbsp; <strong data-value="${columnName}">${columnName}</strong>
                        </div>
                        <div class="col-4">
                          <select class="select2 form-control header" data-value="${columnName}">
                            <option value="left">Left</option>
                            <option value="center">Center</option>
                            <option value="right">Right</option>
                          </select>
                        </div>
                        <div class="col-4">
                          <select class="select2 form-control content" data-value="${columnName}">
                            <option value="left">Left</option>
                            <option value="center">Center</option>
                            <option value="right">Right</option>
                          </select>
                        </div>
                      </div>
                    `);
                  }

                  // Set the alignment values
                  $(`.header[data-value="${columnName}"]`).val(header_alignment).trigger('change');
                  $(`.content[data-value="${columnName}"]`).val(content_alignment).trigger('change');
                  $(".select2").select2();

                  $(document.getElementById(id_ColumnAlignmentContainer)).find('.row').eq(-1).find('.removeAlignment').on('click', function(){
                    $(this).parent().parent().remove();
                  })
                }
              }

              document.getElementById(id_columnAlignmentModal_edit).onclick = function () {
                var displayvalue = document.getElementById(id_columnAlignmentModal).style.display;
                if (displayvalue == "none") {
                  document.getElementById(id7).style.display = "none";
                  document.getElementById(id_columnAlignmentModal).style.display = "block";
                  let columnNames = data.x_axis.map(x => ({ data: fieldToVerbose(x, data.mappingDict) }));
                  document.getElementById(id_selectColumnAlignment).innerHTML = '<option value="">Select Column</option>' +
                    columnNames.map(c => `<option value="${c.data}">${c.data}</option>`).join('');
                  //set values
                  if (data.plotDict && data.plotDict.columnAlignmentSelectedOptions && data.plotDict.columnAlignmentSelectedOptions!=='undefined') {
                    let selectedOptions2 = JSON.parse(data.plotDict.columnAlignmentSelectedOptions);
                    setColumnAlignmentOptions(selectedOptions2);
                  }
                  if (selectedOptions) {
                    setColumnAlignmentOptions(selectedOptions);
                  }
                }
              };

              $.ajax({
                url: `/users/${urlPath}/processGraphModule/`,
                data: {
                  'operation': 'get_currency_list',
                },
                type: "POST",
                dataType: "json",
                success: function(data) {
                  var currency_list1 = data.country_list;
                  var currency_symbols1 = data.curr_list;

                  currencyOptions1 = currency_list1.map((currency1, index) =>
                    '<option value="' + currency1 + '" currencySymbol="' + currency_symbols1[index] + '">' + currency1 + ' (' + currency_symbols1[index] + ')' + '</option>'
                  ).join('');
                  $('.formattersSelect').select2();
                },
                error: function() {
                  Swal.fire({
                    icon: 'error',
                    text: 'Error! Please try again.'
                  });
                }
              });
              function loadFormatters(formatterObjs1) {
                for (var i = 0; i < formatterObjs1.length; i++) {
                  var formatterObj = formatterObjs1[i];

                  var formatter = formatterObj.formatter;

                  var operationOptions1 = '';
                  if (formatter === 'number') {
                    operationOptions1 = `${numberOptions}`;
                  } else if (formatter === 'currency') {
                    operationOptions1 = `${currencyOptions1}`;
                  }else if (formatter === 'date') {
                    operationOptions1 = `${dateOptions}`;
                  }
                  var newFormatterBody = `
                    <div class="d-flex justify-content-between align-items-center formatterBody my-2">
                      <div class="row" style="width: 90%;">
                        <div class="col">
                          <label for="columnsSelect">Select Columns:</label>
                          <select name="columns" class="select2 form-control formattersSelect columnsSelect">
                            ${columnOptions}
                          </select>
                        </div>
                        <div class="col">
                          <label for="formatterSelect">Select Formatter:</label>
                          <select name="formatter" class="select2 form-control formattersSelect formatterSelect">
                            ${formatterOptions}
                          </select>
                        </div>
                        <div class="col">
                          <label for="operationSelect">Select Operation:</label>
                          <select name="operation" class="select2 form-control formattersSelect operationSelect">
                            ${operationOptions1}
                          </select>
                        </div>
                      </div>
                      <div class="row" style="width: 10%;">
                        <div class="col">
                          <i class="fa-solid fa-xmark fa-2x removeFormatter" data-toggle="tooltip" title="Remove Formatter"></i>
                        </div>
                      </div>
                    </div>
                  `;

                  var formatterContainer = document.getElementById(id_FormattersModal_container);
                  formatterContainer.insertAdjacentHTML('beforeend', newFormatterBody);
                  $('.formatterBody').find('select.formattersSelect').select2();

                  var columnsSelect = $('.formatterBody').last().find('.columnsSelect');
                  var formatterSelect = $('.formatterBody').last().find('.formatterSelect');
                  var operationSelect = $('.formatterBody').last().find('.operationSelect');

                  columnsSelect.val(formatterObj.column).trigger('change.select2');
                  formatterSelect.val(formatterObj.formatter).trigger('change.select2');
                  operationSelect.val(formatterObj.operation).trigger('change.select2');

                }
              }
              document.getElementById(id_Formatters_edit).onclick = function() {
                var displayvalue = $('#' + id_FormattersModal).css('display');
                if (displayvalue === "none") {
                  $('#' + id7).hide();
                  $('#' + id_FormattersModal).show();

                  var columnNames = data.x_axis.map(x => fieldToVerbose(x, data.mappingDict))
                    .map(column => {
                      var dataTypeObj = data.datatype_list.find(obj => obj.column_name === column);
                      return dataTypeObj ? dataTypeObj.field_name : null;
                    });

                  var filteredColumns = data.datatype_list.filter(column =>
                    columnNames.includes(column.field_name)
                  );

                  var result = filteredColumns.map(column => ({
                    columnName: column.column_name,
                    columnDataType: column.data_type,
                    columnFieldName: column.field_name
                  }));

                   columnOptions = result.map(column =>
                    '<option value="' + column.columnName + '" data_type="' + column.columnDataType + '" field_name="' + column.columnFieldName + '">' + column.columnName + '</option>'
                  ).join('');

                  formatterOptions = '<option value="number">Number</option>' +
                  '<option value="currency">Currency</option>' +
                  '<option value="date">Date</option>';

                   numberOptions = '<option value="1000">1000</option>';
                   var formattedDate = `${new Date().getDate()} ${new Date().toLocaleString('default', { month: 'long' })} ${new Date().getFullYear()}`;

                  dateOptions = '<option value=" " disabled selected> None </option>' +
                                      '<option value="%Y-%m-%d" id="dformat1">YYYY-MM-DD</option>' +
                                      '<option value="%d-%m-%Y" id="dformat2">DD-MM-YYYY</option>' +
                                      '<option value="%m-%d-%Y" id="dformat3">MM-DD-YYYY</option>' +
                                      `<option value="%d %B %Y" id="dformat4">${formattedDate}</option>`;

                  $.ajax({
                    url: `/users/${urlPath}/processGraphModule/`,
                    data: {
                      'operation': 'get_currency_list',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function(data) {
                      var currency_list = data.country_list;
                      var currency_symbols = data.curr_list;

                      currencyOptions = currency_list.map((currency, index) =>
                        '<option value="' + currency + '" currencySymbol="' + currency_symbols[index] + '">' + currency + ' (' + currency_symbols[index] + ')' + '</option>'
                      ).join('');
                      $('.formattersSelect').select2();
                    },
                    error: function() {
                      Swal.fire({
                        icon: 'error',
                        text: 'Error! Please try again.'
                      });
                    }
                  });
                  if (data.plotDict && data.plotDict.FormattersConfiguration && data.plotDict.FormattersConfiguration !== 'undefined') {
                    var formatterObjs1 = data.plotDict.FormattersConfiguration;
                      if (!$('.formatterBody').length) {
                        loadFormatters(JSON.parse(formatterObjs1));
                      }
                  }
                }
              };
              document.getElementById(id_addFormatter).onclick = function() {
                var newFormatterBody = `
                  <div class="d-flex justify-content-between align-items-center formatterBody my-2">
                    <div class="row" style="width: 90%;">
                      <div class="col">
                        <label for="columnsSelect">Select Columns:</label>
                        <select name="columns" class="select2 form-control formattersSelect columnsSelect">
                          <option disabled selected></option>
                          ${columnOptions}
                        </select>
                      </div>
                      <div class="col">
                        <label for="formatterSelect">Select Formatter:</label>
                        <select name="formatter" class="select2 form-control formattersSelect formatterSelect">
                          <option disabled selected></option>
                          ${formatterOptions}
                        </select>
                      </div>
                      <div class="col">
                        <label for="operationSelect">Select Operation:</label>
                        <select name="operation" class="select2 form-control formattersSelect operationSelect">
                          <option disabled selected></option>
                        </select>
                      </div>
                    </div>
                    <div class="row" style="width: 10%;">
                      <div class="col">
                        <i class="fa-solid fa-xmark fa-2x removeFormatter" data-toggle="tooltip" title="Remove Formatter"></i>
                      </div>
                    </div>
                  </div>
                `;

                var formatterContainer = document.getElementById(id_FormattersModal_container);
                formatterContainer.insertAdjacentHTML('beforeend', newFormatterBody);

                var lastCard = $(formatterContainer).find('.formatterBody').slice(-1)

                var columnsSelects = formatterContainer.querySelectorAll('.columnsSelect');
                columnsSelects.forEach(function(columnsSelect) {
                  if (columnsSelect.value != ''){
                    $(lastCard).find('.columnsSelect').find(`[value='${columnsSelect.value}']`).attr('disabled','')
                  }
                });
                $('.formatterBody').find('select.formattersSelect').select2();
              };

              $(document).off('change', '.formatterBody .formatterSelect').on('change', '.formatterBody .formatterSelect', function() {
                var formatterSelect = $(this);
                var selectedFormatter = formatterSelect.val();
                var selectedDataType = formatterSelect.closest('.formatterBody').find('.columnsSelect option:selected').attr('data_type');

                const numericDataTypes = ["IntegerField", "FloatField", "DoubleField", "DecimalField", "BigIntegerField", "BigDecimalField", "NumericField"];
                var operationOptions = '<option disabled selected></option>';

                if (selectedDataType === 'DateField' && (selectedFormatter === 'number' || selectedFormatter === 'currency')) {
                  Swal.fire({
                    icon: 'error',
                    text: 'Error! Cannot be applied for this column. Please try again.'
                  });
                  formatterSelect.val(null).trigger('change.select2');
                  return;
                } else if (selectedDataType === 'DateField') {
                  operationOptions += dateOptions;
                } else if (numericDataTypes.includes(selectedDataType)) {
                  if (selectedFormatter === 'number') {
                    operationOptions += numberOptions;
                  } else if (selectedFormatter === 'currency') {
                    operationOptions += currencyOptions;
                  } else if (selectedFormatter === 'date') {
                    Swal.fire({
                      icon: 'error',
                      text: 'Error! Cannot be applied for this column. Please try again.'
                    });
                    formatterSelect.val(null).trigger('change.select2');
                    return;
                  }
                } else {
                  Swal.fire({
                    icon: 'error',
                    text: 'Error! Cannot be applied for this column. Please try again.'
                  });
                  formatterSelect.val(null).trigger('change.select2');
                }

                formatterSelect.closest('.formatterBody').find('.operationSelect').html(operationOptions);
              });

              $(document).off('change', '.formatterBody .columnsSelect').on('change', '.formatterBody .columnsSelect', function() {
                $(this).closest('.formatterBody').find('.formatterSelect').val(null).trigger('change.select2');
                $(this).closest('.formatterBody').find('.operationSelect').val(null).trigger('change.select2');
              });


              $(document).on('click', '#' + id_FormattersModal + ' .removeFormatter', function() {
                $(this).closest('.formatterBody').remove();
              });

              document.getElementById(id_FormattersModal_config).onclick = function () {
                var formatterBodies = document.getElementsByClassName('formatterBody');
                formatterObjs = [];

                for (var i = 0; i < formatterBodies.length; i++) {
                  var formatterBody = formatterBodies[i];
                  var columnSelected = formatterBody.querySelector('.columnsSelect').value;
                  var formatterSelected = formatterBody.querySelector('.formatterSelect').value;
                  var operationSelected = formatterBody.querySelector('.operationSelect').value;
                  if (columnSelected !== '' && formatterSelected !== '' && operationSelected !== '') {
                    var formatterObj = {
                      column: columnSelected,
                      formatter: formatterSelected,
                      operation: operationSelected
                    };

                    formatterObjs.push(formatterObj);
                  }
                }

                $('#' + id6).attr("data-formatters_config_table", JSON.stringify(formatterObjs));

                var tableId = "table_example" + id;

                applyColumnFormatters(formatterObjs, tableId);
                document.getElementById(id_FormattersModal).style.display = "none";
                $('.charts').each(function () {
                  $(this).css('opacity', '');
                });
              };

              function applyColumnFormatters(config, tableId) {
                var currency_list2 = "";
                var currency_symbols2 = "";

                var table = $('#' + tableId).DataTable();

                function removeAllFormatters() {
                  if ($.fn.DataTable.isDataTable('#' + tableId)) {
                    table.destroy();
                  }

                  var columns = table.settings().init().columns;
                  columns.forEach(function (column, index) {
                    column.render = null;
                  });
                }

                removeAllFormatters();

                var headerRow = $('#' + tableId + ' thead tr');
                var columnNames = [];
                headerRow.find('th').each(function () {
                  columnNames.push($(this).text());
                });

                var columnSettings = columnNames.map(function (columnName) {
                  var columnConfig = config.find(function (configItem) {
                    return configItem.column === columnName;
                  });

                  if (columnConfig) {
                    var formatter;
                    switch (columnConfig.formatter) {
                      case 'number':
                        formatter = function (data, type, row) {
                          if (type === 'display') {
                            return parseFloat(data.replace(/[^0-9.-]/g, '')).toLocaleString();
                          }
                          return data;
                        };
                        break;
                      case 'currency':
                        formatter = function (data, type, row) {
                          if (type === 'display') {
                            var currencyCode = columnConfig.operation;
                            var currencyIndex = currency_list2.indexOf(currencyCode);
                            var currencySymbol = currency_symbols2[currencyIndex];
                            return currencySymbol + " " + data.replace(/[^0-9.-]/g, '').toLocaleString();
                          }
                          return data;
                        };
                        break;
                      case 'date':
                        formatter = function (data, type, row) {
                          if (type === 'display' || type === 'filter') {
                            var dateFormat = columnConfig.operation;
                            var formattedDate = formatDate(data, dateFormat);
                            return formattedDate;
                          }

                          return data;
                        };
                        break;
                      default:
                        formatter = null;
                    }

                    return {
                      "data": columnName,
                      "render": formatter
                    };
                  } else {
                    return {
                      "data": columnName
                    };
                  }
                });

                function formatDate(dateString, format) {
                  var date = new Date(dateString);
                  if (isNaN(date.getTime())) {
                    // Date is invalid, return the original string
                    return dateString;
                  }

                  var day = date.getDate();
                  var month = date.getMonth() + 1;
                  var year = date.getFullYear();

                  var formattedDate = format
                    .replace(/%d/g, ('0' + day).slice(-2))
                    .replace(/%m/g, ('0' + month).slice(-2))
                    .replace(/%Y/g, year)
                    .replace(/%y/g, year.toString().slice(-2))
                    .replace(/%B/g, new Intl.DateTimeFormat('en-US', { month: 'long' }).format(date));

                  return formattedDate;
                }

                $.ajax({
                  url: `/users/${urlPath}/processGraphModule/`,
                  data: {
                    'operation': 'get_currency_list',
                  },
                  type: "POST",
                  dataType: "json",
                  success: function (data) {
                    currency_list2 = data.country_list;
                    currency_symbols2 = data.curr_list;
                    if ($.fn.DataTable.isDataTable('#' + tableId)) {
                      $('#' + tableId).DataTable().destroy();
                    }
                    table = $('#' + tableId).DataTable({
                      "columns": columnSettings,
                      "language": {
                        "decimal": ".",
                        "thousands": ","
                      },
                      "fixedColumns": true
                    });

                    table.draw();
                  },
                  error: function () {
                    Swal.fire({
                      icon: 'error',
                      text: 'Error! Please try again.'
                    });
                  }
                });
              }


              document.getElementById(id_FormattersModal_close).onclick = function () {
                document.getElementById(id_FormattersModal).style.display = "none";
                $('.charts').each(function () {
                  $(this).css('opacity', '')
                })
              }
              document.getElementById(id_closeColumnAlignmentButton).onclick = function () {
                document.getElementById(id_columnAlignmentModal).style.display = "none";
                $('.charts').each(function () {
                  $(this).css('opacity', '')
                })
              }
              $(document.getElementById(id_selectColumnAlignment)).off('select2:select').on('select2:select', function(event) {
                let selectedOption = event.params.data;
                let selectedValue = selectedOption.id;
                let selectedText = selectedOption.text;
                let alreadySelected = false;

                $(document.getElementById(id_ColumnAlignmentContainer)).find('.row strong').each(function() {
                  if ($(this).data('value') === selectedValue) {
                    alreadySelected = true;
                    return false;
                  }
                });

                if (!alreadySelected) {
                  $(document.getElementById(id_ColumnAlignmentContainer)).append(`
                    <div class="row col-12 my-1">
                      <div class="col-4">
                        <span class="removeAlignment" style="color:var(--primary,var(--primary-color));cursor: pointer;">&times;</span> &nbsp; <strong data-value="${selectedValue}">${selectedText}</strong>
                      </div>
                      <div class="col-4">
                        <select class="select2 form-control header" style="width: 100%;">
                          <option value="left">Left</option>
                          <option value="center" selected>Center</option>
                          <option value="right">Right</option>
                        </select>
                      </div>
                      <div class="col-4">
                        <select class="select2 form-control content" style="width: 100%;">
                          <option value="left">Left</option>
                          <option value="center" selected>Center</option>
                          <option value="right">Right</option>
                        </select>
                      </div>
                    </div>
                  `);

                  $(document.getElementById(id_ColumnAlignmentContainer)).find('.row').eq(-1).find('.select2').select2();

                  $(document.getElementById(id_ColumnAlignmentContainer)).find('.row').eq(-1).find('.removeAlignment').on('click', function(){
                    $(this).parent().parent().remove();
                  })
                }
              });
              document.getElementById(id_applyColumnAlignmentButton).onclick = function () {
                let columnsConfig = [];
                $(document.getElementById(id_ColumnAlignmentContainer)).find('.row').each(function() {
                  let selectedOption = $(this).find('strong').text();
                  let headerValue = $(this).find('.header').val();
                  let contentValue = $(this).find('.content').val();
                  columnsConfig.push({
                    columnName: selectedOption,
                    header: headerValue,
                    content: contentValue
                  });
                });

                selectedOptions = [{
                  global_config: {
                    globalHeaderColumnAlignment: $(document.getElementById(id_selectGlobalHeaderColumnAlignment)).val(),
                    globalContentColumnAlignment: $(document.getElementById(id_selectGlobalContentColumnAlignment)).val()
                  },
                  columns_config: columnsConfig
                }];
                $(`#${id6}`).attr("data-column_alignment_table", JSON.stringify(selectedOptions))
                let table = $(`#table_example${id}`).DataTable();

                // Update header alignments
                table.columns().header().each(function(colHeader) {
                  let colIndex = table.column(colHeader).index();
                  let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === table.column(colIndex).header().textContent);
                  let globalHeaderColumnAlignment = selectedOptions[0].global_config.globalHeaderColumnAlignment;
                  $(colHeader).removeClass('dt-left dt-center dt-right');
                  $(colHeader).addClass(`dt-${colConfig ? colConfig.header : globalHeaderColumnAlignment}`);
                });

                // Update content alignments
                table.columns().nodes().each(function(colContent) {
                  let colIndex = table.cell(colContent).index().column;
                  let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === table.column(colIndex).header().textContent);
                  let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                  $(colContent).removeClass('dt-left dt-center dt-right');
                  $(colContent).addClass(`dt-${colConfig ? colConfig.content : globalContentColumnAlignment}`);
                });

                // Redraw the table
                table.draw();

                document.getElementById(id_columnAlignmentModal).style.display = "none";
                $('.charts').each(function () {
                  $(this).css('opacity', '')
                })
              };


              document.getElementById(id_freeze_pane).onclick = function () {
                  var displayvalue = document.getElementById(`freeze_pane_modal_${chartDivId}`).style.display
                   if (displayvalue == "none") {
                       document.getElementById(id7).style.display = "none";
                       document.getElementById(`freeze_pane_modal_${chartDivId}`).style.display = "block";
                       $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                   }
                   else {
                       document.getElementById(`freeze_pane_modal_${chartDivId}`).style.display = "none"
                   }
              };

              $(`#${id6}`).attr("data-operation", data.operation)
              $(`#${id_tableshow}`).css('display','none')
              $(`#${id6}`).find('.graphcontainerdiv').append(`<table id="table_example${id}" class="display compact analysisWraptext" style="width:100%;height:100%;">
                  <thead>
                    <tr>
                    </tr>
                  </thead>
                  <tbody>
                  </tbody>
                </table>`)

                var column_names = []
                for(var i=0;i<data.x_axis.length;i++){
                    column_names.push({'data':fieldToVerbose(data.x_axis[i], data.mappingDict)})
                }
                var thead = $(`#table_example${id}`).find('thead tr')
                for (let i = 0; i < column_names.length; i++) {
                  $(`<th>${column_names[i].data}</th>`).appendTo(thead)
                  }
                  var mappingDict = data.mappingDict
                  for(var i=0;i<((data.conditional_table).length);i++)
                  {
                      for (const [key, value] of Object.entries(column_names)) {
                          if(value["data"] == fieldToVerbose(data.conditional_table[i]["column_name"], mappingDict)){
                              data.conditional_table[i]["td_val"] = parseInt(key)

                          }
                      }
                  }
                  var conditional_data = data.conditional_table
                  var conditional_string = `<div class="input_columns_value_dict_edit" style="display:none">`
                  for (const i in data.datatype_list) {
                    conditional_string = conditional_string + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
                    }
                  conditional_string = conditional_string + `</div>`
                  conditional_string = conditional_string + `<div class="conditional_body_edit" style="margin-top:1em;width: 100%; display:flex">
                          <div class="col-3">
                          <p style="font-weight: bold;">Select column:</p>
                          <select class="select2 form-control conditional_column_name_edit">
                              <option value="" selected disabled>------------</option>
                          `
                          for (const i in data.datatype_list) {
                            conditional_string = conditional_string + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
                          }
                          conditional_string = conditional_string +
                          `</select>
                          </div>
                          <div class="col-3">
                          <p style="font-weight: bold;">Select condition:</p>
                          <select class="select2 form-control conditional_condition_edit">`
                          if((data.conditional_table).length > 0){
                            if((data.conditional_table[0]['column_datatype'])== "CharField"){
                              conditional_string = conditional_string + `<option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option><option value="In">In</option><option value="Starts with">Starts with</option><option value="Ends with">Ends with</option><option value="Contains">Contains</option>`
                            }
                            else if((data.conditional_table[0]['column_datatype'])== "IntegerField" || (data.conditional_table[0]['column_datatype'])== "BigIntegerField" || (data.conditional_table[0]['column_datatype'])== "FloatField" || (data.conditional_table[0]['column_datatype'])== "AutoField"){
                              conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option>`
                            }
                            else if((data.conditional_table[0]['column_datatype'])== "DateField" || (data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                              conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option>`
                            }
                            else{
                              conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option><option value="In">In</option><option value="Starts with">Starts with</option><option value="Ends with">Ends with</option><option value="Contains">Contains</option>`
                            }
                          }
                          else{
                            conditional_string = conditional_string + `
                            <option value="" disabled selected>-------------------</option>
                              <option value="Greater than">Greater than</option>
                              <option value="Smaller than">Smaller than</option>
                              <option value="Equal to">Equal to</option>
                              <option value="Not equal to">Not equal to</option>
                              <option value="In">In</option>
                              <option value="Starts with">Starts with</option>
                              <option value="Contains">Contains</option>
                              <option value="Ends with">Ends with</option>`
                          }
                          conditional_string = conditional_string + ` </select>
                          </div>
                          <div class="col-3 conditional_input_value_edit">
                          <p style="font-weight: bold;">Select value:</p>
                          <div class="conditional_format_value_input_edit">`
                          if((data.conditional_table).length > 0){
                            if((data.conditional_table[0]['column_condition'])== "Equal to"){
                              if((data.conditional_table[0]['column_datatype'])== "DateField"){
                                  conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" class="conditional_value_edit" ></input>`
                              }
                              else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                                  conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                              }
                              else{
                                  conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                                  <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                                              </select>`
                                  }
                            }
                            else if((data.conditional_table[0]['column_condition'])== "Not equal to"){
                              if((data.conditional_table[0]['column_datatype'])== "DateField"){
                                  conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" class="conditional_value_edit" ></input>`
                              }
                              else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                                  conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                              }
                              else{
                                  conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                          <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                                      </select>`
                              }
                            }
                            else if(((data.conditional_table[0]['column_condition'])== "Starts with") || ((data.conditional_table[0]['column_condition'])== "Ends with") || ((data.conditional_table[0]['column_condition'])== "Contains")){
                              conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                          <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                                      </select>`
                            }
                            else if((data.conditional_table[0]['column_condition'])== "In"){
                              conditional_string = conditional_string + `<select class="select2 select2_condition_class conditional_value_edit form-control" multiple required>`
                              for(var j=0;j<(data.conditional_table[0]['condition_value'].length);j++)
                              {
                                  conditional_string = conditional_string +  `<option value="${data.conditional_table[0]['condition_value'][j]}" selected>${data.conditional_table[0]['condition_value'][j]}</option>`
                              }
                              conditional_string = conditional_string +  `</select>`
                            }
                            else if((data.conditional_table[0]['column_condition'])== "Greater than" || (data.conditional_table[0]['column_condition'])== "Smaller than"){
                              if((data.conditional_table[0]['column_datatype'])== "DateField"){
                                conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" class="conditional_value_edit"></input>`
                              }
                              else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                                conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                              }
                              else{
                                  conditional_string = conditional_string + `<input type = "number" style="width:11em;height:2em;" class="conditional_value_edit" value="${data.conditional_table[0]['condition_value']}"></input>`
                              }
                            }
                            else{
                              conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                      <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                                  </select>`
                            }
                          }
                          else{
                            conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class" required>
                          </select>`
                          }
                          conditional_string = conditional_string + `</div>
                          </div>
                          <div class="col-2">
                          <p style="font-weight: bold;">Select color:</p>`
                          if((data.conditional_table).length > 0){
                            conditional_string = conditional_string + `<input type="color" class="form-control conditional_color_input_edit" data-css="background-color" value="${data.conditional_table[0]['condition_color']}" >`
                          }
                          else{
                            conditional_string = conditional_string + `<input type="color" class="form-control conditional_color_input_edit" data-css="background-color" value="#ffffff" >`
                          }
                          conditional_string = conditional_string + `</div>
                          <div class="col-1">
                            <i class="fas fa-plus add_conditional_parameter_edit" data-toggle="tooltip" title="Add condition" style="cursor:pointer;padding-top:3.4em;"></i> </i>
                          </div>

                      </div>`

                  for(var i=1;i<(data.conditional_table).length;i++){
                      if(data.conditional_table[i]['condition_value'] == undefined){
                          data.conditional_table[i]['condition_value'] = ""
                      }
                      conditional_string = conditional_string + `
                          <div class="conditional_body_edit" style="margin-top:1em;width: 100%; display:flex">
                                  <div class="col-3">
                                  <select class="select2 form-control conditional_column_name_edit">`
                                  for (const j in data.datatype_list) {
                                    conditional_string = conditional_string + `<option value= ${data.datatype_list[j].field_name} data-datatype=${data.datatype_list[j].data_type}>${data.datatype_list[j].column_name}</option>`
                                  }
                                  conditional_string = conditional_string + `</select>
                                  </div>
                                  <div class="col-3">`
                                  conditional_string = conditional_string + ` <select class="select2 form-control conditional_condition_edit">`
                                  if((data.conditional_table[i]['column_datatype'])== "CharField"){
                                      conditional_string = conditional_string + `<option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option><option value="In">In</option><option value="Starts with">Starts with</option><option value="Ends with">Ends with</option><option value="Contains">Contains</option>`
                                  }
                                  else if((data.conditional_table[i]['column_datatype'])== "IntegerField" || (data.conditional_table[i]['column_datatype'])== "BigIntegerField" || (data.conditional_table[i]['column_datatype'])== "FloatField" || (data.conditional_table[i]['column_datatype'])== "AutoField"){
                                      conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option>`
                                  }
                                  else if((data.conditional_table[i]['column_datatype'])== "DateField" || (data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                       conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option>`
                                  }
                                  else{
                                      conditional_string = conditional_string + `<option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option><option value="In">In</option><option value="Starts with">Starts with</option><option value="Ends with">Ends with</option><option value="Contains">Contains</option>`
                                  }
                                  conditional_string = conditional_string + ` </select>
                                  </div>
                                  <div class="col-3 conditional_input_value_edit">
                                  <div class="conditional_format_value_input_edit">`
                                  if((data.conditional_table[i]['column_condition'])== "Equal to"){
                                      if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                          conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" class="conditional_value_edit" ></input>`
                                      }
                                      else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                          conditional_string = conditional_string + `<<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                                      }
                                      else{
                                          conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                            <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                          </select>`
                                      }
                                  }
                                  else if((data.conditional_table[i]['column_condition'])== "Not equal to"){
                                      if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                        conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" class="conditional_value_edit" ></input>`
                                      }
                                      else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                          conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                                      }
                                      else{
                                          conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                            <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                          </select>`
                                      }
                                  }
                                  else if(((data.conditional_table[i]['column_condition'])== "Starts with") || ((data.conditional_table[i]['column_condition'])== "Ends with") || ((data.conditional_table[i]['column_condition'])== "Contains")){
                                    conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                          <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                        </select>`
                                  }
                                  else if((data.conditional_table[i]['column_condition'])== "In"){
                                      conditional_string = conditional_string + `<select class="select2 select2_condition_class conditional_value_edit form-control" multiple required>`
                                      for(var j=0;j<(data.conditional_table[i]['condition_value'].length);j++){
                                        conditional_string = conditional_string +  `<option value="${data.conditional_table[i]['condition_value'][j]}" selected>${data.conditional_table[i]['condition_value'][j]}</option>`
                                      }
                                      conditional_string = conditional_string +  `</select>`
                                  }
                                  else if((data.conditional_table[i]['column_condition'])== "Greater than" || (data.conditional_table[i]['column_condition'])== "Smaller than"){
                                    if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                        conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" class="conditional_value_edit"></input>`
                                    }
                                    else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                        conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:11em;" class="conditional_value_edit"></input>`
                                    }
                                    else{
                                        conditional_string = conditional_string + `<input type = "number" style="width:11em;height:2em;" class="conditional_value_edit" value="${data.conditional_table[i]['condition_value']}"></input>`
                                    }
                                  }
                                  else{
                                    conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class conditional_value_edit" required>
                                      <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                    </select>`
                                  }
                                  conditional_string = conditional_string + `
                                  </div>
                                  </div>
                                  <div class="col-2">
                                  <input type="color" class="form-control conditional_color_input_edit" data-css="background-color" value="${data.conditional_table[i]['condition_color']}" >
                                  </div>
                                  <div class="col-1">
                                      <i class="fa fa-times remove_conditional_parameter_edit" data-toggle="tooltip" title="Remove condition" style="cursor:pointer;margin-top:0.7em;"></i> </i>
                                  </div>
                                  </div>
                      `
                  }
                  $(`#${id_condition_container}`).append(conditional_string)
                  $(document).ready(function(){
                      $('.select2').select2()
                      $('.select2_condition_class').select2({
                          tags:true
                      })

                  })
                  if((data.conditional_table).length > 0){
                  $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_condition_edit').each(function(index) {
                          $(this).val(conditional_data[index]["column_condition"]).trigger("change")
                      });
                  $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_column_name_edit').each(function(index) {
                          $(this).val(conditional_data[index]["column_name"]).trigger("change")
                      });
                      }
                  $('.select2').select2()
                  $('.select2_condition_class').select2({
                      tags:true
                  })

                  $('.remove_conditional_parameter_edit').click(function(){
                      $(this).closest('.conditional_body_edit').remove()
                  })

                      $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_column_name_edit').change(function(){
                              var datatype = $(this).find('option:selected').attr('data-datatype')
                              $(this).parent().parent().find(".conditional_condition_edit").empty()
                              $(this).parent().parent().find(".conditional_condition_edit").append('<option value="" disabled selected>------------</option>')
                              if((datatype == "IntegerField") || (datatype == "BigIntegerField") || (datatype == "FloatField") || (datatype == "AutoField"))
                              {
                                      var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to");
                                      for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                      }
                              }
                              else if((datatype == "DateField") || (datatype == "DateTimeField")){
                                  var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to");
                                  for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                  }
                              }
                              else{
                                  var optionvalues = new Array("Equal to","Not equal to","In","Starts with","Ends with","Contains");
                                  for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                  }
                              }
                          })

                          $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_condition_edit').change(function(){
                              var condition = $(this).val()
                              if((condition == "Greater than") || (condition == "Smaller than")){
                                  if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="date" class="conditional_value_edit"></input>`)
                                  }
                                  else if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:11em;" class="conditional_value_edit"></input>`)
                                  }
                                  else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="number" style="width:11em;height:2em;" class="conditional_value_edit"></input>`)
                                  }
                              }
                              else if (condition == "Equal to" || condition == "Not equal to"){
                                  if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="date" class="conditional_value_edit"></input>`)
                                  }
                                  else if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:11em;" class="conditional_value_edit"></input>`)
                                  }
                                  else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                                  }
                              }
                              else if (condition == "Starts with" || condition == "Ends with" || condition == "Contains"){
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                              }
                              else if (condition == "In"){
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 multiple select2_condition_class form-control condition_multiple_select2 conditional_value_edit" multiple required></select>`)
                              }
                              else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                              }

                              $('.select2_condition_class').select2({
                                  tags:true
                              })

                          })

                    $(`#${id_condition_container}`).find('.conditional_body_edit').find(".add_conditional_parameter_edit").click(function(){
                          var string_col = `<div class="conditional_body_edit" style="margin-top:1em;width: 100%; display:flex">
                          <div class="col-3">
                          <select class="select2 form-control conditional_column_name_edit">
                              <option value="" selected disabled>------------</option>
                          `
                          for (const i in data.datatype_list) {
                            string_col = string_col + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
                          }
                          string_col = string_col +
                          `</select>
                          </div>
                          <div class="col-3">
                          <select class="select2 form-control conditional_condition_edit">
                              <option value="" disabled selected>-------------------</option>
                              <option value="Greater than">Greater than</option>
                              <option value="Smaller than">Smaller than</option>
                              <option value="Equal to">Equal to</option>
                              <option value="Not equal to">Not equal to</option>
                              <option value="In">In</option>
                              <option value="Starts with">Starts with</option>
                              <option value="Contains">Contains</option>
                              <option value="Ends with">Ends with</option>
                          </select>
                          </div>
                          <div class="col-3 conditional_input_value_edit">
                          <div class="conditional_format_value_input_edit">
                          <select class="select2 form-control select2_condition_class" required>
                          </select>
                          </div>
                          </div>
                          <div class="col-2">
                          <input type="color" class="form-control conditional_color_input_edit" data-css="background-color" value="#ffffff" >
                          </div>
                          <div class="col-1">
                          <i class="fa fa-times remove_conditional_parameter_edit" data-toggle="tooltip" title="Remove condition" style="cursor:pointer;margin-top:0.7em;"></i> </i>
                          </div>

                      </div>`

                          $(`#${id_condition_container}`).append(string_col)
                          $('.select2').select2()
                          $('.select2_condition_class').select2({
                              tags:true
                          })


                          $(`#${id_condition_container}`).find('.conditional_body_edit').find('.remove_conditional_parameter_edit').click(function(){
                              $(this).closest('.conditional_body_edit').remove()
                          })

                          $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_column_name_edit').change(function(){
                              var datatype = $(this).find('option:selected').attr('data-datatype')
                              $(this).parent().parent().find(".conditional_condition_edit").empty()
                              $(this).parent().parent().find(".conditional_condition_edit").append('<option value="" disabled selected>------------</option>')
                              if((datatype == "IntegerField") || (datatype == "BigIntegerField") || (datatype == "FloatField") || (datatype == "AutoField"))
                              {
                                      var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to");
                                      for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                      }
                              }
                              else if((datatype == "DateField") || (datatype == "DateTimeField")){
                                  var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to");
                                  for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                  }
                              }
                              else{
                                  var optionvalues = new Array("Equal to","Not equal to","In","Starts with","Ends with","Contains");
                                  for (let i = 0; i < optionvalues.length; i++) {
                                      $(this).parent().parent().find(".conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                  }
                              }
                          })

                          $(`#${id_condition_container}`).find('.conditional_body_edit').find('.conditional_condition_edit').change(function(){
                              var condition = $(this).val()
                              if((condition == "Greater than") || (condition == "Smaller than")){
                                  if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="date" class="conditional_value_edit"></input>`)
                                  }
                                  else if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:11em;" class="conditional_value_edit"></input>`)
                                  }
                                  else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="number" style="width:11em;height:2em;" class="conditional_value_edit"></input>`)
                                  }
                              }
                              else if (condition == "Equal to" || condition == "Not equal to"){
                                  if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="date" class="conditional_value_edit"></input>`)
                                  }
                                  else if($(this).parent().parent().find('.conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:11em;" class="conditional_value_edit"></input>`)
                                  }
                                  else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                                  }
                              }
                              else if (condition == "Starts with" || condition == "Ends with" || condition == "Contains"){
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                              }
                              else if (condition == "In"){
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 multiple form-control select2_condition_class condition_multiple_select2 conditional_value_edit" multiple required></select>`)
                              }
                              else{
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".conditional_input_value_edit").find('.conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 conditional_value_edit" required></select>`)
                              }

                              $('.select2_condition_class').select2({
                                  tags:true
                              })

                          })

                      })
                  var x_axisdata = data.x_axis
                  let highlightcolumnheaderscolorlist;
                  if (typeof data.plotDict !== 'undefined' && 'highlightcolumnheaderscolorlist' in data.plotDict  && data.plotDict.highlightcolumnheaderscolorlist!=="undefined") {
                    highlightcolumnheaderscolorlist = JSON.parse(data.plotDict.highlightcolumnheaderscolorlist);
                  } else {
                    highlightcolumnheaderscolorlist = "";
                  }
                  $(`#${id6}`).attr("data-conditional_table",JSON.stringify(data.conditional_table))
                  if (selectedOptions) {
                    $(`#${id6}`).attr("data-column_alignment_table",JSON.stringify(selectedOptions))
                  }
                  var table = $(`#table_example${id}`).DataTable({

                    "data":data.content,
                   "columns":column_names,
                    "autoWidth": true,
                    "scrollY": "50vh",
                    "scrollCollapse": true,
                    "scrollX": "110%",
                    orderCellsTop: true,
                    stateSave: true,
                    "deferRender": true,
                    "paging": true,
                    "lengthMenu": [[1, 5, 10, 25, 50, 75, 100, -1],
                    [1, 5, 10, 25, 50, 75, 100,'All']],
                    "pageLength": 10,
                    dom: 'lfBrtip',
                    "sScrollX": "100%",
                    "scrollX": true,
                    buttons: [
                      {
                        extend: 'collection',
                        text: 'Export',
                        buttons: [
                          {
                            extend: 'copy', title: '', exportOptions: {
                              columns: ':visible:not(.noVis)'
                            }
                          },
                          {
                            extend: 'excel', title: '', exportOptions: {
                              columns: ':visible:not(.noVis)'
                            }
                          },
                          {
                            extend: 'csv', title: '', exportOptions: {
                              columns: ':visible:not(.noVis)'
                            }
                          },
                          {
                            extend: 'pdf', title: '', exportOptions: {
                              columns: ':visible:not(.noVis)'
                            }
                          },
                        ],
                      },

                    ],
                   "headerCallback": function(thead, data, start, end, display) {
                     // set header alignment for each header cell
                     $(thead).find('th').each(function() {
                       let colIndex = $(this).index();
                       if (selectedOptions) {
                         if (Array.isArray(selectedOptions[0].columns_config)) {
                           let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                           let globalHeaderColumnAlignment = selectedOptions[0].global_config.globalHeaderColumnAlignment;
                           $(this).addClass(`dt-${colConfig ? colConfig.header : globalHeaderColumnAlignment}`);
                         } else {
                           $(this).addClass(`dt-${globalHeaderColumnAlignment}`);
                         }
                       }
                     });
                     //highlight column headers
                     if (highlightcolumnheaderscolorlist && highlightcolumnheaderscolorlist !== "") {
                      $(thead).find('th').each(function(index){
                        let highlightcolumnheaderscolorlist1 = highlightcolumnheaderscolorlist
                        var columnName = $(this).text();
                        var columnColors = highlightcolumnheaderscolorlist1[columnName] || highlightcolumnheaderscolorlist1["allColumns"] || {"bgColor":"", "fontColor":""};
                        $(this).css({"background-color": columnColors.bgColor, "color": columnColors.fontColor});
                      });
                    }
                   },
                   columnDefs: [
                     (!selectedOptions) ? {
                       "targets": "_all",
                       "className": "dt-center"
                     } :
                     (selectedOptions && Array.isArray(selectedOptions[0].columns_config)) ? {
                       "targets": "_all",
                       "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                         let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                         let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                         $(cell).addClass(`dt-${colConfig ? colConfig.content : globalContentColumnAlignment}`);
                       }
                     } :
                     (selectedOptions && !Array.isArray(selectedOptions[0].columns_config)) ? {
                       "targets": "_all",
                       "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                         let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                         $(cell).addClass(`dt-${globalContentColumnAlignment}`);
                       }
                     } :
                     {
                       "targets": "_all",
                       "className": "allColumnClass all buttons_export_class"
                     }
                   ],
                   'rowCallback': function(row, data, index){

                       for(var i=0;i<(conditional_data).length;i++)
                       {
                           if(conditional_data[i]["column_name"] != null){

                           if((x_axisdata).includes(conditional_data[i]["column_name"]))
                           {

                           if(conditional_data[i]["column_condition"] == "Equal to")
                           {
                               if(conditional_data[i]["column_datatype"] == "DateField")
                               {
                                   var val = conditional_data[i]["condition_value"]
                               }
                               else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                               {
                                  var val = conditional_data[i]["condition_value"]
                               }
                               else{
                                   var val = conditional_data[i]["condition_value"]
                               }

                                   if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == val)
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }


                           }
                           else if(conditional_data[i]["column_condition"] == "Not equal to")
                           {
                               if(conditional_data[i]["column_datatype"] == "DateField")
                               {
                                   var val = conditional_data[i]["condition_value"]
                               }
                               else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                               {
                                  var val = conditional_data[i]["condition_value"]
                               }
                               else{
                                   var val = conditional_data[i]["condition_value"]
                               }

                                   if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML != val)
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }


                           }
                           else if(conditional_data[i]["column_condition"] == "Greater than")
                           {
                               if(conditional_data[i]["column_datatype"] == "DateField")
                               {
                                   if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }
                               }
                               else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                               {
                                  if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }
                               }
                               else{
                                   if(conditional_data[i]["column_datatype"] == "FloatField")
                                   {
                                       if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseFloat(conditional_data[i]["condition_value"]))
                                       {
                                           $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                       }
                                   }
                                   else{
                                   if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseInt(conditional_data[i]["condition_value"]))
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }
                               }
                               }
                           }
                           else if(conditional_data[i]["column_condition"] == "Smaller than")
                           {
                               if(conditional_data[i]["column_datatype"] == "DateField")
                               {
                                   if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"] )))
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }
                               }
                               else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                               {
                                  if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"])))
                                   {
                                       $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                   }
                               }
                               else
                               {
                                   if(conditional_data[i]["column_datatype"] == "FloatField")
                                   {
                                       if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseFloat(conditional_data[i]["condition_value"]))
                                       {
                                           $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                       }
                                   }
                                   else{
                                       if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseInt(conditional_data[i]["condition_value"]))
                                       {
                                           $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                       }
                                   }
                               }
                           }
                           else if(conditional_data[i]["column_condition"] == "In"){
                               if(conditional_data[i]["condition_value"].includes($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML))
                               {
                                   $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                               }
                           }
                           else if(conditional_data[i]["column_condition"] == "Starts with"){
                               if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).startsWith(conditional_data[i]["condition_value"]))
                               {
                                   $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                               }
                           }
                           else if(conditional_data[i]["column_condition"] == "Ends with"){
                               if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).endsWith(conditional_data[i]["condition_value"]))
                               {
                                   $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                               }
                           }
                           else if(conditional_data[i]["column_condition"] == "Contains"){
                               if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).includes(conditional_data[i]["condition_value"]))
                               {
                                   $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                               }
                           }
                           else{
                               if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == conditional_data[i]["condition_value"])
                               {
                                   $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                               }
                           }
                       }
                       }
                   }
                      },
                      initComplete: function () {

                       try{

                           $(`#table_example${id}`).off("click").on('click', 'td', function() {
                             var id_freeze_ = $(this).closest("table").attr("id")
                             var table1 = $(`#${id_freeze_}`).DataTable();
                             var columns = table1.settings().init().columns;
                             cellcollen2 = columns.length
                             cellindex3 = table1.cell(this).index().column + 1;
                             $( this ).toggleClass( 'cell_highlighted' );
                             $( this ).toggleClass( "cell_selected" );
                           });
                         } catch(err){}
                      },

                    }).columns.adjust();

                    if (data.plotDict && data.plotDict.columnAlignmentSelectedOptions && data.plotDict.columnAlignmentSelectedOptions !== "undefined") {
                      let selectedOptions1 = JSON.parse(data.plotDict.columnAlignmentSelectedOptions);
                      // Update header alignments
                      table.columns().header().each(function(colHeader) {
                        $(colHeader).removeClass('dt-center dt-left dt-right');
                        let colIndex = table.column(colHeader).index();
                        let colConfig = selectedOptions1[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                        let globalHeaderColumnAlignment = selectedOptions1[0].global_config.globalHeaderColumnAlignment;
                        let headerAlignmentClass = colConfig && colConfig.header ? `dt-${colConfig.header}` : `dt-${globalHeaderColumnAlignment}`;
                        $(colHeader).addClass(headerAlignmentClass);
                      });

                      // Update column content alignment
                      table.columns().every(function() {
                        let colIndex = this.index();
                        let colConfig = selectedOptions1[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                        let globalContentColumnAlignment = selectedOptions1[0].global_config.globalContentColumnAlignment;
                        this.nodes().to$().removeClass().addClass(`dt-${colConfig ? colConfig.content : globalContentColumnAlignment}`);
                      });

                      // Redraw the table
                      table.draw();
                    }
                       if (id in finalfdict2){
                       var table_freeze = $(`#table_example${id}`).DataTable();


                       new $.fn.dataTable.FixedColumns( table_freeze,
                          finalfdict2[`${id}`]
                       );

                       setTimeout(() => {
                          if ($.fn.DataTable.isDataTable(`#table_example${id}`)) {
                                  $(`#table_example${id}`).DataTable().draw()
                              }
                      },200)
                  }

                       $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
                          $($.fn.dataTable.tables(true)).DataTable()
                              .columns.adjust().draw();
                        });

              $(`#${id6}`).find(".dt-buttons").css("padding-left","1em")
              $(`#table_example${id}_info`).css("padding-left","1em")
              $(`#table_example${id}_paginate`).css("padding-right","1em")
              $(`#${id6}`).find(".dt-buttons").css("padding-top","1em")
              $(`#table_example${id}_length`).css("float","none")
              $(`#table_example${id}_length`).css("padding-right","1em")
              $(`#table_example${id}_length`).css("padding-top","1em")
              $(`#table_example${id}_length`).css("display","inline-block")
              $(`#table_example${id}_filter`).css("padding-top","1em")
              $(`#${id6}`).find('.graphcontainerdiv').css("overflow-y","scroll")
              var style = document.createElement("style");
              style.innerHTML = `#${id6}>.graphcontainerdiv::-webkit-scrollbar {display: none;}`;
              document.head.appendChild(style);

              $(`#${id6}`).resizable({
                  start: function (event, size) {
                      var classname = document.getElementById(id6).className

                      document.getElementById(id6).className = "card charts ui-resizable ui-draggable ui-resizable-resizing"
                      $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                  },
                  stop: function (event, size) {
                      $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                  },
              });

              $(`#apply_freezepane_${chartDivId}`).click(function(This){

                  var element_id = chartDivId

                  if($(`#freezeprev_left_${element_id}`).is(":checked") && $(`#freezeprev_right_${element_id}`).is(":checked")){
                  Swal.fire({icon: 'warning',text:"Kindly select only one checkbox to freeze panes." });
                  }else{

                  if($(`#freezeprev_left_${element_id}`).is(":not(:checked)") && $(`#freezeprev_right_${element_id}`).is(":not(:checked)")){
                    Swal.fire({icon: 'warning',text:"Kindly select atleast one checkbox to freeze panes." });
                  }

                  if($(`#freezeprev_left_${element_id}`).is(":checked")){
                      try{
                      finalfdict2[element_id]['left'] = parseInt(cellindex3)
                      }catch(err){
                          finalfdict2[element_id] = {"left": 0, "right": 0}
                          finalfdict2[element_id]['left'] = parseInt(cellindex3)
                      }
                  }


                  if($(`#freezeprev_right_${element_id}`).is(":checked")){
                      try{
                      finalfdict2[element_id]['right'] = parseInt(cellcollen2 - cellindex3 + 1)
                      }catch(err){
                          finalfdict2[element_id] = {"left": 0, "right": 0}
                          finalfdict2[element_id]['right'] = parseInt(cellcollen2 - cellindex3 + 1)
                      }
                  }
                  $(".cell_highlighted").removeClass("cell_selected")
                  $(".cell_highlighted").removeClass("cell_highlighted")

                  var table = $(`#table_example${id}`).DataTable();

                  new $.fn.dataTable.FixedColumns( table,
                      finalfdict2[element_id]
                  );
              }

              })

              $(`#apply_unfreezepane_${chartDivId}`).click(function(This){

                  var element_id = chartDivId

                  if($(`#freezeprev_left_${element_id}`).is(":checked")){
                      finalfdict2[element_id]['left'] = 0
                  }


                  if($(`#freezeprev_right_${element_id}`).is(":checked")){
                      finalfdict2[element_id]['right'] = 0
                  }

                  var table = $(`#table_example${id}`).DataTable();
                  table.addClass('colReorder');
                  new $.fn.dataTable.FixedColumns( table,
                      finalfdict2[element_id]
                  );


              })

              $(`#${id_change_conditional_config}`).click(function(){
                  var conditional_table = []
                  $(`#${id_condition_container}`).find('.conditional_body_edit').each(function() {
                      var conditional_dict={}
                      conditional_dict['column_name'] = $(this).find('.conditional_column_name_edit').val()
                      conditional_dict['column_datatype'] = $(this).find('.conditional_column_name_edit').find('option:selected').attr('data-datatype')
                      conditional_dict['column_condition'] = $(this).find('.conditional_condition_edit').val()
                      conditional_dict['condition_value'] = $(this).find('.conditional_value_edit').val()
                      conditional_dict['condition_color'] = $(this).find('.conditional_color_input_edit').val()
                      conditional_table.push(conditional_dict)
                  })
                  var mappingDict = data.mappingDict
                   for(var i=0;i<((conditional_table).length);i++)
                  {
                      for (const [key, value] of Object.entries(column_names)) {
                          if(value["data"] == fieldToVerbose(conditional_table[i]["column_name"], mappingDict)){
                              conditional_table[i]["td_val"] = parseInt(key)

                          }
                      }
                  }
                  var conditional_data = conditional_table
                  var x_axisdata = data.x_axis
                   $(`#table_example${id}`).DataTable().clear().destroy()
                       var table = $(`#table_example${id}`).DataTable({

                       "data":data.content,
                      "columns":column_names,
                       "autoWidth": false,
                       "scrollY": "50vh",
                       "scrollCollapse": true,
                       "scrollX": "110%",
                       orderCellsTop: true,
                       responsive: true,
                       stateSave: true,
                       "deferRender": true,
                       "paging": true,
                       "lengthMenu": [[1, 5, 10, 25, 50, 75, 100, -1],
                       [1, 5, 10, 25, 50, 75, 100,'All']],
                       "pageLength": 10,
                       dom: 'lfBrtip',
                       "sScrollX": "100%",
                       "scrollX": true,
                       buttons: [
                         {
                           extend: 'collection',
                           text: 'Export',
                           buttons: [
                             {
                               extend: 'copy', title: '', exportOptions: {
                                 columns: ':visible:not(.noVis)'
                               }
                             },
                             {
                               extend: 'excel', title: '', exportOptions: {
                                 columns: ':visible:not(.noVis)'
                               }
                             },
                             {
                               extend: 'csv', title: '', exportOptions: {
                                 columns: ':visible:not(.noVis)'
                               }
                             },
                             {
                               extend: 'pdf', title: '', exportOptions: {
                                 columns: ':visible:not(.noVis)'
                               }
                             },
                           ],
                         },

                       ],
                       "headerCallback": function(thead, data, start, end, display) {
                        // set header alignment for each header cell
                        $(thead).find('th').each(function() {
                          let colIndex = $(this).index();
                          if (!selectedOptions) {
                            $(thead).find('th').addClass('dt-center');
                          } else {
                            if (Array.isArray(selectedOptions[0].columns_config)) {
                              let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                              let globalHeaderColumnAlignment = selectedOptions[0].global_config.globalHeaderColumnAlignment;
                              $(this).addClass(`dt-${colConfig ? colConfig.header : globalHeaderColumnAlignment}`);
                            } else {
                              $(this).addClass(`dt-${globalHeaderColumnAlignment}`);
                            }
                          }
                        });
                      },
                      columnDefs: [
                        (!selectedOptions) ? {
                          "targets": "_all",
                          "className": "dt-center"
                        } :
                        (selectedOptions && Array.isArray(selectedOptions[0].columns_config)) ? {
                          "targets": "_all",
                          "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                            let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                            let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                            $(cell).addClass(`dt-${colConfig ? colConfig.content : globalContentColumnAlignment}`);
                          }
                        } :
                        (selectedOptions && !Array.isArray(selectedOptions[0].columns_config)) ? {
                          "targets": "_all",
                          "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                            let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                            $(cell).addClass(`dt-${globalContentColumnAlignment}`);
                          }
                        } :
                        {
                          "targets": "_all",
                          "className": "allColumnClass all buttons_export_class"
                        }
                      ],
                      'rowCallback': function(row, data, index){

                          for(var i=0;i<(conditional_data).length;i++)
                          {
                              if(conditional_data[i]["column_name"] != null){
                                  if((x_axisdata).includes(conditional_data[i]["column_name"]))
                              {
                              if(conditional_data[i]["column_condition"] == "Equal to")
                              {
                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                  {
                                      var val = conditional_data[i]["condition_value"]
                                  }
                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                  {
                                     var val = conditional_data[i]["condition_value"]
                                  }
                                  else{
                                      var val = conditional_data[i]["condition_value"]
                                  }
                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == val)
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Not equal to")
                              {
                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                  {
                                      var val = conditional_data[i]["condition_value"]
                                  }
                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                  {
                                     var val = conditional_data[i]["condition_value"]
                                  }
                                  else{
                                      var val = conditional_data[i]["condition_value"]
                                  }
                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML != val)
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Greater than")
                              {
                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                  {
                                      if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                      {
                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                      }
                                  }
                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                  {
                                     if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                      {
                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                      }
                                  }
                                  else{
                                      if(conditional_data[i]["column_datatype"] == "FloatField")
                                      {
                                          if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseFloat(conditional_data[i]["condition_value"]))
                                          {
                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                          }
                                      }
                                      else{
                                          if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseInt(conditional_data[i]["condition_value"]))
                                          {
                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                          }
                                      }
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Smaller than")
                              {
                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                  {
                                      if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"])))
                                      {
                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                      }
                                  }
                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                  {
                                     if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"])))
                                      {
                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                      }
                                  }
                                  else{
                                      if(conditional_data[i]["column_datatype"] == "FloatField")
                                      {
                                          if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseFloat(conditional_data[i]["condition_value"]))
                                          {
                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                          }
                                      }
                                      else{
                                      if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseInt(conditional_data[i]["condition_value"]))
                                      {
                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                      }
                                  }
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "In"){
                                  if(conditional_data[i]["condition_value"].includes($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML))
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Starts with"){
                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).startsWith(conditional_data[i]["condition_value"]))
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Ends with"){
                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).endsWith(conditional_data[i]["condition_value"]))
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else if(conditional_data[i]["column_condition"] == "Contains"){
                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).includes(conditional_data[i]["condition_value"]))
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                              else{
                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == conditional_data[i]["condition_value"])
                                  {
                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                  }
                              }
                          }
                          }
                      }


                         },
                         initComplete: function () {

                          try{

                              $(`#table_example${id}`).off("click").on('click', 'td', function() {
                                var id_freeze_ = $(this).closest("table").attr("id")
                                var table1 = $(`#${id_freeze_}`).DataTable();
                                var columns = table1.settings().init().columns;
                                cellcollen2 = columns.length
                                cellindex3 = table1.cell(this).index().column + 1;

                                $( this ).toggleClass( 'cell_highlighted' );
                                $( this ).toggleClass( "cell_selected" );
                              });
                            } catch(err){}
                         },

                       }).columns.adjust();

                       $(`#${id6}`).attr("data-conditional_table",JSON.stringify(conditional_table))

                       if (id in finalfdict2){
                      var table_freeze = $(`#table_example${id}`).DataTable();

                      new $.fn.dataTable.FixedColumns( table_freeze,
                          finalfdict2[`${id}`]
                      );

                      setTimeout(() => {
                          if ($.fn.DataTable.isDataTable(`#table_example${id}`)) {
                                  $(`#table_example${id}`).DataTable().draw()
                              }
                      },200)
                  }


                       $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
                          $($.fn.dataTable.tables(true)).DataTable()
                              .columns.adjust().draw();
                        });

              $(`#${id6}`).find(".dt-buttons").css("padding-left","1em")
              $(`#table_example${id}_info`).css("padding-left","1em")
              $(`#table_example${id}_paginate`).css("padding-right","1em")
              $(`#${id6}`).find(".dt-buttons").css("padding-top","1em")
              $(`#table_example${id}_length`).css("float","none")
              $(`#table_example${id}_length`).css("padding-right","1em")
              $(`#table_example${id}_length`).css("padding-top","1em")
              $(`#table_example${id}_length`).css("display","inline-block")
              $(`#table_example${id}_filter`).css("padding-top","1em")
              $(`#${id6}`).find('.graphcontainerdiv').css("overflow-y","scroll")
              var style = document.createElement("style");
              style.innerHTML = `#${id6}>.graphcontainerdiv::-webkit-scrollbar {display: none;}`;
              document.head.appendChild(style);
              })

              // STYLING FUNCTIONS
               if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

            $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id_header_fontstyle}`).val(header_fontstyle)

              $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");


                  if($(`#${id23}`).prop("checked")){
                      var div = document.getElementById(id_header)

                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )


                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){

                   var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{


                      $(`#${id6}`).attr("data-globalbg", "no")

                  }

                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }
                var bgcolor = $(`#${id22}`).val()
                $(`#${id6}`).attr("data-bgcolor", bgcolor)
              $(`#${id22}`).change(function(){
                  plotbg = $(this).val()

                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).find(".tabulator").css("background-color",plotbg );

                  $(`#${id6}`).attr("data-bgcolor", plotbg)
              });
               $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )
              $(`#${id6}`).attr("data-label_color",label_color)
              $(`#${id6}`).attr("data-label_fontsize",label_fontsize)
              $(`#table_example${id}_wrapper`).find('thead tr th').css({'font-size':label_fontsize + "px","color":label_color});
              $(`#${id_label_color}`).val(label_color)
              $(`#${id_label_fontsize}`).val(label_fontsize)
              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6,id,id_label_color,id_label_fontsize,graph_subtype,dataplot, layout)
              var x_axisdata3= data.x_axis
              TableColunmReorder(id6,id_tableColunm_Rearrange, x_axisdata3, id, data, id_tableColunm_Rearrange_ul,id_tableColunm_Rearrange_checkbox,id_tableColunm_Rearrange_div )
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              document.getElementById(id_filter_button).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              document.getElementById(id5).onclick = function () {
              var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
              deletePlotId6FromSlicerDict(maindiv);
              deleteUpdatePlotID5(id5,maindiv)
              };

              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id7).style.top
                  document.getElementById(id7).style.top = offset
                  var displayvalue = document.getElementById(id7).style.display
                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              // STYLING FUNCTIONS END
              if (data.plotDict && data.plotDict.FormattersConfiguration && data.plotDict.FormattersConfiguration!=='undefined') {
                let formatterObjs1 = JSON.parse(data.plotDict.FormattersConfiguration);
                let tableId1 = "table_example" + id;
                applyColumnFormatters(formatterObjs1, tableId1);
              }
          }
          if (String(graph_subtype) === "Nested_Table") {

            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
              if (data.plotDict === undefined) {
                  var tab_height = 400
              outerCard.appendTo(`#${plotDict.tabNameID}`)
              filterModal.appendTo(`#${plotDict.tabNameID}`)
              conditionalModal.appendTo(`#${plotDict.tabNameID}`)
              outermodalCard.appendTo(`#${plotDict.tabNameID}`);
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              }
              else{

                  var tab_height = (data.plotDict.height - 55) + "px"
              outerCard.appendTo(`#${data.plotDict.tab_id}`)
              filterModal.appendTo(`#${data.plotDict.tab_id}`)
              conditionalModal.appendTo(`#${data.plotDict.tab_id}`)
              outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
              $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
              $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
              $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
              }

              //Close Condition Modal
              closeConditionModal(id_condition_close)
              document.getElementById(id_condition_modal_edit).onclick = function () {
                  var displayvalue = document.getElementById(id_condition).style.display
                   if (displayvalue == "none") {
                      document.getElementById(id7).style.display = "none";
                       document.getElementById(id_condition).style.display = "block";
                       $('.charts').each(function () {
                           if ($(this).attr('id') != `${id6}`) {
                               if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                   $(this).css('opacity', '0.5')
                               }
                           }
                       })

                   }
                   else {
                       document.getElementById(id_condition).style.display = "none"
                       $('.charts').each(function () {

                           $(this).css('opacity', '')
                       })
                   }
              };



              var conditional_data = data.conditional_table

              var conditional_string = `<div class="nested_input_columns_value_dict_edit" style="display:none">`
              for (const i in data.datatype_list) {
                conditional_string = conditional_string + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
              }
              conditional_string = conditional_string + `</div>
              <div class="nested_conditional_body_edit" style="margin-top:1em;width: 100%; display:flex">
              <div class="col-2">
              <p style="font-weight: bold;">Select Type:</p>
              <select class="select2 form-control nested_column_edit">`
              if((data.conditional_table).length > 0){
                if(data.conditional_table[0]['nested_type'] == "Value"){
                  conditional_string = conditional_string + `
                  <option value="Category">Category</option>
                  <option value="Value" selected>Value</option>`
                }
                else{
                  conditional_string = conditional_string + `
                  <option value="Category" selected>Category</option>
                  <option value="Value">Value</option>`
                }
              }
              else{
                conditional_string = conditional_string + `
                <option value="Category">Category</option>
                <option value="Value">Value</option>`
              }
              conditional_string = conditional_string + `</select>
              </div>
              <div class="col-3">
              <p style="font-weight: bold;">Select column:</p>
              <select class="select2 form-control nested_conditional_column_name_edit">
                  <option value="" selected disabled>------------</option>
              `
              for (const i in data.datatype_list) {
                conditional_string = conditional_string + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
                }
              conditional_string = conditional_string + `</select>
              </div>
              <div class="col-2">
              <p style="font-weight: bold;">Condition:</p>
              <select class="select2 form-control nested_conditional_condition_edit">
                  <option value="" disabled selected>-------------------</option>
                  <option value="Greater than">Greater than</option>
                  <option value="Smaller than">Smaller than</option>
                  <option value="Equal to">Equal to</option>
                  <option value="Not equal to">Not equal to</option>
                  <option value="In">In</option>
                  <option value="Starts with">Starts with</option>
                  <option value="Contains">Contains</option>
                  <option value="Ends with">Ends with</option>
              </select>
              </div>
              <div class="col-2 nested_conditional_input_value_edit">
              <p style="font-weight: bold;">Select value:</p>
              <div class="nested_conditional_format_value_input_edit">`
              if((data.conditional_table).length > 0){
                if((data.conditional_table[0]['column_condition'])== "Equal to"){
                  if((data.conditional_table[0]['nested_type'])== "Category"){
                    if((data.conditional_table[0]['column_datatype'])== "DateField"){
                      conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit" ></input>`
                    }
                    else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                      conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                    }
                    else{
                      conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                           <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                        </select>`
                    }
                  }
                  else{
                        conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                              <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                          </select>`
                  }
                }
                else if((data.conditional_table[0]['column_condition'])== "Not equal to"){
                  if((data.conditional_table[0]['nested_type'])== "Category"){
                    if((data.conditional_table[0]['column_datatype'])== "DateField"){
                      conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit" ></input>`
                    }
                    else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                      conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                    }
                    else{
                      conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                          <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                        </select>`
                    }
                  }
                  else{
                       conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                          <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                        </select>`
                  }
                }
                else if(((data.conditional_table[0]['column_condition'])== "Starts with") || ((data.conditional_table[0]['column_condition'])== "Ends with") || ((data.conditional_table[0]['column_condition'])== "Contains")){
                  conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                    <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                  </select>`
                }
                else if((data.conditional_table[0]['column_condition'])== "In"){
                  conditional_string = conditional_string + `<select class="select2 select2_condition_class nested_conditional_value_edit form-control" multiple required>`
                    for(var j=0;j<(data.conditional_table[0]['condition_value'].length);j++){
                      conditional_string = conditional_string +  `<option value="${data.conditional_table[0]['condition_value'][j]}" selected>${data.conditional_table[0]['condition_value'][j]}</option>`
                    }
                    conditional_string = conditional_string +  `</select>`
                }
                else if((data.conditional_table[0]['column_condition'])== "Greater than" || (data.conditional_table[0]['column_condition'])== "Smaller than"){
                  if((data.conditional_table[0]['nested_type'])== "Category"){
                    if((data.conditional_table[0]['column_datatype'])== "DateField"){
                      conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                    }
                    else if((data.conditional_table[0]['column_datatype'])== "DateTimeField"){
                      conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[0]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                    }
                    else{
                      conditional_string = conditional_string + `<input type = "number" style="width:11em;height:2em;width:7.5em;" class="nested_conditional_value_edit" value="${data.conditional_table[0]['condition_value']}"></input>`
                    }
                  }
                  else{
                    conditional_string = conditional_string + `<input type = "number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit" value="${data.conditional_table[0]['condition_value']}"></input>`
                  }
                }
                else{
                  conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                    <option selected value="${data.conditional_table[0]['condition_value']}">${data.conditional_table[0]['condition_value']}</option>
                  </select>`
                }
              }
              else{
                conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class" required>
                </select>`
              }
              conditional_string = conditional_string + `</div>
              </div>
              <div class="col-2">
              <p style="font-weight: bold;">Select color:</p>`
              if((data.conditional_table).length > 0){
                conditional_string = conditional_string + `<input type="color" class="form-control nested_conditional_color_input_edit" data-css="background-color" value="${data.conditional_table[0]['condition_color']}" >`
              }
              else{
                conditional_string = conditional_string + `<input type="color" class="form-control nested_conditional_color_input_edit" data-css="background-color" value="#ffffff" >`
              }
              conditional_string = conditional_string + `</div>
              <div class="col-1">
              <i class="fas fa-plus nested_add_conditional_parameter_edit" data-toggle="tooltip" title="Add condition" style="cursor:pointer;padding-top:3.2em;"></i> </i>
              </div>

          </div>`

              for(var i=1;i<(data.conditional_table).length;i++){
                  if(data.conditional_table[i]['condition_value'] == undefined){
                      data.conditional_table[i]['condition_value'] = ""
                  }
                  conditional_string = conditional_string + `
                      <div class="nested_conditional_body_edit" style="margin-top:1em;width: 100%; display:flex"><div class="col-2">`
                      conditional_string = conditional_string + `<select class="select2 form-control nested_column_edit">`
                          if(data.conditional_table[i]['nested_type'] == "Value"){
                              conditional_string = conditional_string + `<option value="Category">Category</option>
                            <option value="Value" selected>Value</option>`
                          }
                          else{
                              conditional_string = conditional_string + `<option value="Category" selected>Category</option>
                            <option value="Value">Value</option>`
                          }

                          conditional_string = conditional_string + `</select>
                          </div><div class="col-3">`
                              conditional_string = conditional_string + ` <select class="select2 form-control nested_conditional_column_name_edit">`
                              for (const j in data.datatype_list) {
                                conditional_string = conditional_string + ` <option value= ${data.datatype_list[j].field_name} data-datatype=${data.datatype_list[j].data_type}>${data.datatype_list[j].column_name}</option>`
                                }
                              conditional_string = conditional_string + `</select>
                              </div>
                              <div class="col-2">`
                              conditional_string = conditional_string + ` <select class="select2 form-control nested_conditional_condition_edit"><option value="Equal to">Equal to</option><option value="Not equal to">Not equal to</option><option value="In">In</option><option value="Starts with">Starts with</option><option value="Ends with">Ends with</option><option value="Contains">Contains</option><option value="Greater than">Greater than</option><option value="Smaller than">Smaller than</option></select></div>
                              <div class="col-2 nested_conditional_input_value_edit">
                              <div class="nested_conditional_format_value_input_edit">`
                              if((data.conditional_table[i]['column_condition'])== "Equal to"){
                                if((data.conditional_table[i]['nested_type'])== "Category"){
                                  if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                      conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit" ></input>`
                                  }
                                  else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                      conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                                  }
                                  else{
                                      conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                        <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                      </select>`
                                  }}
                                  else{
                                        conditional_string = conditional_string + ` <select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                            <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                        </select>`
                                  }
                              }
                              else if((data.conditional_table[i]['column_condition'])== "Not equal to"){
                                if((data.conditional_table[i]['nested_type'])== "Category"){
                                  if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                    conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit" ></input>`
                                  }
                                  else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                    conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                                  }
                                  else{
                                    conditional_string = conditional_string + ` <select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                        <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                    </select>`
                                  }
                                }
                                else{
                                  conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                    <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                  </select>`
                                }
                              }
                              else if(((data.conditional_table[i]['column_condition'])== "Starts with") || ((data.conditional_table[i]['column_condition'])== "Ends with") || ((data.conditional_table[i]['column_condition'])== "Contains")){
                                conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                  <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                </select>`
                              }
                              else if((data.conditional_table[i]['column_condition'])== "In"){
                                conditional_string = conditional_string + `<select class="select2 select2_condition_class nested_conditional_value_edit form-control" multiple required>`
                                for(var j=0;j<(data.conditional_table[i]['condition_value'].length);j++){
                                  conditional_string = conditional_string +  `<option value="${data.conditional_table[i]['condition_value'][j]}" selected>${data.conditional_table[i]['condition_value'][j]}</option>`
                                }
                                conditional_string = conditional_string +  `</select>`
                              }
                              else if((data.conditional_table[i]['column_condition'])== "Greater than" || (data.conditional_table[i]['column_condition'])== "Smaller than"){
                                if((data.conditional_table[i]['nested_type'])== "Category"){
                                  if((data.conditional_table[i]['column_datatype'])== "DateField"){
                                      conditional_string = conditional_string + `<input type="date" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                                  }
                                  else if((data.conditional_table[i]['column_datatype'])== "DateTimeField"){
                                    conditional_string = conditional_string + `<input type="datetime-local" value="${data.conditional_table[i]['condition_value']}" style="width:7.5em;" class="nested_conditional_value_edit"></input>`
                                  }
                                  else{
                                    conditional_string = conditional_string + `<input type = "number" style="width:11em;height:2em;width:7.5em;" class="nested_conditional_value_edit" value="${data.conditional_table[i]['condition_value']}"></input>`
                                  }
                                }
                                else{
                                  conditional_string = conditional_string + `<input type = "number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit" value="${data.conditional_table[i]['condition_value']}"></input>`
                                }
                              }
                              else{
                                conditional_string = conditional_string + `<select class="select2 form-control select2_condition_class nested_conditional_value_edit" required>
                                  <option selected value="${data.conditional_table[i]['condition_value']}">${data.conditional_table[i]['condition_value']}</option>
                                </select>`
                              }
                              conditional_string = conditional_string + `
                              </div>
                              </div>
                              <div class="col-2">
                              <input type="color" class="form-control nested_conditional_color_input_edit" data-css="background-color" value="${data.conditional_table[i]['condition_color']}" >
                              </div>
                              <div class="col-1">
                                  <i class="fa fa-times nested_remove_conditional_parameter_edit" data-toggle="tooltip" title="Remove condition" style="cursor:pointer"></i> </i>
                              </div>
                              </div>
                  `
              }
              $(`#${id_condition_container}`).append(conditional_string)
              $(document).ready(function(){
                  $('.select2').select2()
                  $('.select2_condition_class').select2({
                      tags:true
                  })

              })
              if((data.conditional_table).length > 0){
                $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_condition_edit').each(function(index) {
                    $(this).val(conditional_data[index]["column_condition"]).trigger("change")
                    });

                $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_column_name_edit').each(function(index) {
                    $(this).val(conditional_data[index]["column_name"]).trigger("change")
                    });
              }
              $('.select2').select2()
              $('.select2_condition_class').select2({
                  tags:true
              })

              $('.nested_column_edit').change(function(){
                  $(this).parent().parent().find(".nested_conditional_condition_edit").val('').trigger('change')
              })

              $('.nested_remove_conditional_parameter_edit').click(function(){
                  $(this).closest('.nested_conditional_body_edit').remove()
              })


                  $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_column_name_edit').change(function(){
                      var datatype = $(this).find('option:selected').attr('data-datatype')
                      $(this).parent().parent().find(".nested_conditional_condition_edit").empty()
                      $(this).parent().parent().find(".nested_conditional_condition_edit").append('<option value="" disabled selected>------------</option>')
                          var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to","In","Starts with","Ends with","Contains");
                          for (let i = 0; i < optionvalues.length; i++) {
                              $(this).parent().parent().find(".nested_conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                          }
                  })

                      $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_condition_edit').change(function(){
                            var condition = $(this).val()
                              if((condition == "Greater than") || (condition == "Smaller than")){
                                  if($(this).parent().parent().find('.nested_column_edit').val() == "Category")
                                  {   if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="date" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else{
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                  }
                                  else{
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                  }

                              }
                              else if (condition == "Equal to" || condition == "Not equal to"){
                                  if($(this).parent().parent().find('.nested_column_edit').val() == "Category")
                                  {
                                      if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="date" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else{
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value_edit" required></select>`)
                                      }
                                  }
                                  else{
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value_edit" required></select>`)
                                  }
                              }
                              else if (condition == "In"){
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 nested_conditional_value_edit" multiple required></select>`)
                              }
                              else if (condition == "Starts with" || condition == "Ends with" || condition == "Contains"){
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value_edit" required></select>`)
                              }
                              else{
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value_edit" required></select>`)
                              }

                                  $('.select2_condition_class').select2({
                                      tags:true
                                  })

                          })




                  $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find(".nested_add_conditional_parameter_edit").click(function(){

                              var string_col = `<div class="nested_conditional_body_edit" style="margin-top:1em;width: 100%; display:flex">
                              <div class="col-2">
                              <select class="select2 form-control nested_column_edit">
                                  <option value="Category">Category</option>
                                  <option value="Value">Value</option>
                              </select>
                              </div>
                              <div class="col-3">
                              <select class="select2 form-control nested_conditional_column_name_edit">
                                  <option value="" selected disabled>------------</option>
                              `
                              for (const i in data.datatype_list) {
                                string_col = string_col + ` <option value= ${data.datatype_list[i].field_name} data-datatype=${data.datatype_list[i].data_type}>${data.datatype_list[i].column_name}</option>`
                                }
                              string_col = string_col + `</select>
                              </div>
                              <div class="col-2">
                              <select class="select2 form-control nested_conditional_condition_edit">
                                  <option value="" disabled selected>-------------------</option>
                                  <option value="Greater than">Greater than</option>
                                  <option value="Smaller than">Smaller than</option>
                                  <option value="Equal to">Equal to</option>
                                  <option value="Not equal to">Not equal to</option>
                                  <option value="In">In</option>
                                  <option value="Starts with">Starts with</option>
                                  <option value="Contains">Contains</option>
                                  <option value="Ends with">Ends with</option>
                              </select>
                              </div>
                              <div class="col-2 nested_conditional_input_value_edit">
                              <div class="nested_conditional_format_value_input_edit">
                              <select class="select2 form-control select2_condition_class" required>
                              </select>
                              </div>
                              </div>
                              <div class="col-2">
                              <input type="color" class="form-control nested_conditional_color_input_edit" data-css="background-color" value="#ffffff" >
                              </div>
                              <div class="col-1">
                              <i class="fa fa-times nested_remove_conditional_parameter_edit" data-toggle="tooltip" title="Remove condition" style="cursor:pointer;margin-top:0.7em;"></i>
                              </div>

                          </div>`

                              $(`#${id_condition_container}`).append(string_col)
                              $('.select2').select2()
                              $('.select2_condition_class').select2({
                                  tags:true
                              })



                              $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_remove_conditional_parameter_edit').click(function(){
                                  $(this).closest('.nested_conditional_body_edit').remove()
                              })

                              $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_column_name_edit').change(function(){
                                  var datatype = $(this).find('option:selected').attr('data-datatype')
                                  $(this).parent().parent().find(".nested_conditional_condition_edit").empty()
                                  $(this).parent().parent().find(".nested_conditional_condition_edit").append('<option value="" disabled selected>------------</option>')


                                  var optionvalues = new Array("Greater than","Smaller than","Equal to","Not equal to","In","Starts with","Ends with","Contains");
                                      for (let i = 0; i < optionvalues.length; i++) {
                                          $(this).parent().parent().find(".nested_conditional_condition_edit").append('<option value="' + optionvalues[i] + '">' + optionvalues[i] + '</option>');
                                      }

                              })

                              $('.nested_column_edit').change(function(){
                                  $(this).parent().parent().find(".nested_conditional_condition_edit").val('').trigger('change')
                              })

                              $(`#${id_condition_container}`).find('.nested_conditional_body_edit').find('.nested_conditional_condition_edit').change(function(){
                                  var condition = $(this).val()

                              if((condition == "Greater than") || (condition == "Smaller than")){
                                  if($(this).parent().parent().find('.nested_column_edit').val() == "Category")
                                  {
                                      if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="date" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else{
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                  }
                                  else{
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="number" style="height:2em;width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                  }

                              }
                              else if (condition == "Equal to" || condition == "Not equal to"){
                                  if($(this).parent().parent().find('.nested_column_edit').val() == "Category")
                                  {
                                      if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="date" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else if($(this).parent().parent().find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype') == "DateTimeField"){
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<input type="datetime-local" style="width:7.5em;" class="nested_conditional_value_edit"></input>`)
                                      }
                                      else{
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value_edit" required></select>`)
                                      }
                                  }
                                  else{
                                      $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                          $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class form-control condition_select2 nested_conditional_value_edit" required></select>`)
                                  }
                              }
                              else if (condition == "In"){
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 select2_condition_class multiple form-control condition_multiple_select2 nested_conditional_value_edit" multiple required></select>`)
                              }
                              else if (condition == "Starts with" || condition == "Ends with" || condition == "Contains"){
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value_edit" required></select>`)
                              }
                              else{
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').empty()
                                  $(this).parent().parent().find(".nested_conditional_input_value_edit").find('.nested_conditional_format_value_input_edit').append(`<select class="select2 form-control select2_condition_class condition_select2 nested_conditional_value_edit" required></select>`)
                              }

                              $('.select2_condition_class').select2({
                                  tags:true
                              })
                              })
                  })





              $(`#${id6}`).attr("data-conditional_table",JSON.stringify(data.conditional_table))


              var datatablediv = document.getElementById(id_table)
                    $(`#${id_table}`).empty();
                    $(`#${id_table}`).append(`
                    <table id="${id_table}-table" class="display compact" style="width:100%;border: 1.5px solid black;">
                        <thead>
                            <tr>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                    `)

                    for (var i = 0; i < data.table_view.length; i++) {
                        string=`<tr style="1px solid black;">`
                        for(let [key,value] of Object.entries(data.table_view[i]) ){
                          string+=`<td>${value}</td>`
                        }
                        string+=`</tr>`
                        $(`#${id_table}-table`).find('tbody').append(string)
                    }
                    var tableheaders = [];
                    for(let [key,value] of Object.entries(data.table_view[0]) ){
                      tableheaders.push(key);
                      $(`#${id_table}-table`).find('thead tr').eq(0).append(`<th style="background-color: var(--primary-color); color:white;">${key}</th>`)
                    }

                    $(`#${id_table}-table`).DataTable();


                    var table_data = data.table_view

                    var tabledata = []
                    var data2=[]
                    for(let i=0;i<table_data.length;i++ ){
                    let newData=[]
                    for(let j=0;j<tableheaders.length;j++){
                    newData.push(table_data[i][tableheaders[j]])
                    }

                    data2.push(newData)


                    }


                    document.getElementById(id_table_export).onclick = function () {
                      document.getElementById(id_tabledownload).click()
                    }
                    document.getElementById(id_tabledownload).onclick = function () {

                      var csvData = [[...tableheaders],...data2];


                          var csvFile = csvData.map(e=>e.map(a=>'"'+((a||"").toString().replace(/"/gi,'""'))+'"').join(",")).join("\r\n"); //quote all fields, escape quotes by doubling them.
                          var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                          var link = document.createElement("a");
                          var url = URL.createObjectURL(blob);
                          link.setAttribute("href", url);
                          link.setAttribute("download", `${data.chartHeader}` + "_data" + ".csv");
                          link.style.visibility = 'hidden';
                          document.body.appendChild(link);
                          link.click();
                          document.body.removeChild(link);

                  }
              document.getElementById(id_tableshow).onclick = function () {

                if (document.getElementById(id_tableicon).innerText == 'Table') {
                    document.getElementById(id_tableicon).innerText = 'N Table'
                    $(`#${id_table_export}`).css('display','block');
                    document.getElementById(id).style.display = "none"
                    $(`#${id_tabledownload}`).css('display','block');
                    document.getElementById(id_table).style.display = "block"

                }
                else {
                    document.getElementById(id_tableicon).innerText = 'Table'
                    document.getElementById(id).style.display = "block"
                    document.getElementById(id_table).style.display = "none"
                    $(`#${id_tabledownload}`).css('display','none');
                    $(`#${id_table_export}`).css('display','none');
                }
            }


              columns = []
              for (let i = 0; i < data.final_cols.length; i++) {
                  columns.push({ title: data.final_cols[i], field: data.final_cols[i] })
              }


              var nested_conditional_table = data.conditional_table
              var open_close = false
              if(data.conditional_table.length > 0 && data.conditional_table[0].column_name != null){
                  var open_close = true
              }
              else{
                  var open_close = false
              }

             var mappingDict = data.mappingDict
              var table = new Tabulator(`#${id}`, {
                  data: data.table_data,             //load row data from array
                  layout: "fitDataFill",      //fit columns to width of table
                  height: tab_height,
                  dataTree:true,
                  dataTreeStartExpanded:open_close,
                  dataTreeCollapseElement: "<i class='fas fa-minus tab_minus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
                  dataTreeExpandElement: "<i class='fas fa-plus tab_minus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
                  movableColumns: true,      //allow column order to be changed
                  resizableRows: true,
                  rowFormatter: function (row) {
                      //row - row component
                      var data = row.getData();

                      for (let j=0; j < nested_conditional_table.length; j++){

                          if(nested_conditional_table[j].column_condition == "Greater than"){

                          var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                          if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  if(nested_conditional_table[j].nested_type == "Category"){
                                      if(new Date(data["Category"]) > new Date(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                                  {
                                                  if(row.getCells()[i]._cell.column.field == "Category")
                                                  {
                                                      if(data["tabulator_table_column_name"] == c_name ){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                                  }
                                          }
                                  }
                                  else{
                                      if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field == c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }

                                  }
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                  if(nested_conditional_table[j].nested_type == "Category"){
                                  if(new Date(data["Category"]) > new Date(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                                  }
                                  else{
                                      if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field == c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }

                                  }

                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "FloatField")
                                  {
                                      if(nested_conditional_table[j].column_condition == "Category"){
                                          if(data["Category"] > parseFloat(nested_conditional_table[j].condition_value))
                                      {
                                          for(var i=0;i<row.getCells().length;i++)
                                          {
                                              if(row.getCells()[i]._cell.column.field == "Category")
                                              {
                                                  if(data["tabulator_table_column_name"] == c_name){
                                                      row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                  }

                                              }
                                          }
                                      }
                                      }
                                      else{
                                          if(c_name in data){
                                          if(data[c_name] > parseFloat(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field == c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }
                                      }

                                  }

                              else{
                                  if(nested_conditional_table[j].column_condition == "Category"){
                                      if(data["Category"] > parseInt(nested_conditional_table[j].condition_value))
                                      {
                                          for(var i=0;i<row.getCells().length;i++)
                                          {
                                              if(row.getCells()[i]._cell.column.field == "Category")
                                              {
                                                  if(data["tabulator_table_column_name"] == c_name){
                                                      row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                  }

                                              }
                                          }
                                      }
                                  }
                                  else{
                                          if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field == c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }
                                      }
                                  }

                          }

                          if(nested_conditional_table[j].column_condition == "Smaller than"){

  var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
  if(nested_conditional_table[j]["column_datatype"] == "DateField")
      {
          if(nested_conditional_table[j].nested_type == "Category"){
              if(new Date(data["Category"]) < new Date(nested_conditional_table[j].condition_value))
                  {
                      for(var i=0;i<row.getCells().length;i++)
                          {
               if(row.getCells()[i]._cell.column.field == "Category")
               {
                 if(data["tabulator_table_column_name"] == c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
                          }
                  }
          }
    else{
      if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field == c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }

    }
      }
  else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
  {
      if(nested_conditional_table[j].nested_type == "Category"){
       if(new Date(data["Category"]) < new Date(nested_conditional_table[j].condition_value))
       {
         for(var i=0;i<row.getCells().length;i++)
         {
           if(row.getCells()[i]._cell.column.field == "Category")
           {
             if(data["tabulator_table_column_name"] ==c_name){
               row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
             }

           }
         }
      }
      }
      else{
        if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field == c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }

      }

  }
  else if(nested_conditional_table[j]["column_datatype"] == "FloatField")
    {
      if(nested_conditional_table[j].column_condition == "Category"){
        if(data["Category"] < parseFloat(nested_conditional_table[j].condition_value))
         {
           for(var i=0;i<row.getCells().length;i++)
           {
             if(row.getCells()[i]._cell.column.field == "Category")
             {
               if(data["tabulator_table_column_name"] == c_name){
                 row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
               }

             }
           }
        }
      }
      else{
        if(c_name in data){
        if(data[c_name] < parseFloat(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field == c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }
      }

    }

  else{
    if(nested_conditional_table[j].column_condition == "Category"){
      if(data["Category"] < parseInt(nested_conditional_table[j].condition_value))
         {
           for(var i=0;i<row.getCells().length;i++)
           {
             if(row.getCells()[i]._cell.column.field == "Category")
             {
               if(data["tabulator_table_column_name"] == c_name){
                 row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
               }

             }
           }
        }
    }
    else{
        if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field == c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }
      }
    }

}

                          if(nested_conditional_table[j].column_condition == "Equal to"){
                              if(nested_conditional_table[j].nested_type == "Category"){
                              if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  var val = nested_conditional_table[j]["condition_value"]
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                 var val = nested_conditional_table[j]["condition_value"].replace("T"," ")
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }


                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                   if(data["Category"].toString() == val)
                                  {

                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){

                                if(data[c_name] == val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }

                          }
                          if(nested_conditional_table[j].column_condition == "Not equal to"){
                              if(nested_conditional_table[j].nested_type == "Category"){
                              if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  var val = nested_conditional_table[j]["condition_value"]
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                 var val = nested_conditional_table[j]["condition_value"].replace("T"," ")
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }}
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }


                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                  if(data["Category"].toString() != val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name] != val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }
                          }
                          if(nested_conditional_table[j].column_condition == "In"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Value"){

                                  if(c_name in data){
                                if((nested_conditional_table[j].condition_value).includes(data[c_name].toString()))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}
                              }
                              else{
                                  if((nested_conditional_table[j].condition_value).includes(data["Category"].toString()))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] == c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }

                          }

                          if(nested_conditional_table[j].column_condition == "Starts with"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){

                                  if(data["Category"].toString().startsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                  if(data[c_name].toString().startsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }

                              }

                          }
                          if(nested_conditional_table[j].column_condition == "Ends with"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                  if(data["Category"].toString().endsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name].toString().endsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}
                              }
                          }
                          if(nested_conditional_table[j].column_condition == "Contains"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                   if(data["Category"].toString().includes(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name].toString().includes(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }



                          }

                      }
                      if (data._children != undefined) {

                          if (data._children.length > 0) {
                              row.getElement().style.fontWeight = "bold";
                              if (row.getElement().getElementsByClassName("fas fa-plus").length > 0) {
                                  row.getElement().getElementsByClassName("fas fa-plus")[0].insertAdjacentHTML("afterend", "    ")
                              }
                              if (row.getElement().getElementsByClassName("fas fa-minus").length > 0) {
                                  row.getElement().getElementsByClassName("fas fa-minus")[0].insertAdjacentHTML("afterend", "    ")
                              }
                          }

                      }
                      var row_data = row.getElementsByClassName

                  },
                  columns: columns
              });

              $(`#${id6}`).resizable({
                  start: function (event, size) {
                      var classname = document.getElementById(id6).className

                      document.getElementById(id6).className = "card charts ui-resizable ui-draggable ui-resizable-resizing"
                  },
                  stop: function (event, size) {

                      var tab_height = (($(`#${id6}`).height()) - 55) + "px"
                       $(`#${id}`).css("height", tab_height);

                        table.redraw();

                  },
              });

              $(`#${id_change_conditional_config}`).click(function(){
                  var conditional_table = []
                  $(`#${id_condition_container}`).find('.nested_conditional_body_edit').each(function() {
                      var conditional_dict={}
                      conditional_dict['nested_type'] = $(this).find('.nested_column_edit').val()
                      conditional_dict['column_name'] = $(this).find('.nested_conditional_column_name_edit').val()
                      conditional_dict['column_datatype'] = $(this).find('.nested_conditional_column_name_edit').find('option:selected').attr('data-datatype')
                      conditional_dict['column_condition'] = $(this).find('.nested_conditional_condition_edit').val()
                      conditional_dict['condition_value'] = $(this).find('.nested_conditional_value_edit').val()
                      conditional_dict['condition_color'] = $(this).find('.nested_conditional_color_input_edit').val()
                      conditional_table.push(conditional_dict)
                  })


                  var columns = []
              for (let i = 0; i < data.final_cols.length; i++) {
                  columns.push({ title: data.final_cols[i], field: data.final_cols[i] })
              }

                  var nested_conditional_table = conditional_table



                  var conditional_data = conditional_table
                  $(`#${id6}`).attr("data-conditional_table",JSON.stringify(conditional_table))
                  filter_function()
              })

              if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

            $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).find(".tabulator").css("background-color",plot_bg_color );
              $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");


                  if($(`#${id23}`).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");


                      $(prevDiv).css("border", "0px");

                      $('.myDiv').css("border-spacing" ," 15px 15px 15px 15px");
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      bg_col= "#" + r1 +g1 + b1;
                      var div = document.getElementById(id_header)

                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                      $(`#${id6}`).find(".tabulator").css("background-color",bg_col );

                      $(`#${id22}`).val(bg_col)
                      $(`#${id6}`).attr("data-bgcolor", bg_col)
                      $(`#${id6}`).attr("data-global_bg_color", plotbg)
                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){
                      plotbg = $('.myDiv').css("background-color");

                      $(`#${id6}`).attr("data-globalbg", "yes")
                      rgb = plotbg.match(/^\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                      var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
                      r1= isNaN(rgb[1]) ? "00" : hexDigits[(rgb[1] - rgb[1] % 16) / 16] + hexDigits[rgb[1] % 16];
                      g1= isNaN(rgb[2]) ? "00" : hexDigits[(rgb[2] - rgb[2] % 16) / 16] + hexDigits[rgb[2] % 16];
                      b1= isNaN(rgb[3]) ? "00" : hexDigits[(rgb[3] - rgb[3] % 16) / 16] + hexDigits[rgb[3] % 16];
                      plot_bg= "#" + r1 +g1 + b1;
                   var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }
                  else{
                      var plot_bg = $(`#${id22}`).val();

                      $(`#${id6}`).attr("data-globalbg", "no")

                  }
                  $(`#${id22}`).val(plot_bg)
                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");


                  $(`#${id6}`).find(".tabulator").css("background-color",plot_bg );

                  $(`#${id6}`).attr("data-bgcolor", plot_bg)

                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }
                var bgcolor = $(`#${id22}`).val()
                $(`#${id6}`).attr("data-bgcolor", bgcolor)
              $(`#${id22}`).change(function(){
                  plotbg = $(this).val()

                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).find(".tabulator").css("background-color",plotbg );

                  $(`#${id6}`).attr("data-bgcolor", plotbg)


              });
               $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              setPlotConfigLabelProperties(id6, id, id_label_color,id_label_fontsize,modalDataConfig.graph_subtype,dataplot, layout)
              var y_axisdata3 = modalDataConfig.y_axis
              nestedTableColunmReorder(id6,id_nestedtableColunm_Rearrange, y_axisdata3, id, data, id_nestedtableColunm_Rearrange_ul,id_nestedtableColunm_Rearrange_checkbox,id_nestedtableColunm_Rearrange_div )
              $(`#${id6}`).attr("data-label_color", label_color);
              $(`#${id6}`).attr("data-label_fontsize", label_fontsize);
               setTimeout(()=>{
                $(`#${id}`).find(".tabulator-sortable").css('color', label_color );
                $(`#${id}`).find(".tabulator-headers").css('font-size', label_fontsize + "px");
               },0)
              $(`#${id_label_color}`).val(label_color);
              $(`#${id_label_fontsize}`).val(label_fontsize);
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              document.getElementById(id_filter_button).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              document.getElementById(id5).onclick = function () {
              var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
              deletePlotId6FromSlicerDict(maindiv);
              deleteUpdatePlotID5(id5,maindiv)

              };

              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id7).style.top
                  document.getElementById(id7).style.top = offset
                  var displayvalue = document.getElementById(id7).style.display
                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };


          }
          if(["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graph_subtype))){
            var outermodalCard = plotlyGraphmodalSelection(modalDataConfig)
            var current_pivot_config = {}
            if(data.graph_subtype == "Pivot_Table"){
              rendererName = "Table"
            }
            else{
              rendererName = data.graph_subtype.split("_").join(" ")
            }
              if(data.plotDict === undefined){
                  outerCard.appendTo(`#${plotDict.tabNameID}`)
                  filterModal.appendTo(`#${plotDict.tabNameID}`)
                  conditionalModal.appendTo(`#${plotDict.tabNameID}`)
                  freezeModal.appendTo(`#${plotDict.tabNameID}`)
                  outermodalCard.appendTo(`#${plotDict.tabNameID}`);
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  $(`#${id6}`).attr("data-second_column", data.second_column)
                  current_pivot_config = {rows: data.x_axis,rendererName: rendererName,aggregatorName: data.operation,}
              }
              else{
                  var tab_height = (data.plotDict.height - 55) + "px"
                  outerCard.appendTo(`#${data.plotDict.tab_id}`)
                  filterModal.appendTo(`#${data.plotDict.tab_id}`)
                  conditionalModal.appendTo(`#${data.plotDict.tab_id}`)
                  freezeModal.appendTo(`#${data.plotDict.tab_id}`)
                  outermodalCard.appendTo(`#${data.plotDict.tab_id}`)
                  $(`#${id6}`).attr("data-filter_input_final", plotDict.filter_input_final)
                  $(`#${id6}`).attr("data-filter_dtrange", plotDict.drange)
                  $(`#${id6}`).attr("data-filter_columns", plotDict.filters)
                  current_pivot_config = JSON.parse(JSON.stringify(plotDict.pivot_report_data))
              }

              $(`#${id6}`).attr("data-operation", data.operation)
              $(`#${id_tableshow}`).css('display','none')
              $(`#${id6}`).find('.graphcontainerdiv').append(`<table id="table_example${id}" class="display compact analysisWraptext" style="width:100%;height:100%;display:none;">
                  <thead>
                    <tr>

                    </tr>
                  </thead>
                  <tbody>
                  </tbody>
                </table>`)

              google.load("visualization", "1", {
                packages: ["corechart"],
              });

              var latestconfig = ""

              google.setOnLoadCallback(()=>{
                graphHeight = $(`#${id6}`).height() * 0.850;
                graphWidth = $(`#${id6}`).width() * 0.8250;
                $(`#${id6}`).find('.graphcontainerdiv').pivotUI
                  (data.content, {
                    ...current_pivot_config,
                    renderers:$.extend(
                      $.pivotUtilities.renderers,
                      $.pivotUtilities.plotly_renderers,
                      $.pivotUtilities.d3_renderers,
                      $.pivotUtilities.c3_renderers,
                      $.pivotUtilities.gchart_renderers,
                      $.pivotUtilities.subtotal_renderers,
                    ),
                    rendererOptions: { plotly: {width: graphWidth, height: graphHeight}, c3: {width: graphWidth, height: graphHeight}, d3: {width: graphWidth, height: graphHeight}, gchart: {width: graphWidth, height: graphHeight, colors: ["var(--primary-color)"]}},
                    onRefresh: function (config) {
                      var config_copy = JSON.parse(JSON.stringify(config));
                      if(Object.keys(config_copy).includes("aggregators")){
                        delete config_copy["aggregators"]
                      }
                      if(Object.keys(config_copy).includes("renderers")){
                        delete config_copy["renderers"]
                      }
                      latestconfig = config_copy
                    },
                  }
                );
                if(latestconfig){
                  current_pivot_config = latestconfig
                }
                $(`#${id6} .graphcontainerdiv .pvtAggregator`).css("display", "none")
                $(`#${id6} .graphcontainerdiv .pvtRenderer`).css("display", "none")

                var pivot_charttype = ["Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"]
                $(`#${id}_configure_pivot_charttype`).find('option').slice(1).remove()
                    for (const i in pivot_charttype) {
                      $(`#${id}_configure_pivot_charttype`).append(new Option(pivot_charttype[i],pivot_charttype[i], false, false))
                    }

                  $(`#${id}_configure_pivot_charttype`).val(rendererName).trigger("change")

                  $(`#${id}_configure_pivot_charttype`).on('change', function () {
                    $(`#${id6} .graphcontainerdiv .pvtRenderer`).val(this.value).trigger("change")
                  })


                var pivot_operations = ['Count', 'Count Unique Values', 'List Unique Values', 'Average', 'Sum', 'Interger Sum', 'Median', 'Sample Variance', 'Sample Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Sum over Sum', '80% Upper Bound', '80% Lower Bound', 'Sum as Fraction of Total', 'Sum as Fraction of Rows', 'Sum as Fraction of Columns', 'Count as Fraction of Total']
                $(`#${id}_configure_pivot_operation`).find('option').slice(1).remove()

                for (let i = 0; i < pivot_operations.length; i++) {
                  $(`#${id}_configure_pivot_operation`).append('<option value="' + pivot_operations[i] + '">' + pivot_operations[i] + '</option>')
                }
                $(`#${id}_configure_pivot_operation`).val(data.operation).trigger("change")

                $(`#${id}_configure_pivot_operation`).on('change', function () {
                  $(`#${id6} .graphcontainerdiv .pvtAggregator`).val(this.value).trigger("change")
                })

                pivotResize(id6,data.content,current_pivot_config,id,rendererName,data.operation)
              });
              var x_axisdata = data.x_axis

              $(`#${id6}`).find('.graphcontainerdiv').css("overflow-y","scroll")
              var style = document.createElement("style");
              style.innerHTML = `#${id6}>.graphcontainerdiv::-webkit-scrollbar {display: none;}`;
              document.head.appendChild(style);


              // STYLING FUNCTIONS
               if(global_bg == "yes")
              {
                  $(`#${id23}`).prop('checked', true);
              }

            $(`#${id_header_fontweight}`).val(header_fontweight)
              $(`#${id_header_fontstyle}`).val(header_fontstyle)

              $(".global_applyButton").click(function(){
                  plotbg = $('.myDiv').css("background-color");


                  if($(`#${id23}`).prop("checked")){
                      var div = document.getElementById(id_header)

                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )


                      var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)


                  }

              });

              $(`#${id23}`).click(function() {
                  if($(this).prop("checked")){

                   var div = document.getElementById(id_header)
                  var main_div = document.getElementById(id6)
                  var h_bgcolor = $('.global_header_bgcolor').val()
                  change_header_bgcolor(main_div,div,h_bgcolor)
                  var h_color = $('.global_header_color').val()
                  change_header_color(main_div,div,h_color)
                  var h_font_size = $('.global_header_fontsize').val()
                  change_header_fontsize(main_div,div,h_font_size)
                  var h_font_weight =$('.global_header_fontweight').val()
                  change_header_fontweight(main_div,div,h_font_weight)
                  $(`#${id_header_bgcolor}`).val(h_bgcolor)
                  $(`#${id_header_color}`).val(h_color)
                  $(`#${id_header_fontsize}`).val(h_font_size)
                 $(`#${id_header_fontweight}`).val(h_font_weight).trigger("change")
                                  var h_font_style = $('.global_header_fontstyle').val()
                                  change_header_fontstyle(main_div,div,h_font_style)
                                  $(`#${id_header_fontstyle}`).val(h_font_style).trigger("change")
                                  var alignment = $('.global_header_alignment').val()
                                  $(`#${id_header_alignment}`).val(alignment).trigger("change")
                                  change_header_alignment(main_div,div,alignment)
                                  $(`#${id6}`).attr("data-header_alignment", alignment )
                                  var checkBox = $('.global_shadow').prop("checked")
                                  var checkBox_border =$('.global_border').prop("checked")
                                  var shadowColor = $('.global_shadow_color').val()
                                  var shadowXOffset = $('.global_shadow_x').val()
                                  var shadowYOffset = $('.global_shadow_y').val()
                                  var shadowBlur = $('.global_shadow_blur').val()
                                  var shadowThickness = $('.global_shadow_thickness').val()
                                  change_shadow_global(main_div,checkBox,shadowColor,shadowXOffset,shadowYOffset,shadowBlur,shadowThickness)
                                  var borderColor = $('.global_border_color').val()
                                  var borderThickness = $('.global_border_thickness').val()
                                  var borderStyle = $('.global_border_style').val()
                                  change_border_global(main_div,checkBox_border,borderColor,borderThickness,borderStyle)
                                  $(`#${id_shadow}`).prop("checked", checkBox);
                                  $(`#${id_border}`).prop("checked", checkBox_border);
                                  $(`#${id_shadow_color}`).val(shadowColor);
                                  $(`#${id_xshadow}`).val(shadowXOffset)
                                  $(`#${id_yshadow}`).val(shadowYOffset)
                                  $(`#${id_blurshadow}`).val(shadowBlur)
                                  $(`#${id_shadow_thickness}`).val(shadowThickness)
                                  $(`#${id_border_color}`).val(borderColor)
                                  $(`#${id_border_thickness}`).val(borderThickness)
                                  $(`#${id_border_style}`).val(borderStyle ).trigger("change")
                                  $(`#${id_border}`).val(checkBox_border)
                                  $(`#${id_shadow}`).val(checkBox)
                                  $(`#${id6}`).attr("data-shadecolor", shadowColor)
                                  $(`#${id6}`).attr("data-borderStyle", borderStyle)
                                  $(`#${id6}`).attr("data-borderThickness", borderThickness)
                                  $(`#${id6}`).attr("data-borderColor", borderColor)
                                  $(`#${id6}`).attr("data-borderon", checkBox_border)
                                  $(`#${id6}`).attr("data-shadowon", checkBox)
                                  $(`#${id6}`).attr("data-shadowThick", shadowThickness)
                                  $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
                                  $(`#${id6}`).attr("data-shadowY", shadowYOffset)
                                  $(`#${id6}`).attr("data-shadowX", shadowXOffset)
                                  $(`#${id6}`).attr("data-globalbg", "yes")


                  }
                  else{


                      $(`#${id6}`).attr("data-globalbg", "no")

                  }

                  $(prevDiv).css("border", "0px");
                  $(this).css("border" ,"1px solid rgb(47, 47, 141)");
                  $(this).css("border-spacing" ," 15px 15px 15px 15px");





                });
                if($(`#${id23}`).prop("checked"))
                {
                  $(`#${id6}`).attr("data-globalbg", "yes")
                }
                else{
                  $(`#${id6}`).attr("data-globalbg", "no")
                }
                var bgcolor = $(`#${id22}`).val()
                $(`#${id6}`).attr("data-bgcolor", bgcolor)
              $(`#${id22}`).change(function(){
                  plotbg = $(this).val()

                  $(`#${id6}`).attr("data-global_bg_color", plotbg)
                  $(`#${id6}`).find(".tabulator").css("background-color",plotbg );

                  $(`#${id6}`).attr("data-bgcolor", plotbg)


              });
               $(`#${id6}`).attr("data-header_color", header_color )
              $(`#${id6}`).attr("data-header_bgcolor", header_bgcolor )
              $(`#${id6}`).attr("data-header_fontsize", header_fontsize )
              $(`#${id6}`).attr("data-header_fontweight", header_fontweight )
              $(`#${id_header_fontstyle}`).val(header_fontstyle)
              $(`#${id6}`).attr("data-header_fontstyle", header_fontstyle )
              $(`#${id_header_alignment}`).val(header_alignment)
              $(`#${id6}`).attr("data-header_alignment", header_alignment )

              setPlotConfigHeaderProperties(id_header,id6,id_header_alignment,id_header_fontstyle,id_header_bgcolor,id_header_color,id_header_fontsize,id_header_fontweight)
              $(`#${id_border_style}`).val(borderStyle)
              setShadowProperties(id6,id_shadow,id_shadow_color,id_xshadow,id_yshadow,id_blurshadow,id_shadow_thickness)
              setBorderProperties(id6,id_border,id_border_color,id_border_thickness,id_border_style)
              var div = document.getElementById(id6)
                  var shadowCheckBox = document.getElementById(id_shadow)
                  var borderCheckBox = document.getElementById(id_border)
                  if (shadowon == "true"){

                      div.style.boxShadow = shadowXOffset+"px " + shadowYOffset+"px "  + shadowBlur+"px "  + shadowThickness +"px " + shadowColor ;
                      shadowCheckBox.checked=true;
                     }

                  else {
                      div.style.boxShadow = '0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%)'
                      shadowCheckBox.checked=false;
                    }

                  if (borderon == "true"){


                      div.style.border = borderThickness+"px " + borderStyle+" "  + borderColor;
                      borderCheckBox.checked=true;
                     }

                  else {

                      div.style.border = "none";
                      borderCheckBox.checked=false;
                    }
              $(`#${id6}`).attr("data-shadecolor", shadowColor)
              $(`#${id6}`).attr("data-borderStyle", borderStyle)
              $(`#${id6}`).attr("data-borderThickness", borderThickness)
              $(`#${id6}`).attr("data-borderColor", borderColor)
              $(`#${id6}`).attr("data-borderon", borderCheckBox.checked )
              $(`#${id6}`).attr("data-shadowon", shadowCheckBox.checked)
              $(`#${id6}`).attr("data-shadowThick", shadowThickness)
              $(`#${id6}`).attr("data-shadowblurry", shadowBlur)
              $(`#${id6}`).attr("data-shadowY", shadowYOffset)
              $(`#${id6}`).attr("data-shadowX", shadowXOffset)

              document.getElementById(id_filter_button).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id_filter).style.top
                  document.getElementById(id_filter).style.top = offset

                  var displayvalue = document.getElementById(id_filter).style.display

                  if (displayvalue == "none") {
                      document.getElementById(id_filter).style.display = "block";

                      $('.charts').each(function () {
                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id_filter).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };

                          // Close Filter Modal
                          closeFilterModal(id_filter_close)
              document.getElementById(id5).onclick = function () {
              var maindiv = document.getElementById(id5).parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.id
              deletePlotId6FromSlicerDict(maindiv);
              deleteUpdatePlotID5(id5,maindiv)
              };

              document.getElementById(id10).onclick = function () {
                  let modaldiv = document.getElementById(id10).parentElement.parentElement.parentElement.id
                  resetOpacity(modaldiv,typeClass='charts')
              };
              document.getElementById(id8).onclick = function () {
                  var modalid = document.getElementById(id6)
                  var offset = (parseFloat(modalid.offsetTop - 30)) + `px`;
                  var offsetvalue = document.getElementById(id7).style.top
                  document.getElementById(id7).style.top = offset
                  var displayvalue = document.getElementById(id7).style.display
                  if (displayvalue == "none") {
                      $(`#${id20}`).empty();
                      var Slicer_ColumnId = ""
                      for (slicer in slicerTabConfigDict){
                          plotlist= slicerTabConfigDict[slicer]
                          if(plotlist.includes(id6)){
                              Slicer_ColumnId = slicer
                          }
                  }
                      $(`.${Slicer_ColumnId}`).each(function(){
             ToggleSlicerConfigure($(this),id6,id20,Slicer_ColumnId)
                      });
                      document.getElementById(id7).style.display = "block";

                      $('.charts').each(function () {

                          if ($(this).attr('id') != `${id6}`) {
                              if ($(this).parent()[0].id == $(`#${id6}`).parent()[0].id) {
                                  $(this).css('opacity', '0.5')
                              }
                          }
                      })
                  }
                  else {
                      document.getElementById(id7).style.display = "none"
                      $('.charts').each(function () {

                          $(this).css('opacity', '')
                      })
                  }
              };
              // STYLING FUNCTIONS END
          }


          if (String(graph_subtype) === "Aggregation") {
            $(`#${id6}`).attr("data-id", id)
            $(`#${id6}`).attr("data-subtype", graph_subtype)
            $(`#${id6}`).attr("data-data", data.value)
            $(`#${id6}`).attr("data-layout", data.title)
            $(`#${id6}`).attr("data-xaxis", x_axis)
            $(`#${id6}`).attr("data-yaxis", y_axis)
            $(`#${id6}`).attr("data-secondcolumn", second_column)
            $(`#${id6}`).attr("data-operation", operation)

            $(`#${id6}`).attr("data-operation_n", operation_n)
            $(`#${id6}`).attr("data-computed_number", computed_number)
            $(`#${id6}`).attr("data-is_title", is_title)
            $(`#${id6}`).attr("data-title_value", title_value)

            $(`#${id6}`).attr("data-agg_distinct", agg_distinct)

            if(operation == 'Top N' || operation == 'Bottom N'){
              $('#' + id_optionvalues + 'operation_n').css('display', 'block')
              if(operation_n != undefined){
                $('#' + id_optionvalues + 'operation_ndropdown').val(operation_n).trigger('change')
              }
              if(computed_number != undefined){
                $('#' + id_optionvalues + 'operation_ncomputed_number').val(computed_number).trigger('change')
              }
            }
            else{
              $('#' + id_optionvalues + 'operation_n').css('display', 'none')
            }

          }
          else if (String(graph_subtype) === "Nested_Table" || String(graph_subtype) === "Table")
          {
            $(`#${id6}`).attr("data-id", id)
            $(`#${id6}`).attr("data-operation", JSON.stringify(operation))
            $(`#${id6}`).attr("data-subtype", graph_subtype)
            $(`#${id6}`).attr("data-table_name", tableName)
            $(`#${id6}`).attr("data-xaxis", JSON.stringify(x_axis))
            $(`#${id6}`).attr("data-yaxis", JSON.stringify(y_axis))
          }
          else if (["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(graph_subtype)) )
          {
            $(`#${id6}`).attr("data-id", id)
            $(`#${id6}`).attr("data-operation", operation)
            $(`#${id6}`).attr("data-subtype", graph_subtype)
            $(`#${id6}`).attr("data-table_name", tableName)
            $(`#${id6}`).attr("data-operation", operation)
            $(`#${id6}`).attr("data-xaxis", JSON.stringify(x_axis))
            $(`#${id6}`).attr("data-yaxis", JSON.stringify(y_axis))
          }

          else if(String(graph_subtype) === "Image"){
              $(`#${id6}`).attr("data-id", id)
              $(`#${id6}`).attr("data-subtype", graph_subtype)
              $(`#${id6}`).attr("data-table_name", tableName)
              $(`#${id6}`).attr("data-secondcolumn", second_column)
              $(`#${id6}`).attr("data-operation", e_id)
              $(`#${id6}`).attr("data-xaxis", x_axis)
              $(`#${id6}`).attr("data-yaxis", y_axis)
          }
          else {
              $(`#${id6}`).attr("data-layout", JSON.stringify(tester.layout))
              $(`#${id6}`).attr("data-id", id)
              $(`#${id6}`).attr("data-subtype", graph_subtype)
              $(`#${id6}`).attr("data-table_name", tableName)
              $(`#${id6}`).attr("data-total_y", total_y)
              $(`#${id6}`).attr("data-xaxis", x_axis)
              $(`#${id6}`).attr("data-yaxis", y_axis)
              $(`#${id6}`).attr("data-total_L", total_L)
              try {
                  var changed_text = data.plotDict.changed_text
              }
              catch (err) {
                  var changed_text = []

              }
              $(`#${id6}`).attr("data-changed_text", JSON.stringify(changed_text))
              if (second_column == undefined) {
                  $(`#${id6}`).attr("data-secondcolumn", "None")
              }
              else {
                  $(`#${id6}`).attr("data-secondcolumn", second_column)

              }
              if (operation == undefined) {
                  $(`#${id6}`).attr("data-operation", "None")
              }
              else {
                  $(`#${id6}`).attr("data-operation", operation)

              }
              if (operation_line != undefined) {
                $(`#${id6}`).attr("data-operation_line", operation_line)

              }
              var val = $(`#${id_axis_order}`).val()
              if(val || val == ""){
                var order_type = $(`#${id_axis_order}`).attr('order_type')
                let datatype_dict = JSON.parse($(`#${id_axis_order}`).attr("datatype_dict"))
                var old_layout = $('#' + id6).attr("data-layout");
                old_layout = JSON.parse(old_layout);
                var layout = JSON.parse(JSON.stringify(old_layout));
                if(order_type == "Vertical"){
                  if(datatype_dict[data.x_axis] == 'DateField' || datatype_dict[data.x_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, id6)
                }
                else if(order_type == "Horizontal"){
                  if(datatype_dict[data.y_axis] == 'DateField' || datatype_dict[data.y_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, id6)
                }
              }
              var sorted_array = $(`#${idOrderModal}Button`).attr('data-sorted-values')
              if(sorted_array != '' && String(sorted_array) != "undefined") updateChart(id6, $(`#${idOrderModal}Button`).attr('data-sorted-values'))

          }


// standard border and shadowfunctions



// standard shadow and border function ends
          if (String(graph_subtype) !== "Image") {

            if(String(data.filter_input_final) !== "undefined"){
                var STRING=`<div class="row"><div class="col-12 card-header" style="font-size: medium; color:var(--primary-color); font-weight: bold;"><input type="checkbox" id="${chartDivId + '__'}filter_dtrange" onclick="showDaterange_1.call(this)" class="float-right mt-2 checkboxinput custom-checkbox" style="margin: 0px; margin-left:-11px">
                <p style="margin:0px;margin-left:-11px">Date Range</p>
                </div><div class="col-12 ${chartDivId + '__'}showrange" style="display:none;">
                <select class="select2 form-control ${chartDivId + '__'}seldatecol"><option value="" disabled selected>------</option></select><div>
                <div style="margin-left:-0.7em;">
                   <div class="col-6"> <div class="input-group date">
        <b style="margin-right:1em;font-weight:600;color:var(--primary-color);margin-top: 1rem;">Start Date:</b>
                                <div style="display:flex;">
                                <input type="text" style="width:11rem;" id="${chartDivId + '__'}startdate" class="datepickerinput p-2 " data-dp-config="{&quot;id&quot;: &quot;dp_2&quot;, &quot;picker_type&quot;: &quot;DATE&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;YYYY-MM-DD&quot;}}">
                                <div class="input-group-addon input-group-append input-group-text" style="padding: 0.40rem .30rem"> <i class="glyphicon glyphicon-calendar"></i></div></div></div></div>


                    <div class="col-6"> <div class="input-group date">
                                <b style="margin-right:1em;font-weight:600;color:var(--primary-color);margin-top: 1rem;">End Date:</b>
                                <div style="display:flex;">
                                                        <input style="width:11rem;" type="text" id="${chartDivId + '__'}enddate" class="datepickerinput p-2 " data-dp-config="{&quot;id&quot;: &quot;dp_2&quot;, &quot;picker_type&quot;: &quot;DATE&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;YYYY-MM-DD&quot;}}">
                                                        <div class="input-group-addon input-group-append input-group-text" style="padding: 0.40rem .30rem"> <i class="glyphicon glyphicon-calendar"></i></div></div></div></div>

                 </div>
             </div></div>`
                cols = []
                cols_ver = []
                for(let i in data.filter_input_final){
                    let columnname=data.filter_input_final[i].field_name
                    let columnverbose = data.filter_input_final[i].column_name
                    let datatype=data.filter_input_final[i].data_type
                    let filterinputfinal = data.filter_input_final[i].filter_value
                    if(['CharField','TextField','DateField','DateTimeField','TimeField','BooleanField'].includes(datatype)){
                        STRING+=`<div class="col-12 form-group">
                        <label class="acies_label col-md-12" style="color:var(--primary-color);font-size:larger;margin-left:-0.2rem">${columnverbose}:</label>
                        <select  class="select2 categorical_filter_inputs form-control" name="${chartDivId + '__'}${columnname}" data-data_type="${datatype}"
                          required multiple>`
                          let filtervaluelist=[]
                          for(datafilter in data.filter_input_final[i].unique_data)
                            {
                                filtervaluelist.push(data.filter_input_final[i].unique_data[datafilter])
                                STRING+=`<option value="${data.filter_input_final[i].unique_data[datafilter]}">${data.filter_input_final[i].unique_data[datafilter]}</option>`
                            }
                        STRING+=`</select></div>`
                    }
                    if(['AutoField','IntegerField','BigIntegerField','FloatField'].includes(datatype)){
                        STRING+=`<div class="col-12 form-group">
                        <div class=""><b style="font-weight:bold;font-size:larger;color:var(--primary-color)" class="numerical_column_name">${columnverbose}:</b></div>
                        <br>
                        <div class="row">
                        <div class="col-5">
                        <select class="select2 numerical_column_condition" name="${chartDivId + '__'}${columnname}" data-data_type="${datatype}" required>

                            <option value="Equal to" selected>Equal to</option>
                            <option value="Not Equal to">Not Equal to</option>
                            <option value="Greater than">Greater than</option>
                            <option value="Smaller than">Smaller than</option>
                            <option value="Top N">Top N</option>
                        </select>
                        </div>
                        <div class="col-7">
                        <input type="number" placeholder="${columnname}" name="${chartDivId + '__'}${columnname}_input" style="padding-left:0.5rem" step="any" class="numberinput numerical_column_value form-control" value= "">
                        </div>
                        </div>
                        </div>`
                    }

                    if (['DateField', 'DateTimeField'].includes(datatype)) {
                      cols.push(columnname)
                      cols_ver.push(columnverbose)
                    }

                }
                STRING+=`<br><br><button id="${id_filter+'data'}" type="button" class="btn btn-primary btn-sm" style="height: 27px;width: 70px;border-radius: 5px;border-color: none;color: white;padding-top: 2px;margin-left:0.5rem;">
               <i class="fas fa-filter"></i>&nbsp;Filter
                 </button></div>`
                 $(`#${id_filter_container}`).empty()
                 $(`#${id_filter_container}`).append(STRING)
                 for(let i=0;i<cols.length;i++){
                    $(`.${chartDivId + '__'}seldatecol`).append(`<option value="${cols[i]}">${cols_ver[i]}</option>`)
                  }
                  var config = ""
                  if($(`#${chartDivId + '__'}startdate`).attr('data-dp-config')){
                    config = JSON.parse($(`#${chartDivId + '__'}startdate`).attr('data-dp-config'));
                  }

                  $(`#${chartDivId + '__'}startdate`).datetimepicker({
                      "showClose": true,
                      "showClear": true,
                      "showTodayButton": true,
                      "format": config.options.format,
                      "locale": "en"
                  });
                  $(`#${chartDivId + '__'}enddate`).datetimepicker({
                    "showClose": true,
                    "showClear": true,
                    "showTodayButton": true,
                    "format": config.options.format,
                    "locale": "en"
                });
                $('.select2').select2()
            }

            if(data.filter_data!=undefined){

                    for(i in data.filter_data)
                    {
                        var column_name=data.filter_data[i].column_name
                        var data_type=data.filter_data[i].data_category
                        if(data_type == "Numerical")
                        {

                        var value_options = (data.filter_data[i].condition_name)
                        $(`select[name="${chartDivId + '__'}${column_name}"]`).val(data.filter_data[i].condition_name).trigger("change")
                        $(`input[name="${chartDivId + '__'}${column_name}_input"]`).val(data.filter_data[i].filter_value)
                        }
                        else
                        {
                        $(`select[name="${chartDivId + '__'}${column_name}"]`).val(data.filter_data[i].filter_value).trigger("change")
                        }
                    }


            }
          }

          if(Object.keys(data.drange).length > 0){
            $(`.${chartDivId + '__'}showrange`).css("display","block")
            $(`#${chartDivId + '__'}filter_dtrange`).prop("checked",true)
            $(`.${chartDivId + '__'}seldatecol`).val(data.drange.col_name).trigger("change")
            $(`#${chartDivId + '__'}startdate`).val(data.drange.start_date).trigger("change")
            $(`#${chartDivId + '__'}enddate`).val(data.drange.end_date).trigger("change")
          }
          $(`#${id_filter+'data'}`).click(filter_function)

          function filter_function()
          {
              let tableName=$(`#${id_filter}`).attr('data-table_name')
              let slicer_data = $(`#${id_filter}`).attr('data-slicer_value')
              let graph_subtype=$(`#${id_filter}`).attr('data-graph_subtype')
              let x_axis= $(`#${id_filter}`).attr('data-x_axis')
              let y_axis= $(`#${id_filter}`).attr('data-y_axis')

              let operation=$(`#${id_filter}`).attr('data-operation')
              let operation_line=$(`#${id6}`).attr('data-operation_line')
              let line_column = $(`#${id6}`).attr("data-line_column")
              let second_column = $(`#${id6}`).attr("data-second_column")
              let total_y = $(`#${id6}`).attr("data-total_y")
              let total_L = $(`#${id6}`).attr("data-total_L")
              let computed_number = $(`#${id6}`).attr("data-computed_number")
              let is_title = $(`#${id6}`).attr("data-is_title")
              let title_value = $(`#${id6}`).attr("data-title_value")
              let operation_n = $(`#${id6}`).attr("data-operation_n")
              let agg_distinct = $(`#${id6}`).attr("data-agg_distinct")
              let conditional_table = $(`#${id6}`).attr("data-conditional_table")
              let filter_input_final=[]
              let drange = {}
              $(`#${id_filter_container}`).find('.categorical_filter_inputs').each(function(){
                  filter_input_dict={}
                  let column_name=$(this).attr('name').split("__")[1]
                  let val=$(this).val()
                  filter_input_dict['column_name']=column_name
                  filter_input_dict['filter_value']=val
                  filter_input_dict['data_type']=$(this).attr('data-data_type')
                  filter_input_dict['data_category']='Categorical'
                  filter_input_final.push(filter_input_dict)
              })
              $(`#${id_filter_container}`).find('.numerical_column_condition').each(function(){
                  filter_input_dict={}
                  let column_name=$(this).attr('name').split("__")[1]
                  let condition=$(this).val()
                  let val=$(this).parent().next().find('.numerical_column_value').val()
                  filter_input_dict['column_name']=column_name
                  filter_input_dict['condition_name']=condition
                  filter_input_dict['filter_value']=val
                  filter_input_dict['data_type']=$(this).attr('data-data_type')
                  filter_input_dict['data_category']='Numerical'
                  filter_input_final.push(filter_input_dict)
              })
              if($(`#${chartDivId + '__'}filter_dtrange`).is(":checked")){
                drange['col_name'] = $(`.${chartDivId + '__'}seldatecol`).val()
                drange['start_date'] = $(`#${chartDivId + '__'}startdate`).val()
                drange['end_date'] = $(`#${chartDivId + '__'}enddate`).val()
              }
              $(`#${id6}`).attr("data-filter_input_final", JSON.stringify(filter_input_final))
              $(`#${id6}`).attr("data-filter_dtrange", JSON.stringify(drange))
              second_column = $(`#${id6}`).attr("data-secondcolumn")
              let slicerColumnValue = [];
              let slicerColumn = []
              for (let i = 0; i < $(`.${tabSlicerId}`).length; i++) {
                  slicerColumnValue.push($(`.${tabSlicerId}`).eq(i).val());
                  slicerColumn.push($(`.${tabSlicerId}`).eq(i).attr("data-slicerColumn"))
              }
              if (slicer_data == "No"){
                  slicerColumnValue = [];
                  slicerColumn = []
              }
              let id18 = id + 'resetlabels'

              let app_code = ""
              if (app_code == ""){
                if($("body").find("div").eq(0).attr("app_code") != undefined){
                  app_code = $("body").find("div").eq(0).attr("app_code")
                } else if($("#"+id6).closest(".chartDivSection").attr("app_code") != undefined){
                  app_code = $("#"+id6).closest(".chartDivSection").attr("app_code");
                }
              }
              $.ajax({
                  url: `/users/${urlPath}/filter_plot/`,

                  data: {
                      'operation': "filter",
                      'conditional_table':conditional_table,
                      'filter_input_final': JSON.stringify(filter_input_final),
                      'tableName': tableName,
                      'graph_subtype': graph_subtype,
                      'chart_id':id,
                      'x_axis': x_axis,
                      'y_axis': y_axis,
                      'second_column': second_column,
                      'aggregation':operation,
                      'operation_line':operation_line,
                      'total_y':total_y,
                      'total_L':total_L,
                      'operation_n':operation_n,
                      'agg_distinct':agg_distinct,
                      'computed_number':computed_number,
                      'is_title':is_title,
                      'title_value':title_value,
                      'line_column':line_column,
                      'slicerColumn': JSON.stringify(slicerColumn),
                      'slicerColumnValue': JSON.stringify(slicerColumnValue),
                      'drange':JSON.stringify(drange),
                      'app_code':app_code
                  },
                  type: "POST",
                  dataType: "json",
                  success: function (data) {
                      const idOrderModal = id + 'orderModal'
                      let sorted_array = []
                      let new_sorted_array = []
                      if($(`#${idOrderModal}Button`).length){
                        $(`#${idOrderModal}`).attr('data-x_axis', data.x_axisdata)
                        $(`#${idOrderModal}`).attr('data-y_axis', data.y_axisdata)
                        sorted_array = $(`#${idOrderModal}Button`).attr('data-sorted-values').trim().split(',')
                        new_sorted_array = JSON.parse(JSON.stringify(sorted_array))
                        sorted_array.sort()
                      }


                      var color_value = $(`#${id1}`).val()
                      if($(`#${id24}`).prop("checked")){
                          var filter_gradient_color = "yes"
                      }
                      else{
                              var filter_gradient_color = "no"
                      }
                      var tester = document.getElementById(id)
                      if(data.graph_subtype == "Nested_Table")
                        {

                           var columns = []
                              for (let i = 0; i < data.final_cols.length; i++) {
                                  columns.push({ title: data.final_cols[i], field: data.final_cols[i] })
                              }
                          var nested_conditional_table = data.conditional_table
                          var open_close = false
                          if(data.conditional_table.length > 0 && data.conditional_table[0].column_name != null){
                              var open_close = true
                          }
                          else{
                              var open_close = false
                          }
                          var mappingDict = data.mappingDict
                          var table = new Tabulator(`#${id}`, {
                              data: data.table_data,             //load row data from array
                              layout: "fitDataFill",      //fit columns to width of table
                              height:400,
                              columnMinWidth:130,
                              dataTree: true,
                              dataTreeStartExpanded: open_close,
                              dataTreeCollapseElement: "<i class='fas fa-minus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
                              dataTreeExpandElement: "<i class='fas fa-plus' style='font-size:0.8rem;color:var(--primary-color)'></i>&nbsp;&nbsp;",
                              movableColumns: true,      //allow column order to be changed
                              resizableRows: true,
                              rowFormatter: function (row) {
                                  //row - row component
                                  var data = row.getData();

                                  for (let j=0; j < nested_conditional_table.length; j++){
                                                          if(nested_conditional_table[j].column_condition == "Greater than"){

                          var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                          if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  if(nested_conditional_table[j].nested_type == "Category"){
                                      if(new Date(data["Category"]) > new Date(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                                  {
                                                  if(row.getCells()[i]._cell.column.field == "Category")
                                                  {
                                                      if(data["tabulator_table_column_name"] ==c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                                  }
                                          }
                                  }
                                  else{
                                      if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field ==c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }

                                  }
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                  if(nested_conditional_table[j].nested_type == "Category"){
                                  if(new Date(data["Category"]) > new Date(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                                  }
                                  else{
                                      if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field ==c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }

                                  }

                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "FloatField")
                                  {
                                      if(nested_conditional_table[j].column_condition == "Category"){
                                          if(data["Category"] > parseFloat(nested_conditional_table[j].condition_value))
                                      {
                                          for(var i=0;i<row.getCells().length;i++)
                                          {
                                              if(row.getCells()[i]._cell.column.field == "Category")
                                              {
                                                  if(data["tabulator_table_column_name"] ==c_name){
                                                      row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                  }

                                              }
                                          }
                                      }
                                      }
                                      else{
                                          if(c_name in data){
                                          if(data[c_name] > parseFloat(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field ==c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }
                                      }

                                  }

                              else{
                                  if(nested_conditional_table[j].column_condition == "Category"){
                                      if(data["Category"] > parseInt(nested_conditional_table[j].condition_value))
                                      {
                                          for(var i=0;i<row.getCells().length;i++)
                                          {
                                              if(row.getCells()[i]._cell.column.field == "Category")
                                              {
                                                  if(data["tabulator_table_column_name"] ==c_name){
                                                      row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                  }

                                              }
                                          }
                                      }
                                  }
                                  else{
                                          if(c_name in data){
                                          if(data[c_name] > parseInt(nested_conditional_table[j].condition_value))
                                          {
                                              for(var i=0;i<row.getCells().length;i++)
                                              {
                                                  if(row.getCells()[i]._cell.column.field == c_name)
                                                  {
                                                      if(row.getCells()[i]._cell.column.field ==c_name){
                                                          row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                                      }

                                                  }
                                              }
                                          }
                                      }
                                      }
                                  }

                          }

                          if(nested_conditional_table[j].column_condition == "Smaller than"){

  var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
  if(nested_conditional_table[j]["column_datatype"] == "DateField")
      {
          if(nested_conditional_table[j].nested_type == "Category"){
              if(new Date(data["Category"]) < new Date(nested_conditional_table[j].condition_value))
                  {
                      for(var i=0;i<row.getCells().length;i++)
                          {
               if(row.getCells()[i]._cell.column.field == "Category")
               {
                 if(data["tabulator_table_column_name"] ==c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
                          }
                  }
          }
    else{
      if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field ==c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }

    }
      }
  else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
  {
      if(nested_conditional_table[j].nested_type == "Category"){
       if(new Date(data["Category"]) < new Date(nested_conditional_table[j].condition_value))
       {
         for(var i=0;i<row.getCells().length;i++)
         {
           if(row.getCells()[i]._cell.column.field == "Category")
           {
             if(data["tabulator_table_column_name"] ==c_name){
               row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
             }

           }
         }
      }
      }
      else{
        if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field ==c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }

      }

  }
  else if(nested_conditional_table[j]["column_datatype"] == "FloatField")
    {
      if(nested_conditional_table[j].column_condition == "Category"){
        if(data["Category"] < parseFloat(nested_conditional_table[j].condition_value))
         {
           for(var i=0;i<row.getCells().length;i++)
           {
             if(row.getCells()[i]._cell.column.field == "Category")
             {
               if(data["tabulator_table_column_name"] ==c_name){
                 row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
               }

             }
           }
        }
      }
      else{
        if(c_name in data){
        if(data[c_name] < parseFloat(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field ==c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }
      }

    }

  else{
    if(nested_conditional_table[j].column_condition == "Category"){
      if(data["Category"] < parseInt(nested_conditional_table[j].condition_value))
         {
           for(var i=0;i<row.getCells().length;i++)
           {
             if(row.getCells()[i]._cell.column.field == "Category")
             {
               if(data["tabulator_table_column_name"] ==c_name){
                 row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
               }

             }
           }
        }
    }
    else{
        if(c_name in data){
        if(data[c_name] < parseInt(nested_conditional_table[j].condition_value))
           {
             for(var i=0;i<row.getCells().length;i++)
             {
               if(row.getCells()[i]._cell.column.field == c_name)
               {
                 if(row.getCells()[i]._cell.column.field ==c_name){
                   row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                 }

               }
             }
           }
         }
      }
    }

}

                          if(nested_conditional_table[j].column_condition == "Equal to"){
                              if(nested_conditional_table[j].nested_type == "Category"){
                              if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  var val = nested_conditional_table[j]["condition_value"]
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                 var val = nested_conditional_table[j]["condition_value"].replace("T"," ")
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }


                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                   if(data["Category"].toString() == val)
                                  {

                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){

                                if(data[c_name] == val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }

                          }
                          if(nested_conditional_table[j].column_condition == "Not equal to"){
                              if(nested_conditional_table[j].nested_type == "Category"){
                              if(nested_conditional_table[j]["column_datatype"] == "DateField")
                              {
                                  var val = nested_conditional_table[j]["condition_value"]
                              }
                              else if(nested_conditional_table[j]["column_datatype"] == "DateTimeField")
                              {
                                 var val = nested_conditional_table[j]["condition_value"].replace("T"," ")
                              }
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }}
                              else{
                                  var val = nested_conditional_table[j]["condition_value"].toString()
                              }


                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                  if(data["Category"].toString() != val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name] != val)
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }
                          }
                          if(nested_conditional_table[j].column_condition == "In"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Value"){

                                  if(c_name in data){
                                if((nested_conditional_table[j].condition_value).includes(data[c_name].toString()))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}
                              }
                              else{
                                  if((nested_conditional_table[j].condition_value).includes(data["Category"].toString()))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }

                          }

                          if(nested_conditional_table[j].column_condition == "Starts with"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){

                                  if(data["Category"].toString().startsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                  if(data[c_name].toString().startsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }

                              }

                          }
                          if(nested_conditional_table[j].column_condition == "Ends with"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                  if(data["Category"].toString().endsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name].toString().endsWith(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}
                              }
                          }
                          if(nested_conditional_table[j].column_condition == "Contains"){
                              var c_name = fieldToVerbose(nested_conditional_table[j].column_name, mappingDict)
                              if(nested_conditional_table[j].nested_type == "Category"){
                                   if(data["Category"].toString().includes(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == "Category")
                                          {
                                              if(data["tabulator_table_column_name"] ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }
                              }
                              else{
                                  if(c_name in data){
                                if(data[c_name].toString().includes(nested_conditional_table[j].condition_value))
                                  {
                                      for(var i=0;i<row.getCells().length;i++)
                                      {
                                          if(row.getCells()[i]._cell.column.field == c_name)
                                          {
                                              if(row.getCells()[i]._cell.column.field ==c_name){
                                                  row.getCells()[i]._cell.element.style.backgroundColor = nested_conditional_table[j].condition_color
                                              }

                                          }
                                      }
                                  }}

                              }



                          }

                                  }
                                  if (data._children != undefined) {
                                      if (data._children.length > 0) {
                                          row.getElement().style.fontWeight = "bold";
                                          if (row.getElement().getElementsByClassName("fas fa-plus").length > 0) {
                                              row.getElement().getElementsByClassName("fas fa-plus")[0].insertAdjacentHTML("afterend", "    ")
                                          }
                                          if (row.getElement().getElementsByClassName("fas fa-minus").length > 0) {
                                              row.getElement().getElementsByClassName("fas fa-minus")[0].insertAdjacentHTML("afterend", "    ")
                                          }
                                      }
                                  }
                                  var row_data = row.getElementsByClassName
                              },
                              columns: columns
                          });

                      }
                      else if(data.graph_subtype == "Table")
                          {
                              $(`#table_example${id}`).DataTable().clear().destroy()
                              var column_names = []
                              for(var i=0;i<data.x_axis.length;i++){
                                  column_names.push({'data':fieldToVerbose(data.x_axis[i], data.mappingDict)})
                              }
                              var mappingDict = data.mappingDict
                              for(var i=0;i<(data.conditional_table);i++)
                              {
                                  for (const [key, value] of Object.entries(column_names)) {
                                      if(value["data"] == fieldToVerbose( data.conditional_table[i]["column_name"], mappingDict)){
                                          data.conditional_table[i]["td_val"] = parseInt(key)

                                      }
                                  }
                              }
                              var conditional_data = data.conditional_table


                                  var content = data.content
                                  if(content == undefined)
                                  {
                                      content = {}
                                  }
                                  var x_axisdata = data.x_axis
                                  var table = $(`#table_example${id}`).DataTable({

                                      "data":content,
                                     "columns":column_names,
                                      "autoWidth": false,
                                      "scrollY": "50vh",
                                      "scrollCollapse": true,
                                      "scrollX": "110%",
                                      orderCellsTop: true,
                                      responsive: true,
                                      stateSave: true,
                                      "deferRender": true,
                                      "paging": true,
                                      "lengthMenu": [[1, 5, 10, 25, 50, 75, 100, -1],
                                      [1, 5, 10, 25, 50, 75, 100,'All']],
                                      "pageLength": 10,
                                      dom: 'lfBrtip',
                                      "sScrollX": "100%",
                                      "scrollX": true,
                                      buttons: [
                                        {
                                          extend: 'collection',
                                          text: 'Export',
                                          buttons: [
                                            {
                                              extend: 'copy', title: '', exportOptions: {
                                                columns: ':visible:not(.noVis)'
                                              }
                                            },
                                            {
                                              extend: 'excel', title: '', exportOptions: {
                                                columns: ':visible:not(.noVis)'
                                              }
                                            },
                                            {
                                              extend: 'csv', title: '', exportOptions: {
                                                columns: ':visible:not(.noVis)'
                                              }
                                            },
                                            {
                                              extend: 'pdf', title: '', exportOptions: {
                                                columns: ':visible:not(.noVis)'
                                              }
                                            },
                                          ],
                                        },

                                      ],
                                      "headerCallback": function(thead, data, start, end, display) {
                                        // set header alignment for each header cell
                                        $(thead).find('th').each(function() {
                                          let colIndex = $(this).index();
                                          if (!selectedOptions) {
                                            $(thead).find('th').addClass('dt-center');
                                          } else {
                                            if (Array.isArray(selectedOptions[0].columns_config)) {
                                              let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                                              let globalHeaderColumnAlignment = selectedOptions[0].global_config.globalHeaderColumnAlignment;
                                              $(this).addClass(`dt-${colConfig ? colConfig.header : globalHeaderColumnAlignment}`);
                                            } else {
                                              $(this).addClass(`dt-${globalHeaderColumnAlignment}`);
                                            }
                                          }
                                        });
                                      },
                                      columnDefs: [
                                        (!selectedOptions) ? {
                                          "targets": "_all",
                                          "className": "dt-center"
                                        } :
                                        (selectedOptions && Array.isArray(selectedOptions[0].columns_config)) ? {
                                          "targets": "_all",
                                          "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                                            let colConfig = selectedOptions[0].columns_config.find(config => config.columnName === column_names[colIndex].data);
                                            let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                                            $(cell).addClass(`dt-${colConfig ? colConfig.content : globalContentColumnAlignment}`);
                                          }
                                        } :
                                        (selectedOptions && !Array.isArray(selectedOptions[0].columns_config)) ? {
                                          "targets": "_all",
                                          "createdCell": function(cell, cellData, rowData, rowIndex, colIndex) {
                                            let globalContentColumnAlignment = selectedOptions[0].global_config.globalContentColumnAlignment;
                                            $(cell).addClass(`dt-${globalContentColumnAlignment}`);
                                          }
                                        } :
                                        {
                                          "targets": "_all",
                                          "className": "allColumnClass all buttons_export_class"
                                        }
                                      ],
                                      'rowCallback': function(row, data, index){

                                          for(var i=0;i<(conditional_data).length;i++)
                                          {
                                              if(conditional_data[i]["column_name"] != null){
                                                  if((x_axisdata).includes(conditional_data[i]["column_name"]))
                              {
                                              if(conditional_data[i]["column_condition"] == "Equal to")
                                              {
                                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                                  {
                                                      var val = conditional_data[i]["condition_value"]
                                                  }
                                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                                  {
                                                  var val = conditional_data[i]["condition_value"]
                                                  }
                                                  else{
                                                      var val = conditional_data[i]["condition_value"]
                                                  }
                                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == val)
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Not equal to")
                                              {
                                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                                  {
                                                      var val = conditional_data[i]["condition_value"]
                                                  }
                                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                                  {
                                                  var val = conditional_data[i]["condition_value"]
                                                  }
                                                  else{
                                                      var val = conditional_data[i]["condition_value"]
                                                  }
                                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML != val)
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Greater than")
                                              {
                                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                                  {
                                                      if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                                      {
                                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                      }
                                                  }
                                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                                  {
                                                      if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) > (new Date(conditional_data[i]["condition_value"])))
                                                          {
                                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                          }
                                                  }
                                                  else{
                                                      if(conditional_data[i]["column_datatype"] == "FloatField")
                                                      {
                                                          if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseFloat(conditional_data[i]["condition_value"]))
                                                          {
                                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                          }
                                                      }
                                                      else{
                                                      if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) > parseInt(conditional_data[i]["condition_value"]))
                                                      {
                                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                      }
                                                  }
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Smaller than")
                                              {
                                                  if(conditional_data[i]["column_datatype"] == "DateField")
                                                  {
                                                      if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"])))
                                                      {
                                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                      }
                                                  }
                                                  else if(conditional_data[i]["column_datatype"] == "DateTimeField")
                                                  {
                                                  if((new Date($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML)) < (new Date(conditional_data[i]["condition_value"])))
                                                      {
                                                          $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                      }
                                                  }
                                                  else{
                                                      if(conditional_data[i]["column_datatype"] == "FloatField")
                                      {
                                          if(parseFloat($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseFloat(conditional_data[i]["condition_value"]))
                                          {
                                              $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                          }
                                      }
                                      else{
                                                  if(parseInt($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML) < parseInt(conditional_data[i]["condition_value"]))
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "In"){
                                                  if(conditional_data[i]["condition_value"].includes($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML))
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Starts with"){
                                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).startsWith(conditional_data[i]["condition_value"]))
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Ends with"){
                                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).endsWith(conditional_data[i]["condition_value"]))
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else if(conditional_data[i]["column_condition"] == "Contains"){
                                                  if(($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML).includes(conditional_data[i]["condition_value"]))
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }
                                              else{
                                                  if($(row).find(`td`).eq(conditional_data[i]["td_val"])[0].innerHTML == conditional_data[i]["condition_value"])
                                                  {
                                                      $(row).find(`td`).eq(conditional_data[i]["td_val"]).css("background-color",conditional_data[i]["condition_color"])
                                                  }
                                              }

                                          }
                                      }
                                      }
                                         },
                                         initComplete: function () {

                                          try{

                                              $(`#table_example${id}`).off("click").off("click").on('click', 'td', function() {
                                                var id_freeze_ = $(this).closest("table").attr("id")
                                                var table1 = $(`#${id_freeze_}`).DataTable();
                                                var columns = table1.settings().init().columns;
                                                cellcollen2 = columns.length
                                                cellindex3 = table1.cell(this).index().column + 1;

                                                $( this ).toggleClass( 'cell_highlighted' );
                                                $( this ).toggleClass( "cell_selected" );
                                              });
                                            } catch(err){}
                                         },

                                      }).columns.adjust();

                                      if (id in finalfdict2){

                                      var table_freeze = $(`#table_example${id}`).DataTable();

                                      new $.fn.dataTable.FixedColumns( table_freeze,
                                          finalfdict2[`${id}`]
                                      );

                                      setTimeout(() => {
                                          if ($.fn.DataTable.isDataTable(`#table_example${id}`)) {
                                                  $(`#table_example${id}`).DataTable().draw()
                                              }
                                      },200)
                                  }

                              $(`#${id6}`).find(".dt-buttons").css("padding-left","1em")
                              $(`#table_example${id}_info`).css("padding-left","1em")
                              $(`#table_example${id}_paginate`).css("padding-right","1em")
                              $(`#${id6}`).find(".dt-buttons").css("padding-top","1em")
                              $(`#table_example${id}_length`).css("float","none")
                              $(`#table_example${id}_length`).css("padding-right","1em")
                              $(`#table_example${id}_length`).css("padding-top","1em")
                              $(`#table_example${id}_length`).css("padding-top","1em")
                              $(`#table_example${id}_length`).css("display","inline-block")
                              $(`#table_example${id}_filter`).css("padding-top","1em")

                          }
                      else if(data.graph_subtype == "Vertical_Histogram" || data.graph_subtye == "Cumulative_Histogram"){
                          var colorlength = data.x_axisdata.length
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                              var colordata = color_value
                          }
                          var update = { "x": [data.x_axisdata],marker: {color: colordata}}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
                          tabledata.push(data.x_axisdata)
                      }
                      else if (["Pivot_Table","Table_Barchart","Heatmap","Row_Heatmap","Col_Heatmap","Line_Chart","Bar_Chart","Stacked_Bar_Chart","Area_Chart","Scatter_Chart"].includes(String(data.graph_subtype))) {
                        var pivot_config = $(`#${data.chart_id_for_slicer}card`).find('.graphcontainerdiv').data("pivotUIOptions")
                        var pivot_config_copy = JSON.parse(JSON.stringify(pivot_config));

                        if(Object.keys(pivot_config_copy).includes("aggregators")){
                          delete pivot_config_copy["aggregators"]
                        }
                        if(Object.keys(pivot_config_copy).includes("renderers")){
                          delete pivot_config_copy["renderers"]
                        }


                        if(data.graph_subtype == "Pivot_Table"){
                          rendererName = "Table"
                        }
                        else{
                          rendererName = data.graph_subtype.split("_").join(" ")
                        }
                        google.load("visualization", "1", {
                          packages: ["corechart"],
                        });
                        graphHeight = $(`#${id6}`).height() * 0.850;
                        graphWidth = $(`#${id6}`).width() * 0.8250;
                        $(`#${id6}`).find('.graphcontainerdiv').pivotUI(
                          data.content, {
                            ...pivot_config_copy,
                            renderers: $.extend(
                              $.pivotUtilities.renderers,
                              $.pivotUtilities.plotly_renderers,
                              $.pivotUtilities.d3_renderers,
                              $.pivotUtilities.c3_renderers,
                              $.pivotUtilities.gchart_renderers,
                              $.pivotUtilities.subtotal_renderers,
                            ),
                            rendererOptions: { plotly: {width: graphWidth, height: graphHeight}, c3: {width: graphWidth, height: graphHeight}, d3: {width: graphWidth, height: graphHeight}, gchart : {width: graphWidth, height: graphHeight, colors: ["var(--primary-color)"]} },
                            onRefresh: function (config) {
                              var config_copy = JSON.parse(JSON.stringify(config));
                              if(Object.keys(config_copy).includes("aggregators")){
                                delete config_copy["aggregators"]
                              }
                              if(Object.keys(config_copy).includes("renderers")){
                                delete config_copy["renderers"]
                              }

                              latestconfig = config_copy
                            },
                          }
                        );
                        if(latestconfig){
                          pivot_config_copy = latestconfig
                        }

                        $(`#${id6} .graphcontainerdiv .pvtAggregator`).css("display", "none")
                        $(`#${id6} .graphcontainerdiv .pvtRenderer`).css("display", "none")

                        var pivot_charttype = ["Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"]
                        $(`#${id}_configure_pivot_charttype`).find('option').slice(1).remove()
                            for (const i in pivot_charttype) {
                              $(`#${id}_configure_pivot_charttype`).append(new Option(pivot_charttype[i],pivot_charttype[i], false, false))
                            }

                          $(`#${id}_configure_pivot_charttype`).val(rendererName).trigger("change")

                          $(`#${id}_configure_pivot_charttype`).on('change', function () {
                            $(`#${id6} .graphcontainerdiv .pvtRenderer`).val(this.value).trigger("change")
                          })


                        var pivot_operations = ['Count', 'Count Unique Values', 'List Unique Values', 'Average', 'Sum', 'Interger Sum', 'Median', 'Sample Variance', 'Sample Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Sum over Sum', '80% Upper Bound', '80% Lower Bound', 'Sum as Fraction of Total', 'Sum as Fraction of Rows', 'Sum as Fraction of Columns', 'Count as Fraction of Total']
                        $(`#${id}_configure_pivot_operation`).find('option').slice(1).remove()

                        for (let i = 0; i < pivot_operations.length; i++) {
                          $(`#${id}_configure_pivot_operation`).append('<option value="' + pivot_operations[i] + '">' + pivot_operations[i] + '</option>')
                        }
                        $(`#${id}_configure_pivot_operation`).val(data.operation).trigger("change")

                        $(`#${id}_configure_pivot_operation`).on('change', function () {
                          $(`#${id6} .graphcontainerdiv .pvtAggregator`).val(this.value).trigger("change")
                        })

                        pivotResize(id6,data.content,pivot_config_copy,id,rendererName,data.operation)

                      }
                      else if(data.graph_subtype == "Vertical_Waterfall")
                      {

                          var colorlength1 = data.x_axisdata.length
                          var tester = document.getElementById(id)

                          x_axis = data.x_axis
                          y_axis = data.y_axis
                          var x_axisdata = data.x_axisdata
                          var y_axisdata = data.y_axisdata
                          var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))

                          x_axisdata2.push('Total')

                          x_axisdata.push('Total')
                          if(y_axisdata != undefined){
                              if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                                  y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                              }
                              else {
                                  y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                              }
                          }
                          var measure1 = [];
                          for (let i = 0; i < colorlength1; i++) {
                              measure1.push('relative');
                          }
                          measure1.push('total')
                          var update = {
                              x: [x_axisdata],
                              y: [y_axisdata],
                              measure: [measure1],
                              text : [y_axisdata],
                          };

                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)


                      }
                      else if(data.graph_subtype == "Vertical_Waterfall_Grouped"){
                          var colorlength = data.x_axisdata.length
                          var colordata = [];
                          var tester = document.getElementById(id)
                          var myPlot = document.getElementById(id)
                          var colordatasecond = [];
                          var measure = [];

                          x_axis = data.x_axis
                          y_axis = data.y_axis
                          var x_axisdata = data.x_axisdata
                          var y_axisdata = data.y_axisdata
                          var y_axisdata2 = data.second_columndata
                          var x_axisdata2 = JSON.parse(JSON.stringify(data.x_axisdata))
                          x_axisdata2.push('Total')

                          x_axisdata.push('Total')
                          if(y_axisdata != undefined){
                              if (Number.isInteger((y_axisdata.reduce((a, b) => a + b, 0)))) {
                                  y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)))
                              }
                              else {
                                  y_axisdata.push((y_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                              }
                          }
                          if(y_axisdata2 != undefined){
                              if (Number.isInteger((y_axisdata2.reduce((a, b) => a + b, 0)))) {
                                  y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)))
                              }
                              else {
                                  y_axisdata2.push((y_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
                              }
                          }

                          for (let i = 0; i < colorlength; i++) {
                              measure.push('relative');
                          }
                          measure.push('total')
                          var update = { x: [x_axisdata],y:[y_axisdata],measure: [measure],text: [y_axisdata]}
                          Plotly.restyle(tester, update,[0])
                          var update1 = { x: [x_axisdata],y:[y_axisdata2],measure: [measure],text: [y_axisdata2]}
                          Plotly.restyle(tester, update1,[1])
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))


                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
              tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Horizontal_Waterfall"){
                              var colorlength = data.y_axisdata.length
                              var colordata = [];
                              var measure = [];

                              x_axis = data.x_axis
                              y_axis = data.y_axis
                              var x_axisdata = data.x_axisdata
                              var y_axisdata = data.y_axisdata
                              var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                              y_axisdata2.push('Total')
                              var tester = document.getElementById(id)

                              y_axisdata.push('Total')
                              if(x_axisdata != undefined){
                                  if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                                      x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                                  }
                                  else {
                                      x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                                  }
                              }



                              for (let i = 0; i < colorlength; i++) {
                                  measure.push('relative');
                              }
                              measure.push('total')
                              var update = { x: [x_axisdata],y:[y_axisdata],measure:[measure],text: [x_axisdata]}
                              Plotly.restyle(tester, update)
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                              var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Waterfall_Grouped"){
                          var colorlength = data.x_axisdata.length
                  var colordata = [];
                  var colordatasecond = [];
                  var tester = document.getElementById(id)
                  var myPlot = document.getElementById(id)


                  var measure = [];

                  x_axis = data.x_axis
                  y_axis = data.y_axis
                  var x_axisdata = data.x_axisdata
                  var y_axisdata = data.y_axisdata
                  var x_axisdata2 = data.second_columndata
                  var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                  y_axisdata2.push('Total')

                  y_axisdata.push('Total')
                  if(x_axisdata != undefined){
                      if (Number.isInteger((x_axisdata.reduce((a, b) => a + b, 0)))) {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata.push((x_axisdata.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }
              if(x_axisdata2 != undefined)
                  {
                      if (Number.isInteger((x_axisdata2.reduce((a, b) => a + b, 0)))) {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)))
                      }
                      else {
                          x_axisdata2.push((x_axisdata2.reduce((a, b) => a + b, 0)).toFixed(2))
                      }
                  }

                  for (let i = 0; i < colorlength; i++) {
                      colordata.push('#b8860b');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      colordatasecond.push('goldenrod');
                  }
                  for (let i = 0; i < colorlength; i++) {
                      measure.push('relative');
                  }
                  measure.push('total')
                  var update = { x: [x_axisdata],y:[y_axisdata],measure: [measure],text: [x_axisdata]}
                  Plotly.restyle(tester, update,[0])
                  var update1 = { x: [x_axisdata2],y:[y_axisdata],measure: [measure],text: [x_axisdata2]}
                  Plotly.restyle(tester, update1,[1])
                  $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                  var tabledata = []
              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

              tabledata.push(data.x_axisdata)
              tabledata.push(data.second_columndata)
              tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "3D_Mesh" || data.graph_subtype == "3D_Scatter")
                      {
                          var colordata = []
                          var colorlength = data.x_axisdata.length
                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(color_value);
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata] ,"z": [data.second_columndata],'marker':{color:colordata} }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Bubble_Chart")
                      {
                          var colorlength = data.x_axisdata.length
                          var colordata = [];
                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(color_value);
                          }

                          var update = {"x": [data.x_axisdata],"y": [data.y_axisdata],"z":[data.second_columndata],"text": [data.x_axisdata]};

                          Plotly.restyle(tester, update)
                          var data_update = {
                              'marker':{color: colordata,size:data.second_columndata},
                          };
                          Plotly.restyle(tester, data_update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))

                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Bar_Grouped_and_Line" || data.graph_subtype == "Bar_Stacked_and_Line")
                       {
                        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                        x_array.sort()
                        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                        var colorlength = data.x_axisdata.length
                        var backRGB = color_value;
                        var color_update = []
                        for(var i=0;i<data.y_axisdata.length;i++){
                          color_update = []
                          for (let i = 0; i < colorlength; i++) {
                            color_update.push(color_value);
                        }

                          var update = {
                              x: [data.x_axisdata],
                              y: [data.y_axisdata[i]],
                              text:[data.y_axisdata[i]],
                              marker: {
                                  color: color_update
                              },

                          }
                          var colorList1=[]
                          colorList1.push(color_value)
                          var backRGB = color_value;

                  const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                  var r = hexToRgb(backRGB)[0] * 0.6
                  var g = hexToRgb(backRGB)[1] * 0.6
                  var b = hexToRgb(backRGB)[2] * 0.6


                  var newcolor = rgb2hex(r, g, b)
                  color_value = newcolor
                          Plotly.restyle(tester, update,[i])
                      }
                          var update = {x: [data.x_axisdata],y: [data.line_columndata],name: [fieldToVerbose(data.line_column, data.mappingDict)],text: [data.line_columndata],};
                          Plotly.restyle(tester, update, [data.y_axisdata.length])
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]

                          var new_y_axis = eval(data.new_y_axis)
                          for(var i=0;i < new_y_axis.length;i++){
                              tableheaders.push(`<b>${fieldToVerbose(data.new_y_axis[i], data.mappingDict)}</b>`)
                          }
                          tableheaders .push(`<b>${fieldToVerbose(data.line_column, data.mappingDict)}</b>`)

                          tabledata.push(data.x_axisdata)
                          for(var i=0;i<data.y_axisdata.length;i++){
                          tabledata.push(data.y_axisdata[i])
                          }
                          tabledata.push(data.line_columndata)
                       }

                      else if(data.graph_subtype == "Bar_Stacked_and_Multiple_Line"){
                        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                        x_array.sort()
                        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                        var colorlength = data.x_axisdata.length
                        var backRGB = color_value;
                        var color_update = []
                        var i = 0
                        for(i=0;i<data.y_axisdata.length;i++){
                          color_update = []
                          for (let j = 0; j < colorlength; j++) {
                            color_update.push(color_value);
                          }

                          var update = {
                              x: [data.x_axisdata],
                              y: [data.y_axisdata[i]],
                              text:[data.y_axisdata[i]],
                              marker: {
                                  color: color_update
                              },

                          }
                          var colorList1=[]
                          colorList1.push(color_value)
                          var backRGB = color_value;

                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(backRGB)[0] * 0.6
                          var g = hexToRgb(backRGB)[1] * 0.6
                          var b = hexToRgb(backRGB)[2] * 0.6


                          var newcolor = rgb2hex(r, g, b)
                          color_value = newcolor
                          Plotly.restyle(tester, update,[i])
                        }
                        backRGB = color_value
                        const hexToRgb = hex =>
                      hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                          , (m, r, g, b) => '#' + r + r + g + g + b + b)
                          .substring(1).match(/.{2}/g)
                          .map(x => parseInt(x, 16))
                        var r = hexToRgb(backRGB)[0] * 0.9
                        var g = hexToRgb(backRGB)[1] * 0.9
                        var b = hexToRgb(backRGB)[2] * 0.9


                        var newcolor = rgb2hex(r, g, b)
                        backRGB = newcolor

                        for(var j=0;j<data.line_columndata.length;j++){

                            const hexToRgb = hex =>
                                hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                    , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                    .substring(1).match(/.{2}/g)
                                    .map(x => parseInt(x, 16))
                            var r = hexToRgb(backRGB)[0] * 0.6
                            var g = hexToRgb(backRGB)[1] * 0.6
                            var b = hexToRgb(backRGB)[2] * 0.6
                            var newcolor = rgb2hex(r, g, b)
                            color_value = newcolor
                            var update = {
                                x: [data.x_axisdata],
                                y: [data.line_columndata[j]],
                                text:[data.line_columndata[j]],
                                marker: {
                                    color: color_value
                                },

                            }
                            colorList1.push(color_value)
                            backRGB = color_value;
                            Plotly.restyle(tester, update,[i+j])
                        }

                         $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                        var tabledata = []
                        var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`]

                        var new_y_axis = eval(data.new_y_axis)
                        for(var i=0;i < new_y_axis.length;i++){
                            tableheaders.push(`<b>${fieldToVerbose(data.new_y_axis[i], data.mappingDict)}</b>`)
                        }
                        for(var i=0;i < data.line_column.length;i++){
                          tableheaders.push(`<b>${fieldToVerbose(data.line_column[i], data.mappingDict)}</b>`)
                        }
                        tabledata.push(data.x_axisdata)
                        for(var i=0;i<data.y_axisdata.length;i++){
                        tabledata.push(data.y_axisdata[i])
                        }
                        for(var i=0;i<data.line_columndata.length;i++){
                          tabledata.push(data.line_columndata[i])
                        }
                     }
                      else if(data.graph_subtype == "Aggregation")
                          {
                              var data_value = $(`#${id6}`).attr("data-config_data_value")
                              var changedOuputValue = data.value
                              if($.isNumeric(data.value))
                              {
                                  if (data_value == 'Units') {
                                      var changedOuputValue = (data.value / 1)
                                  }
                                  if (data_value == 'Hundreds') {
                                      var changedOuputValue = (data.value / 100).toFixed(2) + "H"
                                  }
                                  if (data_value == 'Thousands') {
                                      var changedOuputValue = (data.value / 1000).toFixed(2) + "K"
                                  }
                                  if (data_value == 'Millions') {
                                      var changedOuputValue = (data.value / 1000000).toFixed(2) + "M"
                                  }
                                  if (data_value == 'Billions') {
                                      var changedOuputValue = (data.value / 1000000000).toFixed(2) + "B"
                                  }
                              }

                              $(`#${id6}`).children().find("h5")[1].innerText = changedOuputValue
                              $(`#${id18}`).attr("datavalue", data.value)
                          }
                      else if(data.graph_subtype == "Funnel"){

                          var colorlength = data.x_axisdata.length
                          var colordata = [];
                          x_axis = data.x_axis
                          y_axis = data.y_axis
                          var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                              for (let i = 0; i < colorlength; i++) {
                                  colordata.push(color_value);
                              }
                          }


                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], 'marker': { color: colordata } }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)

                      }
                      else if(data.graph_subtype == "Funnel_Area"){
                          x_axis = data.x_axis
                          y_axis = data.y_axis
                          var y_axisdata2 = JSON.parse(JSON.stringify(data.y_axisdata))
                          color = color_value
                          var colordata = [];
                          var colorlength = data.x_axisdata.length
                          var backRGB = color
                          colordata.push(backRGB);
                          for (let i = 0; i < colorlength-1; i++) {
                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colordata[colordata.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colordata.push(newHex)
                          }
                          var update = {"text": [data.x_axisdata],"values": [data.y_axisdata],marker: {colors: colordata,},};
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Bubble_Map"){
                          var update = {"labels": [data.x_axisdata],"values": [data.y_axisdata]};
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                      }
                      else if(data.graph_subtype == "Pie_Chart" || data.graph_subtype == "Donut_Chart")
                      {
                          var colorlength = data.x_axisdata.length
                          var colorList=[]
                          var backRGB= color_value
                          colorList.push(backRGB)
                          for (let i = 0; i < colorlength - 1; i++) {


                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                      var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                      colorList.push(newHex)
                  }

                          var update = { "values": [data.y_axisdata] , "labels": [data.x_axisdata],marker: {colors: colorList}}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)

                      }

                      else if(data.graph_subtype == "Sunburst"){
                          var colorList = [];
                          var colorlength = data.x_axisdata.length
                          var backRGB = color_value;
                          var colorList = []
                          colorList.push(backRGB)
                          for (let i = 0; i < colorlength - 1; i++) {


                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colorList.push(newHex)
                          }

                          var update = {
                              "values": [data.second_columndata],
                              "labels": [data.y_axisdata],
                              "parents": [data.x_axisdata],
                              "ids": [data.sunburst_id],
                              "branchvalues": "total",
                              marker: { colors: colorList }
                          };
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`,`<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Angular_Gauge"){
                          let id6_ = id6.replace("card","")
                          let attr = JSON.parse($("#"+id6).attr("data-data"))
                          attr[0]["value"] = data.value
                          let value = ""
                          let color = ""
                          $("#"+id6_+"gaugeModalSaveButton").each(function() {
                              let{dataValue, gaugeBarColor} = returnGaugeColor($(this),attr)
                              value = dataValue
                              color = gaugeBarColor
                          })
                          if(color != ""){
                              color_value = color
                          } else {
                              color_value = "var(--primary-color)"
                          }
                          let range1 = []
                          $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
                              let {dataValue} = returnGaugeColorRange($(this),attr)
                              range1 = dataValue
                          })
                          if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
                              var update = {
                                  "mode": "gauge+number+delta",
                                  delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
                                  "value": [data.value],
                                  "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                                      steps: range1,
                                      threshold: {
                                          line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                          thickness: 0.75,
                                          value: $("#"+id6_+"threshold").val()
                                      }
                                  },
                                  "x" : [data.x_axisdata],
                              "y" : [data.y_axisdata],
                              "second_columndata" : [data.second_columndata]
                              }
                          } else {
                              var update = {
                                  "value": [data.value],
                                  "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                                      steps: range1,
                                      threshold: {
                                          line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                          thickness: 0.75,
                                          value: $("#"+id6_+"threshold").val()
                                      }
                                  },
                                  "x" : [data.x_axisdata],
                              "y" : [data.y_axisdata],
                              "second_columndata" : [data.second_columndata]
                              }

                          }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Bullet_Gauge"){
                          let id6_ = id6.replace("card","")
                          let attr = JSON.parse($("#"+id6).attr("data-data"))
                          attr[0]["value"] = data.value
                          let value = ""
                          let color = ""
                          $("#"+id6_+"gaugeModalSaveButton").each(function() {
                              let{dataValue, gaugeBarColor} = returnGaugeColor($(this),attr)
                              value = dataValue
                              color = gaugeBarColor
                          })
                          if(color != ""){
                              color_value = color
                          } else {
                              color_value = "var(--primary-color)"
                          }
                          let range1 = []
                          $("#"+id6_+"gaugeModalRangeSaveButton").each(function() {
                              let {dataValue} = returnGaugeColorRange($(this),attr)
                              range1 = dataValue
                          })
                          if(parseInt($("#"+id6_+"deltaGauge").val()) != NaN){
                              var update = {
                                  "mode": "gauge+number+delta",
                                  delta: { reference: parseInt($("#"+id6_+"deltaGauge").val()),},
                                  "value": [data.value],
                                  "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                                      shape: "bullet",
                                      steps: range1,
                                      threshold: {
                                          line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                          thickness: 0.75,
                                          value: $("#"+id6_+"threshold").val()
                                      }
                                  },
                                  "x" : [data.x_axisdata],
                              "y" : [data.y_axisdata],
                              "second_columndata" : [data.second_columndata]
                              }
                          } else {
                              var update = {
                                  "value": [data.value],
                                  "gauge": { axis: { range: [null, [data.value] * 1.1] }, bar: { color: color_value },
                                      shape: "bullet",
                                      steps: range1,
                                      threshold: {
                                          line: { color: $("#"+id6_+"thresholdColor").val(), width: 4 },
                                          thickness: 0.75,
                                          value: $("#"+id6_+"threshold").val()
                                      }
                                  },
                                  "x" : [data.x_axisdata],
                              "y" : [data.y_axisdata],
                              "second_columndata" : [data.second_columndata]
                              }
                          }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Treemap"){
                          var colorlength = data.x_axisdata.length
                          var colordata = data.colordata
                          var parentsList = []
                          for (let i = 0; i < colorlength; i++) {
                              parentsList.push("");
                          }
                          var backRGB = color_value;
                          var colorList = []
                          colorList.push(backRGB)
                          for (let i = 0; i < colorlength - 1; i++) {


                              var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorList[colorList.length - 1]);
                              var r = parseInt(previousHex[1], 16) * 0.8;
                              var g = parseInt(previousHex[2], 16) * 0.8;
                              var b = parseInt(previousHex[3], 16) * 0.8;

                              var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                              colorList.push(newHex)
                          }
                          var update = {"parents":[parentsList],"values": [data.y_axisdata],"labels": [data.x_axisdata],'marker':{colors:colorList}};
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }

                      else if(data.graph_subtype == "Vertical_Line_Stacked")
                      {
                        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                        x_array.sort()
                        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                        var update = { "x": [data.x_axisdata], "y": [data.y_axisdata],"text": [data.second_columndata], }
                          var update2 = { "x": [data.x_axisdata], "y": [data.second_columndata],"text": [data.second_columndata],}

                          Plotly.restyle(tester, update, [0])
                          Plotly.restyle(tester, update2, [1])
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                          tabledata.push(data.second_columndata)
                      }
                      else if(data.graph_subtype == "Vertical_Grouped_Box" || data.graph_subtype == "Vertical_Grouped_Violin" || data.graph_subtype == "Vertical_Area_Stacked")
                          {


                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata],"text": [data.y_axisdata]}
                          var update2 = { "x": [data.x_axisdata], "y": [data.second_columndata],"text": [data.second_columndata]}



                              Plotly.restyle(tester, update, [0])
                              Plotly.restyle(tester, update2, [1])
                              $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              var tabledata = []
                              var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`]

                              tabledata.push(data.x_axisdata)
                              tabledata.push(data.y_axisdata)
                              tabledata.push(data.second_columndata)
                          }
                      else if(data.graph_subtype == "Horizontal_Histogram"){
                          var colorlength = data.x_axisdata.length
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                             var colordata = color_value
                          }
                          var update = {"y": [data.x_axisdata], "marker": {color: colordata}}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "2D_Histogram_Contour"){
                          var update = {"x": [data.x_axisdata],"y": [data.y_axisdata],"colorscale": [data.colordata]};
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Stacked_Histogram"){

                          var newcolor = rgb2hex(r, g, b)
                          var update = {"x": [data.x_axisdata]}
                          Plotly.restyle(tester, update,[0])
                          var update2 = {"x": [data.y_axisdata]}
                          Plotly.restyle(tester, update2,[1])
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`,]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Cumulative_Histogram"){
                          var colorlength = data.x_axisdata.length
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                              var colordata = color_value
                          }
                          var update = {"x": [data.x_axisdata],"marker": {color: colordata}}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`]
                          tabledata.push(data.x_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Bar_Stacked" || data.graph_subtype=="Horizontal_Bar_Grouped"){
                        var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
                        y_array.sort()
                        if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
                        var colorlength = data.y_axisdata.length
                        var color_update = []
                        for(var i=0;i<data.x_axisdata.length;i++){
                          color_update = []
                          for (let i = 0; i < colorlength; i++) {
                            color_update.push(color_value);
                          }

                            var update = {
                                x: [data.x_axisdata[i]],
                                y: [data.y_axisdata],
                                text:[data.x_axisdata[i]],
                                marker: {
                                    color: color_update
                                },

                            }
                            var colorList1=[]
                            colorList1.push(color_value)
                            var backRGB = color_value;

                    const hexToRgb = hex =>
                        hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                            , (m, r, g, b) => '#' + r + r + g + g + b + b)
                            .substring(1).match(/.{2}/g)
                            .map(x => parseInt(x, 16))
                    var r = hexToRgb(backRGB)[0] * 0.6
                    var g = hexToRgb(backRGB)[1] * 0.6
                    var b = hexToRgb(backRGB)[2] * 0.6


                    var newcolor = rgb2hex(r, g, b)
                    color_value = newcolor
                            Plotly.restyle(tester, update,[i])
                        }
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders =[]
                          var new_x_axis = eval(data.new_x_axis)
                          for(var i=0;i < new_x_axis.length;i++){
                              tableheaders.push(fieldToVerbose(data.new_x_axis[i], data.mappingDict))
                          }
                          tableheaders.push(`${fieldToVerbose(data.y_axis, data.mappingDict)}`)

                          var tabledata=[]
                          for(var i=0;i<data.x_axisdata.length;i++){
                            tabledata.push(data.x_axisdata[i])
                          }
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Grouped_Box" || data.graph_subtype == "Horizontal_Grouped_Violin" || data.graph_subtype == "Horizontal_Area_Stacked"){

                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], "text": [data.x_axisdata], }
                          var update2 = { "x": [data.second_columndata], "y": [data.y_axisdata],"text": [data.second_columndata],}
                          Plotly.restyle(tester, update, [0])
                          Plotly.restyle(tester, update2, [1])
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]

                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.second_columndata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Funnel_Stacked"){
                          var colordata = []
                          var colordatasecond = []
                          var colorlength = data.x_axisdata.length
                          var backRGB = color_value;
                          const hexToRgb = hex =>
                              hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                                  , (m, r, g, b) => '#' + r + r + g + g + b + b)
                                  .substring(1).match(/.{2}/g)
                                  .map(x => parseInt(x, 16))
                          var r = hexToRgb(backRGB)[0] * 0.9
                          var g = hexToRgb(backRGB)[1] * 0.9
                          var b = hexToRgb(backRGB)[2] * 0.9


                          var newcolor = rgb2hex(r, g, b)


                          for (let i = 0; i < colorlength; i++) {
                              colordata.push(backRGB);
                          }
                          for (let i = 0; i < colorlength; i++) {
                              colordatasecond.push(newcolor);
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], marker: {
                              color: colordata,
                          }, }
                          var update2 = { "x": [data.second_columndata], "y": [data.y_axisdata],marker: {
                              color: colordatasecond,
                          },}
                          Plotly.restyle(tester, update, [0])
                          Plotly.restyle(tester, update2, [1])
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tabledata = []
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.second_column, data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis, data.mappingDict)}</b>`]
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.second_columndata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Bar"){
                        var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
                        y_array.sort()
                        if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
                        var colorlength = data.x_axisdata.length
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                              var colordata = color_value
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], 'marker': { color: colordata },text: [data.x_axisdata] }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                          var tabledata = []
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Area"){
                        var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
                        y_array.sort()
                        if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
                        var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], 'marker': { color: color_value },text: [data.x_axisdata] }
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                          var tabledata = []
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Vertical_Bar_Stacked" || data.graph_subtype == "Vertical_Bar_Grouped" || data.graph_subtype == "Multiple_Line_Chart"){
                        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                        x_array.sort()
                        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                        var colorlength = data.x_axisdata.length

                        var color_update = []
                          for(var i=0;i<data.y_axisdata.length;i++){
                            color_update = []
                            for (let i = 0; i < colorlength; i++) {
                              color_update.push(color_value);
                            }

                              var update = {
                                  x: [data.x_axisdata],
                                  y: [data.y_axisdata[i]],
                                  text:[data.y_axisdata[i]],
                                  marker: {
                                      color: color_update
                                  },

                              }
                              var colorList1=[]
                              colorList1.push(color_value)
                              var backRGB = color_value;

                      const hexToRgb = hex =>
                          hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i
                              , (m, r, g, b) => '#' + r + r + g + g + b + b)
                              .substring(1).match(/.{2}/g)
                              .map(x => parseInt(x, 16))
                      var r = hexToRgb(backRGB)[0] * 0.6
                      var g = hexToRgb(backRGB)[1] * 0.6
                      var b = hexToRgb(backRGB)[2] * 0.6


                      var newcolor = rgb2hex(r, g, b)
                      color_value = newcolor
                              Plotly.restyle(tester, update,[i])
                          }

                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                              var tableheaders = [`${fieldToVerbose(data.x_axis, data.mappingDict)}`]

                              var new_y_axis = eval(data.new_y_axis)
                              for(var i=0;i < new_y_axis.length;i++){
                                  tableheaders.push(fieldToVerbose(data.new_y_axis[i], data.mappingDict))
                              }
                              var tabledata=[]
                              tabledata.push(data.x_axisdata)
                              for(var i=0;i<data.y_axisdata.length;i++){
                              tabledata.push(data.y_axisdata[i])
                              }
                      }
                      else if(data.graph_subtype == "Scatter_with_Straight_Lines_and_Markers"){
                        var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                        x_array.sort()
                        if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                        var colordata = [];
                          for (let i = 0; i < data.x_axisdata.length; i++) {
                              colordata.push(color_value);
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata],text: [data.y_axisdata],'marker': { color: colordata },line: {color: color_value,width: 2}}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                          var tabledata = []
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else if(data.graph_subtype == "Horizontal_Dot_Plot" || data.graph_subtype == "Scatter"){
                        var y_array = JSON.parse(JSON.stringify(data.y_axisdata))
                        y_array.sort()
                        if(!(arrayEquals(y_array, sorted_array))) new_sorted_array = y_array
                        var colordata = [];
                          var new_colordata = []
                          var new_x_axislist = []
                          if(filter_gradient_color == "yes")
                          {
                              for (let i = 0; i < data.x_axisdata.length; i++) {
                                  var backRGB = color_value
                                  if(new_x_axislist.includes(data.x_axisdata[i]) == false){
                                      new_x_axislist.push(data.x_axisdata[i])
                                  }
                              }
                              var backRGB = color_value
                              new_colordata.push(backRGB);
                                  for (let i = 0; i < (new_x_axislist.length)-1; i++){
                                      var previousHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(new_colordata[new_colordata.length - 1]);
                                          var r = parseInt(previousHex[1], 16) * 0.8;
                                          var g = parseInt(previousHex[2], 16) * 0.8;
                                          var b = parseInt(previousHex[3], 16) * 0.8;

                                          var newHex = '#' + componentToHex(Math.round(r)) + componentToHex(Math.round(g)) + componentToHex(Math.round(b));
                                          new_colordata.push(newHex)
                                  }
                                  for (let i = 0; i < (data.x_axisdata.length); i++) {
                                      colordata.push(new_colordata[new_x_axislist.indexOf(data.x_axisdata[i])])
                                  }
                          }
                          else{
                              for (let i = 0; i < data.x_axisdata.length; i++) {
                                  colordata.push(color_value);
                              }
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata],text: [data.y_axisdata],'marker': { color: colordata }}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                          var tabledata = []
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)
                      }
                      else{
                        var colorlength = data.x_axisdata.length
                          if(filter_gradient_color == "yes")
                          {
                             var colordata = gradient_filter(color_value,colorlength)
                          }
                          else{
                              var colordata = color_value
                          }
                          var update = { "x": [data.x_axisdata], "y": [data.y_axisdata], 'marker': { color: colordata },text: [data.y_axisdata],}
                          Plotly.restyle(tester, update)
                          $(`#${id6}`).attr("data-data", JSON.stringify(tester.data))
                          var tableheaders = [`<b>${fieldToVerbose(data.x_axis , data.mappingDict)}</b>`, `<b>${fieldToVerbose(data.y_axis , data.mappingDict)}</b>`]
                          var tabledata = []
                          tabledata.push(data.x_axisdata)
                          tabledata.push(data.y_axisdata)

                          if($(`#${idOrderModal}Button`).length){
                            var x_array = JSON.parse(JSON.stringify(data.x_axisdata))
                            x_array.sort()
                            if(!(arrayEquals(x_array, sorted_array))) new_sorted_array = x_array
                          }
                      }
                      if($(`#${idOrderModal}Button`).length){
                        $(`#${idOrderModal}Button`).attr('data-sorted-values', new_sorted_array)
                        updateChart(id6, $(`#${idOrderModal}Button`).attr('data-sorted-values'))
                      }
                      $('#'+$('#'+id6).parent().attr('id')).find('.charts').each(function() {
                          if($(this).attr('data-subtype') == 'Bubble_Chart') {
                              if($(this).attr('data-table_name') == tableName) {
                                  $(this).find('path').css('opacity',0.7);
                              }
                          } else {
                              if($(this).attr('data-table_name') == tableName) {
                                  $(this).find('path').css('opacity',1);
                              }
                          }
                      })
                      var trace2 = {
                          domain: { x: [0, 1], y: [0, 1] },
                          header: {
                              align: "center",
                              values: tableheaders,
                              font: { family: "Arial", size: 13, color: ["white"] },
                              fill: { color: 'var(--primary-color)' }
                          },
                          cells: {
                              align: "center",
                              values: tabledata,
                              font: { family: "Arial", size: 13, color: ["black"] }
                          },
                          type: 'table'
                      };
                      var layout2 = {
                          margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
                      }

                      var layout2 = {
                          margin: { l: 10, r: 10, b: 10, t: 10, pad: 1 },
                      }
                      var datatable = [trace2]
                      var datatablediv = document.getElementById(id_table)
                      var config = { responsive: true, displaylogo: false }
                      Plotly.newPlot(datatablediv, datatable, layout2, config);

                      const id_axis_order = data.chart_id_for_slicer + 'axis_order'
                      var val = $(`#${id_axis_order}`).val()
                      if(val || val == ""){
                        var order_type = $(`#${id_axis_order}`).attr('order_type')
                        let datatype_dict = JSON.parse($(`#${id_axis_order}`).attr("datatype_dict"))
                        var old_layout = $('#' + id6).attr("data-layout");
                        old_layout = JSON.parse(old_layout);
                        var layout = JSON.parse(JSON.stringify(old_layout));
                        if(order_type == "Vertical"){
                          if(datatype_dict[data.x_axis] == 'DateField' || datatype_dict[data.x_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, id6)
                        }
                        else if(order_type == "Horizontal"){
                          if(datatype_dict[data.y_axis] == 'DateField' || datatype_dict[data.y_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, id6)
                        }
                      }

                  },
                  error: function () {
                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                  }
              })
          }

          $('.datacards').draggable({
              containment: "parent",
              handle: ".handle_for_draggable_charts",
              opacity: 0.5,
              scrollSpeed: 200 ,
              scrollSensitivity:100,
          })
          $('.charts').draggable({
              containment: "parent",
              handle: ".handle_for_draggable_charts",
              opacity: 0.5,
              scrollSpeed: 200 ,
              scrollSensitivity:100,
              zIndex: 100,
              drag: function (event, ui) {
                  var drag_speed = 1 / 0.94;
                  const initial_left_pos = ui.position.left
                  const initial_right_pos = ui.position.right
                  const initial_top_pos = ui.position.top
                  const initial_bottom_pos = ui.position.bottom
                  __dx = (ui.position.left - ui.originalPosition.left) * drag_speed;
                  __dx1 = (ui.position.right - ui.originalPosition.right) * drag_speed;
                  __dy = (ui.position.top - ui.originalPosition.top) * drag_speed;
                  __dy1 = (ui.position.bottom - ui.originalPosition.bottom) * drag_speed;
                  ui.position.left = ui.originalPosition.left + (__dx);
                  ui.position.right = ui.originalPosition.right + (__dx1);
                  ui.position.top = ui.originalPosition.top + (__dy);
                  ui.position.bottom = ui.originalPosition.bottom + (__dy1);
              },
          })
          $('.draggable_div').draggable({
              containment: "parent",
              opacity: 0.5,
              scrollSpeed: 200 ,
              scrollSensitivity:100,

          })

          // Jquery draggable
          $('.modal-dialog').draggable({
              handle: ".modal-header"
          });
          $('.contentEditable').each(function () {
              $(this).on('click', function () {
                  $(this).attr("contenteditable", "true")
                  $(this).focus()
              })
              $(this).focusout(function () {
                  $(this).removeAttr("contenteditable")
              })
          })
          document.getElementById(id16).onclick = function () {

              $(`#${id17}`).empty()
              $(`#${id17}`).css('height','')
              $(`#${id17}`).css('max-height','')
              var displayvalue = document.getElementById(id16).style.display
              $('.tabname').each(function () {
                  tabrowname = ($(this).attr("data-tab_ct"))
                  tablistname = $(this)[0].innerHTML
                  $(`#${id17}`).append($(`<div class="row"><button type="button" class="btn btn-default analysisDashboardmove" data-plotClass="${id6}" data-gaugemodal="${idGaugeModal}" data-modalClass="${id7}" data-filterClass="${id_filter}" data-conditionalClass="${id_condition}" data-tab="${tabrowname}" data-tab_ct="${tabrowname}" style="font-size:0.85rem;">${tablistname}</button></div>`));
              })

                  var tab_height = parseInt($(`#${id6}`).height()) - 120 + "px"
              var initial_height = parseInt($(`#${id17}`).height()) + 5 + "px"
              $(`#${id17}`).css('height',tab_height)
              $(`#${id17}`).css('max-height',initial_height)
              $(`#${id17}`).css('overflow-y',"scroll")
              $(`#${id17}`).css('overflow-x',"hidden")


              $('.analysisDashboardmove').off('click').on('click',function () {
                  var ID6 = $(this).attr('data-plotclass')
                  var m = ID6.replace("card","orderModalButton")
                  var val = $('#' + m).attr("data-sorted-values")
                  deletePlotId6FromSlicerDict(ID6)
                   $(`#${id_filter}`).attr('data-slicer_value','No')
                   filter_function()
                  outerCard.find(`#${id17}`)[0].style.display = "none"
                  plotClassName = $(this).attr('data-plotClass')
                  modalClassName = $(this).attr('data-modalClass')
                  $('#'+ID6).find('path').each(function() {
                      $(this).css('opacity',1);
                  })
                  plotType=''
                  for(let [key,value] of Object.entries(crossFilterDict1)){
                      for(let i = 0; i < value.length; i++) {
                          if((value[i].id+'card') == ID6) {
                              plotType = value[i].plot_type

                              crossFilterDict1[key].splice(i,1);
                              break
                          }
                      }
                  }
                  for(let [key,value] of Object.entries(crossFilterDict1)){
                      if(key == $(this).attr("data-tab_ct")) {
                          crossFilterDict1[key].push({'id':ID6.split('card')[0],'plot_type':plotType})
                          break;
                      }
                  }
                  new_tab_slicer = "selectSlicerConfig_" + $(this).attr("data-tab_ct").replace("analysisrow","")
                  if(slicerTabConfigDict[new_tab_slicer] == undefined)
                  {
                      slicerTabConfigDict[new_tab_slicer] = [$(`#${modalClassName}`).attr("id").replace("modal","card")]
                      slicerChangeUpdatePlots(app_code_);
                  }
                  else{
                      slicerTabConfigDict[new_tab_slicer].push($(`#${modalClassName}`).attr("id").replace("modal","card"))
                  }
                  filterClassName=$(this).attr('data-filterClass')
                  conditionalClassName = $(this).attr('data-conditionalClass')
                  freezeClassName = "freeze_pane_modal_"+$(this).attr('data-conditionalClass').replace("conditional_modal","")
                  var element = $(this).attr("data-tab_ct")

                  var outercardappend = $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent()

                  var modalcardappend = $(`#${modalClassName}`)
                  var filtercardappend=$(`#${filterClassName}`)
                  var conditioncardappend=$(`#${conditionalClassName}`)
                  var freezecardappend=$(`#${freezeClassName}`)
                  if($(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().attr('data-subtype') == "Aggregation")
                   {
                      $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().draggable("destroy")
                      $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().draggable({ containment: "parent" })
                   }
                   else{
                      $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().draggable("destroy")
                      $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('position',"absolute")
                      $(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().draggable({ containment: "parent" })
                   }


                  outercardappend.appendTo(`#${element}`)
                  modalcardappend.appendTo(`#${element}`)
                  filtercardappend.appendTo(`#${element}`)
                  conditioncardappend.appendTo(`#${element}`)
                  freezecardappend.appendTo(`#${element}`)

                  $("#"+ID6.replace("card","")+"gaugeModal").appendTo(`#${element}`)
                  $("#"+ID6.replace("card","")+"gaugeModalRange").appendTo(`#${element}`)
                  $("#"+ID6.replace("card","")+"orderModal").appendTo(`#${element}`)
                  setTimeout(() => {
                      $("#"+ID6.replace("card","")+"threshold").trigger("blur");
                      $("#"+ID6.replace("card","")+"gaugeModalSaveButton").trigger("click");
                      $("#"+ID6.replace("card","")+"gaugeModalRangeSaveButton").trigger("click");
                      $("#"+ID6.replace("card","")+"orderModalSaveButton").trigger("click");
                      $("#"+ID6).find("bg-arc").css("opacity",0.3)
                      $('#' + element).find("#"+ID6.replace("card","")+"orderModalButton").attr("data-sorted-values", val)
                      if(val){
                      updateChart(ID6, val,colordata)
                      }

                  },1000)

              })

              document.getElementById(id17).style.display = "block"
              layout = $('.chartDivSection').attr('data-layout')
              if(layout == "Portrait") {
                  fixedHeight = 1105
              } else {
                  fixedHeight = 715
              }

              id_id = $(this).find('button').eq(0).attr('data-id')
              id_parent = $(this).find('button').eq(0).attr('data-id_parent')
              if($('#'+id_parent).attr('data-subtype') == "Aggregation"){
                  topH = parseInt($('#'+id_parent).css('top'))
                  fullHeight = parseInt($(this).parent().css('height'))
                  totalHeight = topH + fullHeight + parseInt($('#'+id_id).css('height'))
                  if (totalHeight > fixedHeight) {
                      setTimeout(() => {
                          $('#'+id_id).css('top',`-${((totalHeight-fixedHeight)) + parseInt($(this).parent().css('top')) -20}px`)
                      },100)
                  } else {
                      $('#'+id_id).css('top','0rem');
                  }
              }

          }

          $('.nav-item').click(function () {
              $(`#${id17}`).css('display','none');
          })
          document.getElementById(id16).onmouseleave = function () {
              $(`#${id17}`).css('display','none');
          }

          $('.export_data').off('click').on('click', function(){
              let new_id = ($(this).attr("data-chart_id"))
              let tabSlicer_Id = $(this).attr("data-slicer_id")
              let filter_columns = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-filter_columns'))
              let filter_input_final = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-filter_input_final'))
              let drange = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-filter_dtrange'))
              let table_name = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-table_name'))
              let graph_subtype = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-subtype'))
              let x_axis = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-xaxis'))
              let y_axis = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-yaxis'))
              let second_column_data = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-secondcolumn'))
              let line_column = (document.getElementById(new_id).parentElement.parentElement.getAttribute('data-line_column'))
              let chart_name = $(this).attr("data-chart_header")
              let slicerColumnValue = [];
              let slicerColumn = []
              let slicerTabConnectObj = analysisDataRaw.slicerTabConnectDict
              for (let i = 0; i < $(`.${tabSlicer_Id}`).length; i++) {
                slicerColumnValue.push($(`.${tabSlicer_Id}`).eq(i).val());
                if( !(slicerTabConnectObj[chartDivId+"card"].includes($(`.${slicerColumnId}`).eq(i).attr("data-slicerColumn")))){
                  slicerColumn.push($(`.${tabSlicer_Id}`).eq(i).attr("data-slicerColumn"))
                }
              }

              $.ajax({
                  url: `/users/${urlPath}/export_data/`,
                  data: {
                      'filter_input_final': filter_input_final,
                      'tableName': table_name,
                      'graph_subtype': graph_subtype,
                      'x_axis': x_axis,
                      'y_axis': y_axis,
                      'second_column': second_column_data,
                      'line_column':line_column,
                      'slicerColumn': JSON.stringify(slicerColumn),
                      'slicerColumnValue': JSON.stringify(slicerColumnValue),
                      'drange': drange,
                  },
                  type: "POST",
                  success: function (data) {
                    var a = window.document.createElement('a');
                    a.href = window.URL.createObjectURL(new Blob([data], {type: 'text/csv'}));
                    a.download = `${graph_subtype}_underlying_data.csv`;

                    window.document.body.appendChild(a);
                    a.click();
                    window.document.body.removeChild(a);

                  }
              })
          })

          if($(`#${id6}`).parent().attr('data-layout') == "Landscape" || $(`#${id6}`).parent().attr('data-layout') == "Portrait"){
              if (data.plotDict === undefined) {
                  if($('.charts').eq(-2).parent().attr('id') == $('.charts').eq(-1).parent().attr('id')) {


                  }
              }

              var max_width
              var max_height
              if($(`#${id6}`).parent().attr('data-layout') != "Landscape"){
                  max_width = 910
                  max_height = 1106
              } else {
                  max_width = 1200
                  max_height = 720
              }
              width = parseInt($('.charts').eq(-1).css('width')) + parseInt($('.charts').eq(-1).css('left'));
              height = parseInt($('.charts').eq(-1).css('height')) + parseInt($('.charts').eq(-1).css('top'));
              if(max_height < height) {
                  $('.charts').eq(-1).css('top',`35px`);
              }
              if(max_width < width) {
                  $('.charts').eq(-1).css('left',`15px`);
              }
          } else {
              if (data.plotDict === undefined) {
                  $('.charts').eq(-1).css('height',`560px`);
                  if($('.charts').eq(-1).attr("data-subtype") == "Aggregation") {
                      $('.charts').eq(-1).css("height","140px");
                  }
              }
          }
        if (data.plotDict != undefined){
          if( $("#"+data.plotDict.tab_id).attr("data-count") != undefined){
            let chartCount = parseInt($("#"+data.plotDict.tab_id).attr("data-count"))
            if (chartCount == 1) {
              $("#"+data.plotDict.tab_id).find(".loadingSymbol").remove()

            }
            if (chartCount > 0) {
              chartCount = chartCount - 1
              $("#"+data.plotDict.tab_id).attr("data-count",chartCount)
            } else {
              $("#"+data.plotDict.tab_id).find(".loadingSymbol").remove()
            }
          } else {
            $("#"+data.plotDict.tab_id).find(".loadingSymbol").remove();
          }
        } else {
          $(".loadingSymbol").remove()
        }
      },
      error: function () {
          $(".loadingSymbol").remove()
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
  })
}
}

function showDaterange_1(){
  chartDivId = $(this).attr("id").replace("__filter_dtrange","")
  if($(this).is(":checked")){
    $(this).parent().parent().find(`.${chartDivId + '__showrange'}`).css("display","block")
  }else{
    $(this).parent().parent().find(`.${chartDivId + '__showrange'}`).css("display","none")
  }
}

function publishDashboardShare(element_id){
  if($(this).val() == "Groups"){
    $("#publishDashboardGroup" + element_id).parent().css("display","block");
    $.ajax({
    url: `/users/${urlPath}/dynamicVal/`,
    data: {
        'operation': 'importGroup',
      },
      type: "POST",
      dataType:"json",
      success:function(data){
        $("#publishDashboardGroup" + element_id).empty();
        for(i in data["data"]){
          $("#publishDashboardGroup" + element_id).append(`<option value="${data['data'][i]['id']}">${data['data'][i]['name']}</option>`);
        }
      },
      error: function () {
        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    });
  } else {
    $("#publishDashboardGroup" + element_id).parent().css("display","none");
  }
}
function publishDashboardSelect(element_id){
  if($("#publishDashboardSelect"+element_id).val() == "Tabs"){
    $("#publishDashboardTabs"+element_id).parent().css("display","block");
    $("#publishDashboardPlots"+element_id).parent().css("display","none");
    $("#publishDashboardIndex"+element_id).parent().css("display","none");
    $("#publishDashboardTabs"+element_id).empty();
    $("#analysisTab"+element_id).find(".nav-link").each(function() {
      let val = $(this).attr("id");
      let text = $(this).text().trim();
      $("#publishDashboardTabs"+element_id).append(`<option value="${val}">${text}</option>`)
    });

  } else{
    $("#publishDashboardIndex"+element_id).parent().css("display","block");
    $("#publishDashboardTabs"+element_id).parent().css("display","none");
    $("#publishDashboardPlots"+element_id).parent().css("display","none");
  }
  if($("#publishDashboardSelect"+element_id).val() == "Plots"){
    $("#publishDashboardIndex"+element_id).parent().css("display","none");
    $("#publishDashboardTabs"+element_id).parent().css("display","block");
    $("#publishDashboardPlots"+element_id).parent().css("display","block");
    $("#publishDashboardTabs"+element_id).empty();
    $("#analysisTab"+element_id).find(".nav-link").each(function() {
      let val = $(this).attr("id");
      let text = $(this).text().trim();
      $("#publishDashboardTabs"+element_id).append(`<option value="${val}">${text}</option>`)
    });
  }
}
function publishDashboardTabs(element_id){
  if($("#publishDashboardSelect"+element_id).val() == "Plots"){
    $("#publishDashboardTabs"+element_id).parent().css("display","block");
    $("#publishDashboardPlots"+element_id).parent().css("display","block");
  }
  let val = ($(this).val()).replace("tab","row");
  $("#publishDashboardPlots"+element_id).empty();
  $("#"+val).find(".charts").each(function() {
    let id_ = $(this).attr("id");
    $("#publishDashboardPlots"+element_id).append(`<option value="${id_}">${$(this).attr("data-subtype")} (${($(this).attr("data-table_name"))})</option>`)
  })
}

function importDashboardTab(element_id){
  let tab_code = $(this).val();
  let subprocess_code = $("#importDashboardSubprocess"+element_id).val().split("_")[0];
  let dashboard_config_id;
  dashboard_config_id = $("#importDashboardSubprocess"+element_id).val().split("_")[1];
  let data = JSON.parse($("#importDashboardApp"+element_id).attr("data-data"));
  $("#importDashboardPlot"+element_id).empty();
  $("#importDashboardPlot"+element_id).append(`<option value="">---</option>`);
  for(let i in data){
    if(data[i]["subprocess_code"] == subprocess_code && data[i]["dashboard_config_id"] == dashboard_config_id && data[i]["dashboard_type"] == $("#importDashboardType"+element_id).val() && data[i]["tab_id"] == tab_code){

      let tab = JSON.parse(data[i]["plots_id"]);
      let plot_name = JSON.parse(data[i]["plots_name"]);
      let tab_ = tab[tab_code];
      let tab__ = plot_name[tab_code]
      for (let i in tab_){
        $("#importDashboardPlot"+element_id).append(
          `<option value="${tab_[i]}">${tab__[i]}</option>`
        )
      }
    }
  }
}
function importDashboardType(element_id){
  if($(this).val() == "Tabs"){
    $("#importDashboardTab"+element_id).val("").trigger("change");
    $("#importDashboardPlot"+element_id).parent().css("display","none");
    $("#importDashboardTab"+element_id).parent().css("display","block");
    $("#importDashboardPlotTab"+element_id).parent().css("display","none");
    $("#importDashboardDashboard"+element_id).parent().css("display","none");
  } else if($(this).val() == "Plots") {
    $("#importDashboardTab"+element_id).val("").trigger("change");
    $("#importDashboardPlot"+element_id).parent().css("display","block");
    $("#importDashboardTab"+element_id).parent().css("display","block");
    $("#importDashboardPlotTab"+element_id).parent().css("display","block");
    $("#importDashboardDashboard"+element_id).parent().css("display","none");
    $("#importDashboardPlotTab"+element_id).empty();
    $("#importDashboardPlotTab"+element_id).append(`<option value="">---</option>`);
    $("#analysisTab"+element_id).find(".nav-link").each(function() {
      let val = $(this).attr("id");
      let text = $(this).text().trim();
      $("#importDashboardPlotTab"+element_id).append(`<option value="${val}">${text}</option>`)
    });
  } else {
    $("#importDashboardPlot"+element_id).parent().css("display","none");
    $("#importDashboardPlotTab"+element_id).parent().css("display","none");
    $("#importDashboardDashboard"+element_id).parent().css("display","none");
    $("#importDashboardTab"+element_id).parent().css("display","none");
  }
}
function importDashboardSubprocess(element_id){
  let subprocess_code = $(this).val().split("_")[0];
  let dashboard_config_id;
  dashboard_config_id = $(this).val().split("_")[1];
  let data = JSON.parse($("#importDashboardApp"+element_id).attr("data-data"));
  $("#importDashboardTab"+element_id).empty();
  $("#importDashboardTab"+element_id).append(`<option value="">---</option>`);
  for(let i in data){
    if(data[i]["subprocess_code"] == subprocess_code && data[i]["dashboard_config_id"] == dashboard_config_id && (data[i]["dashboard_type"] == "Plots" || data[i]["dashboard_type"] == "Tabs")){
      $("#importDashboardTab"+element_id).append(
        `<option value="${data[i]["tab_id"]}">${data[i]["tab_name"]}</option>`
      )
    }
  }
}
function importDashboardApp(element_id){
  let app_code = $(this).val();
  let data = JSON.parse($("#importDashboardApp"+element_id).attr("data-data"));

  $("#importDashboardSubprocess"+element_id).empty();
  $("#importDashboardSubprocess"+element_id).append(`<option value="">---</option>`);
  let text_ = [];
  for(let i in data){
    if(data[i]["app_code"] == app_code){
      if(!(text_).includes(data[i]["dashboard_config_id"])){
        $("#importDashboardSubprocess"+element_id).append(
          `<option data-id="${data[i]["dashboard_config_id"]}" value="${data[i]["subprocess_code"]}_${data[i]["dashboard_config_id"]}">${data[i]["subprocess_name"]}</option>`
        )
        $("#importDashboardSubprocess"+element_id).find("option").each(function() {
          text_.push($(this).attr("data-id"));
        })
      }
    }
  }
}
function importDashboardSelect(element_id){
  $.ajax({
    url: `/users/${urlPath}/dynamicVal/`,
    data: {
        'operation': 'importDasboard',
        'shared': $("#importDashboardSelect"+element_id).val()
      },
      type: "POST",
      dataType:"json",
      success:function(data){
        $("#importDashboardApp"+element_id).attr("data-data",JSON.stringify(data["data"]));
        $("#importDashboardApp"+element_id).empty();
        $("#importDashboardApp"+element_id).append(`<option value="">---</option>`);
        let text_ = []
        for(let i in data["data"]){
          if(!(text_).includes(data["data"][i]["app_code"])){
            $("#importDashboardApp"+element_id).append(
              `<option value="${data["data"][i]["app_code"]}">${data["data"][i]["application_name"]}</option>`
            )
            $("#importDashboardApp"+element_id).find("option").each(function() {
              text_.push($(this).attr("value"));
            })
          }
        }
      },
      error: function () {
        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    });
}

function importDashboard(element_id, reload = false, dic = {}) {
  let appCode_ = ""
  let plotTab = "";
  if (reload == false){
    let subprocess_code_ = $("#importDashboardSubprocess"+element_id).val().split("_")[0]
    let data_1 = JSON.parse($("#importDashboardApp"+element_id).attr("data-data"));
    appCode_ = $("#importDashboardApp"+element_id).val()
    plotTab = $("#importDashboardPlotTab"+element_id).val();
    for(let i in data_1){
      if((data_1[i]["app_code"] == appCode_ && data_1[i]["subprocess_code"] == subprocess_code_ && data_1[i]["dashboard_type"] == "Entire dashboard")){
        editDashboard = data_1[i]["edit_type"];
        editType = data_1[i]["edit_type"]
      }
      if((data_1[i]["app_code"] == appCode_ && data_1[i]["subprocess_code"] == subprocess_code_ && data_1[i]["dashboard_type"] == "Tabs" && data_1[i]["tab_id"] == $("#importDashboardTab" + element_id).val())){
        editTab = data_1[i]["edit_type"];
        editType = data_1[i]["edit_type"]
      }
      if((data_1[i]["app_code"] == appCode_ && data_1[i]["subprocess_code"] == subprocess_code_ && data_1[i]["dashboard_type"] == "Plots" && data_1[i]["tab_id"] == $("#importDashboardTab" + element_id).val() && data_1[i]["plots_id"].includes($("#importDashboardPlot" + element_id).val()))){
        editChart = data_1[i]["edit_type"];
        editType = data_1[i]["edit_type"];
      }
    }
    let dashboard_config_id = $("#importDashboardSubprocess"+element_id).val().split("_")[1];

    dic = {
      "app_code":$("#importDashboardApp"+element_id).val(),
      "pr_code": subprocess_code_,
      "tab_id": $("#importDashboardTab" + element_id).val(),
      "plot_id": $("#importDashboardPlot" + element_id).val(),
      "shared_type": $("#importDashboardSelect" + element_id).val(),
      "element_id": element_id,
      "cont_id": $("#importDashboardPlotTab"+element_id).val(),
      "dashboard_type": $("#importDashboardType" + element_id).val(),
      "dashboard_id": $("#importDashboardDashboard"+element_id).val(),
      "dashboard_config_id": dashboard_config_id
    }
  } else {
    appCode_ = dic["app_code"]
    plotTab = dic["cont_id"]
    editType = dic["edit_type"]
  }
  $("#publishDashboard1"+element_id).html(`<i class="fa fa-spinner fa-pulse loadingSymbol"></i>`)
  $.ajax({
    url: `/users/${urlPath}/dynamicVal/`,
    data: {
        'operation': 'importDasboardSave',
        'config': JSON.stringify(dic)
      },
      type: "POST",
      dataType:"json",
      success:function(data1){
        editType = data1["editType"]
        sharedConfig["element_id"] = element_id
        if (reload == false){
          dic["edit_type"] = editType;
          if(sharedConfig["config"] == undefined){
            sharedConfig["config"] = [];
          }
          sharedConfig["config"].push(dic);
        }
        $("body").find("div").eq(0).removeAttr("app_code")
        $(".chartDivSection").removeAttr("app_code")
        if(data1["dashboard_type"] == "Entire dashboard"){
          let data_ = {
            "save": data1["data"],
            "analysis_table_list": data1["analysis_table_list"],
            "dashboard_index": data1["dashboard_index"]
          }
          $("body").find("div").eq(0).attr("app_code",appCode_)
          savedChartConfigFunc(data_,appCode_,element_id);
          $("#publishDashboard1"+element_id).html("Save");
          $("#publishDashboard1"+element_id).attr("disabled",false);
          dashboardSave_ = false;
        }
        else if(data1["dashboard_type"] == "Plots"){
          let navigateTabId = plotTab;
          if ($("#"+navigateTabId).hasClass("active")){
            data1["chartJson"][0]["app_code"] = appCode_
            plotChartsAnalysis(true, data1, (plotTab).replace("tab","row"), appCode_);
          } else {
            let tab_data = []
            if($("#"+navigateTabId).attr("data-data") != undefined){
              tab_data = JSON.parse($("#"+navigateTabId).attr("data-data"))
            }
            data1["chartJson"][0]["app_code"] = appCode_
            tab_data.push(data1["chartJson"][0])
            $("#"+navigateTabId).attr("data-data",JSON.stringify(tab_data))
          }
          $("#publishDashboard1"+element_id).html("Save");
          $("#publishDashboard1"+element_id).attr("disabled",false);
        } else {
          $("#analysisAddTab"+element_id).trigger("click");
          let tabID = $("#analysisTab"+element_id).find(".nav-link").eq(-1).attr("id");
          $("#"+tabID.replace("tab","row")).attr("app_code",appCode_);
          let tabNo = tabID.replace('analysistab'+element_id,"");
          fetchSlicerParams(appCode_);
          function fetchAnalysisSlicer(tabSlicerConfig, analysisTabID, tabNo) {
              var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
              $.ajaxSetup({
                  beforeSend: function (xhr, settings) {
                      xhr.setRequestHeader("X-CSRFToken", ctoken);
                  }
              });

              $.ajax({
              url: `/users/${urlPath}/processGraphModule/`,
              data: {
                  'tab_slicer_config': JSON.stringify(tabSlicerConfig),
                  'element_id': analysisTabID,
                  'tab_id': (tabNo),
                  'app_code': appCode_,
                  'operation': 'saveAnalysisSlicerConfigL3',
              },
              type: "POST",
              dataType: "json",
              success: function (data) {
                  var analysisSlicerElementId = data.elementID;
                  var analysisSlicerTabId = data.slicer_tab_id;
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').empty();
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(`<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;        <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>          <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button><button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>`);
                  let tabSlicerConfigOutput = data[analysisSlicerTabId];
                  let analysis_additional_config = tabSlicerConfigOutput.analysis_additional_config;
                  if (analysis_additional_config == "slicer_config") {
                  let slicerTables = tabSlicerConfigOutput.slicerTable;
                  let slicerParameters = tabSlicerConfigOutput.slicerParameter;
                  let mapDict = tabSlicerConfigOutput.mappingDict
                  let slicerParameterValues = tabSlicerConfigOutput.slicer_parameter_values;
                  let slicerBooleans= tabSlicerConfigOutput.slicerBoolean;
                  let slicerReloadValue = tabSlicerConfigOutput.slicerReload;
                  let multipleSlicer = tabSlicerConfigOutput.multipleSlicer;
                  var html = '';
                  for(let i = 0; i < slicerParameterValues.length; i++) {
                      let attr_ = 'data-value = ""'
                      let multiple = "";
                      if(slicerReloadValue != undefined){
                        if (slicerReloadValue.length != 0) {
                          attr_ = 'data-value' + `= '${JSON.stringify(slicerReloadValue[i])}'`
                        }
                      }
                      if(multipleSlicer != undefined){
                        if(multipleSlicer.length > 0){
                          if(multipleSlicer[i]){
                            multiple = "multiple";
                          }
                        }
                      }
                      html = html + `
                      <div class="form-inline">
                      <span style="color:var(--primary-color); margin-right:10px; margin-left:10px;">${mapDict[i][slicerParameters[i]]}:</span>
                      <select class="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId} select2 form-control slicerParamValue${analysisSlicerElementId}" data-tab="${analysisSlicerTabId}" data-slicertable="${slicerTables[i]}" data-slicerColumn= "${slicerParameters[i]}" ${attr_} data-id="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}" style="width:150px;display:inline-block;" ${multiple}>`
                          if(slicerBooleans != undefined){
                            if (slicerBooleans.length != 0) {
                              if(slicerBooleans[i] == 'True'){
                                html = html + `<option value="" selected>All</option>`
                              }
                            }
                          }
                      for(let slc_val = 0; slc_val < slicerParameterValues[i].length; slc_val++) {
                        if(slicerParameterValues[i][slc_val] != ''){
                          html = html + `<option value="${slicerParameterValues[i][slc_val]}">${slicerParameterValues[i][slc_val]}</option>`
                      }
                      }
                      html = html +
                      `</select>
                      </div>
                      `
                  }
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(html);
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').select2();
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("max-height","55px");
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("overflow-y","scroll");
                  }
                    slicerChangeUpdatePlots(appCode_);
                $("#"+tabID).find(".tabname").text(data1["config"]["subTabName"])
                $("#"+tabID.replace("analysis","index")).find("a").text(data1["config"]["subTabName"])
                plotChartsAnalysis(true, data1, tabID.replace("tab","row"), appCode_, tab = true);
                $("#publishDashboard1"+element_id).html("Save");
                $("#publishDashboard1"+element_id).attr("disabled",false);
                if (reload == false){
                  Swal.fire({icon: 'success',text: 'Imported successfully.'});
                }
              },
              error: function () {
                  $("#publishDashboard1"+element_id).attr("disabled",false);
                  Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
              }
              });
          }
          fetchAnalysisSlicer(data1["config"]["tabSlicerConfig"], element_id, tabNo);
        }
      },
      error: function () {
        $("#publishDashboard1"+element_id).prop("disabled",false);
        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    });
}

function saveDashboard(element_id){
  let tab = $("#publishDashboardTabs"+element_id).val();
  let dic1 = {};
  dic1[tab] = $("#publishDashboardPlots"+element_id).val()
  let tab_name = "";
  $("#publishDashboardTabs"+element_id).find("option").each(function() {
    if($(this).attr("value") == $("#publishDashboardTabs"+element_id).val()){
      tab_name = $(this).text();
    }
  })
  let plots_name = {};
  plots_name[tab] = []
  $("#publishDashboardPlots"+element_id).find("option").each(function() {
    if(($("#publishDashboardPlots"+element_id).val()).includes($(this).attr("value"))){
      (plots_name[tab]).push($(this).text());
    }
  })
  dic = {
    "dashboard_type": $("#publishDashboardSelect"+element_id).val(),
    "dashboard_id": element_id,
    "tab_id": $("#publishDashboardTabs"+element_id).val(),
    "tab_name": tab_name,
    "plots_id": JSON.stringify(dic1),
    "plots_name": JSON.stringify(plots_name),
    "shared_type": $("#publishDashboardShare"+element_id).val(),
    "edit_type": $("#publishDashboardEdit"+element_id).val(),
    "subprocess_group": JSON.stringify($("#publishDashboardGroup"+element_id).val()),
  }
  $.ajax({
    url: `/users/${urlPath}/dynamicVal/`,
    data: {
        'operation': 'publishDasboard',
        'element_id': element_id,
        'config':JSON.stringify(dic),
      },
      type: "POST",
      dataType:"json",
      success:function(data){
        $("#publishDashboard0"+element_id).prop("disabled",false);
        if($(`#publishDashboard${element_id}`).attr('data-custom-message') != ''){
          var custom_analysis_message = JSON.parse($(`#publishDashboard${element_id}`).attr('data-custom-message'))
          Swal.fire({icon: 'success',iconHtml : `<i class = "${custom_analysis_message.icon}"></i>`,text: custom_analysis_message['message']});
        }else{
          Swal.fire({icon: 'success',text: 'Dashboard Published successfully'});
        }

      },
      error: function () {
        $("#publishDashboard0"+element_id).prop("disabled",false);
        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    });
}

function slicerChangeUpdatePlots (app_code = "") {
    for (slicer in slicerTabConfigDict) {
      $(`.${slicer}`).attr("app_code",app_code);
      $(`.${slicer}`).off('select2:select select2:unselect').on('select2:select select2:unselect', function () {
        let app_code = $(this).attr("app_code");
        const slicerThis = $(this).attr('data-id')
        $(this).trigger("change");
        const slicerColumnValueMain = []
        const slicerColumnMain = []
        let slicerColumnValue = []
        let slicerColumn = []
        let color = ''
        for (let i = 0; i < $(`.${slicerThis}`).length; i++) {
          slicerColumnValueMain.push($(`.${slicerThis}`).eq(i).val())
          slicerColumnMain.push($(`.${slicerThis}`).eq(i).attr('data-slicerColumn'))
        }
        for (id6 of slicerTabConfigDict[slicerThis]) {
          slicerColumnValue = []
          slicerColumn = []
          if (Object.keys(slicerTabConnectDict).includes(id6)) {
            const unConnectSlicer = slicerTabConnectDict[id6]
            if (unConnectSlicer.length > 0) {
              for (let unConSlc = 0; unConSlc < slicerColumnMain.length; unConSlc++) {
                if (unConnectSlicer.includes(slicerColumnMain[unConSlc]) === false) {
                  slicerColumnValue.push(slicerColumnValueMain[unConSlc])
                  slicerColumn.push(slicerColumnMain[unConSlc])
                };
              };
            } else {
              slicerColumnValue = slicerColumnValueMain
              slicerColumn = slicerColumnMain
            }
          }
          const graphsubtype = $(`#${id6}`).attr('data-subtype')
          if (graphsubtype != 'Image') {
            const xaxis = $(`#${id6}`).attr('data-xaxis')
            const yaxis = $(`#${id6}`).attr('data-yaxis')
            const operation = $(`#${id6}`).attr('data-operation')
            const operation_line = $(`#${id6}`).attr('data-operation_line')
            const conditional_table = $(`#${id6}`).attr('data-conditional_table')
            let filter_input_final = $(`#${id6}`).attr('data-filter_input_final')
            if (String(filter_input_final) === 'undefined') {
              filter_input_final = JSON.stringify([])
            };
            let drange = $(`#${id6}`).attr('data-filter_dtrange')
            const line_column = $(`#${id6}`).attr('data-line_column')
            const second_column = $(`#${id6}`).attr('data-secondcolumn')
            const total_y = $(`#${id6}`).attr('data-total_y')
            const total_L = $(`#${id6}`).attr('data-total_L')
            const computed_number = $(`#${id6}`).attr('data-computed_number')
            const is_title = $(`#${id6}`).attr('data-is_title')
            const title_value = $(`#${id6}`).attr('data-title_value')
            const operation_n = $(`#${id6}`).attr('data-operation_n')
            const agg_distinct = $(`#${id6}`).attr('data-agg_distinct')
            const id = $(`#${id6}`).attr('data-id')
            const id18 = id + 'resetlabels'
            const formatters_config = $(`#${id6}`).attr('data-formatters_config_table')

            const table_name = $(`#${id6}`).attr('data-table_name')
            if(table_name){
              const updateDict = {
                operation: 'filter',
                conditional_table: conditional_table,
                filter_input_final: filter_input_final,
                tableName: table_name,
                graph_subtype: graphsubtype,
                chart_id: id,
                x_axis: xaxis,
                y_axis: yaxis,
                second_column: second_column,
                line_column: line_column,
                total_y: total_y,
                total_L: total_L,
                operation_n: operation_n,
                agg_distinct: agg_distinct,
                computed_number: computed_number,
                is_title: is_title,
                title_value: title_value,
                aggregation: operation,
                operation_line: operation_line,
                colValue: slicerColumnValue,
                slicerColumn: slicerColumn,
                slicerColumnValue: slicerColumnValue,
                id18: id18,
                drange: drange,
                app_code: app_code,
                formatters_config: formatters_config
              }
              updateChartOperation(updateDict, app_code)

            }

          }
        }
      })
    }
  }


  function resetTab () {
    const tabs = $('#tab-list li:not(:first)')
    let len = 1
    $(tabs).each(function (k, v) {
      len++
      $(this).find('a').html('Tab ' + len + button)
    })
    tabID--
  }

  function global_apply_button_click(){
    var x= document.getElementById(`myColor${elementID}`) != undefined ? document.getElementById(`myColor${elementID}`).value: "";
    $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-color",x)
    $(`#analysisTabContent${elementID}`).find('.chartDivSection').attr("config_background-color",x)
    $(`#analysisDashboard${elementID} .tab-content`).attr("config_background-color",x);
    $(`#analysisTab${elementID}`).find('.nav-link').attr("config_background-color",x);
    if($(`#global_bg${elementID}`).val() == "background_image"){
        if($(`#bg_image_url${elementID}`).html() != "" || $(`#bg_image_url${elementID}`).html() != undefined){
            if ($(`#analysisTabContent${elementID}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
                $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-size",'1920px calc(100vw * 9/16)' )
            }
            else if ($(`#analysisTabContent${elementID}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
                $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-size",'1080px calc(100vw * 16/9)' )
            }
            else{
                $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-size",'100%' )
            }
            $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-image",'url(data:image/png;base64,' + $(`#bg_image_url${elementID}`).html() )
        }
    }
    else{
        $(`#analysisTabContent${elementID}`).find('.chartDivSection').css("background-size","5% 5%" )
        $(`#analysisTabContent${elementID}`).find('.chartDivSection').css({"background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)"});
    }

  }

  function htmlGaugeCondition() {
    return (`
      <div class="row indCondition" style="margin-top:20px;">
        <div class="col-4">
          <select class="select2 form-control indCond" onchange="changeSelectTag.call(this)">
            <option value="Equal to">Equal to</option>
            <option value="Not Equal to">Not Equal to</option>
            <option value="Greater than">Greater than</option>
            <option value="Smaller than">Smaller than</option>
          </select>
        </div>
        <div class="col-4">
          <select class="select2 form-control indValue">
          </select>
        </div>
        <div class="col-3">
          <input type="color" class="form-control indColor">
        </div>
        <div class="col-1">
          <i class="fas fa-remove" onclick="removeIndCondition.call(this)" style="font-size: initial;"></i>
        </div>
      </div>
    `)
  }
  function gaugeModal() {
    let g_id = $(this).attr("data-modal_id");
    let dataValue = $(this).attr("data-value")
    if(![undefined,null].includes(dataValue)){
      $("#"+g_id).find(".modal-body").find(".indCondition").each(function() {
        $(this).remove()
      })
      dataValue = JSON.parse(dataValue)
      populateGaugeModal(g_id,dataValue)
    }
    $("#"+g_id).css("display","block");
  }
  function populateGaugeModal(g_id,dataValue) {
    for(let i = 0; i < dataValue.length; i++){
        $("#"+g_id).find(".modal-body").append(htmlGaugeCondition())
        $("#"+g_id).find(".modal-body").find(".indCondition").find("select").select2({"tags":true})
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indValue").append(`<option value="${dataValue[i]["value"]}">${dataValue[i]["value"]}</option>`);
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indValue").val(dataValue[i]["value"]).trigger("change")
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indCond").val(dataValue[i]["condition"]).trigger("change")
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indColor").val(dataValue[i]["color"]).trigger("change")
    }
  }
  function addIndCondition() {
    let g_id = $(this).attr("data-modal_id");
    $("#"+g_id).find(".modal-body").append(htmlGaugeCondition())
    $("#"+g_id).find(".modal-body").find(".indCondition").find("select").select2({"tags":true})
  }
  function removeIndCondition() {
    $(this).closest(".indCondition").remove()
  }
  function changeSelectTag() {
    if($(this).val() == "In" || $(this).val() == "Not In"){
      $(this).closest(".indCondition").find(".indVal").select2("destroy")
      $(this).closest(".indCondition").find(".indVal").attr("multiple","multiple")
      $(this).closest(".indCondition").find(".indVal").select2({"tags":true})
    }
  }
  function closeGaugeModal() {
    let g_id = $(this).attr("data-modal_id");
    $("#"+g_id).css("display","none");
  }
  function returnGaugeColor(thiss,attr,id){
    let dataValue = []
    let gaugeBarColor = "var(--primary-color)"
    let extractId = $('.bodyAnalysis').attr("id")
    let newgaugeBarColor = extractId.replace('analysisDashboard', '')
    newgaugeBarColor = "themeColor1"+newgaugeBarColor
    gaugeBarColor = $("#"+newgaugeBarColor).val()
    thiss.closest(".modal-content").find(".indCondition").each(function() {
      dataValue.push({
      "value": $(this).find(".indValue").val(),
      "condition": $(this).find(".indCond").val(),
      "color": $(this).find(".indColor").val(),
      })
      if($(this).find(".indCond").val() == "Greater than") {
          if(parseInt(attr[0]["value"]) < parseInt($(this).find(".indValue").val())){
              gaugeBarColor = $(this).find(".indColor").val()
          }
      } else if($(this).find(".indCond").val() == "Smaller than"){
          if(parseInt(attr[0]["value"]) > parseInt($(this).find(".indValue").val())){
              gaugeBarColor = $(this).find(".indColor").val()
          }
      }
      else if($(this).find(".indCond").val() == "Equal to"){
          if(parseInt(attr[0]["value"]) == parseInt($(this).find(".indValue").val())){
              gaugeBarColor = $(this).find(".indColor").val()
          }
      }
      else if($(this).find(".indCond").val() == "Not Equal to"){
          if(parseInt(attr[0]["value"]) != parseInt($(this).find(".indValue").val())){
              gaugeBarColor = $(this).find(".indColor").val()
          }
      }
    })
    return {dataValue, gaugeBarColor}
  }

  function htmlGaugeConditionRange() {
    return (`
      <div class="row indCondition" style="margin-top:20px;">
        <div class="col-4">
          <input type="number" class="form-control indValueStart">
        </div>
        <div class="col-4">
          <input type="number" class="form-control indValueEnd">
        </div>
        <div class="col-3">
          <input type="color" class="form-control indColor">
        </div>
        <div class="col-1">
          <i class="fas fa-remove" onclick="removeIndCondition.call(this)" style="font-size: initial;"></i>
        </div>
      </div>
    `)
  }
  $('.plotlyModal').on('shown.bs.modal', function() {
      $(document).off('focusin.modal');
  });
  function gaugeModalRange() {
    let g_id = $(this).attr("data-modal_id");
    let dataValue = $(this).attr("data-value")
    if(![undefined,null].includes(dataValue)){
      $("#"+g_id).find(".modal-body").find(".indCondition").each(function() {
        $(this).remove()
      })
      dataValue = JSON.parse(dataValue)
      populateGaugeModalRange(g_id,dataValue)
    }
    $("#"+g_id).css("display","block");
  }
  function populateGaugeModalRange(g_id,dataValue) {
    for(let i = 0; i < dataValue.length; i++){
        $("#"+g_id).find(".modal-body").append(htmlGaugeConditionRange())
        $("#"+g_id).find(".modal-body").find(".indCondition").find("select").select2({"tags":true})
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indValueStart").val(dataValue[i]["range"][0]).trigger("change")
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indValueEnd").val(dataValue[i]["range"][1]).trigger("change")
        $("#"+g_id).find(".modal-body").find(".indCondition").eq(-1).find(".indColor").val(dataValue[i]["color"]).trigger("change")
    }
  }
  function addIndConditionRange() {
    let g_id = $(this).attr("data-modal_id");
    $("#"+g_id).find(".modal-body").append(htmlGaugeConditionRange())
    $("#"+g_id).find(".modal-body").find(".indCondition").find("select").select2({"tags":true})
  }
  function returnGaugeColorRange(thiss,attr){
    let dataValue = []
    thiss.closest(".modal-content").find(".indCondition").each(function() {
      dataValue.unshift({
        "range": [parseInt($(this).find(".indValueStart").val()), parseInt($(this).find(".indValueEnd").val())],
        "color": $(this).find(".indColor").val(),
      })
    })
    return {dataValue}
  }
  function changeOrder(){
    var val = $(this).val();
    let chart_id = $(this).attr("data-chart-id");
    let data_config_xaxis_title  = $(`#${chart_id}`).attr("data-config_x_axis_title")
    let data_config_yaxis_title  = $(`#${chart_id}`).attr("data-config_y_axis_title")
    let mappingDict = JSON.parse($(this).attr("mappingDict"))
    let datatype_dict = JSON.parse($(this).attr("datatype_dict"))
    var id = chart_id.split('card')[0];
    var idOrderModal = id + 'orderModalButton'
    var graph_subtype = $('#' + chart_id).attr("data-subtype");
    var x_axis = $('#' + chart_id).attr("data-xaxis");
    var y_axis = $('#' + chart_id).attr("data-yaxis");
    var tester = document.getElementById(id);
    let order_type = $(this).attr("order_type");
    if(order_type == undefined || order_type == ''){
      order_type = "Vertical"
    }
    var order = "category ascending";
    var old_layout = $('#' + chart_id).attr("data-layout");
      old_layout = JSON.parse(old_layout);
    var layout
    var data_data = $('#' + chart_id).attr("data-data");
    data_data = JSON.parse(data_data);
    if(val == "cust"){
      $('#' + idOrderModal).css('display', 'block')
    }
    else{
      $('#' + idOrderModal).css('display', 'none')
      if(val == "asc") order = "category ascending";
      else if( val == "desc") order = "category descending"

      if(order_type == "Vertical"){
        layout = {
          xaxis: {
            title: {
                standoff: 20,
                text: data_config_xaxis_title?data_config_xaxis_title:fieldToVerbose(x_axis, mappingDict), font: {
                    family: "Arial"
                }
            },
            categoryorder : order,
            showgrid: false, 'automargin': true, font: {
                family: "Arial"
            }
          },
        }
          old_layout.xaxis = layout.xaxis;
      }
      else if(order_type == "Horizontal"){
        layout = {
          yaxis: {
            title: {
                standoff: 20,
                text: data_config_yaxis_title?data_config_yaxis_title:fieldToVerbose(y_axis, mappingDict), font: {
                    family: "Arial"
                }
            },
            categoryorder : order,
            showgrid: false, font: {
                family: "Arial"
            }, tickangle: 45,
            automargin: true
        },
        }
          old_layout.yaxis = layout.yaxis
      }

    if(graph_subtype == 'Bar_Grouped_and_Line' || graph_subtype == 'Bar_Stacked_and_Line'){
      var x_axisdata = data_data[0].x
      var x_axisdata2 = JSON.parse(JSON.stringify(data_data[0].x));
      x_axisdata2.sort()
      if(val == "desc"){
        x_axisdata2.reverse()
      }
      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, x_axisdata2, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [x_axisdata2], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = x_axisdata2
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }

      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', x_axisdata2)
    }
    else if(graph_subtype == 'Vertical_Line_Stacked' || graph_subtype == 'Vertical_Area_Stacked'){
      var x_axisdata = data_data[0].x
      var x_axisdata2 = JSON.parse(JSON.stringify(data_data[0].x));
      var y_axisdata = data_data[0].y
      x_axisdata2.sort()
      if(val == "desc"){
        x_axisdata2.reverse()
      }
      var y_axisdata2 = createOrderedArray(x_axisdata, x_axisdata2, y_axisdata)
      if(y_axisdata2 == []) return
      var update1 = { x: [x_axisdata2], y: [y_axisdata2], text: [y_axisdata2] }
      Plotly.restyle(tester, update1, [0])
      data_data[0].x = x_axisdata2
      data_data[0].y = y_axisdata2
      data_data[0].text = y_axisdata2

      var second_columndata = data_data[1].y
      var second_columndata2 = createOrderedArray(x_axisdata, x_axisdata2, second_columndata)
      if(second_columndata2 == []) return
      var update2 = { x: [x_axisdata2], y: [second_columndata2], text: [second_columndata2] }
      Plotly.restyle(tester, update2, [1])
      data_data[1].x = x_axisdata2
      data_data[1].y = second_columndata2
      data_data[1].text = second_columndata2

      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', x_axisdata2)
    }
    else if(graph_subtype == 'Horizontal_Bar' || graph_subtype == 'Horizontal_Area'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var y_axisdata2 = JSON.parse(JSON.stringify(data_data[0].y));
      y_axisdata2.sort()
      if(val == "desc"){
        y_axisdata2.reverse()
      }
      var x_axisdata2 = createOrderedArray(y_axisdata, y_axisdata2, x_axisdata)
      if(x_axisdata2 == []) return
      var update = { x: [x_axisdata2], y: [y_axisdata2], text: [x_axisdata2] }
      Plotly.restyle(tester, update)
      data_data[0].x = x_axisdata2
      data_data[0].y = y_axisdata2
      data_data[0].text = x_axisdata2
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', y_axisdata2)
    }
    else if(graph_subtype == 'Horizontal_Bar_Stacked' || graph_subtype == 'Horizontal_Bar_Grouped'){
      var y_axisdata = data_data[0].y
      var y_axisdata2 = JSON.parse(JSON.stringify(data_data[0].y));
      y_axisdata2.sort()
      if(val == "desc"){
        y_axisdata2.reverse()
      }
      for (let i = 0; i < data_data.length; i++) {
        var x_axisdata = data_data[i].x
        var x_axisdata2 = createOrderedArray(y_axisdata, y_axisdata2, x_axisdata)
        if(x_axisdata2 == []) return
        var update = { x: [x_axisdata2], y: [y_axisdata2], text: [x_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = x_axisdata2
        data_data[i].y = y_axisdata2
        data_data[i].text = x_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', y_axisdata2)
    }
    else if(graph_subtype == 'Horizontal_Area_Stacked'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var y_axisdata2 = JSON.parse(JSON.stringify(data_data[0].y));
      y_axisdata2.sort()
      if(val == "desc"){
        y_axisdata2.reverse()
      }
      var x_axisdata2 = createOrderedArray(y_axisdata, y_axisdata2, x_axisdata)
      if(x_axisdata2 == []) return
      var update = { x: [x_axisdata2], y: [y_axisdata2], text: [x_axisdata2] }
      Plotly.restyle(tester, update)
      data_data[0].x = x_axisdata2
      data_data[0].y = y_axisdata2
      data_data[0].text = x_axisdata2

      var second_columndata = data_data[1].x
      var second_columndata2 = createOrderedArray(y_axisdata, y_axisdata2, second_columndata)
      if(second_columndata2 == []) return
      var update2 = { x: [second_columndata2], y: [y_axisdata2], text: [second_columndata2] }
      Plotly.restyle(tester, update2, [1])
      data_data[1].x = second_columndata2
      data_data[1].y = y_axisdata2
      data_data[1].text = second_columndata2

      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', y_axisdata2)
    }
    else if(graph_subtype == 'Line' || graph_subtype == 'Vertical_Bar' || graph_subtype == 'Scatter_with_Straight_Lines_and_Markers' || graph_subtype == 'Scatter' || graph_subtype == 'Stepped_Line' || graph_subtype == 'Vertical_Area'){
      var x_axisdata = data_data[0].x
      var x_axisdata2 = JSON.parse(JSON.stringify(data_data[0].x));
      var y_axisdata = data_data[0].y
      x_axisdata2.sort()
      if(val == "desc"){
        x_axisdata2.reverse()
      }
      var y_axisdata2 = createOrderedArray(x_axisdata, x_axisdata2, y_axisdata)
      if(y_axisdata2 == []) return
      var update = { x: [x_axisdata2], y: [y_axisdata2], text: [y_axisdata2] }
      Plotly.restyle(tester, update)

      data_data[0].x = x_axisdata2
      data_data[0].y = y_axisdata2
      data_data[0].text = y_axisdata2
      $('#' + idOrderModal).attr('data-sorted-values', x_axisdata2)
    }
    else if (graph_subtype == 'Vertical_Bar_Grouped' || graph_subtype == 'Vertical_Bar_Stacked' || graph_subtype == 'Multiple_Line_Chart'){
      var x_axisdata = data_data[0].x
      var x_axisdata2 = JSON.parse(JSON.stringify(data_data[0].x));
      x_axisdata2.sort()
      if(val == "desc"){
        x_axisdata2.reverse()
      }
      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, x_axisdata2, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [x_axisdata2], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = x_axisdata2
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', x_axisdata2)

    }
    else if (graph_subtype == 'Bar_Stacked_and_Multiple_Line'){
      var x_axisdata = data_data[0].x
      var x_axisdata2 = JSON.parse(JSON.stringify(data_data[0].x));
      x_axisdata2.sort()
      if(val == "desc"){
        x_axisdata2.reverse()
      }
      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, x_axisdata2, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [x_axisdata2], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = x_axisdata2
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
      $('#' + idOrderModal).attr('data-sorted-values', x_axisdata2)

    }
      Plotly.relayout(tester, layout)
      if(order_type == "Vertical"){
        if(datatype_dict[x_axis] == 'DateField' || datatype_dict[x_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, chart_id)
      }
      else if(order_type == "Horizontal"){
        if(datatype_dict[y_axis] == 'DateField' || datatype_dict[y_axis] == 'DateTimeField') changeAxisType(val, order_type, tester, old_layout, layout, chart_id)
    }
  $('#' + chart_id).attr("data-layout", JSON.stringify(old_layout))
    }
  }

  function orderModal(){
    let o_id = $(this).attr("data-modal_id");
    let sorted_string = $(this).attr("data-sorted-values")
    let order_type = $(this).attr("order_type");
    populateOrderModal(o_id,sorted_string, order_type)
    $("#"+o_id).css("display","block");
  }

  function populateOrderModal(o_id , sorted_string, order_type = "Vertical"){
    var x_axisdata = $("#"+o_id).attr('data-x_axis')
    var y_axisdata = $("#"+o_id).attr('data-y_axis')
    var sorted_array = sorted_string.trim().split(",")

    $("#"+o_id).find('#' + o_id + 'Table').find('tbody').empty()
    if(order_type == "Vertical"){
      var data_array = x_axisdata.trim().split(",")
    }
    else if(order_type == "Horizontal"){
      var data_array = y_axisdata.trim().split(",")
    }
      var col_len = data_array.length
      var count = 0
      html_code = ''
      if(sorted_string.length > 0){
        for(let i = 0 ; i < sorted_array.length ; i++){
          count++
          html_code = html_code + `<tr style="text-align:center">`
          html_code = html_code + `<td><span>${sorted_array[i]}</span></td>`
          html_code = html_code + `<td><input oninput='validation.call(this)' class='input form-control' style='width:55px;margin:auto;text-align:center' minimum=1 maximum='${col_len}' type="integer" value="${count}"</span></td>`
          html_code = html_code +`</tr>`
        }
      }
      for(let i = 0 ; i < data_array.length ; i++){
        if(!(sorted_array.includes(data_array[i]))){
          count++
          html_code = html_code + `<tr style="text-align:center">`
          html_code = html_code + `<td><span>${data_array[i]}</span></td>`
          html_code = html_code + `<td><input oninput='validation.call(this)' class='input form-control' style='width:55px;margin:auto;text-align:center' minimum=1 maximum='${col_len}' type="integer" value="${count}"</span></td>`
          html_code = html_code +`</tr>`
        }
      }
      $("#"+o_id).find('#' + o_id + 'Table').find('tbody').append(html_code)


  }
  function validation() {
    if(parseInt($(this).val()) < 1) {
      $(this).val(1).trigger('change')
    }
    if(parseInt($(this).val()) > parseInt($(this).attr('maximum'))) {
      $(this).val(parseInt($(this).attr('maximum'))).trigger('change')
    }
  }

  function closeOrderModal() {
    let o_id = $(this).attr("data-modal_id");
    $("#"+o_id).find('#' + o_id + 'Table').find('tbody').empty()
    $("#"+o_id).css("display","none");
  }

  function saveOrderModal() {
    let o_id = $(this).attr("data-modal_id");
    let mappingDict = JSON.parse($(this).attr("mappingDict"))
    var order_data = {}
    var validation = 0
    var len = $("#"+o_id+"Table").find('tbody').find('tr').length;
    for(let j = 0; j < len; j++) {
      validation = 0
      var dummy = parseInt($("#"+o_id+"Table").find('tbody').find('tr').eq(j).find('td').eq(1).find('input').val());
      for(let i = 0; i < len; i++) {
        var dummy1 = parseInt($("#"+o_id+"Table").find('tbody').find('tr').eq(i).find('td').eq(1).find('input').val())
        if (dummy == dummy1) {
          validation = validation + 1;
          if(validation > 1) {
            break;
          }
        }
      }
      if(validation > 1) {
        break;
      }
    }
    if(validation < 2) {
      $("#"+o_id+"Table").find('tbody').find('tr').each(function() {
        if(parseInt($(this).find('td').eq(1).find('input').val())){
        order_data[$(this).find('td').eq(0).text()] = parseInt($(this).find('td').eq(1).find('input').val());
        }
      });
      var items = Object.keys(order_data).map(function(key) {
        return [key, order_data[key]];
      });
      items.sort(function(first, second) {
        return first[1] - second[1];
      });

      var x_axisdata = $("#"+o_id).attr('data-x_axis')
      var y_axisdata = $("#"+o_id).attr('data-y_axis')
      var order_type = $("#"+o_id+"Button").attr("order_type");
      if(order_type == undefined || order_type == ''){
        order_type = "Vertical"
      }
      if(order_type == "Vertical"){
        var data_array = x_axisdata.trim().split(",")
      }
      else if(order_type == "Horizontal"){
        var data_array = y_axisdata.trim().split(",")
      }
      data_array.sort()
      var data_sorted_values = ""
      for(let i = 0 ; i < items.length ; i++){
        data_sorted_values += items[i][0] + ','
      }
      data_sorted_values = data_sorted_values.substr(0, data_sorted_values.length - 1)
      var sel_array = data_sorted_values.trim().split(",")
      var sel_array2 = data_array.filter(
        function(i) {
            return this.indexOf(i) < 0;
        },
        sel_array
      );

      let chart_id = $("#"+o_id+"Button").attr("data-chart-id");
      let data_config_xaxis_title  = $(`#${chart_id}`).attr("data-config_x_axis_title")
      let data_config_yaxis_title  = $(`#${chart_id}`).attr("data-config_y_axis_title")
      let datatype_dict = JSON.parse($("#"+o_id+"Button").attr("datatype_dict"))
      var array = sel_array.concat(sel_array2)
      var id = chart_id.split('card')[0];
      var graph_subtype = $('#' + chart_id).attr("data-subtype");
      var x_axis = $('#' + chart_id).attr("data-xaxis");
      var y_axis = $('#' + chart_id).attr("data-yaxis");
      var tester = document.getElementById(id);
      var old_layout = $('#' + chart_id).attr("data-layout");
      old_layout = JSON.parse(old_layout);
      var data_data = $('#' + chart_id).attr("data-data");
      data_data = JSON.parse(data_data);
      if(order_type == "Vertical"){
        var layout = {
          xaxis: {
            title: {
                standoff: 20,
                text: data_config_xaxis_title?data_config_xaxis_title:fieldToVerbose(x_axis, mappingDict), font: {
                    family: "Arial"
                }
            },
            categoryorder : "array",
            categoryarray : array,
            showgrid: false, 'automargin': true, font: {
                family: "Arial"
            }
          },
        }
        old_layout.xaxis = layout.xaxis;
      }
      else if(order_type == 'Horizontal'){
        var layout = {
          yaxis: {
            title: {
                standoff: 20,
                text: data_config_yaxis_title?data_config_yaxis_title:fieldToVerbose(y_axis, mappingDict), font: {
                    family: "Arial"
                }
            },
            categoryorder : "array",
            categoryarray : array,
            showgrid: false, font: {
                family: "Arial"
            }, tickangle: 45,
            automargin: true
        },
        }
        old_layout.yaxis = layout.yaxis;
      }

      restylePlot(graph_subtype, data_data, array, tester, chart_id)
      Plotly.relayout(tester, layout)
      if(order_type == "Vertical"){
        if(datatype_dict[x_axis] == 'DateField' || datatype_dict[x_axis] == 'DateTimeField') changeAxisType($('#' + id +'axis_order').val(), order_type, tester, old_layout, layout, chart_id)
      }
      else if(order_type == "Horizontal"){
        if(datatype_dict[y_axis] == 'DateField' || datatype_dict[y_axis] == 'DateTimeField') changeAxisType($('#' + id +'axis_order').val(), order_type, tester, old_layout, layout, chart_id)
    }
      $('#' + chart_id).attr("data-layout", JSON.stringify(old_layout))
      $("#"+o_id+"Button").attr('data-sorted-values', data_sorted_values)
      $("#"+o_id).css("display","none");
    } else {
      Swal.fire({icon: 'warning',text:"Order cannot be the same." });
    }

  }

  function updateChart(chart_id , data_sorted_values){
    var array = data_sorted_values.trim().split(",")
    var id = chart_id.split('card')[0];
    var axisOrderType = $("#" + chart_id.replace("card","")+"axis_order").val()
    var graph_subtype = $('#' + chart_id).attr("data-subtype");
    var saveButton = $("#"+chart_id.replace("card","")+"orderModalSaveButton")
    let mappingDict = JSON.parse($(saveButton).attr("mappingDict"))
    let datatype_dict = JSON.parse($("#"+id+"orderModalButton").attr("datatype_dict"))
    var order_type = $(saveButton).attr("order_type");
    if(order_type == undefined || order_type == ''){
      order_type = "Vertical"
    }
    var x_axis = $('#' + chart_id).attr("data-xaxis");
    var y_axis = $('#' + chart_id).attr("data-yaxis");
    let data_config_xaxis_title  = $(`#${chart_id}`).attr("data-config_x_axis_title")
    let data_config_yaxis_title  = $(`#${chart_id}`).attr("data-config_y_axis_title")
    var tester = document.getElementById(id);
    var old_layout = $('#' + chart_id).attr("data-layout");
    old_layout = JSON.parse(old_layout);
    var data_data = $('#' + chart_id).attr("data-data");
    data_data = JSON.parse(data_data);
    var label_color =  old_layout.xaxis.title.font.color
    var label_fontsize =  old_layout.xaxis.title.font.size
    if (["category ascending", 'category descending'].includes(axisOrderType)) {
      if(order_type == "Vertical"){
        var layout = {
          xaxis: {
            title: {
                standoff: 20,
                text: data_config_xaxis_title?data_config_xaxis_title:fieldToVerbose(x_axis, mappingDict), font: {
                    family: "Arial",
                    color:label_color,
                    size:label_fontsize
                }
            },
            categoryorder : axisOrderType,
            showgrid: old_layout.xaxis.showgrid, 'automargin': true, font: {
                family: "Arial"
            }
          },
        }
        old_layout.xaxis = layout.xaxis;
      }
      else if(order_type == 'Horizontal'){
        var layout = {
          yaxis: {
            title: {
                standoff: 20,
                text: data_config_yaxis_title?data_config_yaxis_title:fieldToVerbose(y_axis, mappingDict), font: {
                    family: "Arial",
                    color:label_color,
                    size:label_fontsize
                }
            },
            categoryorder : axisOrderType,
            showgrid: old_layout.yaxis.showgrid, font: {
                family: "Arial"
            }, tickangle: 45,
            automargin: true
        },
        }
        old_layout.yaxis = layout.yaxis;
      }
    } else {
      if(order_type == "Vertical"){
        var layout = {
          xaxis: {
            title: {
                standoff: 20,
                text: data_config_xaxis_title?data_config_xaxis_title:fieldToVerbose(x_axis, mappingDict), font: {
                    family: "Arial",
                    color:label_color,
                    size:label_fontsize
                }
            },
            categoryorder : "array",
            categoryarray : array,
            showgrid: old_layout.xaxis.showgrid, 'automargin': true, font: {
                family: "Arial"
            }
          },
        }
        old_layout.xaxis = layout.xaxis;
      }
      else if(order_type == 'Horizontal'){
        var layout = {
          yaxis: {
            title: {
                standoff: 20,
                text: data_config_yaxis_title?data_config_yaxis_title:fieldToVerbose(y_axis, mappingDict), font: {
                    family: "Arial",
                    color:label_color,
                    size:label_fontsize
                }
            },
            categoryorder : "array",
            categoryarray : array,
            showgrid: old_layout.yaxis.showgrid, font: {
                family: "Arial"
            }, tickangle: 45,
            automargin: true
        },
        }
        old_layout.yaxis = layout.yaxis;
      }
    }
    restylePlot(graph_subtype, data_data, array, tester, chart_id)
    Plotly.relayout(tester, layout)
    if(order_type == "Vertical"){
      if(datatype_dict[x_axis] == 'DateField' || datatype_dict[x_axis] == 'DateTimeField') changeAxisType($('#' + id +'axis_order').val(), order_type, tester, old_layout, layout, chart_id)
    }
    else if(order_type == "Horizontal"){
      if(datatype_dict[y_axis] == 'DateField' || datatype_dict[y_axis] == 'DateTimeField') changeAxisType($('#' + id +'axis_order').val(), order_type, tester, old_layout, layout, chart_id)
  }
    $('#' + chart_id).attr("data-layout", JSON.stringify(old_layout))

  }

  function setAxisOrderValues(plotDict , id_axis_order, idOrderModal, order_type = 'Vertical'){
    var axis_order =''
    var axis_array = []
    var sorted_array = []
    if(order_type == 'Vertical'){
      axis_order = plotDict.layout.xaxis.categoryorder
      axis_array = plotDict.layout.xaxis.categoryarray
      sorted_array = plotDict.data[0].x
    }
    else if(order_type == 'Horizontal'){
      axis_order = plotDict.layout.yaxis.categoryorder
      axis_array = plotDict.layout.yaxis.categoryarray
      sorted_array = plotDict.data[0].y
    }
    sorted_array.sort()
    if(axis_order == 'category ascending') {
      $(`#${id_axis_order}`).val('asc')
      $(`#${idOrderModal}Button`).attr('data-sorted-values', sorted_array)
    }
    else if(axis_order == 'category descending'){
      $(`#${id_axis_order}`).val('desc')
      sorted_array.reverse()
      $(`#${idOrderModal}Button`).attr('data-sorted-values', sorted_array)
    }
    else if(axis_order == 'array'){
      $(`#${id_axis_order}`).val('cust')
      $(`#${idOrderModal}Button`).css('display', 'block')
      var data_sorted_values = ""
      for(let i = 0 ; i < axis_array.length ; i++){
        data_sorted_values += axis_array[i] + ','
      }
      data_sorted_values = data_sorted_values.substr(0, data_sorted_values.length - 1)
      $(`#${idOrderModal}Button`).attr('data-sorted-values', data_sorted_values)
    } else {
      $(`#${id_axis_order}`).val('').trigger("change")
      $(`#${idOrderModal}Button`).removeAttr('data-sorted-values')
    }
  }
  function triggerAxisOrderValues(plotDict , id_axis_order, idOrderModal, order_type = 'Vertical'){
    var axis_order =''
    var axis_array = []
    var sorted_array = []
    if(order_type == 'Vertical'){
      axis_order = plotDict.layout.xaxis.categoryorder
      axis_array = plotDict.layout.xaxis.categoryarray
      sorted_array = plotDict.data[0].x
    }
    else if(order_type == 'Horizontal'){
      axis_order = plotDict.layout.yaxis.categoryorder
      axis_array = plotDict.layout.yaxis.categoryarray
      sorted_array = plotDict.data[0].y
    }
    sorted_array.sort()
    if(axis_order == 'category ascending') {
      $(`#${id_axis_order}`).val('asc').trigger("change")
      $(`#${idOrderModal}Button`).attr('data-sorted-values', sorted_array)
    }
    else if(axis_order == 'category descending') {
      $(`#${id_axis_order}`).val('desc').trigger("change")
      sorted_array.reverse()
      $(`#${idOrderModal}Button`).attr('data-sorted-values', sorted_array)
    }
    else if(axis_order == 'array'){
      $(`#${id_axis_order}`).val('cust').trigger("change")
      $(`#${idOrderModal}Button`).css('display', 'block')
      var data_sorted_values = ""
      for(let i = 0 ; i < axis_array.length ; i++){
        data_sorted_values += axis_array[i] + ','
      }
      data_sorted_values = data_sorted_values.substr(0, data_sorted_values.length - 1)
      $(`#${idOrderModal}Button`).attr('data-sorted-values', data_sorted_values)
    } else {
      $(`#${id_axis_order}`).val('').trigger("change")
      $(`#${idOrderModal}Button`).removeAttr('data-sorted-values')
    }
  }

  function createOrderedArray(x_axisdata, x_axisdata2, y_axisdata){
    var y_axisdata2 = []
    for(let i = 0 ; i < x_axisdata2.length ; i++){
      let index = x_axisdata.indexOf(x_axisdata2[i])
      if(index != -1){
        y_axisdata2.push(y_axisdata[index])
      }
      else{
        return y_axisdata2
      }
    }
    return y_axisdata2
  }
  function restylePlot(graph_subtype, data_data, array, tester, chart_id){
    if(graph_subtype == 'Bar_Grouped_and_Line' || graph_subtype == 'Bar_Stacked_and_Line'){
      var x_axisdata = data_data[0].x
      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, array, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [array], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = array
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }
    }
    else if(graph_subtype == 'Vertical_Line_Stacked' || graph_subtype == 'Vertical_Area_Stacked'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var y_axisdata2 = createOrderedArray(x_axisdata, array, y_axisdata)
      if(y_axisdata2 == []) return
      var update1 = { x: [array], y: [y_axisdata2], text: [y_axisdata2] }
      Plotly.restyle(tester, update1, [0])
      data_data[0].x = array
      data_data[0].y = y_axisdata2
      data_data[0].text = y_axisdata2

      var second_columndata = data_data[1].y
      var second_columndata2 = createOrderedArray(x_axisdata, array, second_columndata)
      if(second_columndata2 == []) return
      var update2 = { x: [array], y: [second_columndata2], text: [second_columndata2] }
      Plotly.restyle(tester, update2, [1])
      data_data[1].x = array
      data_data[1].y = second_columndata2
      data_data[1].text = second_columndata2

      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
    }
    else if(graph_subtype == 'Horizontal_Bar' || graph_subtype == 'Horizontal_Area'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var x_axisdata2 = createOrderedArray(y_axisdata, array, x_axisdata)
      if(x_axisdata2 == []) return
      var update = { x: [x_axisdata2], y: [array], text: [x_axisdata2] }
      Plotly.restyle(tester, update)
      data_data[0].x = x_axisdata2
      data_data[0].y = array
      data_data[0].text = x_axisdata2
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
    }
    else if(graph_subtype == 'Horizontal_Bar_Stacked' || graph_subtype == 'Horizontal_Bar_Grouped'){
      var y_axisdata = data_data[0].y
      for (let i = 0; i < data_data.length; i++) {
        var x_axisdata = data_data[i].x
        var x_axisdata2 = createOrderedArray(y_axisdata, array, x_axisdata)
        if(x_axisdata2 == []) return
        var update = { x: [x_axisdata2], y: [array], text: [x_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = x_axisdata2
        data_data[i].y = array
        data_data[i].text = x_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
    }
    else if(graph_subtype == 'Horizontal_Area_Stacked'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var x_axisdata2 = createOrderedArray(y_axisdata, array, x_axisdata)
      if(x_axisdata2 == []) return
      var update = { x: [x_axisdata2], y: [array], text: [x_axisdata2] }
      Plotly.restyle(tester, update)
      data_data[0].x = x_axisdata2
      data_data[0].y = array
      data_data[0].text = x_axisdata2

      var second_columndata = data_data[1].x
      var second_columndata2 = createOrderedArray(y_axisdata, array, second_columndata)
      if(second_columndata2 == []) return
      var update2 = { x: [second_columndata2], y: [array], text: [second_columndata2] }
      Plotly.restyle(tester, update2, [1])
      data_data[1].x = second_columndata2
      data_data[1].y = array
      data_data[1].text = second_columndata2

      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))
    }
    else if(graph_subtype == 'Line' || graph_subtype == 'Vertical_Bar' || graph_subtype == 'Scatter_with_Straight_Lines_and_Markers' || graph_subtype == 'Scatter' || graph_subtype == 'Stepped_Line' || graph_subtype == 'Vertical_Area'){
      var x_axisdata = data_data[0].x
      var y_axisdata = data_data[0].y
      var y_axisdata2 = createOrderedArray(x_axisdata, array, y_axisdata)
      var marker1= data_data[0].marker
      if(y_axisdata2 == []) return
      var update = { x: [array], y: [y_axisdata2], text: [y_axisdata2],marker1 }
      Plotly.restyle(tester, update)
      data_data[0].x = array
      data_data[0].y = y_axisdata2
      data_data[0].text = y_axisdata2
    }
    else if (graph_subtype == 'Vertical_Bar_Grouped' || graph_subtype == 'Vertical_Bar_Stacked' || graph_subtype == 'Multiple_Line_Chart'){
      var x_axisdata = data_data[0].x

      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, array, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [array], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = array
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))

    }
    else if (graph_subtype == 'Bar_Stacked_and_Multiple_Line'){
      var x_axisdata = data_data[0].x
      for (let i = 0; i < data_data.length; i++) {
        var y_axisdata = data_data[i].y
        var y_axisdata2 = createOrderedArray(x_axisdata, array, y_axisdata)
        if(y_axisdata2 == []) return
        var update = { x: [array], y: [y_axisdata2], text: [y_axisdata2] }
        Plotly.restyle(tester, update, [i])
        data_data[i].x = array
        data_data[i].y = y_axisdata2
        data_data[i].text = y_axisdata2
      }
      $(`#${chart_id}`).attr('data-data', JSON.stringify(data_data))

    }
  }

  function changeAxisType(val , order_type = 'Vertical', tester, old_layout, layout, chart_id){
    var type =''
    if (val == 'asc' || val == 'desc' || val == 'cust') type = 'category'
    else type = 'date'
    if(order_type == "Vertical"){
      layout.xaxis.type = type
      old_layout.xaxis = layout.xaxis;
    }
    else if(order_type == "Horizontal"){
      layout.yaxis.type = type
      old_layout.yaxis = layout.yaxis;
    }
    Plotly.relayout(tester, layout)
    $('#' + chart_id).attr("data-layout", JSON.stringify(old_layout))
  }

  function changeIcon(){
    let chart_id = $(this).attr("data-chart-id");
    let img_id = $(this).attr("data-img-id");
    if(chart_id && img_id){
       var value = $(this).val();
       $('#' + chart_id).find('div.row').find('#' + img_id).attr("src", value);

     }
  }

  function goBack () {
    window.history.back()
  }

  function plotChartsAnalysis(calling = false, dic = {}, p_id = "", app_code = "", tab = false, slicerTabConnectObj = {}) {
    if($(this).attr("data-data") != undefined || calling) {
      let chartJson = "";
      let parentContainerID = "";
      let thresholdGuage = "";
      let parentId = "";
      let editType = "";
      if (calling == false){
        app_code = $(this).attr("app_code");
        chartJson=JSON.parse($(this).attr("data-data"))
        parentContainerID = JSON.parse($(this).attr("data-parentContainerID"))
        let configDic = JSON.parse($(this).attr("data-configdic"))
        let tabDict = configDic["tabDict"]
        let tabSlicerConfig = configDic["tabSlicerConfig"]
        let final_f_dict2 = configDic["final_f_dict2"]
        thresholdGuage = configDic["thresholdGuage"]
        let interaction = configDic["interaction"]
        let tab_ID = configDic["tab_ID"]
        parentId = configDic["parentId"]
        slicerTabConnectObj = JSON.parse($(this).attr("slicerTabConnectObj"))
      }
      if (calling){
        chartJson = dic["chartJson"]
        parentContainerID = p_id
        thresholdGuage = {}
        parentId = dic["parentId"]
        editType = dic["editType"];
      }

      $(this).removeAttr("data-data")
      $("#"+parentContainerID).attr("data-count",chartJson.length)
      let marginLeft = parseInt($("#"+parentContainerID).css("width"))
      if(chartJson.length != 0 && calling == false){
        $("#"+parentContainerID).append(`<i class="fa fa-spinner fa-pulse loadingSymbol" style="position:absolute;font-size: 100px;margin-left: 50%; margin-top:15%;z-index: 99999;"></i>`)
      }
      for(i in chartJson){
        let filters = chartJson[i].filters
        let filter_input_final = chartJson[i].filter_input_final
        let drange = chartJson[i].drange
        let plotType = chartJson[i].chartType;
        if(plotType=="Textbox"){
          let chartLength = parseInt($("#"+parentContainerID).attr("data-count"));
          chartLength --;
          $("#"+parentContainerID).attr("data-count",chartLength)
        }
        if(plotType=="Textbox"){
          if(!chartJson[i].hasOwnProperty('id_text_editor')) {
            $(`#${parentContainerID}`).append(`<div class="small-box commentboxcard" data-id="${id_text_editor}" id = "${id_text_editor}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};" >
                <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                  <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                  <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                  <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                </div>
              <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
              ${chartJson[i].textboxvalue}
              </div>
            </div>`)
          } else {
            let id_text_editor =  chartJson[i].id_text_editor

            $(`#${parentContainerID}`).append(`
            <div class="small-box commentboxcard" data-id="${id_text_editor}" id = "${id_text_editor}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};">
              <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
              </div>
              <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
              ${chartJson[i].textboxvalue}
              </div>
            </div>`);

          }
          $(".commentboxcard").resizable();
          $('.contentEditable').each(function () {
              $(this).on('click', function () {
                $(this).attr("contenteditable", "true")
                $(this).focus()
              })
              $(this).focusout(function () {
                  let content = this.innerText
                  content = content.trim()
                  if (content.length == 0){
                    this.innerText = "Enter text here."
                    $(this).removeAttr("contenteditable");
                    $(this).trigger("click")
                  }
                  else{
                  $(this).removeAttr("contenteditable");
                  }
              })
            })
              $(`#${parentContainerID}`).find('.deleteCommentBox').click(function () {
                  $(this).parent().parent().remove()
              })
              $(`#${parentContainerID}`).find(".commentboxcard").draggable({
                  cancel: '',
                  containment: "parent",
              });
        } else{
          let highlightcolumnheaderscolorlist = chartJson[i].highlightcolumnheaderscolorlist;
          let tab_id = parentContainerID
          let height = chartJson[i].height;
          let width = chartJson[i].width;
          let position = chartJson[i].position;
          let config_gridlines = chartJson[i].config_gridlines;
          let layout = chartJson[i].layout;
          let graph_subtype = chartJson[i].graph_subtype;
          let chartDivId = chartJson[i].id;
          let graphdata = chartJson[i].data;
          let x_axis = chartJson[i].x_axis;
          let y_axis = chartJson[i].y_axis;
          let pivot_report_data = chartJson[i].pivot_report_data

          let computed_number = chartJson[i].computed_number;
          let img_icon = chartJson[i].img_icon;
          let is_title = chartJson[i].is_title;
          let title_value = chartJson[i].title_value;
          let operation_n = chartJson[i].operation_n;
          let agg_distinct = chartJson[i].agg_distinct;

          let second_column = chartJson[i].second_column;
          let operation = chartJson[i].operation;
          let operation_line = chartJson[i].operation_line;
          let titlefontsize = chartJson[i].titlefontsize;
          let valuefontsize = chartJson[i].font_size;
          let chart_title = chartJson[i].chart_title;
          let data_value = chartJson[i].data_value;
          let config_valuesize = chartJson[i].config_valuesize;
          let config_titlesize = chartJson[i].config_titlesize;
          let config_data_value = chartJson[i].config_data_value;
          let backgroundcolor = chartJson[i].backgroundcolor;
          let changed_text = chartJson[i].changed_text;
          let chartheader = chartJson[i].chartheader;
          let filters=JSON.stringify(chartJson[i].filters);
          let line_column=chartJson[i].line_column;
          let tableName=chartJson[i].tableName;
          let color = chartJson[i].color;
          let plot_bg_color = chartJson[i].plot_bg_color;
          let global_bg = chartJson[i].global_bg;
          let grad_color = chartJson[i].grad_color;
          let global_bgcolor = chartJson[i].global_bgcolor;
          let global_ind_color = chartJson[i].global_ind_color;
          let config_color = chartJson[i].config_color;
          let config_labels = chartJson[i].config_labels;
          let config_xrange = chartJson[i].config_xrange;
          let config_yrange = chartJson[i].config_yrange;
          let config_x_axis_title = chartJson[i].config_x_axis_title;
          let legend_x = chartJson[i].legend_x;
          let legend_y = chartJson[i].legend_y;
          let config_label_placement = chartJson[i].config_label_placement;
          let config_y_axis_title = chartJson[i].config_y_axis_title;
          let config_element_color = chartJson[i].config_element_color;
          let element_label = chartJson[i].element_label;
          let total_y = chartJson[i].total_y;
          let total_L = chartJson[i].total_L;
          let data_shadowon = chartJson[i].data_shadowon;
          let data_shadecolor = chartJson[i].data_shadecolor;
          let data_shadowX = chartJson[i].data_shadowX;
          let data_shadowY = chartJson[i].data_shadowY;
          let data_shadowblurry = chartJson[i].data_shadowblurry;
          let data_borderColor = chartJson[i].data_borderColor;
          let data_borderStyle = chartJson[i].data_borderStyle;
          let data_borderon = chartJson[i].data_borderon;
          let data_borderThickness = chartJson[i].data_borderThickness;
          let data_shadowThick = chartJson[i].data_shadowThick;
          let header_fontsize = chartJson[i].header_fontsize;
          let header_fontweight = chartJson[i].header_fontweight;
          let header_fontstyle = chartJson[i].header_fontstyle;
          let header_alignment = chartJson[i].header_alignment;
          let header_color = chartJson[i].header_color;
          let label_color = chartJson[i].label_color;
          let label_fontsize =  chartJson[i].label_fontsize;
          let header_bgcolor = chartJson[i].header_bgcolor;
          let conditional_table = chartJson[i].conditional_table;
          let columnAlignmentSelectedOptions = chartJson[i].columnAlignmentSelectedOptions;
          let FormattersConfiguration = chartJson[i].FormattersConfiguration;
          let slicerColumnId = tab_id.replace("analysisrow", "selectSlicerConfig_")
          let slicerColumnValue = []
          let slicerColumn = []
          if(chartJson[i]["app_code"] != undefined){
            app_code = chartJson[i]["app_code"];
          } else {
            if (calling && tab == false){
              app_code = "";
            }
          }

          for (let i = 0; i < $(`.${slicerColumnId}`).length; i++) {
              slicerColumnValue.push($(`.${slicerColumnId}`).eq(i).val());

            if( !(slicerTabConnectObj[chartDivId+"card"].includes($(`.${slicerColumnId}`).eq(i).attr("data-slicerColumn")))){
              slicerColumn.push($(`.${slicerColumnId}`).eq(i).attr("data-slicerColumn"))
            }
          }
          let plotDict = {"thresholdConfig":thresholdGuage, 'is_title':is_title,'title_value':title_value,"element_id":parentId,"pr_code":windowLocation.split("/")[2],"conditional_table":conditional_table,"img_icon" : img_icon, "header_alignment":header_alignment,"header_fontstyle":header_fontstyle,"header_fontsize":header_fontsize,"header_fontweight":header_fontweight, "header_color":header_color,"header_bgcolor":header_bgcolor,"data_shadowon":data_shadowon, "data_shadecolor":data_shadecolor, "data_shadowX":data_shadowX, "data_shadowY":data_shadowY, "data_shadowblurry":data_shadowblurry, "data_shadowThick":data_shadowThick, "data_borderColor":data_borderColor, "data_borderStyle":data_borderStyle, "data_borderon":data_borderon, "data_borderThickness":data_borderThickness,'total_y':total_y,'total_L':total_L,'color':color,'plot_bg_color':plot_bg_color,'global_bg':global_bg,'grad_color':grad_color,'global_bgcolor':global_bgcolor,'global_ind_color':global_ind_color,"element_label":element_label,"config_element_color":config_element_color,"config_data_value":config_data_value,"config_valuesize":config_valuesize,"config_titlesize":config_titlesize, "config_label_placement":config_label_placement,"legend_x":legend_x,"legend_y":legend_y,'computed_number':computed_number,'operation_n':operation_n,"agg_distinct":agg_distinct, "operation": operation, "operation_line": operation_line, "tableName":tableName, "filters":filters,"line_column":line_column,"chartheader": chartheader, "chart_title": chart_title,"data_value":data_value, "pivot_report_data":pivot_report_data, "x_axis": x_axis, "y_axis": y_axis, "second_column": second_column,  'graph_subtype': graph_subtype, 'tab_id': tab_id, 'height': height, 'width': width, 'data': graphdata, 'layout': layout, 'chartDivId': chartDivId, "position": position, "backgroundcolor": backgroundcolor, "titlefontsize": titlefontsize, "valuefontsize": valuefontsize,"titlefontsize": titlefontsize, "config_color":config_color,"config_xrange":config_xrange,"config_yrange":config_yrange,"config_gridlines":config_gridlines,"config_labels":config_labels,"config_x_axis_title":config_x_axis_title,"config_y_axis_title":config_y_axis_title,"changed_text": changed_text,"filters":filters,'filter_input_final': JSON.stringify(filter_input_final), 'drange': JSON.stringify(drange), 'columnAlignmentSelectedOptions': columnAlignmentSelectedOptions, 'FormattersConfiguration':FormattersConfiguration,"highlightcolumnheaderscolorlist":highlightcolumnheaderscolorlist}
          let y = false;
          if (editType == "Disable"){
            y = true;
          }
          plotFunction(plotDict, slicerColumn=slicerColumn, slicerColumnValue=slicerColumnValue, slicerColumnId=slicerColumnId,existingDivId=chartDivId, app_code_ = app_code, disable = y)

          slicerChangeUpdatePlots(app_code);
        }

      }

      var tabID = parentContainerID.replace("analysisrow", "");
      $(`#analysisPDF${tabID}`).click(async function () {
        tabno = $(this)[0].id.split('F')[1]
        function sleep (ms) {
          return new Promise(resolve => setTimeout(resolve, ms))
        }
        $(this).html('<i class="fa fa-spinner fa-spin"></i> Loading')
        $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'none')
        $(this).parent().attr('data-html2canvas-ignore', true)
        $('.nav-tabs').attr('data-html2canvas-ignore', true)
        $(`#${$(this).parent().parent().next().attr('id')}`).css('border', 'none')
        const layoutold = $(`#${$(this).parent().parent().next().attr('id')}`).attr('data-layout')
        $(document).scrollTop(0)
        await sleep(1000)
        const pagesection = $(`#analysisrow${tabno}`).parent().parent().parent()
        const HTMLWidth = pagesection.width()
        const HTMLHeight = pagesection.height()
        const topleftmargin = 15
        const PDFWidth = HTMLWidth + (topleftmargin * 2)
        const PDFHeight = (PDFWidth * 1.2) + (topleftmargin * 2)
        let canvasimageheight = ''
        let canvasimagewidth = ''
        pdfName = 'PDF'
        const wid = $(`#analysisrow${tabno}`).parent().parent().parent()[0].offsetWidth
        const hei = $(`#analysisrow${tabno}`).parent().parent().parent()[0].offsetHeight
        await html2canvas($(`#analysisrow${tabno}`).parent().parent().parent()[0], { useCORS: true,  allowTaint: true }).then(function (canvas) {
          canvasimageheight = $(`#analysisrow${tabno}`).height()
          canvasimagewidth = $(`#analysisrow${tabno}`).width()
          const imgData = canvas.toDataURL('image/svg')
          const doc = new jsPDF('l', 'px', [wid, hei])
          doc.addImage(imgData, 'SVG', 0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height)
          doc.save(pdfName)
          $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'block')
          $(`#${tabDict.pdfButtonID}`).html('<i class="fa fa-file-pdf-o"></i>&nbsp;PDF')
        })
        $(this).empty()
        $(this).html('<i class="fa fa-file-pdf-o"></i>&nbsp;PDF')
        if (String(layoutold) !== 'No layout') {
          $(`#${$(this).parent().parent().next().attr('id')}`).css('border', 'solid black 0.1px')
        }
        $('.nav-tabs').removeAttr('data-html2canvas-ignore')
        $(this).parent().removeAttr('data-html2canvas-ignore')
      });

      $(this).attr('data-tabLoaded', 'true');
    }
  }

  function fetchAnalysisSlicer(tabSlicerConfig, analysisTabID, tabNo, app_code = "") {
    let analysis_Tab_ID=[]
    let tab_No=[]
    analysis_Tab_ID.push(analysisTabID)
    tab_No.push(tabNo)
    for (let i=0;i<analysis_Tab_ID.length;i++){
    $(`#tab${analysis_Tab_ID[i]}${tab_No[i]}`).find('.card-tools.tabCardTools').empty();
              $(`#tab${analysis_Tab_ID[i]}${tab_No[i]}`).find(".card-tools.tabCardTools").append(
                  `<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment${analysis_Tab_ID[i]}${tab_No[i]}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;        <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader${analysis_Tab_ID[i]}${tab_No[i]}" id='analysisPDF${analysis_Tab_ID[i]}${tab_No[i]}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>          <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader${analysis_Tab_ID[i]}${tab_No[i]}" id='slicerConfig${analysis_Tab_ID[i]}${tab_No[i]}' data-toggle="modal" data-target="#slicerConfigModal${analysis_Tab_ID[i]}${tab_No[i]}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button><button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader${analysis_Tab_ID[i]}${tab_No[i]}" id='gridLines${analysis_Tab_ID[i]}${tab_No[i]}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>`
                );
              }
    var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
    $.ajaxSetup({
        beforeSend: function (xhr, settings) {
            xhr.setRequestHeader("X-CSRFToken", ctoken);
        }
    });
    if (tabSlicerConfig["slicerTable"].length && tabSlicerConfig["slicerParameter"].length) {
      $.ajax({
          url: `/users/${urlPath}/processGraphModule/`,
          data: {
              'tab_slicer_config': JSON.stringify(tabSlicerConfig),
              'element_id': analysisTabID,
              'tab_id': (tabNo),
              'app_code': app_code,
              'operation': 'saveAnalysisSlicerConfigL3',
          },
          type: "POST",
          dataType: "json",
          success: function (data) {
              var analysisSlicerElementId = data.elementID;
              var analysisSlicerTabId = data.slicer_tab_id;
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').empty();
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(`<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;        <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>          <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button><button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>`);

              let tabSlicerConfigOutput = data[analysisSlicerTabId];
              let analysis_additional_config = tabSlicerConfigOutput.analysis_additional_config;
              if (analysis_additional_config == "slicer_config") {
                  let slicerTables = tabSlicerConfigOutput.slicerTable;
                  let slicerParameters = tabSlicerConfigOutput.slicerParameter;
                  let mapDict = tabSlicerConfigOutput.mappingDict
                  let slicerParameterValues = tabSlicerConfigOutput.slicer_parameter_values;
                  let slicerBooleans = tabSlicerConfigOutput.slicerBoolean;
                  let slicerReloadValue = tabSlicerConfigOutput.slicerReload;
                  let multipleSlicer = tabSlicerConfigOutput.multipleSlicer;
                  var html = '';
                  for (let i = 0; i < slicerParameterValues.length; i++) {
                      let attr_ = 'data-value = ""'
                      let multiple = "";
                      if (slicerReloadValue != undefined) {
                          if (slicerReloadValue.length != 0) {
                              attr_ = 'data-value' + `= '${JSON.stringify(slicerReloadValue[i])}'`
                          }
                      }
                      if (multipleSlicer != undefined) {
                          if (multipleSlicer.length > 0) {
                              if (multipleSlicer[i]) {
                                  multiple = "multiple";
                              }
                          }
                      }
                      html = html + `
                <div class="form-inline" style="margin-bottom:5px;text-align:left;">
                <span class="text-primary" margin-right:10px; margin-left:10px;">${mapDict[i][slicerParameters[i]]}:</span>
                <select class="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId} select2 form-control slicerParamValue${analysisSlicerElementId}" data-tab="${analysisSlicerTabId}" data-slicertable="${slicerTables[i]}" data-slicerColumn= "${slicerParameters[i]}" ${attr_} data-id="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}" style="width:150px;display:inline-block;" ${multiple}>`
                      if (slicerBooleans != undefined) {
                          if (slicerBooleans.length != 0) {
                              if (slicerBooleans[i] == 'True') {
                                  html = html + `<option value="" selected>All</option>`
                              }
                          }
                      }
                      for (let slc_val = 0; slc_val < slicerParameterValues[i].length; slc_val++) {
                          if (slicerParameterValues[i][slc_val] != '') {
                              html = html + `<option value="${slicerParameterValues[i][slc_val]}">${slicerParameterValues[i][slc_val]}</option>`
                          }
                      }
                      html = html +
                          `</select>
                </div>
                `
                  }
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(html);
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').select2();
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("max-height", "55px");
                  $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("overflow-y", "scroll");
                  for (let i = 0; i < slicerReloadValue.length; i++) {
                    if (slicerReloadValue[i]) {
                      $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find(`.selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}`).eq(-1).val(slicerReloadValue[i]).trigger('select2:select');
                      $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find(`.selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}`).eq(-1).val(slicerReloadValue[i]).trigger('change');
                    }
                  }
              }
              slicerChangeUpdatePlots(app_code = app_code);
              $(`#analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}`).click(async function () {
                  function sleep(ms) {
                      return new Promise(resolve => setTimeout(resolve, ms));
                  }
                  var buttonText = $(this).html()
                  $(this).html(`<i class="fa fa-spinner fa-pulse"></i> Loading`);
                  $(this).parent().attr("data-html2canvas-ignore", true);
                  $('.nav-tabs').attr("data-html2canvas-ignore", true);
                  $(`#${$(this).parent().parent().next().attr('id')}`).css('border', 'none')
                  var layout_old = $(`#${$(this).parent().parent().next().attr('id')}`).attr('data-layout')
                  $('body').css('pointer-events', 'none')
                  $('body').css('background-color', 'black')
                  $('body').css('opacity', 0.5)
                  $('body').css('overflow-y', 'hidden')
                  $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'none')
                  $(document).scrollTop(0);
                  await sleep(1000);
                  page_section = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent();
                  HTML_Width = page_section.width();
                  HTML_Height = page_section.height();
                  top_left_margin = 5;
                  PDF_Width = HTML_Width + (top_left_margin * 2);
                  PDF_Height = (PDF_Width * 1.2) + (top_left_margin * 2);
                  pdfName = $(`#${$(this).attr('data-tabHeaderID')}`).text()

                  var wid = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0].offsetWidth
                  var hei = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0].offsetHeight
                  await html2canvas($(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0], { allowTaint: true }).then(function (canvas) {
                      canvas_image_height = HTML_Height
                      canvas_image_width = HTML_Width
                      var imgData = canvas.toDataURL('image/png');
                      var doc = new jsPDF("l", "px", [wid, hei]);
                      doc.addImage(imgData, 'PNG', 0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height);
                      doc.save(pdfName);
                      $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display', 'inline-block')
                  });
                  $(this).empty();
                  $(this).html(buttonText);
                  if (layout_old != "No layout") {
                    $(`#${$(this).parent().parent().next().attr('id')}`).css('border', "solid black 0.1px")
                  }
                  $('.nav-tabs').removeAttr("data-html2canvas-ignore");
                  $(this).parent().removeAttr("data-html2canvas-ignore");
                  $('body').css('pointer-events', '')
                  $('body').css('background-color', '')
                  $('body').css('opacity', '')
                  $('body').css('overflow-y', '')
              })
              $(`#AddComment${analysisSlicerElementId}${analysisSlicerTabId}`).click(function () {
                  var id_ = ('analysisEditor' + Math.random()).replace('.', "");
                  $(this).parent().parent().next().append(`
                    <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                      <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                        <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                        <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                        <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                      </div>
                      <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                      </div>
                    </div>`)
                  $(".commentboxcard").resizable();
                  $('.contentEditable').each(function () {
                      $(this).on('click', function () {
                          $(this).attr("contenteditable", "true")
                          $(this).focus()
                      })
                      $(this).focusout(function () {
                          var content = this.innerText
                          content = content.trim()
                          if (content.length == 0) {
                              this.innerText = "Enter text here."
                              $(this).removeAttr("contenteditable");
                              $(this).trigger("click")
                          }
                          else {
                              $(this).removeAttr("contenteditable");
                          }
                      })
                  })
                  $('.deleteCommentBox').click(function () {
                      $(this).parent().parent().remove()
                  })
                  $(".commentboxcard").draggable({
                      cancel: '',
                      containment: "parent",
                  });
              })
          },
          error: function () {
              Swal.fire({ icon: 'error', text: 'Error! Failure in fetching the columns. Please try again.' });
          }
      });
    }
}

function fetchSlicerParams(app_code = ""){
  $(".analysisSlicerTable").off('select2:select').on('select2:select', function(){
     if (app_code == ""){
      if($("body").find("div").eq(0).attr("app_code") != undefined){
        app_code = $("body").find("div").eq(0).attr("app_code")
      } else if($(this).closest(".chartDivSection").attr("app_code") != undefined){
        app_code = $(this).closest(".chartDivSection").attr("app_code");
      }
    }
    let tableNameSlicer = $(this).val();
    let closestAnalysisParameter = $(this).parent().parent().find(".form-group").eq(1).find(".analysisSlicerParameter");
    if (tableNameSlicer != "") {
      let url_string = window.location.pathname
      let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
      let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
      let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
      let app_code2 = url_string.substring(f_occ+1,s_occ)
      let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
      if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
        current_dev_mode2 = 'User'
      }
      $.ajax({
        url: `/users/${urlPath}/processGraphModule/`,

        data: {
          'operation': 'dropFieldList',
          'app_code': app_code,
          'tableName':tableNameSlicer,
        },
        type: "POST",
        dataType: "json",
        success: function (data) {
          if (data.fieldList.length > 0) {
            closestAnalysisParameter.empty();
            closestAnalysisParameter.append("<option value=''>Select slicer parameter</option>");
            for (var i = 0; i < data.fieldList.length; i++) {
              closestAnalysisParameter.append(new Option(data.fieldList[i], data.fieldNameList[i]));
            }
            if(closestAnalysisParameter.attr('data-slicerParam') != undefined){
              var slicerParameter = closestAnalysisParameter.attr('data-slicerParam')
              closestAnalysisParameter.val(slicerParameter).trigger('change');
              closestAnalysisParameter.removeAttr('data-slicerParam')
            }
          }
        },
        error: function () {
          Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
        }
      });
    } else {
      closestAnalysisParameter.empty();
      closestAnalysisParameter.append("<option value=''>Select slicer parameter</option>");
    }
  });
}

function reloadAnalysisConfigFunc(data, app_code = "", id_e) {
    if (data["analysis_table_list"] != undefined) {
        $(`#selectTable${id_e}`).empty();
        $(`#selectTable${id_e}`).append(`<option value="Select table" selected disabled>Select table</option>`)
        for (let i = 0; i < data['analysis_table_list'].length; i++) {
            $(`#selectTable${id_e}`).append((`<option value="${data['analysis_table_list'][i]}">${data['analysis_table_list'][i]}</option>`))
        };
    }
    analysisDataRaw = data['save']
    if (data["shared_config"] != undefined) {
        sharedConfig = data["shared_config"]
        if (sharedConfig["config"] != undefined) {
            for (let i = 0; i < sharedConfig["config"].length; i++) {
                importDashboard(sharedConfig["element_id"], true, sharedConfig["config"][i])
            }
        }
    } else {
        if (app_code == "") {
            sharedConfig = { "element_id": "", "config": [] }
        }
    }
    if (analysisDataRaw && data['save']) {
        var dashboard_index = "Required";
        if (data.hasOwnProperty("dashboard_index")) {
            dashboard_index = data["dashboard_index"];
        }
        analysisTabID = analysisDataRaw["ElementID"]
        var analysisTableNames = data["analysis_table_list"]
        var mainL3ULID = analysisDataRaw["ParentULID"]
        var mainTabContainerID = analysisDataRaw["ParentTabContainerID"]
        $(`#${mainL3ULID}`).empty()
        $(`#${mainTabContainerID}`).empty()
        if (data.hasOwnProperty("dashboard_index")) {
            dashboard_index = data["dashboard_index"];
        }
        if (dashboard_index == "Required") {

            $(`#${mainL3ULID}`).append(`
          <li class="nav-item navtab scroll-link">
            <a class="nav-link" id="indexTab${id_e}" href="#indexTabContent${id_e}" role="tab" data-toggle="tab" aria-controls="#indexTab${id_e}" aria-selected="true">
              <div class="row">
                <div class="col-md-11" style="padding-right: 0.1rem">
                  <span class="tabname1" id="indexTab${id_e}" data-tab="indexTab${id_e}" data-tab_ct="indexTab${id_e}">
                    Index
                  </span>
                </div>
              </div>
            </a>
          </li>
          `)
        }

        const navUl = document.querySelector('.nav.nav-tabs.nav-fill.analysis-nav');
        if (navUl.children.length > 4) {
            navUl.classList.add("scroll-nav")
        }

        var interaction
        var f2_dict
        var thresholdGuage = []
        var tabs = []
        for (j in analysisDataRaw["subTabContent"]) {
            var tabDict = analysisDataRaw["subTabContent"][j];
            if (!tabDict["aHref"].includes("#indexTabContent")) {
                tabs.push([tabDict["aHref"], tabDict["subTabName"], tabDict["subDesc"], tabDict["subIcon"]])
            }
        }
        tabs = tabs.reverse();

        // INDEX TAB
        const updateIndex = (index, val) => {
            let ind = index.replace('Header', '')
            const indexTabs = $("#tabLinks" + id_e).find(".linkCard")
            Array.from(indexTabs).forEach(ele => {
                const id = ele.id.replace('index', '');
                if (id == ind) {
                  $(`#index${id} .tab-title`).text(val)
                }
            });
        }
        if (dashboard_index == "Required") {
            $(`#${mainTabContainerID}`).append(`
            <div class="tab-pane fade" id="indexTabContent${id_e}" role="tabpanel" aria-labelledby="indexTab${id_e}">
              <div id="tabLinks${id_e}"  class="tabLinksclass" style="border: 0.1px solid black; min-height: 1080px; max-height: 1080px;overflow:auto;">
              </div>
            </div>
          `)
        }


        tabs.forEach((ele, index) => {

            let ind = ele[0].split('#')[1];
            let index1 = tabs.length - index
            let colo1 = analysisDataRaw['subTabContent'][0]['indexCard_BGColor'];
            let colo2 = analysisDataRaw['subTabContent'][0]['indexCard_FontColor'];
            let tabDescription = ele[2] === "undefined" ? "" : ele[2];
            if (!data.dashboardIndexTemplate) {
              data.dashboardIndexTemplate = "Template1";
            }
            if (data.dashboardIndexTemplate == "Template1"){
              var markup = `
                <div class="row index-rows" style="box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;border-radius: 5px;margin: 20px 20px;align-items: center;display: flex;">
                  <div id="" class="col-2 index-no-column" style="background-color:${colo1};">
                    <p style="color:${colo2};font-size: 1.2rem; margin:0;" href="${ele[0]}"> ${index1} </p>
                </div>
                <div class="col-10" style="">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${ind}')" style="right: -8px;top:-8px;"></i>
                  <div id="index${ind}" style="background-color:${colo1};" color1='${colo1}' class="linkCard defaultTabTheme">
                    <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                      <a class="tab-header-name tab-title" color2='${colo2}' style="color:${colo2};font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                      <p class="tab-desc colored-text" data-name="index${ind}" style="color:${colo2};margin-bottom:0">${tabDescription}</p>
                    </div>
                    <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center" >
                      <i class="${ele[3]}" data-name="index${ind}"></i>
                    </div>
                  </div>
                </div>
              </div>
              ` ;
            }

            else if (data.dashboardIndexTemplate == "Template2"){
              var markup = `
              <div class="row index-rows" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;border-bottom: 8px solid ${colo1};">
                <div id="" class="col-2 index-no-column" style="background-color: ${colo1};border: 5px solid  ${colo1};border-top-right-radius: 0px;border-bottom-right-radius: 0px;height: 6rem;">
                  <p style="font-size: 1.2rem; color:${colo2}; margin:0;" href="${ele[0]}"> ${index1} </p>
                </div>
                <div class="col-10" style="background: white !important;">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${ind}')" style="right: -8px;top:-8px;"></i>
                  <div id="index${ind}" style="background-color: transparent !important;" class="linkCard">
                    <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                      <a class="tab-title" style="color:black;font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                      <p class="tab-desc" data-name="index${ind}" style="color:black;margin-bottom:0">${tabDescription}</p>
                    </div>
                    <div class="col-1 colored-icons TabIcons d-flex align-items-center justify-content-center" >
                      <i class="${ele[3]}" data-name="index${ind}" style="color:${colo1}"></i>
                    </div>
                  </div>
                </div>
              </div>
              ` ;
            }

            else if (data.dashboardIndexTemplate == "Template3"){
              var markup = `
              <div class="row index-rows defaultTabTheme" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;border-radius: 0px 40px !important;">
                <div id="" class="col-2 d-flex align-items-center justify-content-center" style="background-color:white;border-radius: 0px 40px !important;height: 6rem;">
                  <p style="font-size: 1.2rem; color:black !important; margin:0;" href="${ele[0]}"> ${index1} </p>
                </div>
                <div class="col-10" style="">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${ind}')"></i>
                  <div id="index${ind}" style="border-top-right-radius: 40px;" class="linkCard">
                    <div class="col-10 d-flex  flex-column align-items-center justify-content-center">
                      <a class="tab-header-name tab-title" style="color:${colo2};font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                      <p class="tab-desc colored-text" data-name="index${ind}" style="color:${colo2};margin-bottom:0">${tabDescription}</p>
                    </div>
                    <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center" >
                      <i class="${ele[3]}" data-name="index${ind}" style="color:${colo2};"></i>
                    </div>
                  </div>
                </div>
              </div>
              ` ;
            }


            else if (data.dashboardIndexTemplate == "Template4"){
              var markup = `
              <div class="row index-rows" style="margin: 40px 50px 40px 0px;align-items: center;display: flex;justify-content: center;">
                <div id="" class="col-1 dropIndex" style="background: ${colo1} linear-gradient(to bottom right, ${colo1} 25%, #fff);">
                <p style="font-size: 1.2rem; color:${colo2}; margin:0;" href="${ele[0]}"> ${index1} </p>
                </div>
                <div class="col-10" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius:10px;">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${ind}')" style="right: -8px;top:-8px;"></i>
                  <div id="index${ind}" class="linkCard">
                    <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                      <a class="tab-title" style="color:black !important;font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                      <p class="tab-desc" data-name="index${ind}" style="color:black !important;margin-bottom:0">${tabDescription}</p>
                    </div>
                    <div class="col-1 colored-icons TabIcons d-flex justify-content-center align-items-center">
                      <i class="${ele[3]}" data-name="index${ind}" style="color:${colo1} !important;"></i>
                    </div>
                  </div>
                </div>
              </div>
              ` ;
            }

            else if (data.dashboardIndexTemplate == "Template5"){
              var markup = `
              <div class="row index-rows" style="margin: 40px 0px;align-items: center;display: flex;justify-content: center;">
                <div id="" class="col-2 boxIndex" style="background: ${colo1} linear-gradient(to bottom right, ${colo1} 25%, #fff);">
                <p style="font-size: 1.2rem; color:${colo2}; margin:0;" href="${ele[0]}"> ${index1} </p>
                </div>
                <div class="col-8 defaultTabTheme" style="background-color: ${colo1};border-radius:10px;">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${ind}')" style="right: -23px;top:-7px;"></i>
                  <div id="index${ind}" class="linkCard">
                    <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                      <a class="tab-header-name tab-title" style="color:${colo2};font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                      <p class="tab-desc colored-text" data-name="index${ind}" style="color:${colo2};margin-bottom:0">${tabDescription}</p>
                    </div>
                    <div class="col-1 tab-icons TabIcons d-flex justify-content-center align-items-center">
                      <i class="${ele[3]}" data-name="index${ind}" style="color: ${colo2};"></i>
                    </div>
                  </div>
                </div>
                <div class="col-1"><span class="arrow-tab" style="border-left-color: ${colo1};"></span></div>
              </div>
              ` ;
            }

            const tabLinks = document.getElementById('tabLinks' + id_e);
            if (dashboard_index == "Required") {
                tabLinks.insertAdjacentHTML("afterbegin", markup)
                document.getElementById(`index${ind}`).addEventListener("click", (e) => {
                    e.preventDefault();
                    gotoTab(mainTabContainerID, ind);
                });
            }
        });

        // REMOVING THE OVERFLOW
        const clearOverflow = () => {
            if (document.getElementById(`indexTab${id_e}`) != null) {
                const t = document.getElementById(`indexTab${id_e}`).children
                Array.from(t).forEach(ele => { if (ele.className == "hidden") { ele.parentNode.removeChild(ele) } })
            }
        }
        const overflow = setTimeout(clearOverflow, 250)

        for (j in analysisDataRaw["subTabContent"]) {
            var tabDict = analysisDataRaw["subTabContent"][j];
            if (Object.keys(tabDict).includes('crossFilter')) {
                interaction = tabDict['crossFilter'];
            } else {
                interaction = []
            }
            if (Object.keys(tabDict).includes('thresholdProp')) {
                thresholdGuage.push(tabDict['thresholdProp']);
            } else {
                thresholdGuage = []
            }
            if (Object.keys(tabDict).includes('freeze_dict')) {
                f2_dict = tabDict['freeze_dict'];
                final_f_dict2 = f2_dict
            } else {
                f2_dict = {}
                final_f_dict2 = f2_dict
            }
            if (Object.keys(tabDict).includes('tabSlicerConfig')) {
                var tabSlicerConfig = tabDict['tabSlicerConfig'];
                if (tabSlicerConfig == undefined) {
                    var tabSlicerConfig = {
                        'slicerTable': [],
                        'slicerParameter': [],
                        'slicerBoolean': [],
                        'slicerReload': [],
                        "multipleSlicer": []
                    };
                }
            } else {
                var tabSlicerConfig = {
                    'slicerTable': [],
                    'slicerParameter': [],
                    'slicerBoolean': [],
                    'slicerReload': [],
                    "multipleSlicer": []
                };
            }
            var parentId = mainL3ULID.split('analysisTab')[1]
            var tab_ID = tabDict["aID"].replace('analysistab' + parentId, "");
            if (!tab_ID.includes(`indexTab`)) {
                $(`#${mainL3ULID}`).append(`<li class="nav-item navtab scroll-link"><a class="nav-link" id="${tabDict["aID"]}" href="${tabDict["aHref"]}" role="tab" data-toggle="tab" aria-controls="${tabDict["aHref"]}" aria-selected="false">
                <div class="row">
                <div class="col-md-10" style="padding-right: 0.1rem">
                <span class="contentEditable tabname" id="${tabDict["tabHeaderID"]}" data-tab="${tabDict["chartDivContainer"]}" data-tab_ct="${tabDict["chartDivContainer"]}">${tabDict["subTabName"]}</span>
                </div>
                <div class="col-md-2" style="padding-top: 0.3rem">
                <button type="button" id="${tabDict["deleteButtonID"]}" data-tabAnchorID="${tabDict["aID"]}" data-tabContainerDivID="${tabDict["aHref"].replace("#", "")}" style="border-width:0px;padding: 1px 1px;background-color: white;"><i class="fa fa-times" style="font-size:0.9rem;"></i></button>
                </div>
                </div>
                </a></li>`);
                const deleteButton = document.getElementById(`${tabDict["deleteButtonID"]}`);
                if(deleteButton){
                  deleteButton.addEventListener("click", (e) => {
                    const id = e.target.parentNode.id.replace('removeT', 'indext');;
                    const indexTab = document.getElementById('tabLinks' + id_e);
                    const linkToBeDeleted = document.getElementById(`${id}`);
                    $(`#${id}`).closest(".row").remove();
                    let ind = 0
                    $("#tabLinks" + id_e).find(".col-2").each(function () {
                        $(this).find("p").html(++ind)
                    })
                    const navUl = document.querySelector('.nav.nav-tabs.nav-fill.analysis-nav');
                    if (navUl.children.length > 4) {
                        navUl.classList.add("scroll-nav")
                    } else {
                        navUl.classList.remove("scroll-nav")
                    }
                  })
                }

            }
            $(`#${mainTabContainerID}`).append(`<div class="tab-pane fade" id="${tabDict["aHref"].replace("#", "")}" role="tabpanel" aria-labelledby="${tabDict["aID"]}">
              <div class="d-flex justify-content-between" style="padding-top:1%">
              <div class="card-tools tabCardTools row col-12" style="background:whitesmoke; display:flex; flex-direction:row; align-items:center; flex-wrap:wrap; padding-top:2px; padding-bottom:2px; margin:auto">     <button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="${tabDict["commentButtonID"]}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white; margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;     <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>       <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' data-toggle="modal" data-target="#slicerConfigModal${analysisTabID}${tab_ID}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>       </div>
              </div>
              <div class="col-lg-12 row chartDivSection"  data-layout="Landscape" id="${tabDict["chartDivContainer"]}" ondblclick="resetCrossFilter.call(this)"></div>
              <div class="modal" id="slicerConfigModal${analysisTabID}${tab_ID}">
                <div class="modal-dialog modal-md modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h6 class="modal-title" style="text-align:center;">Configure slicer</h6>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="card">
                                <div class="card-body">
                                <div class="card-tools text-primary" style="display:flex; flex-direction:row; align-items:center; justify-content:space-between;">
                                    <label for="">Add slicer</label>
                                    <button type="button" class="btn addOptionBtn" onclick="addSlicers('${analysisTabID}', '${tab_ID}')"><i class="fas fa-plus text-primary"></i></button>
                                </div>
                                <div id="slicerConfigCard${analysisTabID}${tab_ID}" style="max-height: 15.25rem; overflow-y: scroll; overflow-x: hidden;">
                                    <div class="card" data-slicer_class="selectSlicerConfig_${analysisTabID}${tab_ID}">
                                    <div class="card-body">
                                        <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                        <label for="analysisSlicerTable">Source table:
                                        </label>
                                        <select class="select2 form-control analysisSlicerTable" name="analysisSlicerTable">
                                            <option value="">Select source table</option>

                                        </select>
                                        </div>
                                        <div class="form-group" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                                        <label for="analysisSlicerParameter">Slicer parameter:
                                        </label>
                                        <select  class="select2 form-control analysisSlicerParameter" name="analysisSlicerParameter">
                                            <option value="">Select slicer parameter</option>
                                        </select>
                                        </div>
                                        <div class = "form-group" style="margin-bottom:5px;text-align:left;">
                                          <label for="analysisSlicerBoolean">
                                          <input type="checkbox" class="analysisSlicerBoolean" name="analysisSlicerBoolean" value="True" style="margin-right:10px">
                                          Add default option for all values</label>
                                        </div>
                                        <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                        <label>
                                        <input class="mulcheckbox" type="checkbox" style="margin-right:10px">
                                        Multiselect Slicer</label>
                                      </div>
                                    </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="saveTabSlicerConfig${analysisTabID}${tab_ID}" data-analysis_id="${analysisTabID}" data-tab_id="${tab_ID}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
                        </div>
                    </div>
                </div>
              </div>
              </div>`)
            if ($('.chartDivSection').attr('data-layout') == "Landscape") {
                $('.chartDivSection').css({
                    "background-size": "5% 5%",
                    "width": "100%",
                    "margin": "auto",
                    "border": "solid black 0.1px",
                    "overflow-x": "hidden",
                    "overflow-y": "hidden",
                    "aspect-ratio": 16/9,
                })
            } else if ($('.chartDivSection').attr('data-layout') == "Portrait") {
                $('.chartDivSection').css({
                    "background-size": "5% 5%",
                    "width": "1080px",
                    "margin": "auto",
                    "border": "solid black 0.1px",
                    "aspect-ratio": 9/16,
                    "overflow-y": "hidden",
                    "overflow-x": "hidden",
                })
            } else {
                $('.chartDivSection').css({
                    "width": "92%",
                    "padding-left": "70px",
                    "padding-top": "9px",
                    "padding-right": "9px",
                })
            }
            if ($('.chartDivSection').attr('data-layout') == "Landscape" || $('.chartDivSection').attr('data-layout') == "Portrait") {
                if (Object.keys(tabDict).includes('grid')) {
                    if (tabDict["grid"] == "no") {
                        $(`#${tabDict["chartDivContainer"]}`).css('background-image', "none");
                    } else {
                        $(`#${tabDict["chartDivContainer"]}`).css({ "background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)" });
                    }
                } else {
                    $(`#${tabDict["chartDivContainer"]}`).css({ "background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)" });
                }

            }
            fetchSlicerParams(app_code);
            fetchAnalysisSlicer(tabSlicerConfig, analysisTabID, tab_ID);

            //   Updating slicer config
            $(`#saveTabSlicerConfig${analysisTabID}${tab_ID}`).off('click').on('click', function () {
                let anlysisElementId = $(this).attr('data-analysis_id');
                let analysistabNo = $(this).attr('data-tab_id');
                var analysisSlicerTabDict = {
                    "TabID": (analysistabNo),
                    "slicerTable": [],
                    "slicerParameter": [],
                    "slicerBoolean": [],
                    "slicerReload": [],
                    "multipleSlicer": [],
                }
                $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerTable').each(function () {
                    analysisSlicerTabDict["slicerTable"].push($(this).val());
                });
                $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerParameter').each(function () {
                    analysisSlicerTabDict["slicerParameter"].push($(this).val());
                });
                $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.mulcheckbox').each(function () {
                    if ($(this).is(":checked")) {
                        analysisSlicerTabDict["multipleSlicer"].push(true);
                    } else {
                        analysisSlicerTabDict["multipleSlicer"].push(false);
                    }
                });
                $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerBoolean').each(function () {
                    if ($(this).is(":checked")) {
                        analysisSlicerTabDict["slicerBoolean"].push("True")
                    } else {
                        analysisSlicerTabDict["slicerBoolean"].push("False")
                    }
                });
                fetchAnalysisSlicer(analysisSlicerTabDict, anlysisElementId, (analysistabNo));
                slicerChangeUpdatePlots(app_code = app_code);
            });


            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).empty()
            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).attr('data-tableArray', JSON.stringify(analysisTableNames));

            for (let slicer = 0; slicer < tabSlicerConfig.slicerTable.length; slicer++) {
                addSlicers(analysisTabID, tab_ID);
                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").empty()
                for (var table of analysisTableNames) {
                    $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").append(`<option value="${table}">${table}</option>`)
                };
                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").val(tabSlicerConfig.slicerTable[slicer]).trigger('select2:select');
                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").val(tabSlicerConfig.slicerTable[slicer]).trigger('change');
                if (tabSlicerConfig.slicerBoolean != undefined) {
                    if (tabSlicerConfig.slicerBoolean.length > 0) {
                        $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerBoolean").prop("checked", tabSlicerConfig.slicerBoolean[slicer])
                    }
                }
                if (tabSlicerConfig.multipleSlicer != undefined && tabSlicerConfig.multipleSlicer.length > 0) {
                    if (tabSlicerConfig.multipleSlicer[slicer] != undefined) {
                        $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".mulcheckbox").prop("checked", tabSlicerConfig.multipleSlicer[slicer])
                    }
                }
                if ($(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam') != undefined) {
                    $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam').removeAttr(data - slicerParam)
                }
                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam', tabSlicerConfig.slicerParameter[slicer])


            } var analysisTableList = [];
            var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
            $.ajaxSetup({
                beforeSend: function (xhr, settings) {
                    xhr.setRequestHeader("X-CSRFToken", ctoken);
                }
            });


            $(`#${tabDict["chartDivContainer"]}`).append($(`<div class="hidden" style="height:${tabDict["chartDivContainerHeight"] + "px"}">`));
            $(`#${tabDict["deleteButtonID"]}`).click(function () {
                var tabAnchorID = $(this).attr('data-tabAnchorID')
                var tabContainerDivID = $(this).attr('data-tabContainerDivID')
                $(`#${tabAnchorID}`).parent().remove()
                $(`#${tabContainerDivID}`).remove()
            })


            $('.contentEditable').each(function () {
                $(this).on('click', function () {
                    $(this).attr("contenteditable", "true")
                    $(this).focus()
                })
                $(this).focusout(function () {
                    var tab_header = this.innerText
                    tab_header = tab_header.trim()
                    if (tab_header.length == 0) {
                        this.innerText = "Set Name"
                        $(this).removeAttr("contenteditable");
                        $(this).addClass("bg-danger")
                        $(this).trigger("click")

                    }
                    else {
                        $(this).removeAttr("contenteditable");
                        $(this).removeClass("bg-danger")
                    }
                })
            })
            $(`#${tabDict["commentButtonID"]}`).click(function () {
                var id_ = ('analysisEditor' + Math.random()).replace('.', "");
                $(this).parent().parent().next().append(`
                <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                      <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                        <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                        <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                        <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                      </div>
                      <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                      </div>
                    </div>
                `)
                $(".commentboxcard").resizable();
                $('.contentEditable').each(function () {
                    $(this).on('click', function () {
                        $(this).attr("contenteditable", "true")
                        $(this).focus()
                    })
                    $(this).focusout(function () {
                        var content = this.innerText
                        content = content.trim()
                        if (content.length == 0) {
                            this.innerText = "Enter text here."
                            $(this).removeAttr("contenteditable");
                            $(this).trigger("click")
                        }
                        else {
                            $(this).removeAttr("contenteditable");
                        }
                    })
                })
                $('.deleteCommentBox').click(function () {
                    $(this).parent().parent().remove()
                })
                $(".commentboxcard").draggable({
                    cancel: '',
                    containment: "parent",
                });
            })

        }

        const editables = document.getElementsByClassName('contentEditable tabname');
        Array.from(editables).forEach(ele => {
            ele.addEventListener("blur", (e) => {
                updateIndex(ele.id, ele.textContent)
            })
        });

        for (k in analysisDataRaw["subTabChartDetails"]) {
            var chartDict = analysisDataRaw["subTabChartDetails"][k]
            var parentContainerID = chartDict["ParentContainerID"]
            navigateTabId = parentContainerID.replace("row", "tab")
            $("#" + navigateTabId).attr("data-data", JSON.stringify(chartDict["chartJson"]))
            $("#" + navigateTabId).attr("data-parentContainerID", JSON.stringify(parentContainerID))
            $("#" + navigateTabId).attr("app_code", app_code)
            $("#" + navigateTabId).attr('data-tabLoaded', 'false');
            $("#" + navigateTabId).attr("onclick", "plotChartsAnalysis.call(this)")
            $("#" + navigateTabId).attr("slicerTabConnectObj", JSON.stringify(analysisDataRaw["slicerTabConnectDict"]))
            var configDic = {
                "tabDict": tabDict,
                "tabSlicerConfig": tabSlicerConfig,
                "final_f_dict2": final_f_dict2,
                "thresholdGuage": thresholdGuage,
                "interaction": interaction,
                "tab_ID": tab_ID,
                "parentId": parentId
            }
            $("#" + navigateTabId).attr("data-configdic", JSON.stringify(configDic))
            if (k == 0) {
                $("#" + navigateTabId).trigger("click")
            }
        }
        var tab_object = $(`#analysisDashboard${analysisTabID} .tab-content`)
        var bg_x = analysisDataRaw['subTabContent'][0]['tab_background-color']
        var bg_image = analysisDataRaw['subTabContent'][0]['global_bg_name']
        var bg_folder = analysisDataRaw['subTabContent'][0]['global_bg_folder']
        var global_bg_value = analysisDataRaw['subTabContent'][0]['global_bg_value']
        $(`#global_bg${analysisTabID}`).val(global_bg_value).trigger("change")
        if (global_bg_value == "background_image") {
            $('.global_bg_color').css("display", "none")
            $('.global_bg_image').css("display", "block")
            if (bg_image != "" || bg_image != undefined) {
                if ($(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
                    $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').css("background-size", '100% calc(100vw * 9/16)')
                }
                else if ($(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
                    $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').css("background-size", '1080px calc(100vw * 16/9)')
                }
                else {
                    $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').css("background-size", '100%')
                }

                $.ajax({
                    url: `/users/${urlPath}/reload_bg_image/`,

                    data: {
                        'folder_name': bg_folder,
                        'filename': bg_image,
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                        $(`.mainDiv`).css("background-image", 'url(data:image/png;base64,' + data.image_url)
                        $(`.mainDiv`).css("background-size", '56em 15em')
                        $(`#tabLinks${id_e}`).css("background-image", 'url(data:image/png;base64,' + data.image_url)
                        $(`#tabLinks${id_e}`).css("background-size", '56em 15em')
                        $(`#bg_image_url${analysisTabID}`).html("")
                        $(`#bg_image_url${analysisTabID}`).html(data.image_url)
                        $(`#bg_image_name${analysisTabID}`).html("")
                        $(`#bg_image_name${analysisTabID}`).html(data.image_name)
                        $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').css("background-image", 'url(data:image/png;base64,' + data.image_url)

                    }
                })

            }
        }
        else {
            $('.global_bg_color').css("display", "block")
            $('.global_bg_image').css("display", "none")
            $(`.mainDiv`).css("background-image", 'none')
        }
        $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').css("background-color", bg_x)
        $("#tabLinks" + id_e).css("background-color", bg_x)

        $(`#analysisTabContent${analysisTabID}`).find('.chartDivSection').attr("config_background-color", bg_x)
        $(`#analysisDashboard${analysisTabID} .tab-content`).attr("config_background-color", bg_x);
        $(`#analysisTab${analysisTabID}`).find('.nav-link').attr("config_background-color", bg_x);
        if (bg_x != undefined) {
            $(`#myColor${analysisTabID}`).val(bg_x)
            $(`#main_theme${analysisTabID}`).css("background-color", bg_x);
        }
        if (analysisDataRaw['subTabContent'][0]['outer_color'] != undefined) {
            $(`#theme1${analysisTabID}`).css("background-color", analysisDataRaw['subTabContent'][0]['outer_color']);
            $(`#themeColor${analysisTabID}`).val(analysisDataRaw['subTabContent'][0]['outer_color'])
        }
        if (analysisDataRaw['subTabContent'][0]['inner_color'] != undefined) {
            $(`#themegrad${analysisTabID}`).css("background-color", analysisDataRaw['subTabContent'][0]['inner_color']);
            $(`#themeColor1${analysisTabID}`).val(analysisDataRaw['subTabContent'][0]['inner_color'])
            $(`#globalConfigPreviewChart${analysisTabID}`).css("color", analysisDataRaw['subTabContent'][0]['inner_color']);
        }


        if (analysisDataRaw['subTabContent'][0]['indexCard_BGColor'] != undefined) {
            $(`#indextabBG${analysisTabID}`).css(analysisDataRaw['subTabContent'][0]['indexCard_BGColor']);
            $(`#indextabBG${analysisTabID}`).val(analysisDataRaw['subTabContent'][0]['indexCard_BGColor'])
        }
        if (analysisDataRaw['subTabContent'][0]['indexCard_FontColor'] != undefined) {
            $(`#indextabFC${analysisTabID}`).css("color", analysisDataRaw['subTabContent'][0]['indexCard_FontColor']);
            $(`#indextabFC${analysisTabID}`).val(analysisDataRaw['subTabContent'][0]['indexCard_FontColor'])
        }

        if (analysisDataRaw['subTabContent'][0]['header_color'] != undefined) {
            $(".inner-div_title").css("color", analysisDataRaw['subTabContent'][0]['header_color']);
            $(".global_header_color").val(analysisDataRaw['subTabContent'][0]['header_color'])
        }
        if (analysisDataRaw['subTabContent'][0]['header_bg_color'] != undefined) {
            $(".inner-div_header").css("background-color", analysisDataRaw['subTabContent'][0]['header_bg_color']);
            $(".global_header_bgcolor").val(analysisDataRaw['subTabContent'][0]['header_bg_color'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_header_alignment'] != undefined) {
            $(".global_header_alignment").val(analysisDataRaw['subTabContent'][0]['global_header_alignment']).trigger("change")
        }
        $(".global_header_fontsize").val(analysisDataRaw['subTabContent'][0]['header_fontsize'])
        $(".global_header_fontweight").val(analysisDataRaw['subTabContent'][0]['header_fontweight']).trigger("change")
        $(".global_header_fontstyle").val(analysisDataRaw['subTabContent'][0]['header_fontstyle']).trigger("change")
        $(".inner-div_title").css("font-size", analysisDataRaw['subTabContent'][0]['header_fontsize'] + 'px');
        $(".inner-div_title").css("font-weight", analysisDataRaw['subTabContent'][0]['header_fontweight']);
        $(".inner-div_title").css("font-style", analysisDataRaw['subTabContent'][0]['header_fontstyle']);
        var theme_height = (parseInt(analysisDataRaw['subTabContent'][0]['header_fontsize']) + 20) + "px"
        $(".inner-div_header").css("height", theme_height);
        if (analysisDataRaw['subTabContent'][0]['global_checkBox'] != undefined) {
            $(".global_shadow").prop('checked', analysisDataRaw['subTabContent'][0]['global_checkBox'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_checkBox_border'] != undefined) {
            $(".global_border").prop('checked', analysisDataRaw['subTabContent'][0]['global_checkBox_border'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_shadowColor'] != undefined) {
            $(".global_shadow_color").val(analysisDataRaw['subTabContent'][0]['global_shadowColor'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_shadowXOffset'] != undefined) {
            $(".global_shadow_x").val(analysisDataRaw['subTabContent'][0]['global_shadowXOffset'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_shadowBlur'] != undefined) {
            $(".global_shadow_blur").val(analysisDataRaw['subTabContent'][0]['global_shadowBlur'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_shadowYOffset'] != undefined) {
            $(".global_shadow_y").val(analysisDataRaw['subTabContent'][0]['global_shadowYOffset'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_shadowThickness'] != undefined) {
            $(".global_shadow_thickness").val(analysisDataRaw['subTabContent'][0]['global_shadowThickness'])
        }

        if (analysisDataRaw['subTabContent'][0]['global_borderThickness'] != undefined) {
            $(".global_border_thickness").val(analysisDataRaw['subTabContent'][0]['global_borderThickness'])
        }
        if (analysisDataRaw['subTabContent'][0]['global_borderStyle'] != undefined) {
            $(".global_border_style").val(analysisDataRaw['subTabContent'][0]['global_borderStyle']).trigger("change")
        }
        if (analysisDataRaw['subTabContent'][0]['global_borderColor'] != undefined) {
            $(".global_border_color").val(analysisDataRaw['subTabContent'][0]['global_borderColor'])
        }
        globalBorderFunction()
        globalShadowFunction()
        if (analysisDataRaw['subTabContent'][0]['g_color'] == "yes") {
            $('.global_gradient_color').prop('checked', true);
        }
        else {
            $('.global_gradient_color').prop('checked', false);
        }
        setTimeout(() => {
            var i = 1
            $('.chartDivSection').find('.charts').each(function () {
                var idPlot = $(this).attr('id').split('card')[0]
                var s_subtype = $(this).attr('data-subtype')
                if (interaction.length > 0) {
                    if (interaction[i - 1]) {
                        $('#' + idPlot + 'interaction').attr('checked', 'checked')
                    } else {
                        $('#' + idPlot + 'interaction').prop('checked', false)
                    }
                } else {
                    $('#' + idPlot + 'interaction').attr('checked', 'checked')
                }
                i = i + 1;

                if (s_subtype == "Table") {
                    if (Object.keys(f2_dict).length > 0) {

                        var table = $(`#table_example${idPlot}`).DataTable();
                        new $.fn.dataTable.FixedColumns(table,
                            f2_dict[`${idPlot}`]
                        );
                    }
                }


            })

        }, 5000)
        if (Object.keys(analysisDataRaw).includes('slicerTabConnectDict')) {
            slicerTabConnectDict = analysisDataRaw['slicerTabConnectDict'];
        }
        if ($(`#analysisDashboard${analysisTabID} .nav-tabs a`).first().attr("id") != undefined) {
            if ($(`#analysisDashboard${analysisTabID} .nav-tabs a`).first().attr("id").includes("indexTab")) {
                $(`#analysisDashboard${analysisTabID} .nav-tabs a`).first().tab('show')
            } else {
                $(`#analysisDashboard${analysisTabID} .nav-tabs a:first`).trigger("click");
            }
        }
    }
    var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
    $.ajaxSetup({
        beforeSend: function (xhr, settings) {
            xhr.setRequestHeader("X-CSRFToken", ctoken);
        }
    });

}

function reloadAnalysisConfig(analysisElementId) {
  if(analysisElementId != "" && analysisElementId.startsWith("ellipse")){
    $.ajax({
      url:`/users/${urlPath}/dynamicVal/`,
      data: {
        'operation':'saveChartConfig',
        'element_id': analysisElementId
        },
        type: 'POST',
        dataType: "json",
        success: function (data) {
          reloadAnalysisConfigFunc(data,"",analysisElementId);
      },
      error: ()=>{
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    })
  } else if (!analysisElementId.startsWith("ellipse")) {
    $.ajax({
      url:`/users/${urlPath}/dynamicVal/`,
      data: {
        'operation':'saveChartConfigList',
        'element_id': analysisElementId
      },
      type: 'POST',
      dataType: "json",

      success: function (data) {
        if($(`#plotSection${analysisElementId}`).find(".nav-link").length < 2){
          $(`#analysisAddTab${analysisElementId}`).trigger("click");
        }
        if(data["save"] != '' && data["save"] != undefined){
          let saveData = data["save"];
          for(let j = 0; j < saveData.length; j++){
            if($('#tableTab'+saveData[j]["ElementID"]).find('select').val() == undefined){
              if(analysisElementId == saveData[j]["ElementID"]){
                data["save"] = saveData[j];
                $("#plotSection"+saveData[j]["ElementID"]).css("display","block");
                reloadAnalysisConfigFunc(data,"",saveData[j]["ElementID"]);
              }
            } else if (saveData[j].hasOwnProperty("dropdown")){
              if($('#tableTab'+saveData[j]["ElementID"]).find('select').val() == saveData[j]["dropdown"]){
                if(analysisElementId == saveData[j]["ElementID"]){
                  data["save"] = saveData[j];
                  $("#plotSection"+saveData[j]["ElementID"]).css("display","block");
                  reloadAnalysisConfigFunc(data,"",saveData[j]["ElementID"]);
                }
              }
            }
          }
        } else {
          if (data["analysis_table_list"] != undefined) {
            $(`#selectTable${analysisElementId}`).empty();
            $(`#selectTable${analysisElementId}`).append(`<option value="Select table" selected disabled>Select table</option>`)
            for (let i = 0; i < data['analysis_table_list'].length; i++) {
                $(`#selectTable${analysisElementId}`).append((`<option value="${data['analysis_table_list'][i]}">${data['analysis_table_list'][i]}</option>`))
            };
          }
        }
      },
      error: ()=>{
        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
      }
    });
  }
}

function pivotResize(id6,content,current_pivot_config,id,rendererName,operation){
  $(`#${id6}`).resizable({
    start: function (event, size) {
      document.getElementById(id6).className = "card charts ui-resizable ui-draggable ui-resizable-resizing"
    },
    stop: function (event, size) {
      current_pivot_config = $(`#${id6}`).find('.graphcontainerdiv').data("pivotUIOptions");
      if(Object.keys(current_pivot_config).includes("aggregators")){
        delete current_pivot_config["aggregators"]
      }
      if(Object.keys(current_pivot_config).includes("renderers")){
        delete current_pivot_config["renderers"]
      }
      let graphwidth;
      let graphheight;
      if (size.size.width < 400) {
        graphwidth = size.size.width * 0.70;
      } else if (size.size.width < 550) {
        graphwidth = size.size.width * 0.75;
      } else if (size.size.width < 700) {
        graphwidth = size.size.width * 0.80;
      } else {
        graphwidth = size.size.width * 0.85;
      }
      if (size.size.height < 400) {
        graphheight = size.size.height * 0.80;
      } else {
        graphheight = size.size.height * 0.875;
      }

      let layout = { height: parseInt(graphheight), width: parseInt(graphwidth) }

      latestconfig = {}

      google.load("visualization", "1", {
        packages: ["corechart"],
      });
      $(`#${id6}`).find('.graphcontainerdiv').pivotUI
      (content, {
        ...current_pivot_config,

        rendererOptions: { plotly: layout, c3: {size: {height: parseInt(graphheight), width: parseInt(graphwidth)}}, d3: {height: parseInt(graphheight), width: parseInt(graphwidth)}, gchart: {height: parseInt(graphheight), width: parseInt(graphwidth), colors:["var(--primary-color)"]} },
        onRefresh: function (config) {
          var config_copy = JSON.parse(JSON.stringify(config));
          if(Object.keys(config_copy).includes("aggregators")){
            delete config_copy["aggregators"]
          }
          if(Object.keys(config_copy).includes("renderers")){
            delete config_copy["renderers"]
          }

          latestconfig = config_copy
        },
      }, true);


      $(`#${id6} .graphcontainerdiv .pvtAggregator`).css("display", "none")
      $(`#${id6} .graphcontainerdiv .pvtRenderer`).css("display", "none")

      var pivot_charttype = ["Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","Line Chart","Bar Chart","Stacked Bar Chart","Area Chart","Scatter Chart"]
      $(`#${id}_configure_pivot_charttype`).find('option').slice(1).remove()
          for (const i in pivot_charttype) {
            $(`#${id}_configure_pivot_charttype`).append(new Option(pivot_charttype[i],pivot_charttype[i], false, false))
          }

        $(`#${id}_configure_pivot_charttype`).val(current_pivot_config.rendererName).trigger("change")

        $(`#${id}_configure_pivot_charttype`).on('change', function () {
          $(`#${id6} .graphcontainerdiv .pvtRenderer`).val(this.value).trigger("change")
        })


      var pivot_operations = ['Count', 'Count Unique Values', 'List Unique Values', 'Average', 'Sum', 'Interger Sum', 'Median', 'Sample Variance', 'Sample Standard Deviation', 'Minimum', 'Maximum', 'First', 'Last', 'Sum over Sum', '80% Upper Bound', '80% Lower Bound', 'Sum as Fraction of Total', 'Sum as Fraction of Rows', 'Sum as Fraction of Columns', 'Count as Fraction of Total']
      $(`#${id}_configure_pivot_operation`).find('option').slice(1).remove()

      for (let i = 0; i < pivot_operations.length; i++) {
        $(`#${id}_configure_pivot_operation`).append('<option value="' + pivot_operations[i] + '">' + pivot_operations[i] + '</option>')
      }
      $(`#${id}_configure_pivot_operation`).val(current_pivot_config.aggregatorName).trigger("change")

      $(`#${id}_configure_pivot_operation`).on('change', function () {
        $(`#${id6} .graphcontainerdiv .pvtAggregator`).val(this.value).trigger("change")
      })
    }
  });
}
