# Generated by Django 3.0.6 on 2022-01-19 19:11

import datetime
import re

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Name of User")),
                ("last_password_update_date", models.DateField(default=datetime.datetime.now)),
                ("password_history", models.TextField(default="[]")),
                ("tenant", models.CharField(default="public", max_length=255)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="alertbasetable",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("alert_id", models.IntegerField(default=0, null=True, verbose_name="Alert Id")),
                ("name", models.CharField(default="", max_length=100)),
                ("tag", models.CharField(default="", max_length=100)),
                ("description", models.CharField(default="", max_length=100)),
                ("model_name", models.CharField(default="", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="allocated_licences",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=255, null=True)),
                ("authentication_type", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("application_code", models.CharField(max_length=255, null=True)),
                ("application_name", models.CharField(max_length=255, null=True)),
                ("business_model_codes", models.TextField(null=True)),
                ("business_model_names", models.TextField(null=True)),
                ("process_group_codes", models.TextField(null=True)),
                ("process_group_names", models.TextField(null=True)),
                ("computation_model_codes", models.TextField(null=True)),
                ("computation_model_names", models.TextField(null=True)),
                ("table_names", models.TextField(null=True)),
                ("description", models.TextField(null=True)),
                ("app_icon", models.CharField(max_length=255, null=True)),
                ("app_icon_color", models.CharField(max_length=255, null=True)),
                ("app_card_color", models.CharField(max_length=255, null=True)),
                ("app_text_color", models.CharField(max_length=255, null=True)),
                ("navbar_order", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Approval_Email_Details",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("source_element_id", models.CharField(default="#", max_length=255)),
                ("approval_notification_list", models.TextField()),
                ("approval_decision_list", models.TextField()),
                ("email_configured", models.CharField(max_length=255)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ApprovalTable",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tablename", models.CharField(max_length=255)),
                ("json_data", models.TextField()),
                ("approval_status", models.CharField(max_length=100)),
                ("create_view_element_id", models.CharField(max_length=256)),
                ("approver_group", models.CharField(max_length=256)),
                ("approval_type", models.CharField(max_length=256)),
                ("approval_comments", models.TextField(null=True)),
                ("transaction_id", models.CharField(default="NULL", max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("modify_column", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Business_Models",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("business_model_code", models.CharField(max_length=255, null=True)),
                ("business_model_name", models.CharField(max_length=255, null=True)),
                ("application_codes", models.TextField(null=True)),
                ("process_group_codes", models.TextField(null=True)),
                ("process_group_names", models.TextField(null=True)),
                ("description", models.TextField(null=True)),
                ("computation_model_codes", models.TextField(null=True)),
                ("computation_model_names", models.TextField(null=True)),
                ("table_names", models.TextField(null=True)),
                ("additional_table_names", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Category_Subelement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "Category_Subelement_Name",
                    models.CharField(max_length=264, null=True, verbose_name="Category Subelement Name"),
                ),
                (
                    "Category_Subelement_Type",
                    models.CharField(max_length=264, null=True, verbose_name="Category Sublement Type"),
                ),
                ("Dependency", models.TextField(null=True, verbose_name="Dependency")),
                (
                    "Category_Subelement_Attributes",
                    models.TextField(null=True, verbose_name="Category Subelement Attributes"),
                ),
                ("Description", models.TextField(null=True, verbose_name="Description")),
                ("Image", models.ImageField(blank=True, null=True, upload_to="", verbose_name="Image")),
            ],
        ),
        migrations.CreateModel(
            name="Category_Subelement_Attributes",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "Category_Subelement_Attributes",
                    models.CharField(
                        max_length=264, null=True, verbose_name="Category Subelement Attributes"
                    ),
                ),
                ("Choice_Type", models.CharField(max_length=264, null=True)),
                ("Choice", models.TextField(null=True, verbose_name="Choices")),
                ("Corresponding_HTML_element", models.TextField(null=True)),
                ("Style_Applicable", models.CharField(max_length=264, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_function_repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("operation_name", models.CharField(max_length=255, null=True)),
                ("input_order", models.CharField(max_length=255, null=True)),
                ("input_name", models.CharField(max_length=255, null=True)),
                ("input_label", models.TextField(null=True)),
                ("dependency", models.TextField(null=True)),
                ("dependency_condition", models.TextField(null=True)),
                ("input_type", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_model_configuration",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True)),
                ("element_id", models.CharField(max_length=255, null=True)),
                ("element_name", models.CharField(max_length=255, null=True)),
                ("element_config", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_model_flowchart",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True, unique=True)),
                ("flowchart_xml", models.TextField(null=True)),
                ("flowchart_dict", models.TextField(null=True)),
                ("flowchart_elements", models.TextField(null=True)),
                ("scenario_comparative_config", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_model_run_history",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True)),
                ("data_json", models.TextField(null=True)),
                ("output_type", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_output_repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255)),
                ("model_outputs", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="computation_scenario_repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True, verbose_name="Model name")),
                ("scenario_id", models.CharField(max_length=255, null=True, verbose_name="Scenario id")),
                ("scenario_name", models.CharField(max_length=255, null=True, verbose_name="Scenario name")),
                ("scenario_config", models.TextField(null=True, verbose_name="Scenario config")),
                ("run_with_base_model", models.BooleanField(verbose_name="Run with base model")),
                (
                    "configuration_date",
                    models.DateTimeField(auto_now=True, null=True, verbose_name="Configuration date"),
                ),
                ("created_by", models.CharField(max_length=100, verbose_name="Created by")),
                ("created_date", models.DateTimeField(auto_now=True, verbose_name="Created date")),
                ("modified_by", models.CharField(max_length=100, null=True, verbose_name="Modified by")),
                (
                    "modified_date",
                    models.DateTimeField(auto_now=True, null=True, verbose_name="Modified date"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConfigTable",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("app_code", models.CharField(max_length=256, null=True)),
                ("element_id", models.CharField(max_length=255, null=True)),
                ("reportname", models.CharField(max_length=256, null=True)),
                ("reportconfig", models.TextField()),
                ("categoryname", models.TextField()),
                ("dbname", models.TextField()),
                ("created_by", models.CharField(max_length=100, null=True)),
                ("created_date", models.DateTimeField(auto_now=True, null=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="configuration_parameter",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("parameter", models.CharField(max_length=255, null=True)),
                ("value", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CountryMaster",
            fields=[
                ("country_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "country_name",
                    models.CharField(
                        choices=[
                            ("Aruba", "Aruba"),
                            ("Afghanistan", "Afghanistan"),
                            ("Angola", "Angola"),
                            ("Anguilla", "Anguilla"),
                            ("Åland Islands", "Åland Islands"),
                            ("Albania", "Albania"),
                            ("Andorra", "Andorra"),
                            ("United Arab Emirates", "United Arab Emirates"),
                            ("Argentina", "Argentina"),
                            ("Armenia", "Armenia"),
                            ("American Samoa", "American Samoa"),
                            ("Antarctica", "Antarctica"),
                            ("French Southern Territories", "French Southern Territories"),
                            ("Antigua and Barbuda", "Antigua and Barbuda"),
                            ("Australia", "Australia"),
                            ("Austria", "Austria"),
                            ("Azerbaijan", "Azerbaijan"),
                            ("Burundi", "Burundi"),
                            ("Belgium", "Belgium"),
                            ("Benin", "Benin"),
                            ("Bonaire, Sint Eustatius and Saba", "Bonaire, Sint Eustatius and Saba"),
                            ("Burkina Faso", "Burkina Faso"),
                            ("Bangladesh", "Bangladesh"),
                            ("Bulgaria", "Bulgaria"),
                            ("Bahrain", "Bahrain"),
                            ("Bahamas", "Bahamas"),
                            ("Bosnia and Herzegovina", "Bosnia and Herzegovina"),
                            ("Saint Barthélemy", "Saint Barthélemy"),
                            ("Belarus", "Belarus"),
                            ("Belize", "Belize"),
                            ("Bermuda", "Bermuda"),
                            ("Bolivia, Plurinational State of", "Bolivia, Plurinational State of"),
                            ("Brazil", "Brazil"),
                            ("Barbados", "Barbados"),
                            ("Brunei Darussalam", "Brunei Darussalam"),
                            ("Bhutan", "Bhutan"),
                            ("Bouvet Island", "Bouvet Island"),
                            ("Botswana", "Botswana"),
                            ("Central African Republic", "Central African Republic"),
                            ("Canada", "Canada"),
                            ("Cocos (Keeling) Islands", "Cocos (Keeling) Islands"),
                            ("Switzerland", "Switzerland"),
                            ("Chile", "Chile"),
                            ("China", "China"),
                            ("Côte d'Ivoire", "Côte d'Ivoire"),
                            ("Cameroon", "Cameroon"),
                            (
                                "Congo, The Democratic Republic of the",
                                "Congo, The Democratic Republic of the",
                            ),
                            ("Congo", "Congo"),
                            ("Cook Islands", "Cook Islands"),
                            ("Colombia", "Colombia"),
                            ("Comoros", "Comoros"),
                            ("Cabo Verde", "Cabo Verde"),
                            ("Costa Rica", "Costa Rica"),
                            ("Cuba", "Cuba"),
                            ("Curaçao", "Curaçao"),
                            ("Christmas Island", "Christmas Island"),
                            ("Cayman Islands", "Cayman Islands"),
                            ("Cyprus", "Cyprus"),
                            ("Czechia", "Czechia"),
                            ("Germany", "Germany"),
                            ("Djibouti", "Djibouti"),
                            ("Dominica", "Dominica"),
                            ("Denmark", "Denmark"),
                            ("Dominican Republic", "Dominican Republic"),
                            ("Algeria", "Algeria"),
                            ("Ecuador", "Ecuador"),
                            ("Egypt", "Egypt"),
                            ("Eritrea", "Eritrea"),
                            ("Western Sahara", "Western Sahara"),
                            ("Spain", "Spain"),
                            ("Estonia", "Estonia"),
                            ("Ethiopia", "Ethiopia"),
                            ("Finland", "Finland"),
                            ("Fiji", "Fiji"),
                            ("Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"),
                            ("France", "France"),
                            ("Faroe Islands", "Faroe Islands"),
                            ("Micronesia, Federated States of", "Micronesia, Federated States of"),
                            ("Gabon", "Gabon"),
                            ("United Kingdom", "United Kingdom"),
                            ("Georgia", "Georgia"),
                            ("Guernsey", "Guernsey"),
                            ("Ghana", "Ghana"),
                            ("Gibraltar", "Gibraltar"),
                            ("Guinea", "Guinea"),
                            ("Guadeloupe", "Guadeloupe"),
                            ("Gambia", "Gambia"),
                            ("Guinea-Bissau", "Guinea-Bissau"),
                            ("Equatorial Guinea", "Equatorial Guinea"),
                            ("Greece", "Greece"),
                            ("Grenada", "Grenada"),
                            ("Greenland", "Greenland"),
                            ("Guatemala", "Guatemala"),
                            ("French Guiana", "French Guiana"),
                            ("Guam", "Guam"),
                            ("Guyana", "Guyana"),
                            ("Hong Kong", "Hong Kong"),
                            ("Heard Island and McDonald Islands", "Heard Island and McDonald Islands"),
                            ("Honduras", "Honduras"),
                            ("Croatia", "Croatia"),
                            ("Haiti", "Haiti"),
                            ("Hungary", "Hungary"),
                            ("Indonesia", "Indonesia"),
                            ("Isle of Man", "Isle of Man"),
                            ("India", "India"),
                            ("British Indian Ocean Territory", "British Indian Ocean Territory"),
                            ("Ireland", "Ireland"),
                            ("Iran, Islamic Republic of", "Iran, Islamic Republic of"),
                            ("Iraq", "Iraq"),
                            ("Iceland", "Iceland"),
                            ("Israel", "Israel"),
                            ("Italy", "Italy"),
                            ("Jamaica", "Jamaica"),
                            ("Jersey", "Jersey"),
                            ("Jordan", "Jordan"),
                            ("Japan", "Japan"),
                            ("Kazakhstan", "Kazakhstan"),
                            ("Kenya", "Kenya"),
                            ("Kyrgyzstan", "Kyrgyzstan"),
                            ("Cambodia", "Cambodia"),
                            ("Kiribati", "Kiribati"),
                            ("Saint Kitts and Nevis", "Saint Kitts and Nevis"),
                            ("Korea, Republic of", "Korea, Republic of"),
                            ("Kuwait", "Kuwait"),
                            ("Lao People's Democratic Republic", "Lao People's Democratic Republic"),
                            ("Lebanon", "Lebanon"),
                            ("Liberia", "Liberia"),
                            ("Libya", "Libya"),
                            ("Saint Lucia", "Saint Lucia"),
                            ("Liechtenstein", "Liechtenstein"),
                            ("Sri Lanka", "Sri Lanka"),
                            ("Lesotho", "Lesotho"),
                            ("Lithuania", "Lithuania"),
                            ("Luxembourg", "Luxembourg"),
                            ("Latvia", "Latvia"),
                            ("Macao", "Macao"),
                            ("Saint Martin (French part)", "Saint Martin (French part)"),
                            ("Morocco", "Morocco"),
                            ("Monaco", "Monaco"),
                            ("Moldova, Republic of", "Moldova, Republic of"),
                            ("Madagascar", "Madagascar"),
                            ("Maldives", "Maldives"),
                            ("Mexico", "Mexico"),
                            ("Marshall Islands", "Marshall Islands"),
                            ("North Macedonia", "North Macedonia"),
                            ("Mali", "Mali"),
                            ("Malta", "Malta"),
                            ("Myanmar", "Myanmar"),
                            ("Montenegro", "Montenegro"),
                            ("Mongolia", "Mongolia"),
                            ("Northern Mariana Islands", "Northern Mariana Islands"),
                            ("Mozambique", "Mozambique"),
                            ("Mauritania", "Mauritania"),
                            ("Montserrat", "Montserrat"),
                            ("Martinique", "Martinique"),
                            ("Mauritius", "Mauritius"),
                            ("Malawi", "Malawi"),
                            ("Malaysia", "Malaysia"),
                            ("Mayotte", "Mayotte"),
                            ("Namibia", "Namibia"),
                            ("New Caledonia", "New Caledonia"),
                            ("Niger", "Niger"),
                            ("Norfolk Island", "Norfolk Island"),
                            ("Nigeria", "Nigeria"),
                            ("Nicaragua", "Nicaragua"),
                            ("Niue", "Niue"),
                            ("Netherlands", "Netherlands"),
                            ("Norway", "Norway"),
                            ("Nepal", "Nepal"),
                            ("Nauru", "Nauru"),
                            ("New Zealand", "New Zealand"),
                            ("Oman", "Oman"),
                            ("Pakistan", "Pakistan"),
                            ("Panama", "Panama"),
                            ("Pitcairn", "Pitcairn"),
                            ("Peru", "Peru"),
                            ("Philippines", "Philippines"),
                            ("Palau", "Palau"),
                            ("Papua New Guinea", "Papua New Guinea"),
                            ("Poland", "Poland"),
                            ("Puerto Rico", "Puerto Rico"),
                            (
                                "Korea, Democratic People's Republic of",
                                "Korea, Democratic People's Republic of",
                            ),
                            ("Portugal", "Portugal"),
                            ("Paraguay", "Paraguay"),
                            ("Palestine, State of", "Palestine, State of"),
                            ("French Polynesia", "French Polynesia"),
                            ("Qatar", "Qatar"),
                            ("Réunion", "Réunion"),
                            ("Romania", "Romania"),
                            ("Russian Federation", "Russian Federation"),
                            ("Rwanda", "Rwanda"),
                            ("Saudi Arabia", "Saudi Arabia"),
                            ("Sudan", "Sudan"),
                            ("Senegal", "Senegal"),
                            ("Singapore", "Singapore"),
                            (
                                "South Georgia and the South Sandwich Islands",
                                "South Georgia and the South Sandwich Islands",
                            ),
                            (
                                "Saint Helena, Ascension and Tristan da Cunha",
                                "Saint Helena, Ascension and Tristan da Cunha",
                            ),
                            ("Svalbard and Jan Mayen", "Svalbard and Jan Mayen"),
                            ("Solomon Islands", "Solomon Islands"),
                            ("Sierra Leone", "Sierra Leone"),
                            ("El Salvador", "El Salvador"),
                            ("San Marino", "San Marino"),
                            ("Somalia", "Somalia"),
                            ("Saint Pierre and Miquelon", "Saint Pierre and Miquelon"),
                            ("Serbia", "Serbia"),
                            ("South Sudan", "South Sudan"),
                            ("Sao Tome and Principe", "Sao Tome and Principe"),
                            ("Suriname", "Suriname"),
                            ("Slovakia", "Slovakia"),
                            ("Slovenia", "Slovenia"),
                            ("Sweden", "Sweden"),
                            ("Eswatini", "Eswatini"),
                            ("Sint Maarten (Dutch part)", "Sint Maarten (Dutch part)"),
                            ("Seychelles", "Seychelles"),
                            ("Syrian Arab Republic", "Syrian Arab Republic"),
                            ("Turks and Caicos Islands", "Turks and Caicos Islands"),
                            ("Chad", "Chad"),
                            ("Togo", "Togo"),
                            ("Thailand", "Thailand"),
                            ("Tajikistan", "Tajikistan"),
                            ("Tokelau", "Tokelau"),
                            ("Turkmenistan", "Turkmenistan"),
                            ("Timor-Leste", "Timor-Leste"),
                            ("Tonga", "Tonga"),
                            ("Trinidad and Tobago", "Trinidad and Tobago"),
                            ("Tunisia", "Tunisia"),
                            ("Turkey", "Turkey"),
                            ("Tuvalu", "Tuvalu"),
                            ("Taiwan, Province of China", "Taiwan, Province of China"),
                            ("Tanzania, United Republic of", "Tanzania, United Republic of"),
                            ("Uganda", "Uganda"),
                            ("Ukraine", "Ukraine"),
                            ("United States Minor Outlying Islands", "United States Minor Outlying Islands"),
                            ("Uruguay", "Uruguay"),
                            ("United States", "United States"),
                            ("Uzbekistan", "Uzbekistan"),
                            ("Holy See (Vatican City State)", "Holy See (Vatican City State)"),
                            ("Saint Vincent and the Grenadines", "Saint Vincent and the Grenadines"),
                            ("Venezuela, Bolivarian Republic of", "Venezuela, Bolivarian Republic of"),
                            ("Virgin Islands, British", "Virgin Islands, British"),
                            ("Virgin Islands, U.S.", "Virgin Islands, U.S."),
                            ("Viet Nam", "Viet Nam"),
                            ("Vanuatu", "Vanuatu"),
                            ("Wallis and Futuna", "Wallis and Futuna"),
                            ("Samoa", "Samoa"),
                            ("Yemen", "Yemen"),
                            ("South Africa", "South Africa"),
                            ("Zambia", "Zambia"),
                            ("Zimbabwe", "Zimbabwe"),
                        ],
                        default=("India", "India"),
                        max_length=100,
                        unique=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "active_from",
                    models.DateField(blank=True, default=datetime.datetime.now, verbose_name="Active From"),
                ),
                ("active_to", models.DateField(verbose_name="Active To")),
                ("perpetuity", models.BooleanField(verbose_name="Perpetuity")),
                (
                    "iso_code",
                    models.CharField(default="IN", max_length=100, unique=True, verbose_name="ISO Code"),
                ),
                ("default_name", models.CharField(max_length=100, null=True, verbose_name="Default name")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CreditorOutstandingbalance",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("vendorcode", models.CharField(max_length=100, verbose_name="Vendor Code")),
                ("vendorname", models.CharField(max_length=100, verbose_name="Vendor name")),
                ("vendorgroup", models.CharField(max_length=256, verbose_name="Vendor group")),
                ("amount", models.CharField(max_length=256, verbose_name="Vendor group")),
                ("dateoutstanding", models.DateField(verbose_name="Date Outstanding")),
            ],
        ),
        migrations.CreateModel(
            name="Curve_Data",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("curve_name", models.CharField(max_length=255, null=True, unique=True)),
                ("quote_date", models.DateField(null=True)),
                ("curve_points", models.TextField(null=True)),
                ("interpolation_algorithm", models.CharField(max_length=255, null=True)),
                ("holiday_calendar", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Curve_Repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("curve_name", models.CharField(max_length=255, null=True, unique=True)),
                ("quote_type", models.CharField(max_length=255, null=True)),
                ("curve_type", models.CharField(max_length=255, null=True)),
                ("curve_reference", models.CharField(max_length=255, null=True)),
                ("interpolation_algorithm", models.CharField(max_length=255, null=True)),
                ("bootstrap_algorithm", models.CharField(max_length=255, null=True)),
                ("generator_algorithm", models.CharField(max_length=255, null=True)),
                ("holiday_calendar", models.CharField(max_length=255, null=True)),
                ("curve_currency", models.CharField(max_length=255, null=True)),
                ("rate_index", models.CharField(max_length=255, null=True)),
                ("reference_data", models.CharField(max_length=255, null=True)),
                ("custom_reference_data", models.CharField(max_length=255, null=True)),
                ("tenor_name", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="data_management_computed_fields_config",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True)),
                ("element_id", models.CharField(max_length=255, null=True)),
                ("element_name", models.CharField(max_length=255, null=True)),
                ("element_config", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="data_management_computed_fields_flow",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=255, null=True, unique=True)),
                ("flowchart_xml", models.TextField(null=True)),
                ("flowchart_dict", models.TextField(null=True)),
                ("flowchart_elements", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="data_mapping_error_report",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("base_data_name", models.CharField(max_length=256)),
                ("mapping_ruleset_name", models.CharField(max_length=256)),
                ("list_of_items_not_mapped", models.TextField()),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Draft_FormData",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("table_name", models.CharField(max_length=255, null=True)),
                ("create_view_element_id", models.CharField(max_length=255, null=True)),
                ("user_info", models.TextField(null=True, verbose_name="User Data")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="DraftProcess",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("item_code", models.CharField(blank=True, max_length=100, null=True)),
                ("item_name", models.CharField(blank=True, max_length=255, null=True)),
                ("item_shortname", models.CharField(blank=True, max_length=10, null=True)),
                ("item_group_code", models.CharField(blank=True, max_length=100, null=True)),
                ("item_group_name", models.CharField(blank=True, max_length=100, null=True)),
                ("item_group_shortname", models.CharField(blank=True, max_length=10, null=True)),
                ("hover_option", models.CharField(blank=True, max_length=3, null=True)),
                ("item_level", models.CharField(blank=True, max_length=100, null=True)),
                ("item_popup_config", models.TextField(null=True)),
                ("item_url", models.TextField(null=True)),
                ("item_extra_details", models.TextField(null=True)),
                ("related_entity", models.CharField(blank=True, max_length=255, null=True)),
                ("app_allocation_status", models.CharField(blank=True, max_length=255, null=True)),
                ("share_with_group", models.TextField(null=True)),
                ("application", models.CharField(blank=True, max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Error_Master_Table",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("feature_category", models.CharField(max_length=255, null=True)),
                ("feature_subcategory", models.CharField(max_length=255, null=True)),
                ("table_file_name", models.CharField(max_length=255, null=True)),
                ("error_description", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="group_config",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("group_config", models.TextField(null=True)),
                ("screen_url", models.CharField(max_length=255)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="group_details",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                ("name", models.CharField(max_length=256, null=True, verbose_name="Name")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Hierarchy_groups",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                ("hierarchy_type", models.CharField(max_length=255, verbose_name="Hierarchy Type")),
                ("hierarchy_group", models.CharField(max_length=255, verbose_name="Hierarchy Group")),
                ("configuration_date", models.DateTimeField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Hierarchy_levels",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                (
                    "hierarchy_level_name",
                    models.CharField(max_length=255, null=True, verbose_name="Hierarchy Level Name"),
                ),
                ("hierarchy_level", models.IntegerField(default=0, verbose_name="Hierarchy Level")),
                ("hierarchy_type", models.CharField(max_length=255, verbose_name="Hierarchy Type")),
                ("hierarchy_group", models.CharField(max_length=255, verbose_name="Hierarchy Group")),
                ("configuration_date", models.DateField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Hierarchy_table",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                ("hierarchy_type", models.CharField(max_length=255, verbose_name="Hierarchy Type")),
                ("hierarchy_group", models.CharField(max_length=255, verbose_name="Hierarchy Group")),
                ("hierarchy_name", models.CharField(max_length=255, verbose_name="Hierarchy Name")),
                (
                    "hierarchy_description",
                    models.CharField(max_length=255, null=True, verbose_name="Hierarchy Description"),
                ),
                (
                    "hierarchy_parent_name",
                    models.CharField(max_length=255, null=True, verbose_name="Hierarchy Parent Name"),
                ),
                ("hierarchy_level", models.IntegerField(default=0, verbose_name="Hierarchy Level")),
                (
                    "hierarchy_level_name",
                    models.CharField(max_length=255, null=True, verbose_name="Hierarchy Level Name"),
                ),
                ("configuration_date", models.DateField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Holiday_Calendar_Repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "holiday_calendar",
                    models.CharField(max_length=255, null=True, verbose_name="Holiday calendar"),
                ),
                (
                    "holiday_calendar_tag",
                    models.CharField(max_length=255, null=True, verbose_name="Holiday calendar tag"),
                ),
                ("holiday_date", models.DateField(null=True, verbose_name="Holiday date")),
                ("holiday_description", models.TextField(null=True, verbose_name="Holiday description")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="jobs_scheduled",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=256)),
                ("start_date", models.DateField(auto_now=True)),
                ("end_date", models.DateField(auto_now=True)),
                ("periodicity", models.CharField(max_length=256)),
                ("time", models.CharField(max_length=256)),
                ("job_id", models.CharField(max_length=256)),
                ("task_config", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="list_of_scheduling_jobs",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("job_name", models.CharField(max_length=256)),
                ("job_verbose_name", models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name="ml_model_repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_type", models.CharField(max_length=255)),
                ("element_id", models.CharField(max_length=255)),
                ("element_name", models.CharField(max_length=255)),
                ("model", models.BinaryField(null=True)),
                ("model_output", models.TextField(null=True)),
                ("target_column_data_mapper", models.TextField(null=True)),
                ("use_case", models.TextField(null=True)),
                ("model_name", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Mobile",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(max_length=100)),
                ("manufacture", models.CharField(max_length=100)),
                ("description", models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name="Model_Repository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("model_code", models.CharField(max_length=255, unique=True)),
                ("model_type", models.CharField(max_length=255)),
                ("model_name", models.CharField(max_length=255)),
                ("model_category", models.CharField(max_length=255)),
                ("model_subcategory", models.CharField(max_length=255)),
                ("model_parent_group", models.CharField(max_length=255)),
                ("model_description", models.TextField(null=True)),
                ("model_inputs", models.TextField(null=True)),
                ("model_config", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="NavigationSideBar",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("item_code", models.CharField(blank=True, max_length=100, null=True)),
                ("item_name", models.CharField(blank=True, max_length=255, null=True)),
                ("item_shortname", models.CharField(blank=True, max_length=10, null=True)),
                ("item_group_code", models.CharField(blank=True, max_length=100, null=True)),
                ("item_group_name", models.CharField(blank=True, max_length=100, null=True)),
                ("item_group_shortname", models.CharField(blank=True, max_length=10, null=True)),
                ("hover_option", models.CharField(blank=True, max_length=3, null=True)),
                ("item_level", models.CharField(blank=True, max_length=100, null=True)),
                ("item_popup_config", models.TextField(null=True)),
                ("item_url", models.TextField(null=True)),
                ("item_extra_details", models.TextField(null=True)),
                ("related_entity", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "app_allocation_status",
                    models.CharField(blank=True, default="unallocated", max_length=255, null=True),
                ),
                ("share_with_group", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("element_id_ct", models.CharField(blank=True, max_length=1028, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Ocr_Template",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("template_name", models.CharField(max_length=255)),
                ("table_name", models.CharField(max_length=255)),
                ("region_of_interest", models.TextField()),
                ("template_image", models.ImageField(upload_to="users/ocr_templates")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="permissionaccess",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("userid", models.IntegerField(default=0, verbose_name="UserId")),
                ("username", models.CharField(max_length=255, null=True)),
                ("firstname", models.CharField(max_length=255, null=True)),
                ("lastname", models.CharField(max_length=255, null=True)),
                ("emailid", models.CharField(max_length=255, null=True)),
                ("permission_level", models.IntegerField(default=0, verbose_name="UserId")),
                ("permission_name", models.CharField(max_length=255, null=True)),
                ("requested_permission", models.CharField(max_length=255, null=True)),
                ("approved_by", models.CharField(max_length=255, null=True)),
                ("status", models.CharField(max_length=255, null=True)),
                ("permission_type", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Person_Web_Socket_Test",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("first_name", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Plan_Buckets",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("bucket_name", models.CharField(max_length=255, null=True)),
                ("bucket_id", models.CharField(max_length=255, null=True, unique=True)),
                ("plan_name", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Plans",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("plan_name", models.CharField(max_length=255, null=True, unique=True)),
                ("plan_description", models.TextField(null=True)),
                ("plan_access", models.CharField(max_length=255, null=True)),
                ("plan_members", models.TextField(null=True)),
                ("plan_labels", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Process_flow_model",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("app_code", models.CharField(blank=True, max_length=300)),
                ("process", models.CharField(blank=True, max_length=300)),
                ("subprocess", models.CharField(blank=True, max_length=300)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
                ("flow_id", models.CharField(blank=True, max_length=300, null=True)),
                ("flow", models.TextField(blank=True, max_length=2000)),
                ("current_status", models.CharField(blank=True, max_length=300)),
                ("element_name", models.CharField(blank=True, max_length=300, null=True)),
                ("tab_type", models.CharField(blank=True, max_length=300, null=True)),
                ("data_id", models.CharField(blank=True, max_length=1000, null=True)),
                ("element_id", models.CharField(blank=True, max_length=300)),
                ("detailed_status", models.TextField(blank=True, max_length=2000, null=True)),
                ("total_batch_data", models.CharField(blank=True, max_length=100, null=True)),
                ("pass_batch_data", models.CharField(blank=True, max_length=100, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Process_master",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("Process_code", models.CharField(max_length=255, verbose_name="Process Code")),
                ("Process_group_code", models.CharField(max_length=255, verbose_name="Process Group Code")),
                ("Process_group", models.CharField(max_length=255, verbose_name="Process Group")),
                ("Process_name", models.CharField(max_length=255, verbose_name="Process Name")),
                ("URL", models.CharField(max_length=255, null=True, verbose_name="URL")),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "verbose_name": "Process",
                "verbose_name_plural": "Processes",
            },
        ),
        migrations.CreateModel(
            name="Process_subprocess_flowchart",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("related_item_code", models.CharField(max_length=255, unique=True)),
                ("flowchart_xml", models.TextField(null=True)),
                ("flowchart_dict", models.TextField(null=True)),
                ("filename_xml", models.CharField(max_length=255, null=True)),
                ("flowchart_elements", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="summary_table",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("input_file_name", models.CharField(max_length=255, null=True)),
                ("master", models.CharField(max_length=255, null=True)),
                ("frequency", models.CharField(max_length=255, null=True)),
                ("date", models.CharField(max_length=255, null=True)),
                ("upload", models.CharField(max_length=255, null=True)),
                ("report_module", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tables",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tablename", models.CharField(max_length=255, unique=True)),
                ("fields", models.TextField(null=True)),
                ("model_type", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="TabScreens",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tab_header_name", models.CharField(max_length=255, null=True)),
                ("tab_icon", models.CharField(max_length=255, null=True)),
                ("tab_type", models.CharField(max_length=255, null=True)),
                ("tab_body_content", models.TextField(null=True)),
                ("level", models.CharField(max_length=100, null=True)),
                ("related_item_code", models.CharField(max_length=100, null=True)),
                ("element_id", models.CharField(max_length=300, null=True, unique=True)),
                ("shape", models.CharField(max_length=256, null=True)),
                ("user_name", models.CharField(max_length=100, null=True)),
                ("table_name", models.CharField(max_length=300, null=True)),
                ("computation_name", models.CharField(max_length=300, null=True)),
                ("fields", models.CharField(max_length=300, null=True)),
                ("tabs_multi_function", models.TextField(null=True)),
                ("custom_validation_condition", models.TextField(null=True)),
                ("other_config", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tasks_Planner",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("task_name", models.CharField(max_length=255, null=True)),
                ("task_id", models.CharField(max_length=255, null=True, unique=True)),
                ("bucket_name", models.CharField(max_length=255, null=True)),
                ("bucket_id", models.CharField(max_length=255, null=True)),
                ("plan_name", models.CharField(max_length=255, null=True)),
                ("due_date", models.DateField(null=True)),
                ("progress_status", models.CharField(max_length=255, null=True)),
                ("priority_status", models.CharField(max_length=255, null=True)),
                ("task_description", models.TextField(null=True)),
                ("task_members", models.TextField(null=True)),
                ("task_labels", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Templates",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("Category_Name", models.CharField(max_length=100, null=True, verbose_name="Category Name")),
                ("Category_Type", models.CharField(max_length=100, null=True, verbose_name="Category Type")),
                ("Category_Attributes", models.TextField(null=True, verbose_name="Category Attributes")),
                ("Category_Subelements", models.TextField(null=True, verbose_name="Category Subelements")),
                ("Description", models.TextField(null=True, verbose_name="Description")),
                ("Image", models.ImageField(blank=True, null=True, upload_to="", verbose_name="Image")),
            ],
        ),
        migrations.CreateModel(
            name="Upload_Error_History",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("file_name", models.CharField(max_length=255, null=True)),
                ("error_data", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="user_approval",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=255, null=True)),
                ("password", models.CharField(max_length=255, null=True)),
                ("email", models.CharField(max_length=255, null=True)),
                ("approval_status", models.CharField(max_length=255, null=True)),
                ("authentication_type", models.CharField(max_length=255, null=True)),
                ("action_requested", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="user_model",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=255, null=True)),
                ("password", models.CharField(max_length=255, null=True)),
                ("email", models.CharField(max_length=255, null=True)),
                ("ldap_login", models.BooleanField(verbose_name="LDAP-login")),
                ("application_login", models.BooleanField(verbose_name="Application-login")),
            ],
        ),
        migrations.CreateModel(
            name="UserConfig",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=256)),
                ("dataTablesConfig", models.TextField(null=True)),
                ("screen_url", models.TextField(null=True)),
                ("navBarConfig", models.TextField(null=True)),
                ("plot_config_home_page", models.TextField(null=True)),
                ("analysis_config", models.TextField(null=True)),
                ("tab_config_home_page", models.TextField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="usergroup_approval",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("user_id", models.IntegerField(default=0, verbose_name="User Id")),
                ("group_id", models.IntegerField(default=0, verbose_name="Group Id")),
                ("approval_status", models.CharField(max_length=255, null=True)),
                ("user_name", models.CharField(max_length=255, null=True)),
                ("group_name", models.CharField(max_length=255, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="userpermission_interim",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                ("usergroup", models.CharField(max_length=256, null=True, verbose_name="User group")),
                (
                    "permission_type",
                    models.CharField(max_length=256, null=True, verbose_name="Permission type"),
                ),
                (
                    "permission_level",
                    models.CharField(max_length=256, null=True, verbose_name="Permission level"),
                ),
                (
                    "permission_name",
                    models.CharField(max_length=256, null=True, verbose_name="Permission name"),
                ),
                (
                    "permission_level1",
                    models.CharField(max_length=256, null=True, verbose_name="Permission level1"),
                ),
                (
                    "approval_status",
                    models.CharField(max_length=256, null=True, verbose_name="Approval Status"),
                ),
                ("application", models.CharField(max_length=256, null=True)),
                ("application_dev", models.CharField(max_length=256, null=True)),
                ("app_code", models.CharField(max_length=256, null=True)),
                ("app_name", models.CharField(max_length=256, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserPermission_Master",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="Id")),
                ("usergroup", models.CharField(max_length=256, null=True, verbose_name="User group")),
                (
                    "permission_type",
                    models.CharField(
                        choices=[("Navbar", "Navbar"), ("Data hierarchy", "Data hierarchy")],
                        max_length=256,
                        null=True,
                        verbose_name="Permission type",
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[("0", "Process"), ("1", "Sub-process"), ("2", "Category")],
                        max_length=256,
                        null=True,
                        verbose_name="Permission level",
                    ),
                ),
                (
                    "permission_name",
                    models.CharField(max_length=256, null=True, verbose_name="Permission name"),
                ),
                ("application", models.CharField(max_length=256, null=True)),
                ("application_dev", models.CharField(max_length=256, null=True)),
                ("app_code", models.CharField(max_length=256, null=True)),
                ("app_name", models.CharField(max_length=256, null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("First_name", models.CharField(max_length=30)),
                ("Last_name", models.CharField(max_length=30)),
                ("job_title", models.CharField(max_length=30, null=True)),
                ("Bio", models.TextField(max_length=1000, null=True)),
                ("Location", models.CharField(max_length=30, null=True)),
                (
                    "profile_pic",
                    models.ImageField(
                        null=True,
                        upload_to="users/profile_pics",
                        verbose_name="Profile photo (Note - Upload only jpg/png file)",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        blank=True,
                        default=datetime.datetime(2022, 1, 19, 19, 10, 51, 916597, tzinfo=utc),
                        null=True,
                        verbose_name="date joined",
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        help_text="Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters",
                        max_length=30,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w.@+-]+$"), "Enter a valid username.", "invalid"
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(max_length=254, null=True, verbose_name="email")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Users_urlMap",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("url", models.CharField(max_length=264, null=True)),
                ("name", models.CharField(max_length=264, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("First_name", models.CharField(max_length=30)),
                ("Last_name", models.CharField(max_length=30)),
                ("job_title", models.CharField(blank=True, max_length=30)),
                ("Bio", models.TextField(blank=True, max_length=1000)),
                ("Location", models.CharField(blank=True, max_length=30)),
                (
                    "profile_pic",
                    models.ImageField(
                        blank=True,
                        upload_to="users/profile_pics",
                        verbose_name="Profile photo (Note - Upload only jpg/png file)",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        blank=True,
                        default=datetime.datetime(2022, 1, 19, 19, 10, 51, 874002, tzinfo=utc),
                        null=True,
                        verbose_name="date joined",
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        help_text="Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters",
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[\\w.@+-]+$"), "Enter a valid username.", "invalid"
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(max_length=254, null=True, verbose_name="email")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CurrencyMaster",
            fields=[
                ("currency_id", models.AutoField(primary_key=True, serialize=False, unique=True)),
                (
                    "currency_code",
                    models.CharField(
                        choices=[
                            ("AED", "AED"),
                            ("AFN", "AFN"),
                            ("ALL", "ALL"),
                            ("AMD", "AMD"),
                            ("ANG", "ANG"),
                            ("AOA", "AOA"),
                            ("ARS", "ARS"),
                            ("AUD", "AUD"),
                            ("AWG", "AWG"),
                            ("AZN", "AZN"),
                            ("BAM", "BAM"),
                            ("BBD", "BBD"),
                            ("BDT", "BDT"),
                            ("BGN", "BGN"),
                            ("BHD", "BHD"),
                            ("BIF", "BIF"),
                            ("BMD", "BMD"),
                            ("BND", "BND"),
                            ("BOB", "BOB"),
                            ("BRL", "BRL"),
                            ("BSD", "BSD"),
                            ("BTN", "BTN"),
                            ("BWP", "BWP"),
                            ("BYN", "BYN"),
                            ("BZD", "BZD"),
                            ("CAD", "CAD"),
                            ("CDF", "CDF"),
                            ("CHF", "CHF"),
                            ("CLP", "CLP"),
                            ("CNY", "CNY"),
                            ("COP", "COP"),
                            ("CRC", "CRC"),
                            ("CUC", "CUC"),
                            ("CUP", "CUP"),
                            ("CVE", "CVE"),
                            ("CZK", "CZK"),
                            ("DJF", "DJF"),
                            ("DKK", "DKK"),
                            ("DOP", "DOP"),
                            ("DZD", "DZD"),
                            ("EGP", "EGP"),
                            ("ERN", "ERN"),
                            ("ETB", "ETB"),
                            ("EUR", "EUR"),
                            ("FJD", "FJD"),
                            ("FKP", "FKP"),
                            ("GBP", "GBP"),
                            ("GEL", "GEL"),
                            ("GHS", "GHS"),
                            ("GIP", "GIP"),
                            ("GMD", "GMD"),
                            ("GNF", "GNF"),
                            ("GTQ", "GTQ"),
                            ("GYD", "GYD"),
                            ("HKD", "HKD"),
                            ("HNL", "HNL"),
                            ("HRK", "HRK"),
                            ("HTG", "HTG"),
                            ("HUF", "HUF"),
                            ("IDR", "IDR"),
                            ("ILS", "ILS"),
                            ("INR", "INR"),
                            ("IQD", "IQD"),
                            ("IRR", "IRR"),
                            ("ISK", "ISK"),
                            ("JMD", "JMD"),
                            ("JOD", "JOD"),
                            ("JPY", "JPY"),
                            ("KES", "KES"),
                            ("KGS", "KGS"),
                            ("KHR", "KHR"),
                            ("KMF", "KMF"),
                            ("KPW", "KPW"),
                            ("KRW", "KRW"),
                            ("KWD", "KWD"),
                            ("KYD", "KYD"),
                            ("KZT", "KZT"),
                            ("LAK", "LAK"),
                            ("LBP", "LBP"),
                            ("LKR", "LKR"),
                            ("LRD", "LRD"),
                            ("LSL", "LSL"),
                            ("LYD", "LYD"),
                            ("MAD", "MAD"),
                            ("MDL", "MDL"),
                            ("MGA", "MGA"),
                            ("MKD", "MKD"),
                            ("MMK", "MMK"),
                            ("MNT", "MNT"),
                            ("MOP", "MOP"),
                            ("MRO", "MRO"),
                            ("MUR", "MUR"),
                            ("MVR", "MVR"),
                            ("MWK", "MWK"),
                            ("MXN", "MXN"),
                            ("MYR", "MYR"),
                            ("MZN", "MZN"),
                            ("NAD", "NAD"),
                            ("NGN", "NGN"),
                            ("NIO", "NIO"),
                            ("NOK", "NOK"),
                            ("NPR", "NPR"),
                            ("NZD", "NZD"),
                            ("OMR", "OMR"),
                            ("PAB", "PAB"),
                            ("PEN", "PEN"),
                            ("PGK", "PGK"),
                            ("PHP", "PHP"),
                            ("PKR", "PKR"),
                            ("PLN", "PLN"),
                            ("PYG", "PYG"),
                            ("QAR", "QAR"),
                            ("RON", "RON"),
                            ("RSD", "RSD"),
                            ("RUB", "RUB"),
                            ("RWF", "RWF"),
                            ("SAR", "SAR"),
                            ("SBD", "SBD"),
                            ("SCR", "SCR"),
                            ("SDG", "SDG"),
                            ("SEK", "SEK"),
                            ("SGD", "SGD"),
                            ("SHP", "SHP"),
                            ("SLL", "SLL"),
                            ("SOS", "SOS"),
                            ("SRD", "SRD"),
                            ("SSP", "SSP"),
                            ("STD", "STD"),
                            ("SVC", "SVC"),
                            ("SYP", "SYP"),
                            ("SZL", "SZL"),
                            ("THB", "THB"),
                            ("TJS", "TJS"),
                            ("TMT", "TMT"),
                            ("TND", "TND"),
                            ("TOP", "TOP"),
                            ("TRY", "TRY"),
                            ("TTD", "TTD"),
                            ("TWD", "TWD"),
                            ("TZS", "TZS"),
                            ("UAH", "UAH"),
                            ("UGX", "UGX"),
                            ("USD", "USD"),
                            ("UYU", "UYU"),
                            ("UZS", "UZS"),
                            ("VEF", "VEF"),
                            ("VND", "VND"),
                            ("VUV", "VUV"),
                            ("WST", "WST"),
                            ("XAF", "XAF"),
                            ("XAG", "XAG"),
                            ("XAU", "XAU"),
                            ("XBA", "XBA"),
                            ("XBB", "XBB"),
                            ("XBC", "XBC"),
                            ("XBD", "XBD"),
                            ("XCD", "XCD"),
                            ("XDR", "XDR"),
                            ("XOF", "XOF"),
                            ("XPD", "XPD"),
                            ("XPF", "XPF"),
                            ("XPT", "XPT"),
                            ("XSU", "XSU"),
                            ("XTS", "XTS"),
                            ("XUA", "XUA"),
                            ("XXX", "XXX"),
                            ("YER", "YER"),
                            ("ZAR", "ZAR"),
                            ("ZMW", "ZMW"),
                            ("ZWL", "ZWL"),
                        ],
                        max_length=100,
                        verbose_name="Currency code",
                    ),
                ),
                (
                    "currency_name",
                    models.CharField(max_length=100, unique=True, verbose_name="Currency name"),
                ),
                (
                    "default_holiday_calendar",
                    models.CharField(max_length=100, null=True, verbose_name="Default holiday calendar"),
                ),
                ("configuration_date", models.DateField(null=True)),
                ("created_by", models.CharField(max_length=100)),
                ("created_date", models.DateTimeField(auto_now=True)),
                ("modified_by", models.CharField(max_length=100, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                ("transaction_id", models.CharField(max_length=300, null=True)),
                (
                    "country_name",
                    models.ForeignKey(
                        db_column="country_name",
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.CountryMaster",
                        verbose_name="Country",
                    ),
                ),
            ],
        ),
    ]
