import copy
from datetime import date
import json
import logging
import os
import pickle

from bs4 import BeautifulSoup, Tag
import numpy as np
import pandas as pd

from config.settings.base import redis_instance
from kore_investment.users.computations.db_centralised_function import (
    current_app_db_extractor,
    db_engine_extractor,
    extract_foreign_keys,
    non_standard_read_data_func,
    read_data_func,
    update_data_func,
)
from kore_investment.users.computations.standardised_functions import (
    add_html_grapesjs,
    add_scripts_grapesjs,
    computation_tab,
    data_connector,
    getPrCodeFromElementId,
    list_view_tab,
    ocr_tab,
    paginationNum,
    reorder_js,
    report_view_tab,
    updateBodyContent,
    uploadScreenTable,
)
from kore_investment.utils.utilities import tenant_schema_from_request

from . import dynamic_model_create


def defineVariable():
    var = """
    <script>
        let activeElement = "no";\
        var None = 'None';\
        var listViewTableDict={};\
        var listViewEditTemplate = {};\
        var createViewIdList = [];\
        var elementIDList=[];\
        var chartConfigDict={};\
        var crossFilterDict={};\
        var element_table_IDList = [];\
        var computationElementIdsArray = [];\
        var previousRunComputeElementIdArray = [];\
        var element_page = [];\
        var names = {};
        var app_code_home = '';\
        var user_home = '';\
        var item_code_list = [];\
        var grapejs = 1;\
        var m_col_basefilter = {};\
        var globalFuncList_scenario = [];\
        var variableList_scenario = [];\
        var analysiselementIDList=[];\
        var mColBasefilter = {};\
        var chartSaveEleIdList = [];\
        var chartSaveEleId = "";\
        var slicerTabConfigDict = {};\
        var sharedConfig = {"element_id":"", "config":[]};\
        var editType = "Enable";\
        var button_ids = ["savebutton_","saveDraftbutton_","customValidationList","calculateComp","viewHistory_","button-id-back","resetDraft_","previewDraft_","rejectedRecords","viewTransactions"];\
        function enableSaveButton () {\
        \n $(this).find('button[value=Save]').prop('disabled',false);\
      \n};\n
      function bta_apply() {
            let lba_data = {{lba_data | safe}};
            for (var key of Object.keys(lba_data)) {
              if(Object.keys(lba_data[key]).length != 0) {
              e_id = key;
              if (e_id.startsWith("whiteSpacewrap")) {
                if (!lba_data[key].includes("CreateView - Save")) {
                  $(`#savebutton_${e_id}`).attr("disabled", "true");
                  $(`#compare_existing_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Save as Draft")) {
                  $(`#saveDraftbutton_${e_id}`).attr("disabled", "true");
                  $(`#resetDraft_${e_id}`).attr("disabled", "true");
                  $(`#previewDraft_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Custom Validation")) {
                  $(`#customValidationList${e_id}`).attr("disabled", "true");
                  $(`#customValidation${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Refresh Computation")) {
                  $(`#calCompVal_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Back")) {
                  $(`#button-id-back${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - View History")) {
                  $(`#viewHistory_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("CreateView - View Rejected Records")) {
                  $(`#rejectedRecords${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - View Transaction Status")) {
                  $(`#showTransactions${e_id}`).attr("disabled", "true");
                  $(`#viewTransactions${e_id}`).attr("disabled", "true");
                }
              }
              if (e_id.startsWith("ellipse")) {
                if (!lba_data[key].includes("Analysis - Previous Versions")) {
                  $(`#previousVersion${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Save and Share")) {
                  $(`#saveShare${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Plot charts")) {
                  $(`#plotCharts${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - PDF")) {
                  $(`#analysisPDF${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Save")) {
                  $(`#saveChartConfigButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Global Settings")) {
                  $(`#globalButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Add tab")) {
                  $(`#analysisAddTab${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Tab config")) {
                  $(`#TabSettings${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Import dashboard")) {
                  $(`#importDashboard${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Publish")) {
                  $(`#publishDashboard${e_id}`).attr("disabled", "true");
                }
              }

              if (e_id.startsWith("parallelogram")) {
                if (!lba_data[key].includes("Computation - Run Model")) {
                  $(`#runModel_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("Computation - Configure Scenario")) {
                  $(`#scenarios_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("Computation - Filter")) {
                  $(`#filter_button_prev_run_computation${e_id}`).attr(
                    "disabled",
                    "true"
                  );
                  $(`#freezepane_button_prev_run_computation${e_id}`).attr(
                    "disabled",
                    "true"
                  );
                }
              }
              if (e_id.startsWith("document")) {
                if (!lba_data[key].includes("UploadView - Upload")) {
                  $(`#uploadFile${e_id}`).attr("disabled", "true");
                  $(`#downloadButton${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("UploadView - Map Columns")) {
                  $(`#columnMapperButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Custom Validation")) {
                  $(`#customValidationButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Add computation logic")) {
                  $(`#computedFieldMapperButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Download data")) {
                  $(`#downloadData${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Upload history")) {
                  $(`#downloadHistory${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Last upload errors")) {
                  $(`#downloadLastUploadErrors${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Detailed error log")) {
                  $(`#downloadErrorLog${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Transaction status")) {
                  $(`#showTransactions${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - SFTP connectors")) {
                  $(`#sftpUploadButton${e_id}`).attr("disabled", "true");
                }
              }
              if (e_id.startsWith("process")) {
                if (!lba_data[key].includes("ListView - Upload")) {
                  $(`#uploadButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Save template")) {
                  $(`#saveTemplateButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Set Alerts")) {
                  $(`#displayalert${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Paste Tabular Data")) {
                  $(`#tablegenerator_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Edit Mode")) {
                  $(`#editListView${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Delete all data")) {
                  $(`#listview_clearall_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Find and replace")) {
                  $(`#find_replace_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Freeze Panes")) {
                  $(`#freeze_pane_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Formatters")) {
                  $(`#formatter_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Transactions Status")) {
                  $(`#showTransactions${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Plot Charts")) {
                  $(`#plotCharts${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Filter")) {
                  $(`#filter_button_list_view${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Add Computed Fields")) {
                  $(`#addComp_field_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Expand")) {
                  $(`#example1_expand${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Extract Data")) {
                  $(`#extract_data_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Bulk Update")) {
                  $(`#bulk_update_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Conditional Delete")) {
                  $(`#conditional_delete_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Approve all")) {
                  $(`#approve_all_ApprovalTemplate_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Reject all")) {
                  $(`#reject_all_ApprovalTemplate_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Approve Multiple")) {
                  $(`#approve_multiple_ApprovalTemplate_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Reject Multiple")) {
                  $(`#reject_multiple_ApprovalTemplate_${e_id}`).attr("disabled", "true");
                }
              }
              $("section").addClass('visible-section')
          }else{
            $("section").addClass('visible-section')
          }
        }
      }
      $(document).ready(bta_apply);
    </script>
  """
    return var


def tabMultiFunc(tabs_multi_function_list, element_id, tab_type_list, request):

    dic_order = {}
    dic_order["order"] = {}
    dic_order["show"] = {}
    count = 0
    for i in range(len(tabs_multi_function_list)):
        if (
            tab_type_list[i] != "decision_box"
            and tab_type_list[i] != "connector"
            and tab_type_list[i] != "message"
            and tab_type_list[i] != "flowController"
        ):
            data_for_tab = ""
            if tabs_multi_function_list[i] == None:
                data_for_tab = json.dumps({"order": str(count + 1), "show": "1"})
                if (
                    tab_type_list[i] != "decision_box"
                    and tab_type_list[i] != "connector"
                    and tab_type_list[i] != "message"
                    and tab_type_list[i] != "flowController"
                ):
                    update_data_func(
                        request,
                        config_dict={
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    {
                                        "column_name": "tabs_multi_function",
                                        "input_value": data_for_tab,
                                        "separator": "",
                                    },
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "element_id",
                                    "condition": "Equal to",
                                    "input_value": element_id[i],
                                    "and_or": "",
                                }
                            ],
                        },
                    )
                    dic_order["show"][element_id[i]] = {"order": str(count + 1), "show": "1"}
                dic_order["order"][str(count + 1)] = str(i)

            else:
                data = json.loads(tabs_multi_function_list[i])
                dic_order["order"][str(data["order"])] = str(i)
                dic_order["show"][element_id[i]] = {"order": str(data["order"]), "show": data["show"]}
            count = count + 1
    return dic_order


def err_handler_taborder(tabs_multi_function_list, element_id, tab_type_list, order, request):
    count = 0
    error = 0
    for i in range(len(tab_type_list)):
        if (
            tab_type_list[i] != "decision_box"
            and tab_type_list[i] != "connector"
            and tab_type_list[i] != "message"
        ):
            if not order["order"].get(str(count + 1)):
                error = 1
            count = count + 1
    if error == 1:
        count = 0
        dic_order = {"order": {}, "show": {}}
        for i in range(len(tab_type_list)):
            if (
                tab_type_list[i] != "decision_box"
                and tab_type_list[i] != "connector"
                and tab_type_list[i] != "flowController"
                and tab_type_list[i] != "message"
            ):
                dic = {"order": str(count + 1), "show": "1"}
                dic_order["order"][str(count + 1)] = str(i)
                dic_order["show"][element_id[i]] = {"order": str(count + 1), "show": "1"}
                update_data_func(
                    request,
                    config_dict={
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "TabScreens",
                            "Columns": [
                                {
                                    "column_name": "tabs_multi_function",
                                    "input_value": json.dumps(dic),
                                    "separator": "",
                                },
                            ],
                        },
                        "condition": [
                            {
                                "column_name": "element_id",
                                "condition": "Equal to",
                                "input_value": element_id[i],
                                "and_or": "",
                            }
                        ],
                    },
                )
                count = count + 1
        return dic_order
    else:
        return order


def jsFieldsGenerator(
    element_id="", tab_type_list="", name="createview", pre_ele="whiteSpacewrap", subsequent=False
):
    js = """
      <style>
        .buttonstyling{
          margin-bottom:10px;
        }
      </style>
     <script>"""
    js = (
        js
        + """
      var dashboardSave_ = true;
      function editNameIndex(){
        let id_ = $(this).attr("id").replace("tabHeader","indextab");
        $(`#${id_}`).find("a").html($(this).text());
      }"""
    )
    if pre_ele != "process" and not subsequent:
        js += """
      const gotoTab = (parent, index) => {
          let id = '#analysis' + index;
          $(id).trigger('click');
        }"""
    if any(tab_type in ["create_view", "list_view"] for tab_type in tab_type_list):
        js += (
            """
        function checkCaseDependence(casesArray, JSAttrConfig) {
          for (let i = 0; i < JSAttrConfig.length; i++) {
            const attrConfig = JSAttrConfig[i];
            if(attrConfig.hasOwnProperty("cases")){
              if (casesArray.some(item => attrConfig.cases.includes(item))) {
                return true
              }
            }
          }
          return false
        }

        function cases(cases_,element_id) {
            var check_case = 0
            let casesCond = cases_["caseCond"]
            cases_ = cases_["cases"]
            $('#"""
            + f"""{name}"""
            + """'+element_id).find("input[data-cases], select[data-cases], textarea[data-cases]").each(function(){
              case_attr = JSON.parse($(this).attr("data-cases"))
              for(let i_ = 0; i_ < cases_.length; i_++) {
                if(case_attr.hasOwnProperty(cases_[i_])){

                  var val_ = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()
                  if ('field_based' in case_attr[cases_[i_]]){
                    if ('field_based' in case_attr[cases_[i_]] && $(this).attr('data-field_name') != case_attr[cases_[i_]]['field_based']){
                    if(case_attr[cases_[i_]]["condition"] == "Equal to"){
                    var value = '';
                    var value2 = '';
                    if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).is(':checkbox')) {
                      if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).prop('checked')) {
                        value = 'True';
                      } else {
                        value = 'False';
                      }
                    } else {
                      value = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val();
                    }
                    if ($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).is(':checkbox')) {
                      if ($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).prop('checked')) {
                        value2 = 'True';
                      } else {
                        value2 = 'False';
                      }
                    } else {
                      value2 = $("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val();
                    }
                    if(value == value2 && value != null && value2 != null && value != '' && value2 != ''){
                      check_case = check_case + 1
                    }
                  }else if(case_attr[cases_[i_]]["condition"] == "Not Equal to"){
                      var value = '';
                      var value2 = '';
                      if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).is(':checkbox')) {
                        if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).prop('checked')) {
                          value = 'True';
                        } else {
                          value = 'False';
                        }
                      } else {
                        value = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val();
                      }
                      if ($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).is(':checkbox')) {
                        if ($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).prop('checked')) {
                          value2 = 'True';
                        } else {
                          value2 = 'False';
                        }
                      } else {
                        value2 = $("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val();
                      }
                      if(value != value2 && value != null && value2 != null && value != '' && value2 != ''){
                        check_case = check_case + 1
                      }
                    }else if(case_attr[cases_[i_]]["condition"] == "Greater than"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                        var date2_ = new Date($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val())
                        if(date1_ > date2_){
                          check_case = check_case + 1
                        }
                      }else if (case_attr[cases_[i_]]["data_type"] =='TimeField'){
                        var date1_ = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()
                        var date2_ = $("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val()
                        if(date1_ > date2_ && date1_ != null && date2_ != null && date1_ != '' && date2_ != ''){
                          check_case = check_case + 1
                        }
                      }else{
                        if(parseFloat($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()) > parseFloat($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val())){
                          check_case = check_case + 1
                        }
                      }
                    }else if(case_attr[cases_[i_]]["condition"] == "Smaller than"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                        var date2_ = new Date($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val())
                        if(date1_ < date2_){
                          check_case = check_case + 1
                        }
                      }else if (case_attr[cases_[i_]]["data_type"] =='TimeField'){
                        var date1_ = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()
                        var date2_ = $("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val()
                        if(date1_ < date2_ && date1_ != null && date2_ != null && date1_ != '' && date2_ != ''){
                          check_case = check_case + 1
                        }
                      }else{
                        if(parseFloat($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()) < parseFloat($("#id_"+case_attr[cases_[i_]]["field_based"]+"_"+element_id).val())){
                          check_case = check_case + 1
                        }
                      }
                    }
                    }
                  }else{
                  if(case_attr[cases_[i_]]["condition"] == "Equal to"){
                      var value = '';
                      if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).is(':checkbox')) {
                        if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).prop('checked')) {
                          value = 'True';
                        } else {
                          value = 'False';
                        }
                      } else {
                        value = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val();
                      }
                      if(value == case_attr[cases_[i_]]["value"]){
                        check_case = check_case + 1
                      }
                    } else if(case_attr[cases_[i_]]["condition"] == "Not Equal to"){
                      var value = '';
                      if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).is(':checkbox')) {
                        if ($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).prop('checked')) {
                          value = 'True';
                        } else {
                          value = 'False';
                        }
                      } else {
                        value = $("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val();
                      }
                      if(value != case_attr[cases_[i_]]["value"]){
                        check_case = check_case + 1
                      }
                    } else if(case_attr[cases_[i_]]["condition"] == "Greater than"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                        var date2_ = new Date(case_attr[cases_[i_]]["value"])
                        if(date1_ > date2_){
                          check_case = check_case + 1
                        }
                      }else{
                        if(parseFloat($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()) > parseFloat(case_attr[cases_[i_]]["value"])){
                          check_case = check_case + 1
                        }
                      }
                    } else if(case_attr[cases_[i_]]["condition"] == "Smaller than"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                        var date2_ = new Date(case_attr[cases_[i_]]["value"])
                        if(date1_ < date2_){
                          check_case = check_case + 1
                        }
                      }else{
                        if(parseFloat($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val()) < parseFloat(case_attr[cases_[i_]]["value"])){
                          check_case = check_case + 1
                        }
                      }
                    } else if(case_attr[cases_[i_]]["condition"] == "In"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var identifier_ = false
                        for(let l = 0; l < case_attr[cases_[i_]]["value"].length; l++){
                          var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                          var date2_ = new Date(case_attr[cases_[i_]]["value"][l])
                          if(String(date1_) == String(date2_)){
                            identifier_ = true;
                            break;
                          }
                        }
                        if(identifier_){
                          check_case = check_case + 1
                        }
                      } else{
                        if(case_attr[cases_[i_]]["value"].includes($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())){
                          check_case = check_case + 1
                        }
                      }
                    } else if(case_attr[cases_[i_]]["condition"] == "Not In"){
                      if(case_attr[cases_[i_]]["data_type"] == "DateField" || case_attr[cases_[i_]]["data_type"] == "DateTimeField"){
                        var identifier_ = false
                        for(let l = 0; l < case_attr[cases_[i_]]["value"].length; l++){
                          var date1_ = new Date($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())
                          var date2_ = new Date(case_attr[cases_[i_]]["value"][l])
                          if(String(date1_) != String(date2_)){
                            identifier_ = true;
                            break;
                          }
                        }
                        if(identifier_){
                          check_case = check_case + 1
                        }
                      } else{
                        if(!case_attr[cases_[i_]]["value"].includes($("#id_"+case_attr[cases_[i_]]["column"]+"_"+element_id).val())){
                          check_case = check_case + 1
                        }
                      }
                    }
                  }

                }
              }
            })

            if(cases_ == undefined){
              return false
            }
            if (casesCond == "or"){
              if(cases_.length == 0){
                return true
              }
              if(check_case > 0) {
                return true
              }
            } else {
              if(check_case == cases_.length){
                return true
              } else {
                return false
              }
            }
            if(check_case == cases_.length) {
              return true
            } else {
              return false
            }

          }

        function InOperationTag(){

        }"""
        )
        if pre_ele != "process":
            js += """
        $(document).ready(function() {
        $('#ckEditorModal').on('shown.bs.modal', function() {
            $(document).off('focusin.modal');
        });
        $('body').css('pointer-events', 'all')

        var f_data = {}
        populateFK();

        foreignKeyJs();
        $('.form-row').find('input, select, textarea').each(function() {
          jsFunc_.call(this, initialRun=true);
        });

      })"""
        js += (
            """
      function jsChange() {
            var a = $(this).attr('data-jsattr')
            if(a) {
              var element_id1 = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
              if(element_id1.includes('unique')){
                element_id1 = element_id1.split('_')[0]
              }
              element_id1 = '"""
            + f"""{pre_ele}"""
            + """'+element_id1
              $('#savebutton_'+ element_id1).prop('disabled',false);
              a = JSON.parse(a);
              for(let key = 0; key < a.length; key++) {
                if(!a[key].hasOwnProperty("cases")){
                  a[key]["cases"] = []
                }
                var masterTable
                var masterCol
                var correspondingCol
                var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                if(element_id.includes('unique')){
                  element_id = element_id.split('_')[0]
                }
                element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
                if(a[key]['parentvalue'] == "Auto-populate") {
                  masterTable = a[key]['finaljsattr'][1][0]['value']
                  masterCol = a[key]['finaljsattr'][2][0]['value']
                  correspondingCol = a[key]['finaljsattr'][0][0]['value']['depMapper']
                  if(a[key].hasOwnProperty('allow_edit')){
                    allow_edit = a[key]['allow_edit']
                  }else{
                    allow_edit = 'no'
                  }

                  copy_class_to_apply = ""
                  paste_class_to_apply = ""
                  restrict_min_no_fields = ""
                  if(cases(a[key],element_id)) {
                    for(let i = 0; i < correspondingCol.length; i++) {
                      if(allow_edit == 'no'){
                          $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',true);
                          if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#e9ecef")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#e9ecef")
                          }
                      }else{
                          $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',false);
                          if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#fff")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#fff")
                          }
                      }
                    }
                    autopopulate.call(this,a,key,element_id)
                  } else {
                    for(let i = 0; i < correspondingCol.length; i++) {
                      if ($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr('data-fieldtype') == "MultiselectField") {

                      } else {
                        $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css('display','block');
                        if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass("select2")){
                        } else {
                          $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',false);
                          if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).find('span').find(".select2-selection.select2-selection--single").css("background-color","#fff")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#fff")
                          }
                        }
                      }
                    }
                  }
                } if(a[key]['parentvalue'] == "Cascading") {
                  if(cases(a[key],element_id)) {
                    cascadingJs.call(this,a,key,element_id)
                  }
                } if(a[key]['parentvalue'] == "Show-hide" || a[key]['parentvalue'] == "Show-hide_link" || a[key]['parentvalue'] == "Styling attribute") {
                  b1 = a[key]['finaljsattr'][2][0]["value"];
                  if (a[key]['parentvalue'] == "Styling attribute") {
                    if(b1['styleValidation'].length > 0) {
                      b1 = b1['styleValidation']
                    } else {
                      b1 = []
                      return;
                    }
                  } else {
                    b1 = a[key]['finaljsattr'][2][0]["value"];
                  }
                  for(let i = 0; i < b1.length; i++) {
                    var b = b1[i];
                    var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                    element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
                    if(b['condition'] == 'In' || b['condition'] == 'Not In') {
                      if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                      if(b['condition'] == 'In'){
                        cond_sh_ = b['value'].includes($(this).val())
                      }else{
                        cond_sh_ = !(b['value'].includes($(this).val()))
                      }
                        if(cond_sh_) {
                          commonFieldTrue(b,element_id)
                        } else {
                          commonFieldFalse(b['condition'],b1,element_id);
                        }
                      } else{
                        commonFieldFalse(b['condition'],b1,element_id,true);
                    }
                    } else if (b['condition'] == 'Equal to' || b['condition'] == 'Not Equal to') {
                      if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                        if($(this).is(':checkbox')){
                          input_val = $(this).prop('checked')
                          if(input_val){
                            input_val = 'True'
                          }else{
                            input_val = 'False'
                          }
                        }else{
                          input_val = $(this).val()
                        }
                        if(b['condition'] == 'Equal to'){
                          sh_cond_ = input_val == b['value']
                        }else{
                          sh_cond_ = input_val != b['value']
                        }
                        if(sh_cond_) {
                          commonFieldTrue(b,element_id)
                        } else {
                          commonFieldFalse('Equal to',b1,element_id);
                        }
                      } else {
                        commonFieldFalse("Equal to",b1,element_id,true)
                      }
                    } else if (b['condition'] == 'Greater then') {
                      var date
                      var date1
                      if ($(this).attr('type') == "date") {
                        date = new Date($(this).val())
                        if(b["value"].includes("-")) {
                          date1 = new Date(b['value'])
                        } else {
                          date1 = new Date("01-01-2299")
                        }
                      } else {
                        date = parseInt($(this).val())
                        date1 = parseInt(b['value'])
                      }
                      if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                        if(date > date1) {
                          commonFieldTrue(b,element_id)
                        } else {
                          commonFieldFalse('Greater then',b1,element_id);
                        }
                      } else{
                        commonFieldFalse("Greater then",b1,element_id,true)
                      }
                    } else if (b['condition'] == 'Smaller then') {
                      var date
                      var date1
                      if ($(this).attr('type') == "date") {
                        date = new Date($(this).val())
                        if(b["value"].includes("-")) {
                          date1 = new Date(b['value'])
                        } else {
                          date1 = new Date("01-01-1000")
                        }
                      } else {
                        date = parseInt($(this).val())
                        date1 = parseInt(b['value'])
                      }
                      if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                        if(date < date1) {
                          commonFieldTrue(b,element_id)
                        } else {
                          commonFieldFalse('Smaller then',b1,element_id);
                        }
                      } else {
                        commonFieldFalse("Smaller then",b1,element_id,true)
                      }
                    }
                    function commonFieldFalse(condition,val,element_id,cases_=false) {
                          var b = val
                          if(b) {
                            var b1 = b;
                            for(let i1 = 0; i1 < b1.length; i1++) {
                              var b = b1[i1]
                              for(let i = 0; i < b['selectedColumn'].length; i++) {
                                var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
                                if (parentDiv.hasClass('input-group')) {
                                  parentDiv = parentDiv.parent().parent('div.form-group');
                                } else if (parentDiv.hasClass('switch-container')) {
                                  parentDiv = parentDiv.parent().parent().parent('div.form-group');
                                } else {
                                  parentDiv = parentDiv.parent('div.form-group');
                                }
                                if (parentDiv.parent('div.form-group').length > 0) {
                                  parentDiv = parentDiv.parent('div.form-group');
                                }
                                if(!($('#id_'+b['selectedColumn'][i]+'_'+element_id).prop('required'))) {
                                  if(! b.hasOwnProperty('color')){
                                    if(!cases_){
                                      if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr("showCont") != "true") {
                                        parentDiv.css('display','none')
                                      }
                                    } else {
                                      parentDiv.css('display','block')
                                    }
                                  }
                                }
                                if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                  if(! b.hasOwnProperty('color')){
                                    if(!cases_){
                                      $('#'+b['selectedColumn'][i]+element_id).css('display','none')
                                    } else {
                                      $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('display','inline-block')
                                    }
                                  }
                                }
                                if(b.hasOwnProperty('color')){
                                  if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                    $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                    $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);

                                    if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                      $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                    }
                                    $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`)
                                    $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`)
                                    if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                                      $('#'+b['selectedColumn'][i]+element_id).parent().find('label').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                    }
                                  }
                                }
                              }
                            }
                          }
                      $('#"""
            + f"""{name}"""
            + """'+element_id).find('input, select').each(function() {
                        var c = $(this).attr('data-jsattr')
                        if(c) {
                          c = JSON.parse(c);
                          for(let keyc = 0; keyc < c.length; keyc++) {
                            if (c[keyc]['parentvalue'] == "Show-hide"  || c[keyc]['parentvalue'] == "Show-hide_link" || c[keyc]['parentvalue'] == "Styling attribute") {
                              if((c[keyc],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                c1 = c[keyc]['finaljsattr'][2][0]["value"];
                                if (c[keyc]['parentvalue'] == "Styling attribute") {
                                  if(c1['styleValidation'].length > 0) {
                                    c1 = c1['styleValidation']
                                  } else {
                                    c1 = []
                                  }
                                } else {
                                  c1 = c[keyc]['finaljsattr'][2][0]["value"];
                                }
                                for(let i1 = 0; i1 < c1.length; i1++) {
                                  var b = c1[i1]
                                  if(b['condition'] == 'In' || b['condition'] == 'Not In') {
                                    var ele_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                                    ele_id = '"""
            + f"""{pre_ele}"""
            + """'+ele_id
                                    if(b['condition'] == "In"){
                                      cond_sh_value = b['value'].includes($(this).val())
                                    }else{
                                      cond_sh_value = !(b['value'].includes($(this).val()))
                                    }
                                      if(cond_sh_value) {
                                        for(let i = 0; i < b['selectedColumn'].length; i++) {
                                          if(ele_id == element_id) {
                                            if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                              if(c1[i1].hasOwnProperty('color')) {
                                                $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`);
                                                $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`);
                                                if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                  $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                                }
                                                $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`)
                                                $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                              } else {
                                                $('#'+b['selectedColumn'][i]+element_id).css('display','block');
                                                $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                  $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                }
                                                $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                                                  $('#'+b['selectedColumn'][i]+element_id).parent().find('label').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                                }
                                              }
                                            } else {
                                              var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
                                              if (parentDiv.hasClass('input-group')) {
                                                parentDiv = parentDiv.parent().parent('div.form-group');
                                              } else {
                                                parentDiv = parentDiv.parent('div.form-group');
                                              }
                                              if (parentDiv.parent('div.form-group').length > 0) {
                                                parentDiv = parentDiv.parent('div.form-group');
                                              }
                                              if(c1[i1].hasOwnProperty('color')) {
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`${c1[i1]['color']}`);
                                                if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                  $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                                }
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`${c1[i1]['color']}`)
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                              } else {
                                                parentDiv.css('display','block');
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`transparent`);
                                                if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                  $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`transparent`);
                                                }
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`transparent`);
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`#e9ecef`);
                                                if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr('type') == 'file' || $('#id_'+b['selectedColumn'][i]+'_'+element_id) == 'image'){
                                                  $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('label').css('background-color',`transparent`);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                  } else if (b['condition'] == 'Equal to' || b['condition'] == 'Not Equal to') {
                                    var ele_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                                    ele_id = '"""
            + f"""{pre_ele}"""
            + """'+ele_id
                                    if($(this).is(':checkbox')){
                                      input_val = $(this).prop('checked')
                                      if(input_val){
                                        input_val = 'True'
                                      }else{
                                        input_val = 'False'
                                      }
                                    }else{
                                      input_val = $(this).val()
                                    }
                                    if(b['condition'] == 'Equal to'){
                                      cond_sh_ = input_val == b['value']
                                    }else{
                                      cond_sh_ = input_val != b['value']
                                    }
                                    if(cond_sh_) {
                                      for(let i = 0; i < b['selectedColumn'].length; i++) {
                                        if(ele_id == element_id) {
                                          if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                            if(c1[i1].hasOwnProperty('color')) {
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              $('#'+b['selectedColumn'][i]+element_id).css('display','inline-block');
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                                                $('#'+b['selectedColumn'][i]+element_id).find('label').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                            }
                                          } else {
                                            var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
                                            if (parentDiv.hasClass('input-group')) {
                                              parentDiv = parentDiv.parent().parent('div.form-group');
                                            } else {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if (parentDiv.parent('div.form-group').length > 0) {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if(c1[i1].hasOwnProperty('color')) {
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`${c1[i1]['color']}`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              parentDiv.css('display','block');
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`transparent`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`transparent`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`transparent`);
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`#e9ecef`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr('type') == 'file' || $('#id_'+b['selectedColumn'][i]+'_'+element_id) == 'image'){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('label').css('background-color',`transparent`);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  } else if (b['condition'] == "Greater then") {
                                    var ele_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                                    ele_id = '"""
            + f"""{pre_ele}"""
            + """'+ele_id
                                    var date
                                    var date1
                                    if ($(this).attr('type') == "date") {
                                      date = new Date($(this).val())
                                      if(b["value"].includes("-")) {
                                        date1 = new Date(b['value'])
                                      } else {
                                        date1 = new Date("01-01-2299")
                                      }
                                    } else {
                                      date = parseInt($(this).val())
                                      date1 = parseInt(b['value'])
                                    }
                                    if(date > date1) {
                                      for(let i = 0; i < b['selectedColumn'].length; i++) {
                                        if(ele_id == element_id) {
                                          if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                              if(c1[i1].hasOwnProperty('color')) {
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              $('#'+b['selectedColumn'][i]+element_id).css('display','inline-block');
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                                                $('#'+b['selectedColumn'][i]+element_id).find('label').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                            }
                                          } else {
                                            var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
                                            if (parentDiv.hasClass('input-group')) {
                                              parentDiv = parentDiv.parent().parent('div.form-group');
                                            } else {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if (parentDiv.parent('div.form-group').length > 0) {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if(c1[i1].hasOwnProperty('color')) {
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`${c1[i1]['color']}`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              parentDiv.css('display','block');
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`transparent`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`transparent`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`transparent`);
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`#e9ecef`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr('type') == 'file' || $('#id_'+b['selectedColumn'][i]+'_'+element_id) == 'image'){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('label').css('background-color',`transparent`);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  } else if (b['condition'] == "Smaller then") {
                                    var ele_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                                    ele_id = '"""
            + f"""{pre_ele}"""
            + """'+ele_id
                                    var date
                                    var date1
                                    if ($(this).attr('type') == "date") {
                                      date = new Date($(this).val())
                                      if(b["value"].includes("-")) {
                                        date1 = new Date(b['value'])
                                      } else {
                                        date1 = new Date("01-01-1000")
                                      }
                                    } else {
                                      date = parseInt($(this).val())
                                      date1 = parseInt(b['value'])
                                    }
                                    if(date < date1) {
                                      for(let i = 0; i < b['selectedColumn'].length; i++) {
                                        if(ele_id == element_id) {
                                          if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                                            if(c1[i1].hasOwnProperty('color')) {
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              $('#'+b['selectedColumn'][i]+element_id).css('display','inline-block');
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                                                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                                                $('#'+b['selectedColumn'][i]+element_id).find('label').css('background-color',`${$('#'+b['selectedColumn'][i]+element_id).attr("data-color")}`);
                                              }
                                            }
                                          } else {
                                            var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
                                            if (parentDiv.hasClass('input-group')) {
                                              parentDiv = parentDiv.parent().parent('div.form-group');
                                            } else {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if (parentDiv.parent('div.form-group').length > 0) {
                                              parentDiv = parentDiv.parent('div.form-group');
                                            }
                                            if(c1[i1].hasOwnProperty('color')) {
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`${c1[i1]['color']}`);
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').parent().css('background-color',`${c1[i1]['color']}`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`${c1[i1]['color']}`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`${c1[i1]['color']}`)
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`${c1[i1]['color']}`)
                                            } else {
                                              parentDiv.css('display','block');
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`transparent`);
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').parent().css('background-color',`gray`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`transparent`);
                                              }
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`transparent`);
                                              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`#e9ecef`);
                                              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr('type') == 'file' || $('#id_'+b['selectedColumn'][i]+'_'+element_id) == 'image'){
                                                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('label').css('background-color',`transparent`);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      })
                    }
                  }
                }
              }
            }
          }

      function populateFK(element=''){
        var element_id_list_ = [];
        var model_name_list_ = [];
        var column_name_list_ = [];
        var condition_list = [];
        if (element == '') {
          $('.form-row').find("[data-type='ForeignKey']").not("[data-is-autopopulate='yes'],[data-is-serverside-fetch='yes']").each(function() {
            if(($(this).attr('id').includes("whiteSpace")) || ($(this).attr('id').includes("process"))) {
              formElementId = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
              var conditionObject = {};
              if ($(this).attr('data-jsattr')) {
                var jsAttrArray = JSON.parse($(this).attr('data-jsattr'));
                var fk_filter_present = true
                for(let i = 0; i < jsAttrArray.length; i++) {
                  if (jsAttrArray[i]["parentvalue"] == "Foreign-key-relation") {

                    if (jsAttrArray[i]['finaljsattr'].length > 3){
                      master_cond = jsAttrArray[i]['finaljsattr'][3][0]
                      colb_cond = jsAttrArray[i]['finaljsattr'][4][0]

                      if(master_cond.hasOwnProperty('config')){
                        if (master_cond["config"].length){
                            fk_filter_present = false
                        }
                      }

                      if(colb_cond.hasOwnProperty('config')){
                        if(colb_cond["config"].length){
                            fk_filter_present = false
                        }
                      }
                    }

                    if (jsAttrArray[i]['finaljsattr'][2][0].hasOwnProperty('condition')) {
                      if (cases(jsAttrArray[i], formElementId)) {
                        conditionObject = jsAttrArray[i]['finaljsattr'][2][0]['condition'];
                      }
                    }
                  }
                }
                if (fk_filter_present) {
                  element_id_list_.push(formElementId)
                  model_name_list_.push($(this).attr('data-tablename'))
                  column_name_list_.push($(this).attr('name'))
                  condition_list.push(conditionObject);
                }
              } else {
                element_id_list_.push(formElementId)
                model_name_list_.push($(this).attr('data-tablename'))
                column_name_list_.push($(this).attr('name'))
                condition_list.push(conditionObject);
              }
            }
          })
        } else {
          if ($(element)) {
            element_id_list_.push($(element).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1])
            model_name_list_.push($(element).attr('data-tablename'))
            column_name_list_.push($(element).attr('name'))
            condition_list.push({});
          }
        }
        if (element_id_list_.length && model_name_list_.length && column_name_list_.length) {
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'popuplateForeignKeys',
              'element_id_list': JSON.stringify(element_id_list_),
              'model_name_list': JSON.stringify(model_name_list_),
              'column_name_list':JSON.stringify(column_name_list_),
              'condition_list':JSON.stringify(condition_list),
              'async': false,
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              if (element == "") {
                $('.form-row').find("[data-type='ForeignKey']").each(function() {
                  var tableFK = $(this).attr('data-tablename');
                  var columnFK = $(this).attr('name')
                  if (Object.keys(data).includes(tableFK)) {
                    if (Object.keys(data[tableFK]).includes(columnFK)) {
                      let existingValue = $(this).val();
                      if (['---', '----', ''].includes(existingValue)) {
                        existingValue = undefined;
                      }
                      $(this).empty();
                      let auto_disable = $(this).attr("data-autopoplate-disable")
                      if (!existingValue && $(this).attr("data-autopoplate-value")) {
                        existingValue = $(this).attr("data-autopoplate-value");
                        $(this).removeAttr("data-autopoplate-value")
                      }
                      $(this).empty();
                      let placeholder = $(this).attr("placeholder")
                      var optionHTML = '';
                      if(![undefined,""].includes(placeholder)){
                        optionHTML += `<option value='---' disabled selected>${placeholder}</option>`;
                      } else{
                        optionHTML += `<option value="">---</option>`;
                      }
                      for(let i=0,len=data[tableFK][columnFK].length;i<len; i++) {
                        var optionValue = data[tableFK][columnFK][i];
                        if (optionValue == existingValue) {
                          optionHTML += `<option value="${optionValue}" selected>${optionValue}</option>`;
                        } else {
                          if(auto_disable == "1"){
                            optionHTML += `<option value="${optionValue}" disabled>${optionValue}</option>`;
                          } else {
                            optionHTML += `<option value="${optionValue}">${optionValue}</option>`;
                          }
                        }
                      }
                      $(this).append(optionHTML)
                      if (existingValue) {
                        $(this).trigger('select2:select');
                        $(this).trigger('change');
                      }
                    }
                  }
                })
              } else {
                var tableFK = $(element).attr('data-tablename');
                var columnFK = $(element).attr('name')
                let existingValue = $(element).val();
                $(element).empty();
                let placeholder = $(element).attr("placeholder")
                if(![undefined,""].includes(placeholder)){
                  $(element).append(`<option value='---' disabled selected>${placeholder}</option>`)
                } else{
                  $(element).append(`<option value="">---</option>`);
                }
                var optionHTML = '';
                for(let i=0,len=data[tableFK][columnFK].length;i<len; i++) {
                  var optionValue = data[tableFK][columnFK][i];
                  if (optionValue == existingValue) {
                    optionHTML += `<option value="${optionValue}" selected>${optionValue}</option>`;
                  } else {
                    optionHTML += `<option value="${optionValue}">${optionValue}</option>`;
                  }
                }
                $(element).append(optionHTML)
              }
            },
            error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          });
        }
      }
      function foreignKeyJs(thisElement="", data_js_attr="", caller=""){
      """
        )
        if pre_ele != "process" and not subsequent:
            js += (
                """
        var call_ajax = true;
        var table = [];
        var column = [];
        var condition = [];
        var id_foreignKey = [];
        var condColumn = [];
        var condValue = [];
        var dynamicVal = [];
        var defvalue = [];
        var andOr = "and";
        var constraint = [];
        var ruleSet = [];
        var master_condVal = []
        var colb_condVal = []
        var fk_rel_filters = false
        var restrict_min_no_fields = "";
        var jsdata = []
        var fk_filter_list = []
        var fk_rel_filter_master = false
        var fk_rel_filter_colb = false
        var fk_iden = []
        if (thisElement === "" && data_js_attr === "") {
          for(let i = 0; i < $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").length; i++) {
            demo_table = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('data-table');
            demo_column = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('data-column');
            demo_defvalue = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('data-default_value');
            demo_id = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('id');
            var element_id_demo = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('id').split('"""
                + f"""{pre_ele}"""
                + """')[1]
            element_id_demo = '"""
                + f"""{pre_ele}"""
                + """'+element_id_demo
            fk_rel_filters = false
            tempfk = {}
            tempjsdata = {}
            tempmaster_condVal = {}
            tempcolb_condVal = {}
            if (demo_table) {
              var data_js_attr = $('.form-row').find('[data-jsattr]').not("[data-is-serverside-fetch='yes']").eq(i).attr('data-jsattr');
              if (data_js_attr) {
                data_js_attr = JSON.parse(data_js_attr)
                for(let i = 0; i < data_js_attr.length; i++) {
                  if(!data_js_attr[i].hasOwnProperty("cases")){
                    data_js_attr[i]['cases'] = []
                  }
                  if(data_js_attr[i]["parentvalue"] == "Foreign-key-relation") {
                    if(cases((data_js_attr[i]),element_id_demo)) {
                        tempfk[data_js_attr[i]["column"]] = []
                        tempmaster_condVal[data_js_attr[i]["column"]] = []
                        tempcolb_condVal[data_js_attr[i]["column"]] = []
                        tempjsdata[data_js_attr[i]["column"]] = data_js_attr
                        if (data_js_attr[i]['finaljsattr'].length > 3){
                          master_cond = data_js_attr[i]['finaljsattr'][3][0]
                          colb_cond = data_js_attr[i]['finaljsattr'][4][0]

                          if(master_cond.hasOwnProperty("config")){
                            if (master_cond["config"].length > 0){
                              master_cond_ = []
                              for(let ii=0; ii<master_cond["config"].length;ii++){
                                fk_rel_filters = true
                                fk_rel_filter_master = true
                                if($(`#id_${master_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                                  if($(`#id_${master_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                                    valt = '1'
                                  }else{
                                    valt = '0'
                                  }
                                }else{
                                  valt = $(`#id_${master_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).val()
                                }
                                if(valt){
                                  if(valt == "----"){
                                    valt = ""
                                  }
                                  master_cond_.push(valt)
                                }else{
                                  master_cond_.push("")
                                }
                              }
                              tempmaster_condVal[data_js_attr[i]["column"]] = master_cond_
                              fk_filter_list.push(data_js_attr[i]["column"])
                            }
                          }

                          if(colb_cond.hasOwnProperty("config")){
                            if(colb_cond["config"].length > 0){
                              colb_cond_ = []
                              for(let ii=0; ii<colb_cond["config"].length;ii++){
                                fk_rel_filters = true
                                fk_rel_filter_colb = true
                                if($(`#id_${colb_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                                  if($(`#id_${colb_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                                    valbt = '1'
                                  }else{
                                    valbt = '0'
                                  }
                                }else{
                                  valbt = $(`#id_${colb_cond["config"][ii]["inputFormColumn"]}_${element_id_demo}`).val()
                                }

                                if(valbt){
                                  if(valbt == "----"){
                                    valbt = ""
                                  }
                                  colb_cond_.push(valbt)
                                }else{
                                  colb_cond_.push("")
                                }
                              }
                              tempcolb_condVal[data_js_attr[i]["column"]] = colb_cond_
                              fk_filter_list.push(data_js_attr[i]["column"])
                            }
                          }

                          if(fk_rel_filter_master || fk_rel_filter_colb){
                            tempfk[data_js_attr[i]["column"]].push(1)
                          }
                        }

                      // Check for existing value
                      if($('.form-row').find(`#${demo_id}`).find("option").length <= 1 || fk_rel_filters) {
                        tempfk[data_js_attr[i]["column"]].push(0)
                        if (data_js_attr[i]['finaljsattr'][2][0].hasOwnProperty('andOr')) {
                          andOr = data_js_attr[i]['finaljsattr'][2][0]['andOr'];
                        }
                        if (data_js_attr[i]['finaljsattr'][2][0].hasOwnProperty('condition')) {
                          condition.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['cond'])
                          condColumn.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['column'])
                          condValue.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['value'])
                          if (data_js_attr[i]['finaljsattr'][2][0]['condition'].hasOwnProperty('dynamicVal')){
                            dynamicVal.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['dynamicVal'])
                          } else {
                            dynamicVal.push("");
                          }
                          if (data_js_attr[i]['finaljsattr'][2][0]['condition'].hasOwnProperty('constraint')){
                            constraint.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['constraint'])
                          } else {
                            constraint.push("");
                          }
                          if (data_js_attr[i]['finaljsattr'][2][0]['condition'].hasOwnProperty('ruleSet')){
                            ruleSet.push(data_js_attr[i]['finaljsattr'][2][0]['condition']['ruleSet'])
                          } else {
                            ruleSet.push("");
                          }
                        } else {
                          condition.push([])
                          condColumn.push([])
                          condValue.push([])
                          dynamicVal.push([])
                          constraint.push([])
                          ruleSet.push([])
                        }
                        table.push(demo_table)
                        column.push(demo_column);
                        defvalue.push(demo_defvalue)
                        id_foreignKey.push(demo_id);
                      }
                    }
                  }
                }
              }
            }

            if(Object.keys(tempfk).length > 0 ){
              for(let [key,value] of Object.entries(tempfk) ){
                if(value.length == 1){
                  fk_iden.push(tempfk)
                }else{
                  if(value.includes(1)){
                    tempfk[key] = [1]
                    fk_iden.push(tempfk)
                  }else{
                    tempfk[key] = [0]
                    fk_iden.push(tempfk)
                  }
                }
              }
            }

            if(Object.keys(tempjsdata).length > 0 ){
              jsdata.push(tempjsdata)
            }

            if(Object.keys(tempmaster_condVal).length > 0 ){
              master_condVal.push(tempmaster_condVal)
            }

            if(Object.keys(tempcolb_condVal).length > 0 ){
              colb_condVal.push(tempcolb_condVal)
            }
          }
        } else {
          demo_table = $(thisElement).attr('data-table');
          demo_column = $(thisElement).attr('data-column');
          demo_defvalue = $(thisElement).attr('data-default_value');
          demo_id = $(thisElement).attr('id');
          var element_id_demo = $(thisElement).attr('id').split('"""
                + f"""{pre_ele}"""
                + """')[1]
          element_id_demo = '"""
                + f"""{pre_ele}"""
                + """'+element_id_demo
          tempjsdata = {}
          tempmaster_condVal = {}
          tempcolb_condVal = {}
          tempfk = {}
          tempfk[data_js_attr["column"]] = []
          if(!data_js_attr.hasOwnProperty("cases")){
            data_js_attr['cases'] = []
          }
          if (demo_table) {
            if(cases((data_js_attr),element_id_demo)) {
              if (data_js_attr['finaljsattr'].length > 3){
                master_cond = data_js_attr['finaljsattr'][3][0]
                colb_cond = data_js_attr['finaljsattr'][4][0]

                if(master_cond.hasOwnProperty("config")){
                  if (master_cond["config"].length > 0){
                    master_cond_ = []
                    for(let i=0; i<master_cond["config"].length;i++){
                      fk_rel_filters = true
                      fk_rel_filter_master = true
                      if($(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                        if($(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                          valt = '1'
                        }else{
                          valt = '0'
                        }
                      }else{
                        valt = $(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).val()
                      }
                      if(valt && valt != "----"){
                        master_cond_.push(valt)
                      }
                    }
                    tempmaster_condVal[data_js_attr["column"]] = master_cond_
                    fk_filter_list.push(data_js_attr["column"])
                  }
                }

                if(colb_cond.hasOwnProperty("config")){
                  if(colb_cond["config"].length > 0){
                    colb_cond_ = []
                    for(let i=0; i<colb_cond["config"].length;i++){
                      fk_rel_filters = true
                      fk_rel_filter_colb = true
                      if($(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                        if($(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                          valbt = '1'
                        }else{
                          valbt = '0'
                        }
                      }else{
                        valbt = $(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).val()
                      }
                      if(valbt && valbt != "----"){
                        colb_cond_.push(valbt)
                      }
                    }
                    tempcolb_condVal[data_js_attr["column"]] = colb_cond_
                    fk_filter_list.push(data_js_attr["column"])
                  }
                }

                if(fk_rel_filter_master || fk_rel_filter_colb){
                  tempfk[data_js_attr["column"]].push(1)
                }
              }
              var hasConditions = false;
              if (data_js_attr['finaljsattr'][2][0].hasOwnProperty('condition')) {
                if (!(data_js_attr['finaljsattr'][2][0].condition.constraint.length == 1 && data_js_attr['finaljsattr'][2][0].condition.constraint[0] == '')) {
                  hasConditions = true;
                }
              }

              if($(thisElement).find("option").length <= 1 || fk_rel_filters || hasConditions) {
                tempfk[data_js_attr["column"]].push(0)
                if (data_js_attr['finaljsattr'][2][0].hasOwnProperty('condition')) {
                  condition.push(data_js_attr['finaljsattr'][2][0]['condition']['cond'])
                  condColumn.push(data_js_attr['finaljsattr'][2][0]['condition']['column'])
                  condValue.push(data_js_attr['finaljsattr'][2][0]['condition']['value'])
                  if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('dynamicVal')){
                    dynamicVal.push(data_js_attr['finaljsattr'][2][0]['condition']['dynamicVal'])
                  }else {
                    dynamicVal.push("");
                  }
                  if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('constraint')){
                    constraint.push(data_js_attr['finaljsattr'][2][0]['condition']['constraint'])
                  } else {
                    constraint.push("");
                  }
                  if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('ruleSet')){
                    ruleSet.push(data_js_attr['finaljsattr'][2][0]['condition']['ruleSet'])
                  } else {
                    ruleSet.push("");
                  }
                } else {
                  condition.push([])
                  condColumn.push([])
                  condValue.push([])
                  dynamicVal.push([])
                  constraint.push([])
                  ruleSet.push([])
                }
                table.push(demo_table)
                column.push(demo_column);
                defvalue.push(demo_defvalue)
                id_foreignKey.push(demo_id);
              }
            }
          }

          if(Object.keys(tempfk).length > 0 ){
            for(let [key,value] of Object.entries(tempfk) ){
              if(value.length == 1){
                fk_iden.push(tempfk)
              }else{
                if(value.includes(1)){
                  tempfk[key] = [1]
                  fk_iden.push(tempfk)
                }else{
                  tempfk[key] = [0]
                  fk_iden.push(tempfk)
                }
              }
            }
          }

          tempjsdata[data_js_attr["column"]] = [data_js_attr]
          jsdata.push(tempjsdata)

          if(Object.keys(tempmaster_condVal).length > 0 ){
            master_condVal.push(tempmaster_condVal)
          }

          if(Object.keys(tempcolb_condVal).length > 0 ){
            colb_condVal.push(tempcolb_condVal)
          }
        }
        fk_filter_list_set = new Set(fk_filter_list)
        fk_filter_list = Array.from(fk_filter_list_set)
        fk_to_call = false
        if(fk_filter_list.length == 0){
          fk_to_call = true
        }
        for(let i=0;i<fk_filter_list.length;i++){
          if(fk_rel_filter_master){
            fk_to_call = true
            break
          }
          if(fk_rel_filter_master || fk_rel_filter_colb){
            fk_to_call = true
            break
          }
        }

        if(fk_rel_filter_master || fk_rel_filter_colb && caller != "jsfunc"){
          fk_to_call = true
        }
        else if(fk_rel_filter_master || fk_rel_filter_colb && caller == "jsfunc"){
          fk_to_call = false
        }
        if (table.length > 0 && fk_to_call) {
          $.ajax({
              url:`/users/${urlPath}/dynamicVal/`,
              data: {
                'operation':'foreign',
                'table': JSON.stringify(table),
                'column': JSON.stringify(column),
                'condition':JSON.stringify(condition),
                'condColumn': JSON.stringify(condColumn),
                'condValue': JSON.stringify(condValue),
                'dynamicVal': JSON.stringify(dynamicVal),
                'constraint':JSON.stringify(constraint),
                'ruleSet':JSON.stringify(ruleSet),
                'data_js_attr': JSON.stringify(jsdata),
                'master_condVal':JSON.stringify(master_condVal),
                'colb_condVal':JSON.stringify(colb_condVal),
                'fk_iden': JSON.stringify(fk_iden),
                'async': false,
              },
              type: 'POST',
              dataType: "json",
              success: function (data) {
                if(data.data.length == 0){
                  for(let i = 0; i < id_foreignKey.length; i++) {
                    $('.form-row').find(`#${id_foreignKey[i]}`).empty()
                  }
                }else{
                  for(let i = 0; i < data.data.length; i++) {
                    $('.form-row').find(`#${id_foreignKey[i]}`).empty()
                    let placeholder = $('.form-row').find(`#${id_foreignKey[i]}`).attr("placeholder")
                    if(![undefined,""].includes(placeholder)){
                      var html = `<option value='---' disabled selected>${placeholder}</option>`
                    } else{
                      var html = "<option value=''>---</option>"
                    }
                    for(let j = 0, len=data.data[i].length; j < len; j++) {
                      var optionValue = data.data[i][j];
                      if(defvalue[i] == String(optionValue) && defvalue[i] != "def"){
                        html += `<option value='${optionValue}' selected >${optionValue}</option>`;
                      }else{
                        html += `<option value='${optionValue}'>${optionValue}</option>`;
                      }
                    }
                    $('.form-row').find(`#${id_foreignKey[i]}`).append(html);
                  }
                }
              },
              error: ()=>{
                  Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            });
        } else {

        }"""
            )

        js += """
        }

      function foreignKeyJs1(thisElement, data_js_attr){

      var call_ajax = true;
      var table = [];
      var column = [];
      var condition = [];
      var id_foreignKey = [];
      var condColumn = [];
      var condValue = [];
      var dynamicVal = [];
      var defvalue = [];
      var andOr = "and";
      var constraint = [];
      var ruleSet = [];
      var master_condVal = []
      var colb_condVal = []
      var fk_rel_filters = false
      var restrict_min_no_fields = "";
      var jsdata = []
      var fk_filter_list = []
      var fk_rel_filter_master = false
      var fk_rel_filter_colb = false
      var fk_iden = []

      var demo_table = $(thisElement).attr('data-table');
      var demo_column = $(thisElement).attr('data-column');
      demo_defvalue = $(thisElement).attr('data-default_value');
      demo_id = $(thisElement).attr('id');
      var element_id_demo = ""
      if($(thisElement).attr('id').includes("whiteSpacewrap")){
        element_id_demo = $(thisElement).attr('id').split('whiteSpacewrap')[1]
        element_id_demo = 'whiteSpacewrap'+element_id_demo
      }else{
        element_id_demo = $(thisElement).attr('id').split('process')[1]
        element_id_demo = 'process'+element_id_demo
      }
      tempjsdata = {}
      tempmaster_condVal = {}
      tempcolb_condVal = {}
      tempfk = {}
      tempfk[demo_column] = []
      if(!data_js_attr.hasOwnProperty("cases")){
        data_js_attr['cases'] = []
      }
      if (demo_table) {
        if(cases((data_js_attr),element_id_demo)) {
          demo_table = data_js_attr.table;
          demo_column = data_js_attr.column;
          tempfk = {};
          tempfk[demo_column] = []
          if (data_js_attr['finaljsattr'].length > 3){
            master_cond = data_js_attr['finaljsattr'][3][0]
            colb_cond = data_js_attr['finaljsattr'][4][0]

            if(master_cond.hasOwnProperty("config")){
              if (master_cond["config"].length > 0){
                master_cond_ = []
                for(let i=0; i<master_cond["config"].length;i++){
                  fk_rel_filters = true
                  fk_rel_filter_master = true
                  if($(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                    if($(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                      valt = '1'
                    }else{
                      valt = '0'
                    }
                  }else{
                    valt = $(`#id_${master_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).val()
                  }
                  if(valt){
                    master_cond_.push(valt)
                  }else{
                    master_cond_.push("")
                  }
                }
                tempmaster_condVal[demo_column] = master_cond_
                fk_filter_list.push(demo_column)
              }
            }

            if(colb_cond.hasOwnProperty("config")){
              if(colb_cond["config"].length > 0){
                colb_cond_ = []
                for(let i=0; i<colb_cond["config"].length;i++){
                  fk_rel_filters = true
                  fk_rel_filter_colb = true
                  if($(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(':checkbox')){
                    if($(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).is(":checked")){
                      valbt = '1'
                    }else{
                      valbt = '0'
                    }
                  }else{
                    valbt = $(`#id_${colb_cond["config"][i]["inputFormColumn"]}_${element_id_demo}`).val()
                  }
                  if(valbt){
                    colb_cond_.push(valbt)
                  }else{
                    colb_cond_.push("")
                  }
                }
                tempcolb_condVal[demo_column] = colb_cond_
                fk_filter_list.push(demo_column)
              }
            }

            if(fk_rel_filter_master || fk_rel_filter_colb){
              tempfk[demo_column].push(1)
            }
          }

          if($(thisElement).find("option").length <= 1 || fk_rel_filters) {

            tempfk[demo_column].push(0)

            if (data_js_attr['finaljsattr'][2][0].hasOwnProperty('condition')) {
              condition.push(data_js_attr['finaljsattr'][2][0]['condition']['cond'])
              condColumn.push(data_js_attr['finaljsattr'][2][0]['condition']['column'])
              condValue.push(data_js_attr['finaljsattr'][2][0]['condition']['value'])
              if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('dynamicVal')){
                dynamicVal.push(data_js_attr['finaljsattr'][2][0]['condition']['dynamicVal'])
              }else {
                dynamicVal.push("");
              }
              if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('constraint')){
                constraint.push(data_js_attr['finaljsattr'][2][0]['condition']['constraint'])
              } else {
                constraint.push("");
              }
              if (data_js_attr['finaljsattr'][2][0]['condition'].hasOwnProperty('ruleSet')){
                ruleSet.push(data_js_attr['finaljsattr'][2][0]['condition']['ruleSet'])
              } else {
                ruleSet.push("");
              }
            } else {
              condition.push([])
              condColumn.push([])
              condValue.push([])
              dynamicVal.push([])
              constraint.push([])
              ruleSet.push([])
            }
            table.push(demo_table)
            column.push(demo_column);
            defvalue.push(demo_defvalue)
            id_foreignKey.push(demo_id);
          }
        }
      }

      if(Object.keys(tempfk).length > 0 ){
        for(let [key,value] of Object.entries(tempfk) ){
          if(value.length == 1){
            fk_iden.push(tempfk)
          }else{
            if(value.includes(1)){
              tempfk[key] = [1]
              fk_iden.push(tempfk)
            }else{
              tempfk[key] = [0]
              fk_iden.push(tempfk)
            }
          }
        }
      }

      tempjsdata[demo_column] = [data_js_attr]
      jsdata.push(tempjsdata)

      if(Object.keys(tempmaster_condVal).length > 0 ){
        master_condVal.push(tempmaster_condVal)
      }

      if(Object.keys(tempcolb_condVal).length > 0 ){
        colb_condVal.push(tempcolb_condVal)
      }

      fk_filter_list_set = new Set(fk_filter_list)
      fk_filter_list = Array.from(fk_filter_list_set)
      fk_to_call = false
      if(fk_filter_list.length == 0){
        fk_to_call = true
      }
      for(let i=0;i<fk_filter_list.length;i++){
        if(fk_rel_filter_master){
          fk_to_call = true
          break
        }
        if(fk_rel_filter_master || fk_rel_filter_colb){
          fk_to_call = true
          break
        }
      }

      if (table.length > 0 && fk_to_call) {
        $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'foreign',
              'table': JSON.stringify(table),
              'column': JSON.stringify(column),
              'condition':JSON.stringify(condition),
              'condColumn': JSON.stringify(condColumn),
              'condValue': JSON.stringify(condValue),
              'dynamicVal': JSON.stringify(dynamicVal),
              'constraint':JSON.stringify(constraint),
              'ruleSet':JSON.stringify(ruleSet),
              'data_js_attr': JSON.stringify(jsdata),
              'master_condVal':JSON.stringify(master_condVal),
              'colb_condVal':JSON.stringify(colb_condVal),
              'fk_iden': JSON.stringify(fk_iden),
              'id_foreignKey': JSON.stringify(id_foreignKey),
              'async': false,
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              if(data.data.length == 0){
                for(let i = 0; i < data.id_foreignKey.length; i++) {
                  $('.form-row').find(`#${data.id_foreignKey[i]}`).empty()
                }
              }else{
                for(let i = 0; i < data.data.length; i++) {
                  $('.form-row').find(`#${data.id_foreignKey[i]}`).empty()
                  let placeholder = $('.form-row').find(`#${data.id_foreignKey[i]}`).attr("placeholder")
                  if(![undefined,""].includes(placeholder)){
                    var html = `<option value='---' disabled selected>${placeholder}</option>`
                  } else{
                    var html = "<option value=''>---</option>"
                  }
                  for(let j=0,len=data.data[i].length;j<len; j++) {
                    var optionValue = data.data[i][j];
                    if(defvalue[i] == String(optionValue) && defvalue[i] != "def"){
                      html += `<option value='${optionValue}' selected >${optionValue}</option>`;
                    } else {
                      html += `<option value='${optionValue}'>${optionValue}</option>`;
                    }
                  }
                  $('.form-row').find(`#${data.id_foreignKey[i]}`).append(html);
                }
              }
            },
            error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          });
      } else {

      }
      }

      function autopopulate(a,key,element_id){
        masterTable = a[key]['finaljsattr'][1][0]['value']
        masterCol = a[key]['finaljsattr'][2][0]['value']
        masterColDep = []
        var allowEdit = a[key]["allow_edit"];

        if(a[key]['finaljsattr'][2][0].hasOwnProperty("indValue")){
          masterColDep = a[key]['finaljsattr'][2][0]['indValue'];
          if (masterColDep == undefined){
            masterColDep = []
          }
        } else{
          masterColDep = [];
        }
        masterColMap = []
        if(a[key]['finaljsattr'][2][0].hasOwnProperty("depValue")){
          masterColMap = a[key]['finaljsattr'][2][0]['depValue'];
          if (masterColMap == undefined){
            masterColMap = []
          }
        } else{
          masterColMap = [];
        }

        if(a[key]["auto_values"] == "yes"){
          auto_values = true
        }else{
          auto_values = false
        }
        masterColDepVal = [];
        for(let p = 0; p < masterColDep.length; p++) {
          masterColDepVal.push($("#id_" + masterColDep[p] + "_" + element_id).val());
        }
        correspondingCol = a[key]['finaljsattr'][0][0]['value']['depMapper']
        let dependentColumns = a[key]['finaljsattr'][0][0]['value']['depField'];
        let fetchUserFieldData = [];
        for (let i of fetchUserFieldData) {
          if (($(`#id_${i}_${element_id}`).attr('data-field-type') == 'UserField') && $(`#id_${i}_${element_id}`).attr('data-is-autopopulate') == 'yes') {
            fetchUserFieldData[i] = correspondingCol[dependentColumns.indexOf(i)];
          }
        }
        var value = ""
        if(auto_values && $(this).is("select")){
          temp_ = []
          $(this).find('option').filter(':selected').each(function(){
            temp_.push($(this).text())
          })
          value = temp_
          if (value && value.constructor == Array){
            value = JSON.stringify(value)
          }
        }
        else{
          value = $(this).val()
          if (value && value.constructor == Array){
            value = JSON.stringify(value)
          }else if(value && value.startsWith('{')){
            value = ""
          }
        }

        if (allowEdit == "no") {
          for(let i = 0; i < a[key]['finaljsattr'][0][0]['value']['depField'].length; i++) {
            if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass("select2")){
              $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).find('option').prop("disabled", true)
              $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr("data-autopoplate-disable", "1");
            } else if ($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('hasDatepicker')) {
              $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).datepicker('disable');
              $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('disabled', false);
            } else {
              $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',true);
            }
          }
        }
        if (value && value != "" && value != "----" && value != "---" && value != "[]" && value != '["----"]' && value != '[""]' && value != "['----']" && value != '["---"]') {
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'autopopulate',
              'masterTable': masterTable,
              'masterCol': masterCol,
              'masterColDep': JSON.stringify(masterColMap),
              'masterColDepValue': JSON.stringify(masterColDepVal),
              'column': JSON.stringify(correspondingCol),
              'fetchUserFieldData': JSON.stringify(fetchUserFieldData),
              'value':value
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              if (data.data.length > 0){
                for(let i = 0; i < data.data[0].length; i++) {
                  if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr('data-fieldtype') == "MultiselectField"){
                    valList = []
                    for(let j = 0; j < data.data.length; j++) {
                      if(data.data[j][i]){
                        valList.push(data.data[j][i])
                      }
                    }

                    if ($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr('data-is-serverside-fetch') == "yes") {
                      $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).val(valList.join(",")).trigger('change')
                      for (let i = 0; i < valList.length; i++) {
                        const element = valList[i];
                        $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+'unique').append(`<option value="${element}" selected>${element}</option>`);
                      }
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+'unique').select2();
                    } else {
                      idss = []
                      let val_list = {}
                      let tick_list = []
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+'unique').find('option').each(function(){
                          if(valList.includes($(this).text())){
                              idss.push($(this).val())
                              tick_list.push($(this).index())
                          }
                      })
                      for(let i=0;i<idss.length;i++){
                        val_list[idss[i]] = ""
                      }
                      $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr("data-autopoplate-value", JSON.stringify(valList));
                      $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).val(JSON.stringify(val_list)).trigger('change')
                      if(element_id.startsWith('whiteSpacewrap')){
                        coloredElementTick[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = valList
                        coloredElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = {}
                        valuedElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = []
                        coloredElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = val_list
                        tick[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = tick_list
                        for (let kk in valList){
                          valuedElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]].push('')
                        }
                      }

                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+'unique').val(idss).trigger('change.select2');
                    }
                  }
                  else {
                    let dependentFieldElement = $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id);
                    let isAutopopulatedField = dependentFieldElement.attr('data-is-autopopulate');
                    let isServerSideField = dependentFieldElement.attr('data-is-serverside-fetch');
                    if (isAutopopulatedField == "yes" || isServerSideField == "yes") {
                      var userFieldData = data.user_field_data;
                      if (dependentFieldElement.hasClass("select2")) {
                        dependentFieldElement.empty();
                        if (dependentFieldElement.prop('multiple')) {
                          for(let ii=0;ii< data.data.length; ii++){
                            for(let jj=0;jj<data.data[ii].length;jj++){
                              valList.push(data.data[ii][jj])
                              dependentFieldElement.append(`<option value='${data.data[ii][jj]}' selected>${data.data[ii][jj]}</option>`);
                            }
                          }
                        } else {
                          if (Array(Object.keys(fetchUserFieldData)).includes(a[key]['finaljsattr'][0][0]['value']['depField'][i])) {
                            var autopopulatedOption = data.data[0][i];
                            for (let userDetails of userFieldData) {
                              if (userDetails.username == autopopulatedOption) {
                                dependentFieldElement.append(`<option value='${autopopulatedOption}' data-email='${userDetails.email}' data-fname='${userDetails.first_name}' data-lname='${userDetails.last_name}' data-pic='${userDetails.profile_pic}' selected>${autopopulatedOption}</option>`);
                                break;
                              } else {
                                continue;
                              }
                            }
                          } else {
                            dependentFieldElement.append(`<option value='${data.data[0][i]}' selected>${data.data[0][i]}</option>`);
                          }
                        }
                        dependentFieldElement.trigger('select2:select');
                        dependentFieldElement.trigger('change');
                      } else if(dependentFieldElement.is(':checkbox')) {
                        if(data.data[0][i]){
                          dependentFieldElement.prop("checked",true)
                          dependentFieldElement.val("on").trigger("change")
                        }else{
                          dependentFieldElement.prop("checked",false);
                          dependentFieldElement.trigger('change');
                        }
                      } else {
                        dependentFieldElement.val(data.data.at(-1)[i]).trigger('change');
                      }
                    } else {
                      var optionValid = true;
                      let opts = true;
                      valList = []
                      if(dependentFieldElement.hasClass("select2")){
                        if(dependentFieldElement.find(`option`).length == 0){
                          opts = false
                        }

                        var selectOptions = [];
                        dependentFieldElement.find('option').each(function(){selectOptions.push($(this).val())});

                        if(dependentFieldElement.prop('multiple')){
                          for(let ii=0;ii< data.data.length; ii++){
                            for(let jj=0;jj<data.data[ii].length;jj++){
                              valList.push(data.data[ii][jj])
                              dependentFieldElement.find(`option[value="${data.data[ii][jj]}"]`).prop("disabled", false)
                            }
                          }

                          if (valList.some(ele => selectOptions.includes(ele))) {
                            dependentFieldElement.attr("data-autopoplate-value", valList);
                            dependentFieldElement.val(valList).trigger("change");
                            dependentFieldElement.val(valList).trigger("select2:select");
                          } else {
                            dependentFieldElement.attr("data-autopoplate-value", valList);
                            dependentFieldElement.val([]).trigger("select2.change");
                            optionValid = false;
                          }
                        } else {
                          dependentFieldElement.find(`option[value="${data.data[0][i]}"]`).prop("disabled", false)
                          if (dependentFieldElement.find(`option[value="${data.data[0][i]}"]`).length > 0 && data.data[0][i]) {
                            dependentFieldElement.attr("data-autopoplate-value", data.data[0][i]);
                            dependentFieldElement.val(data.data[0][i]).trigger("select2:select");
                            dependentFieldElement.val(data.data[0][i]).trigger("change");
                          } else {
                            dependentFieldElement.attr("data-autopoplate-value", data.data[0][i]);
                            dependentFieldElement.val('').trigger("select2.change");
                            optionValid = false;
                          }
                        }
                      } else if(dependentFieldElement.is(':checkbox')) {
                        if(data.data[0][i]){
                          dependentFieldElement.prop("checked",true)
                          dependentFieldElement.val("on").trigger("change")
                        }else{
                          dependentFieldElement.prop("checked",false)
                        }
                      } else {
                        dependentFieldElement.val(data.data.at(-1)[i]).trigger('change')
                      }
                    }
                  }
                }
              } else {
                for(let i = 0; i < a[key]['finaljsattr'][0][0]['value']['depField'].length; i++) {
                  let dependentFieldElement = $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id);
                  let isAutopopulatedField = dependentFieldElement.attr('data-is-autopopulate');
                  if (isAutopopulatedField == "yes") {
                    if (dependentFieldElement.find('option').length > 0) {
                      dependentFieldElement.empty();
                      dependentFieldElement.trigger('select2:select');
                    }
                  } else {
                    if(dependentFieldElement.attr('data-fieldtype') == "MultiselectField"){
                      dependentFieldElement.val(JSON.stringify({})).trigger('change')
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+'unique').val([]).trigger('change.select2');
                      if(element_id.startsWith('whiteSpacewrap')){
                        coloredElementTick[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = []
                        coloredElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = {}
                        valuedElement[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = []
                        tick[element_id+'_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]] = []
                      }
                    } else {
                      let curr_val = dependentFieldElement.val()
                      let staticValPresent = dependentFieldElement.attr("data-static_val");

                      if(staticValPresent == "1"){
                        dependentFieldElement.val(curr_val).trigger("change");
                      }else{
                        if (dependentFieldElement.hasClass('select2')) {
                          if (dependentFieldElement.find('option[value=""]').length > 0) {
                            dependentFieldElement.find('option[value=""]').prop('disabled', false);
                            dependentFieldElement.val('').trigger("select2.change");
                          }
                        } else {
                          dependentFieldElement.val('').trigger("change");
                        }
                      }
                      if(dependentFieldElement.is(':checkbox')) {
                        dependentFieldElement.prop("checked",false)
                      }
                    }
                  }
                }
              }
            },
            error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          })
        }
      }
      function queryMasterNewJsActions(a,key,element_id,first){
        var conditions = a[key]['finaljsattr']['conditions']
        var outputColumn = a[key]['finaljsattr']['column']
        var masterColumn = a[key]['finaljsattr']['master_column']
        var flag = true
        for (let i in conditions){
          if (conditions[i]['condition_type'] == 'field_based'){
            if ($(`#id_${conditions[i]['conditional_input_value']}_${element_id}`).val() == ''){
              flag = false
            }else{
              conditions[i]['conditional_input_value'] = $(`#id_${conditions[i]['conditional_input_value']}_${element_id}`).val()
            }
          }
        }
        if (flag){
        $.ajax({
          url: `/users/${urlPath}/dynamicVal/`,
          data: {
              'operation': 'queryMasterTableData',
              'conditions': JSON.stringify(conditions),
              'table':a[key]['finaljsattr']['master_table'],
              'masterColumn':masterColumn,
            },
            type: "POST",
            dataType:"json",
            success:function(data){
              if('data' in data){
                if (a[key]['finaljsattr']['master_column_datatype'] == 'IntegerField' || a[key]['finaljsattr']['master_column_datatype'] == 'BigIntegerField'){
                  value = parseInt(data['data'])
                }else if (a[key]['finaljsattr']['master_column_datatype']== 'FloatField'){
                  value = parseFloat(data['data'])
                }else if (a[key]['finaljsattr']['master_column_datatype']== 'DateTimeField' || a[key]['finaljsattr']['master_column_datatype'] == 'DateField'){
                  value = new Date(data['data']);
                }else if (a[key]['finaljsattr']['master_column_datatype']== 'TimeField'){
                  value= new Date("01/01/2007 "+ data['data'])
                }
                if ($(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).hasClass("custom-range")){
                  $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first,value,a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),false,true)).trigger('change')
                  sildervalue_float(`section_rangeValue_float_${a[key]['finaljsattr']['column']}_${element_id}`,`id_${a[key]['finaljsattr']['column']}_${element_id}`)
                }else{
                  $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first,value,a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),false,true)).trigger('change')
                }

              }
            }, error: ()=>{
              Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
        });
        }
      }
      function newJsActions(a,key,element_id){
        var first_dependant_field = $(`#id_${a[key]['finaljsattr']['first_dependant_field']}_${element_id}`)
        var second_dependant_field = $(`#id_${a[key]['finaljsattr']['second_dependant_field']}_${element_id}`)
        if ('static' in a[key]['finaljsattr'] && a[key]['finaljsattr']['static'] =='static'){
          if ($(first_dependant_field).val() != ''){
          if ($(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).hasClass("custom-range")){
            $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first_dependant_field,a[key]['finaljsattr']['static_value'],a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),true,false)).trigger('change')
            sildervalue_float(`section_rangeValue_float_${a[key]['finaljsattr']['column']}_${element_id}`,`id_${a[key]['finaljsattr']['column']}_${element_id}`)
          }else{
            $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first_dependant_field,a[key]['finaljsattr']['static_value'],a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),true,false)).trigger('change')
          }

          }
        }else if('static' in a[key]['finaljsattr'] && a[key]['finaljsattr']['static'] =='master_field_comparison'){
          if ($(first_dependant_field).val() != ''){
          queryMasterNewJsActions(a,key,element_id,first_dependant_field)
          }
        }
        else{
        if ($(first_dependant_field).val() != '' && $(second_dependant_field).val() != '' ){
          if ($(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).hasClass("custom-range")){
            $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first_dependant_field,second_dependant_field,a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),false,false)).trigger('change')
            sildervalue_float(`section_rangeValue_float_${a[key]['finaljsattr']['column']}_${element_id}`,`id_${a[key]['finaljsattr']['column']}_${element_id}`)
          }else{
            $(`#id_${a[key]['finaljsattr']['column']}_${element_id}`).val(newJsActionsAggregation(first_dependant_field,second_dependant_field,a[key]['finaljsattr']['operation'],$(`#id_${a[key]['finaljsattr']['column']}_${element_id}`),false,false)).trigger('change')
          }

          }
        }


      }
      function newJsActionsAggregation(first,second,agg,outputCol,static,master){
        var returnedValue = ''
        var firstValue = ''
        var secondValue = ''
        if ($(first).attr('datatype') == 'FloatField'){
          firstValue = parseFloat($(first).val())
        }else if ($(first).attr('datatype') == 'IntegerField' || $(first).attr('datatype') == 'BigIntegerField'){
          firstValue = parseInt($(first).val())
        }else if ($(first).attr('datatype') == 'DateTimeField' || $(first).attr('datatype') == 'DateField'){
          firstValue = new Date($(first).val());
        }else if ($(first).attr('datatype') == 'TimeField'){
          firstValue = new Date("01/01/2007 "+ $(first).val());
        }
        if (static){
          secondValue = parseFloat(second)
        }
        else if (master){
          secondValue = second
        }
        else if ($(second).attr('datatype') == 'FloatField'){
          secondValue = parseFloat($(second).val())
        }else if ($(second).attr('datatype') == 'IntegerField'  || $(second).attr('datatype') == 'BigIntegerField'){
          secondValue = parseInt($(second).val())
        }else if ($(second).attr('datatype') == 'DateTimeField' || $(second).attr('datatype') == 'DateField'){
          secondValue = new Date($(second).val());
        }else if ($(second).attr('datatype') == 'TimeField'){
          secondValue = new Date("01/01/2007 "+ $(second).val());
        }
        if (['FloatField','IntegerField','BigIntegerField'].includes($(first).attr('datatype'))&& (static || master || ['FloatField','IntegerField','BigIntegerField'].includes($(second).attr('datatype')))){
          if (agg =='addition'){
            returnedValue = firstValue+secondValue
          }else if (agg =='subtraction'){
            returnedValue = firstValue-secondValue
          }else if (agg =='multiplication'){
            returnedValue = firstValue*secondValue
          }else if (agg =='division'){
            returnedValue = firstValue/secondValue
          }
        }else if (['DateField','IntegerField','FloatField','DateTimeField','BigIntegerField'].includes($(first).attr('datatype'))&& (static || master || ['DateField','IntegerField','FloatField','DateTimeField','BigIntegerField'].includes($(second).attr('datatype')))){
            if (agg =='addition'){
              if (['DateField','DateTimeField'].includes($(outputCol).attr('datatype'))){
                if (['DateField','DateTimeField'].includes($(first).attr('datatype'))){
                  firstValue.setDate(firstValue.getDate() + secondValue);
                  const year = firstValue.getFullYear();
                  const month = String(firstValue.getMonth() + 1).padStart(2, '0');
                  const day = String(firstValue.getDate()).padStart(2, '0');
                  const hours = String(firstValue.getHours()).padStart(2, '0');
                  const minutes = String(firstValue.getMinutes()).padStart(2, '0');
                  const seconds = String(firstValue.getSeconds()).padStart(2, '0');
                  if ($(first).attr('datatype') == 'DateField'){
                    var dateString = `${year}-${month}-${day}`;
                  }else{
                    var dateString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                  }
                  returnedValue = dateString;
                }else if (['DateField','DateTimeField'].includes($(second).attr('datatype'))){
                  secondValue.setDate(secondValue.getDate() + firstValue);
                  const year = secondValue.getFullYear();
                  const month = String(secondValue.getMonth() + 1).padStart(2, '0');
                  const day = String(secondValue.getDate()).padStart(2, '0');
                  const hours = String(secondValue.getHours()).padStart(2, '0');
                  const minutes = String(secondValue.getMinutes()).padStart(2, '0');
                  const seconds = String(secondValue.getSeconds()).padStart(2, '0');
                  if ($(second).attr('datatype') == 'DateField'){
                    var dateString = `${year}-${month}-${day}`;
                  }else{
                    var dateString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                  }
                  returnedValue = dateString;
                }
              }else{
            if(['DateField','DateTimeField'].includes($(first).attr('datatype'))){
              firstValue = firstValue.getTime()
            }
            if (['DateField','DateTimeField'].includes($(second).attr('datatype'))){
              secondValue = secondValue.getTime()
            }
            returnedValue = (firstValue + secondValue)/ (1000 * 3600 *24)
            returnedValue = String(returnedValue)
            }
            }else if (agg =='subtraction'){
              if (['DateField','DateTimeField'].includes($(outputCol).attr('datatype'))){
              if (['DateField','DateTimeField'].includes($(first).attr('datatype'))){
                firstValue.setDate(firstValue.getDate() - secondValue);
                const year = firstValue.getFullYear();
                const month = String(firstValue.getMonth() + 1).padStart(2, '0');
                const day = String(firstValue.getDate()).padStart(2, '0');
                const hours = String(firstValue.getHours()).padStart(2, '0');
                const minutes = String(firstValue.getMinutes()).padStart(2, '0');
                const seconds = String(firstValue.getSeconds()).padStart(2, '0');
                if ($(first).attr('datatype') == 'DateField'){
                  var dateString = `${year}-${month}-${day}`;
                }else{
                  var dateString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                }
                returnedValue = dateString;
              }else if (['DateField','DateTimeField'].includes($(second).attr('datatype'))){
                secondValue.setDate(secondValue.getDate() - firstValue);
                const year = secondValue.getFullYear();
                const month = String(secondValue.getMonth() + 1).padStart(2, '0');
                const day = String(secondValue.getDate()).padStart(2, '0');
                const hours = String(secondValue.getHours()).padStart(2, '0');
                const minutes = String(secondValue.getMinutes()).padStart(2, '0');
                const seconds = String(secondValue.getSeconds()).padStart(2, '0');
                if ($(second).attr('datatype') == 'DateField'){
                  var dateString = `${year}-${month}-${day}`;
                }else{
                  var dateString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                }
                returnedValue = dateString;
              }
            }else{
            if(['DateField','DateTimeField'].includes($(first).attr('datatype'))){
              firstValue = firstValue.getTime()
            }
            if (['DateField','DateTimeField'].includes($(second).attr('datatype'))){
              secondValue = secondValue.getTime()
            }
            returnedValue = (firstValue - secondValue)/ (1000 * 3600 *24)
            returnedValue = String(returnedValue)
            }
            }else if (agg =='multiplication'){
              returnedValue = ''
            }else if (agg =='division'){
              returnedValue = ''
            }
          }else if (['TimeField','IntegerField','FloatField','BigIntegerField'].includes($(first).attr('datatype'))&& (static || master ||['TimeField','IntegerField','FloatField','BigIntegerField'].includes($(second).attr('datatype')))){
              if (agg =='addition'){
                if (['TimeField'].includes($(outputCol).attr('datatype'))){
                  if (['TimeField'].includes($(first).attr('datatype'))){
                    returnedValue = `${firstValue.getHours() + secondValue}:${firstValue.getMinutes()}:${firstValue.getSeconds()}`;
                  }else if (['TimeField'].includes($(second).attr('datatype'))){
                    returnedValue = `${secondValue.getHours() + firstValue}:${secondValue.getMinutes()}:${secondValue.getSeconds()}`;
                  }
                }else{
                  if (['TimeField'].includes($(first).attr('datatype'))){
                    returnedValue = firstValue.getHours() + secondValue;
                  }else if (['TimeField'].includes($(second).attr('datatype'))){
                    returnedValue = secondValue.getHours() + firstValue;
                  }
                }
              }else if (agg =='subtraction'){
                if (['TimeField'].includes($(outputCol).attr('datatype'))){
                if (['TimeField'].includes($(first).attr('datatype'))){
                    returnedValue = `${firstValue.getHours() - secondValue}:${firstValue.getMinutes()}:${firstValue.getSeconds()}`;
                  }else if (['TimeField'].includes($(second).attr('datatype'))){
                    returnedValue = `${secondValue.getHours() - firstValue}:${secondValue.getMinutes()}:${secondValue.getSeconds()}`;
                  }
              }else{
                if (['TimeField'].includes($(first).attr('datatype'))){
                    returnedValue = firstValue.getHours()- secondValue.getHours();
                  }else if (['TimeField'].includes($(second).attr('datatype'))){
                    returnedValue = secondValue.getHours() - firstValue.getHours();
                  }
              }
              }else if (agg =='multiplication'){
                returnedValue = ''
              }else if (agg =='division'){
                returnedValue = ''
              }
            }
        return returnedValue
      }
      function autopopulateConstant(a,key,element_id){
        masterTable_ = a[key]['finaljsattr'][0][0]['table_name']
        masterCol_ = a[key]['finaljsattr'][0][0]['table_column']
        correspondingCol_ = a[key]['finaljsattr'][0][0]['column_value']
        dropdown_value = a[key]['finaljsattr'][0][0]['dropdown_value']
        copy_class_to_apply = ""
        paste_class_to_apply = ""
        restrict_min_no_fields = ""
        if(a[key].hasOwnProperty('allow_edit_c')){
          allow_edit = a[key]['allow_edit_c']
        }else{
          allow_edit = 'no'
        }
        if(a[key]['finaljsattr'][0][0].hasOwnProperty('static_inp_val')){
          static_inp_val = a[key]['finaljsattr'][0][0]['static_inp_val']
        }else{
          static_inp_val = ''
        }
        let fieldInputElement = $('#id_'+a[key]['finaljsattr'][0][0]['table_column'] +'_'+element_id);
        let scenarioValidated = false;
        let existingValuePrecedence = fieldInputElement.attr('data-existingValuePrecedence');
        let autoPopPrecedenceScenario = fieldInputElement.attr('data-autoPopPrecedenceScenario');
        let isScenarioAutoPop = false;
        if (a[key].hasOwnProperty("cases")) {
          if (a[key]["cases"].length > 0) {
            isScenarioAutoPop = true;
          }
        }

        if(cases(a[key],element_id)) {
          scenarioValidated = true;
          if(allow_edit == 'no'){
            fieldInputElement.prop('readonly', true);
            if(fieldInputElement.hasClass('select2')){
              fieldInputElement.find('option').prop("disabled", true)
              fieldInputElement.parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#e9ecef")
            }else{
              fieldInputElement.css("background-color","#e9ecef")
            }
            if (fieldInputElement.hasClass('hasDatepicker')) {
              fieldInputElement.datepicker('disable');
              fieldInputElement.prop('disable', false);
            }
          }else{
            fieldInputElement.prop('readonly', false);
            if(fieldInputElement.hasClass('select2')){
              fieldInputElement.find('option').prop("disabled", false)
              fieldInputElement.parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#fff")
            }else{
              fieldInputElement.css("background-color","#fff")
            }
            if (fieldInputElement.hasClass('hasDatepicker')) {
              fieldInputElement.datepicker('enable');
            }
          }
        } else {
          if(fieldInputElement.hasClass("select2")){
            fieldInputElement.find('option').prop("disabled", false)
          } else {
            fieldInputElement.prop('readonly',false);
          }
        }
        if(scenarioValidated) {
          let isAutopopulatedField = fieldInputElement.attr('data-is-autopopulate');
          let isServerSideField = fieldInputElement.attr('data-is-serverside-fetch');
          if (isServerSideField == "yes") {
            isAutopopulatedField = "yes";
          }
          if (correspondingCol_ === 'current_user_username') {"""
        if pre_ele == "process":
            js += """
            $.ajax({
              url:`/users/${urlPath}/dynamicVal/`,
              data: {
                'operation':'pre_autopopulate',
                'column': correspondingCol_,
              },
              type: 'POST',
              dataType: "json",
              success: function (data) {
                if (data.value) {
                  let constantValue = data.value;
                  if (isAutopopulatedField == "yes") {
                    if(fieldInputElement.hasClass('select2')) {
                      fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                      fieldInputElement.trigger('select2:select');
                      fieldInputElement.trigger('change');
                    } else {
                      fieldInputElement.val(constantValue).trigger('change');
                    }
                  } else {
                    if(fieldInputElement.hasClass('select2')){
                      fieldInputElement.find(`option[value="${data.value}"]`).prop("disabled", false)
                    }
                    fieldInputElement.val(data.value).trigger('change');
                  }
                }
              },
              error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            });"""
        else:
            js += """
            let constantValue = "{{ user.get_username }}";
            if (isAutopopulatedField == "yes") {
              if(fieldInputElement.hasClass('select2')) {
                fieldInputElement.empty();
                if (fieldInputElement.attr('data-field-type') == 'UserField') {
                  $.ajax({
                    url: `/users/${urlPath}/dynamicVal/`,
                    data: {
                        'operation': 'fetchUserFiedList',
                        'profile': "False",
                        'email': "False",
                        'value': constantValue,
                      },
                      type: "POST",
                      dataType:"json",
                      success:function(data){
                        let userDetails = data.user_list[0];
                        fieldInputElement.append(`<option value='${constantValue}' data-email='${userDetails.email}' data-fname='${userDetails.first_name}' data-lname='${userDetails.last_name}' data-pic='${userDetails.profile_pic}' selected>${constantValue}</option>`);
                        fieldInputElement.trigger('select2:select');
                        fieldInputElement.trigger('change');
                      }, error: ()=>{}
                  });
                } else {
                  fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                  fieldInputElement.trigger('select2:select');
                  fieldInputElement.trigger('change');
                }
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
            } else {
              if(fieldInputElement.hasClass('select2')){
                if(fieldInputElement.find(`option[value="${constantValue}"]`).length > 0){
                  fieldInputElement.find(`option[value="${constantValue}"]`).prop("disabled", false)
                  fieldInputElement.val(constantValue).trigger('change');
                  fieldInputElement.attr('data-autopopulate_constant', constantValue);
                } else {
                  fieldInputElement.attr('data-autopopulate_constant', constantValue);
                }
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
            }
            """

        js += (
            """
          } else if (correspondingCol_ === 'current_date') {
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var yyyy = today.getFullYear();
            let constantValue = yyyy + '-' + mm + '-' + dd;
            if (existingValuePrecedence && (autoPopPrecedenceScenario != "true" && isScenarioAutoPop)) {
              constantValue = existingValuePrecedence;
            }
            if (isAutopopulatedField == "yes") {
              if(fieldInputElement.hasClass('select2')) {
                fieldInputElement.empty();
                fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                fieldInputElement.trigger('select2:select');
                fieldInputElement.trigger('change');
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
            } else {
              if(fieldInputElement.hasClass('select2')){
                fieldInputElement.find(`option[value="${constantValue}"]`).prop("disabled", false);
              }
              fieldInputElement.val(constantValue).trigger('change');
            }
          } else if (correspondingCol_ === 'current_datetime') {
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var yyyy = today.getFullYear();
            let constantValue = yyyy + '-' + mm + '-' + dd + 'T' + today.toLocaleTimeString('it-IT');
            if (existingValuePrecedence && (autoPopPrecedenceScenario != "true" && isScenarioAutoPop)) {
              constantValue = existingValuePrecedence;
            }
            if (isAutopopulatedField == "yes") {
              if(fieldInputElement.hasClass('select2')) {
                fieldInputElement.empty();
                fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                fieldInputElement.trigger('select2:select');
                fieldInputElement.trigger('change');
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
            } else {
              if(fieldInputElement.hasClass('select2')){
                fieldInputElement.find(`option[value="${constantValue}"]`).prop("disabled", false);
              }
              fieldInputElement.val(constantValue).trigger('change');
            }
          } else if (correspondingCol_ === 'current_time') {
            var today = new Date();
            let constantValue = today.toLocaleTimeString('it-IT');
            if (existingValuePrecedence && (autoPopPrecedenceScenario != "true" && isScenarioAutoPop)) {
              constantValue = existingValuePrecedence;
            }
            if (isAutopopulatedField == "yes") {
              if(fieldInputElement.hasClass('select2')) {
                fieldInputElement.empty();
                fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                fieldInputElement.trigger('select2:select');
                fieldInputElement.trigger('change');
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
            } else {
              if(fieldInputElement.hasClass('select2')){
                fieldInputElement.find(`option[value="${constantValue}"]`).prop("disabled", false);
              }
              fieldInputElement.val(constantValue).trigger('change');
            }
          } else if (correspondingCol_ === 'static_value') {
            let constantValue = static_inp_val;
            if (existingValuePrecedence && (autoPopPrecedenceScenario != "true" && isScenarioAutoPop)) {
              constantValue = existingValuePrecedence;
            }
            if (isAutopopulatedField == "yes") {
              if(fieldInputElement.hasClass('select2')) {
                fieldInputElement.empty();
                fieldInputElement.append(`<option value='${constantValue}' selected>${constantValue}</option>`);
                fieldInputElement.trigger('select2:select');
                fieldInputElement.trigger('change');
              } else {
                fieldInputElement.val(constantValue).trigger('change');
              }
              fieldInputElement.attr('data-static_val', '1');
            } else {
              if(fieldInputElement.hasClass('select2')){
                fieldInputElement.find(`option[value="${constantValue}"]`).prop("disabled", false);
              }
              fieldInputElement.val(constantValue).trigger('change');
              fieldInputElement.attr('data-static_val', '1');
            }
          }else {
            $.ajax({
              url:`/users/${urlPath}/dynamicVal/`,
              data: {
                'operation':'pre_autopopulate',
                'column': correspondingCol_,
              },
              type: 'POST',
              dataType: "json",
              success: function (data) {
                if (data.value) {
                  if(fieldInputElement.hasClass('select2')){
                    fieldInputElement.find(`option[value="${data.value}"]`).prop("disabled", false)
                  }
                  fieldInputElement.val(data.value).trigger('change')
                }
              },
              error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            });
          }
        }else{
          if(fieldInputElement.hasClass('select2')){
            fieldInputElement.find('option').prop("disabled", false);
          }
          if (autoPopPrecedenceScenario == "true" && isScenarioAutoPop && existingValuePrecedence) {
            if(fieldInputElement.hasClass('select2')){
              if (fieldInputElement.find(`option[value="{existingValuePrecedence}"]`).length > 0) {
                fieldInputElement.val(existingValuePrecedence).trigger('change');
              };
            } else {
              fieldInputElement.val(existingValuePrecedence).trigger('change');
            }
          }
        }
      }
      function cascadingJs(a,key,element_id, existingValue){
        masterTable = a[key]['finaljsattr'][1][0]['value'][0]
        masterCol = a[key]['finaljsattr'][2][0]['value'][0]
        correspondingCol = a[key]['finaljsattr'][0][0]['value'][0]['depMapper']
        var value = $(this).val()
        if (value && value != '' && value != '---' && value != '----') {
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'autopopulate',
              'masterTable': masterTable,
              'masterCol': masterCol,
              'column': JSON.stringify(correspondingCol),
              'fetchUserFieldData': JSON.stringify({}),
              'value':value
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              if (data.data.length > 0){
                for(let j = 0; j < a[key]['finaljsattr'][0][0]['value'].length; j++) {
                  for(let i = 0; i < a[key]['finaljsattr'][0][0]['value'][j]['depField'].length; i++) {
                    var dependentFieldElement = $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][i]+'_'+element_id);
                    fieldType = dependentFieldElement.attr('data-fieldType');
                    if (fieldType != 'MultiselectField') {
                      dependentFieldElement.empty()
                      let placeholder = dependentFieldElement.attr("placeholder")
                      if(![undefined,"",null].includes(placeholder)){
                        dependentFieldElement.append(`<option value='' disabled selected>${placeholder}</option>`)
                      } else{
                        dependentFieldElement.append(`<option value=''>---</option>`)
                      }
                    } else {
                      dependentFieldElement.val('').trigger('change');
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][i]+'_unique').val([]).trigger('change.select2');
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][i]+'_unique option').prop('disabled', true);
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][i]+'_unique').select2({
                        dropdownParent:$('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][i]+'_unique').parent()
                      });
                    }
                  }
                }
                for(let i = 0; i < data.data.length; i++) {
                  for(let j = 0; j < data.data[i].length; j++) {
                    fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).attr('data-fieldType');
                    if (fieldType != 'MultiselectField') {
                      $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).empty()
                      let placeholder = $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).attr("placeholder")
                      if(![undefined,"",null].includes(placeholder)){
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).append(`<option value='' disabled selected>${placeholder}</option>`)
                      } else{
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).append(`<option value=''>---</option>`)
                      }
                    } else {
                      $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).val('').trigger('change');
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').val([]).trigger('change.select2');
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique option').prop('disabled', true);
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').select2({
                        dropdownParent:$('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').parent()
                      });
                    }
                  }
                }
                for(let i = 0; i < data.data.length; i++) {
                  for(let j = 0; j < data.data[i].length; j++) {
                    fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).attr('data-fieldType');
                    if (fieldType != 'MultiselectField') {
                      let is_present = false;
                      $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).find("option").each(function() {
                        if($(this).attr("val") == data.data[i][j]){
                          is_present = true;
                        }
                      })
                      if(is_present == false){
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).append(`<option value='${data.data[i][j]}'>${data.data[i][j]}</option>`)
                      }
                      let autoPopulatedValue = $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).attr("data-autopoplate-value");
                      if (autoPopulatedValue == data.data[i][j]) {
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).val(autoPopulatedValue).trigger("select2:select")
                      }
                      if (!existingValue) {
                        existingValue = $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).attr('data-exisingValueEdit');
                      }
                      if (existingValue == data.data[i][j]) {
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).val(existingValue).trigger("select2:select")
                      }
                      $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).select2({
                      dropdownParent: $('#id_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_'+element_id).parent()
                      });
                    } else {
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').find("option").each(function() {
                        if($(this).text() != data.data[i][j]){
                          $(this).prop('disabled', true);
                        } else {
                          $(this).prop('disabled', false);
                        }
                      })
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').select2({
                        dropdownParent: $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').parent()
                      });
                    }
                  }
                }
              } else {
                for(let j = 0; j < a[key]['finaljsattr'][0][0]['value'].length; j++) {
                  for(let i = 0; i < a[key]['finaljsattr'][0][0]['value'][j]['depField'].length; i++) {
                    fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).attr('data-fieldType');
                    if (fieldType != 'MultiselectField') {
                      let placeholder = $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).attr("placeholder")
                      $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).empty()
                      if(![undefined,"",null].includes(placeholder)){
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).append(`<option value='' disabled selected>${placeholder}</option>`)
                      } else{
                        $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).append(`<option value=''>---</option>`)
                      }
                    } else {
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').find("option").each(function() {
                        if($(this).text() != data.data[i][j]){
                          $(this).prop('disabled', true);
                        } else {
                          $(this).prop('disabled', false);
                        }
                      })
                      $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').select2({
                        dropdownParent: $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][0]['depField'][j]+'_unique').parent()
                      });
                    }
                  }
                }
              }

            },
            error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          })
        } else {
          for(let j = 0; j < a[key]['finaljsattr'][0][0]['value'].length; j++) {
            for(let i = 0; i < a[key]['finaljsattr'][0][0]['value'][j]['depField'].length; i++) {
              fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).attr('data-fieldType');
              if (fieldType != 'MultiselectField') {
                let placeholder = $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).attr("placeholder")
                $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).empty()
                if(![undefined,"",null].includes(placeholder)){
                  $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).append(`<option value='' disabled selected>${placeholder}</option>`)
                } else{
                  $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).append(`<option value=''>---</option>`)
                }
              } else {
                $('#id_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_'+element_id).val('').trigger('change');
                $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_unique').val([]).trigger('change.select2');
                $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_unique option').prop('disabled', true);
                $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_unique').select2({
                  dropdownParent: $('#'+element_id+'_'+a[key]['finaljsattr'][0][0]['value'][j]['depField'][j]+'_unique').parent()
                });
              }
            }
          }
        }
      }
      function cascadingLv2() {
        var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
        element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
        var data_name = ''
        if($(this).attr('data-name')) {
          if($(this).attr('data-name').includes('__')) {
            data_name = $(this).attr('data-name').split('__')[1]
          } else {
            data_name = $(this).attr('data-name')
          }
        }
        var a = $('#id_'+data_name+'_'+element_id).attr('data-jsattr');
        if(a) {
          a = JSON.parse(a);
          var a1 = a;
          for(let key = 0; key < a.length; key++) {
            if(!a[key].hasOwnProperty("cases")){
              a[key]["cases"] = []
            }
            if(a[key]['parentvalue'] == "Cascading") {
              masterTable = $(this).attr('data-table')
              masterCol =  $(this).attr('data-mapperCol')
              correspondingCol = JSON.parse($(this).attr('data-js'))['depMapper']
              a = JSON.parse($(this).attr('data-js'))
              var value = $(this).val()
              $.ajax({
                url:`/users/${urlPath}/dynamicVal/`,
                data: {
                  'operation':'autopopulate',
                  'masterTable': masterTable,
                  'masterCol': masterCol,
                  'column': JSON.stringify(correspondingCol),
                  'fetchUserFieldData': JSON.stringify({}),
                  'value':value
                },
                type: 'POST',
                dataType: "json",
                success: function (data) {
                  if (data.data.length > 0){
                    for(let i = 0; i < data.data.length; i++) {
                      for(let j = 0; j < data.data[i].length; j++) {
                        fieldType = $('#id_'+a['depField'][j]+'_'+element_id).attr('data-fieldType');
                        if (fieldType != 'MultiselectField') {
                          $('#id_'+a['depField'][j]+'_'+element_id).empty()
                          let placeholder = $('#id_'+a['depField'][j]+'_'+element_id).attr("placeholder")
                          if(![undefined,""].includes(placeholder)){
                            $('#id_'+a['depField'][j]+'_'+element_id).append(`<option value='' disabled selected>${placeholder}</option>`)
                          } else{
                            $('#id_'+a['depField'][j]+'_'+element_id).append(`<option value=''>---</option>`)
                          }
                        } else {
                          $('#id_'+a['depField'][j]+'_'+element_id).val('').trigger('change');
                          $('#'+element_id+'_'+a['depField'][j]+'_unique').val([]).trigger('change.select2');
                          $('#'+element_id+'_'+a['depField'][j]+'_unique option').prop('disabled', true);
                          $('#'+element_id+'_'+a['depField'][j]+'_unique').select2({
                          dropdownParent : $('#'+element_id+'_'+a['depField'][j]+'_unique').parent()
                          });
                        }
                      }
                    }
                    for(let i = 0; i < data.data.length; i++) {
                      for(let j = 0; j < data.data[i].length; j++) {
                        fieldType = $('#id_'+a['depField'][j]+'_'+element_id).attr('data-fieldType');
                        if (fieldType != 'MultiselectField') {
                          $('#id_'+a['depField'][j]+'_'+element_id).append(`<option value='${data.data[i][j]}'>${data.data[i][j]}</option>`)
                          $('#id_'+a['depField'][j]+'_'+element_id).select2({
                            dropdownParent : $('#'+element_id+'_'+a['depField'][j]+'_unique').parent()
                          });
                        } else {
                          $('#'+element_id+'_'+a['depField'][j]+'_unique').find('option').each(function() {
                            if($(this).text() == data.data[i][j]){
                              $(this).prop('disabled', false);
                            }
                          });
                          $('#'+element_id+'_'+a['depField'][j]+'_unique').select2({
                            dropdownParent : $('#'+element_id+'_'+a['depField'][j]+'_unique').parent()
                          });
                        }
                      }
                    }
                  } else {
                    for(let i = 0; i < a['depField'].length; i++) {
                      fieldType = $('#id_'+a['depField'][i]+'_'+element_id).attr('data-fieldType');
                      if (fieldType != 'MultiselectField') {
                        let placeholder = $('#id_'+a['depField'][i]+'_'+element_id).attr("placeholder")
                        $('#id_'+a['depField'][i]+'_'+element_id).val('').trigger('change')
                        $('#id_'+a['depField'][i]+'_'+element_id).empty()
                        if(![undefined,""].includes(placeholder)){
                          $('#id_'+a['depField'][i]+'_'+element_id).append(`<option value="" disabled selected>${placeholder}</option>`)
                        }
                      } else {
                        $('#id_'+a['depField'][i]+'_'+element_id).val('').trigger('change');
                        $('#'+element_id+'_'+a['depField'][i]+'_unique').val([]).trigger('change.select2');
                        $('#'+element_id+'_'+a['depField'][i]+'_unique option').prop('disabled', true);
                        $('#'+element_id+'_'+a['depField'][i]+'_unique').select2({
                        dropdownParent : $('#'+element_id+'_'+a['depField'][i]+'_unique').parent()
                        });
                      }
                    }
                  }

                },
                error: ()=>{
                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
              })
            }
            jsChange.call(this)
          }
        }
      }
      function commonFieldTrue(b,element_id) {
        for(let i = 0; i < b['selectedColumn'].length; i++) {
          if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
            if(b.hasOwnProperty('color')) {
              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${b['color']}`);
              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${b['color']}`);


              if($('#'+b['selectedColumn'][i]+element_id).hasClass('select2')){
                $('#'+b['selectedColumn'][i]+element_id).parent().find('.select2-selection').css('background-color',`${b['color']}`);
              }
              $('#'+b['selectedColumn'][i]+element_id).css('background-color',`${b['color']}`);
              $('#'+b['selectedColumn'][i]+element_id+'_').css('background-color',`${b['color']}`);
              if($('#'+b['selectedColumn'][i]+element_id).attr('type') == 'file' || $('#'+b['selectedColumn'][i]+element_id) == 'image'){
                $('#'+b['selectedColumn'][i]+element_id).find('label').css('background-color',`${b['color']}`);
              }
            } else {
              $('#'+b['selectedColumn'][i]+element_id).css('display','inline-block')
            }
          } else {

            var parentDiv = $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent()
            if (parentDiv.hasClass('input-group')) {
            parentDiv = parentDiv.parent().parent('div.form-group');
            } else if (parentDiv.hasClass('switch-container')) {
              parentDiv = parentDiv.parent().parent().parent('div.form-group');
            } else {
            parentDiv = parentDiv.parent('div.form-group');
            }
            if (parentDiv.parent('div.form-group').length > 0) {
              parentDiv = parentDiv.parent('div.form-group');
            }
            if(b.hasOwnProperty('color')) {
              $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().css('background-color',`${b['color']}`);


              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).hasClass('select2')){
                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('.select2-selection').css('background-color',`${b['color']}`);
              }
              $('#id_'+b['selectedColumn'][i]+'_'+element_id).css('background-color',`${b['color']}`);
              $('#id_'+b['selectedColumn'][i]+'_'+element_id+'_').css('background-color',`${b['color']}`);
              if($('#id_'+b['selectedColumn'][i]+'_'+element_id).attr('type') == 'file' || $('#id_'+b['selectedColumn'][i]+'_'+element_id) == 'image'){
                $('#id_'+b['selectedColumn'][i]+'_'+element_id).parent().find('label').css('background-color',`${b['color']}`);
              }
            } else {
              parentDiv.css('display','block');
            }
          }
        }
      }"""
        )
        if pre_ele == "process":
            js += (
                """$('#"""
                + f"""{name}"""
                + """'+element_id).find("input[data-jsattr], select[data-jsattr], textarea[data-jsattr]").each(function() {
        jsFunc_.call(this);
        $(this).off('click');
      })"""
            )
        else:
            js += (
                """
      $('.form-row').find("input[data-new-js-actions], textarea[data-new-js-actions], select[data-new-js-actions]").on("change dp.change",function() {
        jsFunc_.call($(this),initialRun=false,newJs=true)
      });
      $('.form-row').find("input[data-cases], textarea[data-cases], select[data-cases]").on("change dp.change",function() {
        let casesArray = Object.keys(JSON.parse($(this).attr('data-cases')));
        var element_id = $(this).attr('id').split('"""
                + f"""{pre_ele}"""
                + """')[1]
        ele2 = element_id
        dependency_order_fieldname = []
        dependency_call_list = {}
        new_order = []
        element_id = '"""
                + f"""{pre_ele}"""
                + """'+element_id
        $('#"""
                + f"""{name}"""
                + """'+element_id).find("input[data-jsattr], select[data-jsattr], textarea[data-jsattr]").each(function() {
          let JSAttrConfig = JSON.parse($(this).attr('data-jsattr'));
          if (checkCaseDependence(casesArray, JSAttrConfig)) {
            dependency_order_fieldname.push(this)
          };
        });

        for(let i=0;i<dependency_order_fieldname.length;i++){
          jsattr = JSON.parse($(dependency_order_fieldname[i]).attr('data-jsattr'))
          dependency_call_list[$(dependency_order_fieldname[i]).attr('id')] = jsattr
        }

        for(let [key,value] of Object.entries(dependency_call_list)){
          for(let i=0;i<value.length;i++){
            if(value[i]['parentvalue'] == 'Show-hide' && cases(value[i],ele2)){
              new_order.push(key)
              break
            }
          }
        }

        for(let [key,value] of Object.entries(dependency_call_list)){
          if(!new_order.includes(key)){
            for(let i=0;i<value.length;i++){
              if(value[i]['parentvalue'] == 'Cascading' && cases(value[i],ele2)){
                new_order.push(key)
                break
              }
            }
          }
        }

        for(let [key,value] of Object.entries(dependency_call_list)){
          if(!new_order.includes(key)){
            for(let i=0;i<value.length;i++){
              if(value[i]['parentvalue'] == 'Auto-populate' && cases(value[i],ele2) || value[i]['parentvalue'] == 'Auto-populate Constant' && cases(value[i],ele2) || value[i]['parentvalue'] == 'Foreign-key-relation' && cases(value[i],ele2)){
                new_order.push(key)
                break
              }
            }
          }
        }

        for(let [key,value] of Object.entries(dependency_call_list)){
          if(!new_order.includes(key)){
            for(let i=0;i<value.length;i++){
              if(value != 'Show-hide' && value != 'Cascading' && value != 'Auto-populate' && value != 'Auto-populate Constant' && value != 'Foreign-key-relation'){
                new_order.push(key)
                break
              }
            }
          }
        }

        for(let i=0;i<new_order.length;i++){
          jsFunc_.call($(`#${new_order[i]}`))
        }
      })"""
            )
        js += (
            """
      function jsFunc_(initialRun=false,newJs=false){
      if (newJs){
        var a = $(this).attr('data-new-js-actions')
      }else{
        var a = $(this).attr('data-jsattr')
      }
          if(a) {
            a = JSON.parse(a);
            for(let key = 0; key < a.length; key++) {
              if(!a[key].hasOwnProperty("cases")){
                a[key]["cases"] = []
              }
              var masterTable
              var masterCol
              var correspondingCol
              var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
              element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
              if(a[key]['parentvalue'] == "Foreign-key-relation") {"""
        )
        if pre_ele != "process":
            js += """
                if (!initialRun && $(this).attr('data-is-serverside-fetch') != 'yes') {
                  foreignKeyJs(thisElement=this, data_js_attr=a[key], 'jsfunc');
                }"""
        js += (
            """
              }
              if(a[key]['parentvalue'] == "Auto-populate") {
                masterTable = a[key]['finaljsattr'][1][0]['value']
                masterCol = a[key]['finaljsattr'][2][0]['value']
                correspondingCol = a[key]['finaljsattr'][0][0]['value']['depMapper']
                if(a[key].hasOwnProperty('allow_edit')){
                  allow_edit = a[key]['allow_edit']
                }else{
                  allow_edit = 'no'
                }

                copy_class_to_apply = ""
                paste_class_to_apply = ""
                restrict_min_no_fields = ""
                if(cases(a[key],element_id)) {
                  for(let i = 0; i < correspondingCol.length; i++) {
                    if(allow_edit == 'no'){
                      $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',true);
                      if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#e9ecef")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#e9ecef")
                          }
                    }else{
                      $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',false);
                      if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).parent().find('span').find(".select2-selection.select2-selection--single").css("background-color","#fff")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#fff")
                          }
                    }
                  }
                  autopopulate.call(this,a,key,element_id)
                } else {
                  for(let i = 0; i < correspondingCol.length; i++) {
                    if ($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).attr('data-fieldtype') == "MultiselectField") {

                    } else {
                      if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass("select2")){
                        $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).find('option').each(function(i, item){
                              $(item).prop("disabled", false);
                        })
                      } else {
                        $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).prop('readonly',false);
                        if($('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).hasClass('select2')){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).find('span').find(".select2-selection.select2-selection--single").css("background-color","#fff")
                          }else{
                            $('#id_'+a[key]['finaljsattr'][0][0]['value']['depField'][i]+'_'+element_id).css("background-color","#fff")
                          }
                      }
                    }
                  }
                }
              }
              if(a[key]['parentvalue'] == "Auto-populate Constant") {
                  autopopulateConstant.call(this,a,key,element_id)
              }
              if(a[key]['parentvalue'] == "JS Action Populate") {
                  if(cases(a[key],element_id)) {
                  newJsActions.call(this,a,key,element_id)
                  }
              }
              if(a[key]['parentvalue'] == "Cascading") {
                loop = a[key]['finaljsattr'][0][0]['value']
                for(let i = 0; i < loop.length; i++) {
                  for(let j = 0; j < loop[i]['depMapper'].length; j++) {
                    curr = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).parent()
                    name = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('name')
                    var jsattr = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-jsattr');
                    var table = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-table');
                    var column = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-column');
                    var js_cases = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-cases');
                    var jsFuncAttr = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('onchange');
                    var req = ''
                    var reqCheck = false
                    if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).prop('required')) {
                      reqCheck = true
                      req = 'required'
                    }
                    if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).hasClass("check_validForm_now")){
                      check_validForm_now = "check_validForm_now"
                    }
                    else {
                      check_validForm_now = "";
                    }
                    var data_tablename = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-tablename')
                    if(cases(a[key],element_id)) {
                      var existingValue = '';
                      fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-fieldType');
                      if (fieldType != 'MultiselectField') {
                        let placeholder = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("placeholder")
                        if([undefined,""].includes(placeholder)){
                          placeholder = "";
                        }
                        existingValue = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).val();
                        if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-exisingValueEdit")) {
                          var existingValueEdit = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-exisingValueEdit");
                          if (!existingValue && existingValueEdit) {
                            existingValue = existingValueEdit;
                          }
                        }
                        if (!$('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).hasClass('select2')) {
                          $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).remove()
                          if (jsattr) {
                            if (js_cases){
                              curr.append(`<select placeholder="${placeholder}" data-cascading-dropdown="yes" data-cascading-case="${key}" id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' onchange="jsChange.call(this)" class="form-control select2 ${check_validForm_now}" data-jsattr='${jsattr}' data-cases='${js_cases}' data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'><option value="---" disabled selected>${placeholder}</option></select>`);
                            } else {
                              curr.append(`<select placeholder="${placeholder}" data-cascading-dropdown="yes" data-cascading-case="${key}" id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' onchange="jsChange.call(this)" class="form-control select2 ${check_validForm_now}" data-jsattr='${jsattr}' data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'><option value="---" disabled selected>${placeholder}</option></select>`);
                            }
                          } else {
                            curr.append(`<select placeholder="${placeholder}" data-cascading-dropdown="yes" data-cascading-case="${key}" id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' class="form-control select2 ${check_validForm_now}" data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'><option value="---" disabled selected>${placeholder}</option></select>`);
                          }
                          if(jsFuncAttr) {
                            curr.find('select').attr("onchange",jsFuncAttr)
                          }
                          curr.find("select").each(function(){
                            parent = $(this).parent()
                            $(this).select2({dropdownParent:parent})
                          })
                          if (curr.find('select').hasClass('check_validForm_now')) {
                            curr.find('select').off('change').on("change", checkValidationNow);
                          }
                        } else {
                          $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).empty();
                          $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-cascading-dropdown", "no");
                        }
                      }
                      cascadingJs.call(this,a,key,element_id, existingValue)
                    } else{
                      var resetCascading = true;
                      if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-cascading-case")) {
                        if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-cascading-case") != key) {
                          resetCascading = false;
                        }
                      }
                      if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-cascading-dropdown")) {
                        if ($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("data-cascading-dropdown") != "yes") {
                          resetCascading = false;
                        }
                      }
                      if (table && column) {
                        resetCascading = false;
                      }
                      if (resetCascading) {
                        fieldType = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr('data-fieldType');
                        if (fieldType != 'MultiselectField') {
                          if($('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).hasClass("select2-hidden-accessible")){
                            $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).select2("destroy")
                          }
                          let placeholder = $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).attr("placeholder")
                          if([undefined,""].includes(placeholder)){
                            placeholder = "";
                          }
                          $('#id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id).remove()
                          if (jsattr) {
                            if (js_cases){
                              curr.append(`<input placeholder='${placeholder}' id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' onchange="jsChange.call(this)" class="form-control ${check_validForm_now} textInput" data-jsattr='${jsattr}' data-cases='${js_cases}' data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'>`);
                            } else {
                              curr.append(`<input placeholder='${placeholder}' id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' onchange="jsChange.call(this)" class="form-control ${check_validForm_now} textInput" data-jsattr='${jsattr}' data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'>`);
                            }
                          } else {
                            curr.append(`<input placeholder='${placeholder}' id="${'id_'+a[key]['finaljsattr'][0][0]['value'][i]['depField'][j]+'_'+element_id}" name='${name}' class="form-control ${check_validForm_now} textInput" data-name='${$(this).attr('name')}' ${req} data-tablename='${data_tablename}'>`);
                          }
                          if(jsFuncAttr) {
                            curr.attr("onchange",jsFuncAttr)
                          }
                          if (curr.find('select').hasClass('check_validForm_now')) {
                            curr.find('select').off('change').on("change", checkValidationNow);
                          }
                        }
                      }
                    }
                  }
                  if (i > 0) {
                    if(cases(a[key],element_id)) {
                      $('#id_'+loop[i]['indField']+'_'+element_id).attr('data-js',JSON.stringify(a[key]['finaljsattr'][0][0]['value'][i]))
                      $('#id_'+loop[i]['indField']+'_'+element_id).on('change', cascadingLv2);
                      $('#id_'+loop[i]['indField']+'_'+element_id).attr('data-table',a[key]['finaljsattr'][1][0]['value'][i])
                      $('#id_'+loop[i]['indField']+'_'+element_id).attr('data-mapperCol',a[key]['finaljsattr'][2][0]['value'][i])
                    }
                  }
                }
            } if(a[key]['parentvalue'] == "Show-hide") {
              b1 = a[key]['finaljsattr'][2][0]["value"];
              var b = b1
              var ele_id = element_id
              if(b) {
                var b1 = b;
                for(let i1 = 0; i1 < b1.length; i1++) {
                  var b = b1[i1]
                  for(let i = 0; i < b['selectedColumn'].length; i++) {
                    if(ele_id == element_id && !($('#id_'+b['selectedColumn'][i]+'_'+element_id).prop('required'))) {
                      if(cases(a[key],ele_id)) {
                        if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                          $('#'+b['selectedColumn'][i]+element_id).css('display','none');
                          b1 = a[key]['finaljsattr'][2][0]["value"];
                          if (a[key]['parentvalue'] == "Styling attribute" || a[key]['parentvalue'] == "Styling attribute") {
                            if(b1['styleValidation'].length > 0) {
                              b1 = b1['styleValidation']
                            } else {
                              b1 = []
                            }
                          } else {
                            b1 = a[key]['finaljsattr'][2][0]["value"];
                          }
                          for(let i = 0; i < b1.length; i++) {
                            var b = b1[i];
                            var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                            element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
                            if(b['condition'] == 'In' || b['condition'] == 'Not In') {
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if(b['condition'] == 'In'){
                                  cond_sh_ = b['value'].includes($(this).val())
                                }else{
                                  cond_sh_ = !(b['value'].includes($(this).val()))
                                }
                                if(cond_sh_) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else{
                              }
                            } else if (b['condition'] == 'Equal to' || b['condition'] == 'Not Equal to') {
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if($(this).is(':checkbox')){
                                  input_val = $(this).prop('checked')
                                  if(input_val){
                                    input_val = 'True'
                                  }else{
                                    input_val = 'False'
                                  }
                                }else{
                                  input_val = $(this).val()
                                }
                                if(b['condition'] == 'Equal to'){
                                  cond_sh_ = input_val == b['value']
                                }else{
                                  cond_sh_ = input_val != b['value']
                                }
                                if(cond_sh_) {
                                  commonFieldTrue(b,element_id)
                                }
                              }
                            } else if (b['condition'] == 'Greater then') {
                              var date
                              var date1
                              if ($(this).attr('type') == "date") {
                                date = new Date($(this).val())
                                if(b["value"].includes("-")) {
                                  date1 = new Date(b['value'])
                                } else {
                                  date1 = new Date("01-01-2299")
                                }
                              } else {
                                date = parseInt($(this).val())
                                date1 = parseInt(b['value'])
                              }
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if(date > date1) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else{
                              }
                            } else if (b['condition'] == 'Smaller then') {
                              var date
                              var date1
                              if ($(this).attr('type') == "date") {
                                date = new Date($(this).val())
                                if(b["value"].includes("-")) {
                                  date1 = new Date(b['value'])
                                } else {
                                  date1 = new Date("01-01-1000")
                                }
                              } else {
                                date = parseInt($(this).val())
                                date1 = parseInt(b['value'])
                              }
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if(date < date1) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else {
                              }
                            }
                          }
                        } else {
                          $('#id_'+b['selectedColumn'][i]+'_'+element_id).closest("div[class*='col-']").css('display','none');
                          b1 = a[key]['finaljsattr'][2][0]["value"];
                          if (a[key]['parentvalue'] == "Styling attribute" || a[key]['parentvalue'] == "Styling attribute") {
                            if(b1['styleValidation'].length > 0) {
                              b1 = b1['styleValidation']
                            } else {
                              b1 = []
                            }
                          } else {
                            b1 = a[key]['finaljsattr'][2][0]["value"];
                          }
                          for(let i = 0; i < b1.length; i++) {
                            var b = b1[i];
                            var element_id = $(this).attr('id').split('"""
            + f"""{pre_ele}"""
            + """')[1]
                            element_id = '"""
            + f"""{pre_ele}"""
            + """'+element_id
                            if(b['condition'] == 'In') {
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if(b['value'].includes($(this).val())) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else{
                              }
                            } else if (b['condition'] == 'Equal to') {
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if($(this).is(':checkbox')){
                                  input_val = $(this).prop('checked')
                                  if(input_val){
                                    input_val = 'True'
                                  }else{
                                    input_val = 'False'
                                  }
                                }else{
                                  input_val = $(this).val()
                                }
                                if(input_val == b['value']) {
                                  commonFieldTrue(b,element_id)
                                }
                              }
                            } else if (b['condition'] == 'Not Equal to') {
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if($(this).is(':checkbox')){
                                  input_val = $(this).prop('checked')
                                  if(input_val){
                                    input_val = 'True'
                                  }else{
                                    input_val = 'False'
                                  }
                                }else{
                                  input_val = $(this).val()
                                }
                                if(input_val != b['value']) {
                                  commonFieldTrue(b,element_id)
                                }
                              }
                            } else if (b['condition'] == 'Greater then') {
                              var date
                              var date1
                              if ($(this).attr('type') == "date") {
                                date = new Date($(this).val())
                                if(b["value"].includes("-")) {
                                  date1 = new Date(b['value'])
                                } else {
                                  date1 = new Date("01-01-2299")
                                }
                              } else {
                                date = parseInt($(this).val())
                                date1 = parseInt(b['value'])
                              }
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + """')[1])){
                                if(date > date1) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else{
                              }
                            } else if (b['condition'] == 'Smaller then') {
                              var date
                              var date1
                              if ($(this).attr('type') == "date") {
                                date = new Date($(this).val())
                                if(b["value"].includes("-")) {
                                  date1 = new Date(b['value'])
                                } else {
                                  date1 = new Date("01-01-1000")
                                }
                              } else {
                                date = parseInt($(this).val())
                                date1 = parseInt(b['value'])
                              }
                              if(cases(a[key],'"""
            + f"""{pre_ele}"""
            + """'+$(this).attr("id").split('"""
            + f"""{pre_ele}"""
            + r"""')[1])){
                                if(date < date1) {
                                  commonFieldTrue(b,element_id)
                                } else {
                                }
                              } else {
                              }
                            }
                          }
                        }
                      } else {
                        if (a[key]['parentvalue'] != "Styling attribute"){
                          if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                            $('#'+b['selectedColumn'][i]+element_id).css('display','inline-block')
                          } else {
                            $('#id_'+b['selectedColumn'][i]+'_'+element_id).closest("div[class*='col-']").css('display','block')
                          }
                        }
                      }
                    }
                  }
                }
              }
            }if(a[key]['parentvalue'] == "Show field info"){
              $('#createview'+element_id).find('#div_id_' + a[key]['finaljsattr']['column']).before(`<button onclick="showFieldInfo(this)" data-id=`+element_id+` data-col=`+JSON.stringify(a[key]['finaljsattr'])+` type="button" style="position:absolute; margin-left:85%; border: transparent; border-radius:5px;z-index:1050;"><i class="fas fa-list-ul" aria-hidden="true"></i></button>`)
            }
            if(a[key]['parentvalue'] == "Styling attribute") {
                b1 = a[key]['finaljsattr'][2][0]["value"];
                if(b1['column'].includes("__cbbutton") || button_ids.includes(b1['column'])){
                  if ($('#_'+b1['column']+element_id).css('display') != 'none'){
                    if(cases(a[key],element_id)) {
                      $('#'+b1['column']+element_id).attr('style',b1['style'])
                      $('#'+b1['column']+element_id).css('background-color','');
                      $('#'+b1['column']+element_id).css('background-color',b1['background-color']);
                      $('#'+b1['column']+element_id+'_').css('background-color',b1['background-color']);
                      $('#'+b1['column']+element_id).css('background-color',b1['background-color']);
                      $('#'+b1['column']+element_id+'_').css('background-color',b1['background-color']);
                      if($('#'+b1['column']+element_id).attr('type') == 'file' || $('#'+b1['column']+element_id) == 'image'){
                        $('#'+b1['column']+element_id).find('label').css('background-color',b1['background-color']);
                      }
                      if($('#'+b1['column']+element_id).hasClass('select2')) {
                        $(`#${b1['column']}_${element_id}_div`).find('.select2-selection').css('background-color',b1['background-color'])
                        var css = `<style>
                          #${b1['column']}_${element_id}_div .select2-selection {
                            background: ${b1['background-color']};
                          }
                        </style>`
                        $('section').prepend(css);
                      }
                    } else {
                      $('#'+b1['column']+element_id).attr('style',"")
                      $('#'+b1['column']+element_id).css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      $('#'+b1['column']+element_id+'_').css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      $('#'+b1['column']+element_id).css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      $('#'+b1['column']+element_id+'_').css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      $('#'+b1['column']+element_id).css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      $('#'+b1['column']+element_id+'_').css('background-color',`${$('#'+b1['column']+element_id).attr("data-color")}`);
                      if($('#'+b1['column']+element_id).attr('type') == 'file' || $('#'+b1['column']+element_id) == 'image'){
                        $('#'+b1['column']+element_id).find('label').css('background-color',"");
                      }
                      $(`#${b1['column']}${element_id}_div`).find('.select2-selection').css('background-color','')
                      if($('#'+b1['column']+element_id).hasClass('select2')) {
                        var css = `<style>
                          #${b1['column']}${element_id}_div .select2-selection {
                            background: ${"transparent"};
                          }
                        </style>`
                        $('section').prepend(css);
                      }
                    }
                  }
                  if(b1['mandatoryfield'] != "" && b1["mandatoryfield"] != undefined) {
                      if(cases(a[key],element_id) && b1['mandatoryfield'] == true) {
                        $('#id_'+b1['column']+'_'+element_id).prop('required',true);
                        $(`label[for="id_${b1['column']}_${element_id}"]`).find('.asteriskField').text('*')
                      } else {
                        $('#id_'+b1['column']+'_'+element_id).prop('required','');
                        $(`label[for="id_${b1['column']}_${element_id}"]`).find('.asteriskField').text('*')
                      }
                  }
                  if(b1['instruction'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#'+b1['column']+element_id).find('small').remove()
                      if(b1['url_class_type'] != "") {
                        if(b1['url_class_type'] === "inapp") {
                          b1['ins_link'] = `${window.location.origin}/users/${b1['inapp_app']}/{{ current_access_mode }}/${b1['inapp_subpro']}/`
                        }
                        if(b1['ins_link_target'] === false) {
                          var add_url = '<a href = "' + b1['ins_link'] + '" style="color:' + b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                          else{
                          var add_url = '<a href = "' + b1['ins_link'] + '" target="_blank"' +' style="color:'+ b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                      }
                      else{
                        $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']};">${b1['instruction']}</small>`)
                        }
                    } else {
                      $('#'+b1['column']+element_id).find('small').remove()
                    }
                    }
                  if(b1['details'] != "" && b1["details"] != undefined) {
                    if(cases(a[key],element_id)) {
                      $('#id_'+b1['column']+'_'+element_id).closest(".form-group").find('button').remove();
                      $('#id_'+b1['column']+'_'+element_id).closest(".form-group").prepend(`<button type="button" class="btn btn-link float-right" style="color:${b1['details-bg']};padding:revert;"><i class="fa fa-info-circle popoverclass" data-container="body" data-toggle="popover" tabindex="0" onclick="showpopOver.call(this)" style="z-index:1001;position:relative" data-trigger="focus" data-placement="top" data-content="${b1['details']}"></i></button>`)

                    } else {
                      $('#id_'+b1['column']+'_'+element_id).closest(".form-group").find('button').remove();
                    }
                  }
                  if(b1['instruction'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#'+b1['column']+element_id).find('small').remove()
                      if(b1['url_class_type'] != "") {
                        if(b1['url_class_type'] === "inapp") {
                          b1['ins_link'] = `${window.location.origin}/users/${b1['inapp_app']}/{{ current_access_mode }}/${b1['inapp_subpro']}/`
                        }
                        if(b1['ins_link_target'] === false) {
                          var add_url = '<a href = "' + b1['ins_link'] + '" style="color:' + b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                          else{
                          var add_url = '<a href = "' + b1['ins_link'] + '" target="_blank"' +' style="color:'+ b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                      }
                      else{
                        $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']};">${b1['instruction']}</small>`)
                      }
                    } else {
                      $('#'+b1['column']+element_id).find('small').remove()
                    }
                    }
                  if(b1['title'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#'+b1['column']+element_id).attr('data-toggle','tooltip')
                      $('#'+b1['column']+element_id).attr('title',`${b1['title']}`)
                    } else {
                      $('#'+b1['column']+element_id).removeAttr('data-toggle')
                      $('#'+b1['column']+element_id).removeAttr('title')
                    }
                  }
                  var b = b1
                  var ele_id = element_id
                } else {
                  if ($('#id_'+b1['column']+'_'+element_id).closest("div[class*='col-']").css('display') != 'none'){
                    if(cases(a[key],element_id)) {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().attr('style',b1['style'])
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().css('background-color','');
                      $('#id_'+b1['column']+'_'+element_id).parent().css('background-color',b1['background-color']);
                      $('#id_'+b1['column']+'_'+element_id).css('background-color',b1['background-color']);
                      $('#id_'+b1['column']+'_'+element_id+'_').css('background-color',b1['background-color']);
                      if($('#id_'+b1['column']+'_'+element_id).attr('type') == 'file' || $('#id_'+b1['column']+'_'+element_id) == 'image'){
                        $('#id_'+b1['column']+'_'+element_id).parent().find('label').css('background-color',b1['background-color']);
                      }
                      if($('#id_'+b1['column']+'_'+element_id).hasClass('select2')) {
                        $(`#${b1['column']}_${element_id}_div`).find('.select2-selection').css('background-color',b1['background-color'])
                        var css = `<style>
                          #${b1['column']}_${element_id}_div .select2-selection {
                            background: ${b1['background-color']};
                          }
                        </style>`
                        $('section').prepend(css);
                      }
                    } else {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().attr('style',"")
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().css('background-color','');
                      $('#id_'+b1['column']+'_'+element_id).parent().css('background-color',"");
                      $('#id_'+b1['column']+'_'+element_id).css('background-color',"");
                      $('#id_'+b1['column']+'_'+element_id+'_').css('background-color',"gray");
                      if($('#id_'+b1['column']+'_'+element_id).attr('type') == 'file' || $('#id_'+b1['column']+'_'+element_id) == 'image'){
                        $('#id_'+b1['column']+'_'+element_id).parent().find('label').css('background-color',"");
                      }
                      $(`#${b1['column']}_${element_id}_div`).find('.select2-selection').css('background-color','')
                      if($('#id_'+b1['column']+'_'+element_id).hasClass('select2')) {
                        var css = `<style>
                          #${b1['column']}_${element_id}_div .select2-selection {
                            background: ${"transparent"};
                          }
                        </style>`
                        $('section').prepend(css);
                      }
                    }
                  }
                  }
                  if(b1['instruction'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().find('small').remove()
                      if(b1['url_class_type'] != "") {
                        if(b1['url_class_type'] === "inapp") {
                          b1['ins_link'] = `${window.location.origin}/users/${b1['inapp_app']}/{{ current_access_mode }}/${b1['inapp_subpro']}/`
                        }
                        if(b1['ins_link_target'] == false) {
                          var add_url = '<a href = "' + b1['ins_link'] + '" style="color:' + b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                        else{
                          var add_url = '<a href = "' + b1['ins_link'] + '" target="_blank"' + ' style="color:'+ b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                        }
                      }
                      else{
                        $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']};">${b1['instruction']}</small>`)
                      }
                    } else {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().find('small').remove()
                    }
                  }

                    if(b1['details'] != "" && b1["details"] != undefined) {
                  if(cases(a[key],element_id)) {
                    $('#id_'+b1['column']+'_'+element_id).closest(".form-group").find('button').remove();
                    $('#id_'+b1['column']+'_'+element_id).closest(".form-group").prepend(`<button type="button" class="btn btn-link float-right"  style="color:${b1['details-bg']}; padding:revert;"><i class="fa fa-info-circle popoverclass" data-trigger="focus" data-container="body" data-toggle="popover" tabindex="0" data-placement="top" data-content="${b1['details']}" style="z-index:1001;position:relative" onclick="showpopOver.call(this)"></i></button>`)

                  } else {
                    $('#id_'+b1['column']+'_'+element_id).closest(".form-group").find('button').remove();
                  }

                }
                if(b1['mandatoryfield'] != "" && b1["mandatoryfield"] != undefined) {
                      if(cases(a[key],element_id) && b1['mandatoryfield'] == true) {
                        $('#id_'+b1['column']+'_'+element_id).prop('required',true);
                        $(`label[for="id_${b1['column']}_${element_id}"]`).find('.asteriskField').text('*')
                      } else {
                        $('#id_'+b1['column']+'_'+element_id).prop('required','');
                        $(`label[for="id_${b1['column']}_${element_id}"]`).find('.asteriskField').text('*')
                      }
                  }
                if(b1['title'] != "") {
                  if(b1['instruction'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().find('small').remove()
                      if(b1['url_class_type'] != "") {
                        if(b1['url_class_type'] === "inapp") {
                          b1['ins_link'] = `${window.location.origin}/users/${b1['inapp_app']}/{{ current_access_mode }}/${b1['inapp_subpro']}/`
                        }
                        if(b1['ins_link_target'] === false) {
                          var add_url = '<a href = "' + b1['ins_link'] + '" style="color:' + b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                          else{
                          var add_url = '<a href = "' + b1['ins_link'] + '" target="_blank"' + ' style="color:'+ b1['ins_link_color'] + ';">' +  b1['instruction_text_link'] + '</a>';
                          $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']}">${b1['instruction'].replace(/\{.*?\}/, add_url)}</small>`)
                          }
                      }
                      else{
                        $('#id_'+b1['column']+'_'+element_id).parent().parent().append(`<small class="form-text" style="color:${b1['instruction_text_color']};">${b1['instruction']}</small>`)
                        }
                    } else {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().find('small').remove()
                    }
                  }
                  if(b1['title'] != "") {
                    if(cases(a[key],element_id)) {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().attr('data-toggle','tooltip')
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().attr('title',`${b1['title']}`)
                    } else {
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().removeAttr('data-toggle')
                      $('#id_'+b1['column']+'_'+element_id).parent().parent().parent().removeAttr('title')
                    }
                  }
                }
            }
            if(a[key]['parentvalue'] == "Show-hide_link") {
              var insertData = a
              b1 = a[key]['finaljsattr'][2][0]["value"];
              var thiss = $(this)
              $.ajax({
                url:`/users/${urlPath}/dynamicVal/`,
                data: {
                  'operation':'Show-hide_link',
                  'table': JSON.stringify(b1[0]["masterTable"]),
                  'value': JSON.stringify(b1[0]["value"]),
                  'selectedColumn': JSON.stringify(b1[0]["selectedColumn"]),
                  'sourceTable': a[key]['finaljsattr'][1][0]["value"],
                  'element_id':element_id
                },
                type: 'POST',
                dataType: "json",
                success: function (data) {
                  insertData[key]['finaljsattr'][2][0]["value"] = data['data']
                  thiss.attr('data-jsattr',JSON.stringify(insertData))
                  var b1 = data['data'];
                  for(let i1 = 0; i1 < b1.length; i1++) {
                    var b = b1[i1]
                    for(let i = 0; i < b['selectedColumn'].length; i++) {
                      if(b['selectedColumn'][i].includes("__cbbutton") || button_ids.includes(b['selectedColumn'][i])){
                        $('#i'+b['selectedColumn'][i]+element_id).css('display','none')
                      } else{
                        if(ele_id == element_id && !($('#id_'+b['selectedColumn'][i]+'_'+element_id).prop('required'))) {
                          $('#id_'+b['selectedColumn'][i]+'_'+element_id).closest("div[class*='col-']").css('display','none')
                        }
                      }
                    }
                  }
                },
                error: ()=>{
                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
              })
              var b = b1
              var ele_id = element_id

            }
          }
        }
      }
      """
        )
    else:
        pass
    if "analysis" in tab_type_list:
        js += """
      function plotChartsAnalysis(calling = false, dic = {}, p_id = "", app_code = "", tab = false) {
        if($(this).attr("data-data") != undefined || calling == true) {
          let chartJson = "";
          let parentContainerID = "";
          let thresholdGuage = "";
          let parentId = "";
          if (calling == false){
            app_code = $(this).attr("app_code");
            chartJson=JSON.parse($(this).attr("data-data"))
            parentContainerID = JSON.parse($(this).attr("data-parentContainerID"))
            let configDic = JSON.parse($(this).attr("data-configdic"))
            let tabDict = configDic["tabDict"]
            let tabSlicerConfig = configDic["tabSlicerConfig"]
            let final_f_dict2 = configDic["final_f_dict2"]
            thresholdGuage = configDic["thresholdGuage"]
            let interaction = configDic["interaction"]
            let tab_ID = configDic["tab_ID"]
            parentId = configDic["parentId"]
          }
          if (calling == true){
            chartJson = dic["chartJson"]
            parentContainerID = p_id
            thresholdGuage = {}
            parentId = dic["parentId"]
          }

          $(this).removeAttr("data-data")
          $("#"+parentContainerID).attr("data-count",chartJson.length)
          let marginLeft = parseInt($("#"+parentContainerID).css("width"))
          if(chartJson.length != 0 && calling == false){
            $("#"+parentContainerID).append(`<i class="fa fa-spinner fa-pulse loadingSymbol" style="position:absolute;font-size: 100px;margin-left:50%; margin-top:15%;z-index: 99999;"></i>`)
          }
          for(i in chartJson){
          let filters = chartJson[i].filters
          let filter_input_final = chartJson[i].filter_input_final
          let drange = chartJson[i].drange
          let plotType = chartJson[i].chartType;
          if(plotType=="Textbox"){
            let chartLength = parseInt($("#"+parentContainerID).attr("data-count"));
            chartLength --;
            $("#"+parentContainerID).attr("data-count",chartLength)
          }
          if(plotType=="Textbox"){
              if(!chartJson[i].hasOwnProperty('id_text_editor')) {
              $(`#${parentContainerID}`).append(`<div class="small-box commentboxcard" data-id="${id_text_editor}" id = "${id_text_editor}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};" >
                  <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                    <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                    <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                    <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                  </div>
                <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
                ${chartJson[i].textboxvalue}
                </div>
              </div>`)
            } else {
              let id_text_editor =  chartJson[i].id_text_editor

              $(`#${parentContainerID}`).append(`
              <div class="small-box commentboxcard" data-id="${id_text_editor}" id = "${id_text_editor}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};">
                <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                  <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                  <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                  <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                </div>
                <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
                ${chartJson[i].textboxvalue}
                </div>
              </div>`);

              }
              $(".commentboxcard").resizable();
              $('.contentEditable').each(function () {
                  $(this).on('click', function () {
                    $(this).attr("contenteditable", "true")
                    $(this).focus()
                  })
                  $(this).focusout(function () {
                      let content = this.innerText
                      content = content.trim()
                      if (content.length == 0){
                        this.innerText = "Enter text here."
                        $(this).removeAttr("contenteditable");
                        $(this).trigger("click")
                      }
                      else{
                      $(this).removeAttr("contenteditable");
                      }
                  })
                })
                  $(`#${parentContainerID}`).find('.deleteCommentBox').click(function () {
                      $(this).parent().parent().remove()
                  })
                  $(`#${parentContainerID}`).find(".commentboxcard").draggable({
                      cancel: '',
                      containment: "parent",
                  });
          }
          else{
              let tab_id = parentContainerID
              let height = chartJson[i].height;
              let width = chartJson[i].width;
              let position = chartJson[i].position;
              let config_gridlines = chartJson[i].config_gridlines;
              let layout = chartJson[i].layout;
              let graph_subtype = chartJson[i].graph_subtype;
              let chartDivId = chartJson[i].id;
              let graphdata = chartJson[i].data;
              let x_axis = chartJson[i].x_axis;
              let y_axis = chartJson[i].y_axis;

              let computed_number = chartJson[i].computed_number;
              let img_icon = chartJson[i].img_icon;
              let is_title = chartJson[i].is_title;
              let title_value = chartJson[i].title_value;
              let operation_n = chartJson[i].operation_n;
              let agg_distinct = chartJson[i].agg_distinct;

              let second_column = chartJson[i].second_column;
              let operation = chartJson[i].operation;
              let operation_line = chartJson[i].operation_line;
              let titlefontsize = chartJson[i].titlefontsize;
              let valuefontsize = chartJson[i].font_size;
              let chart_title = chartJson[i].chart_title;
              let data_value = chartJson[i].data_value;
              let config_valuesize = chartJson[i].config_valuesize;
              let config_titlesize = chartJson[i].config_titlesize;
              let config_data_value = chartJson[i].config_data_value;
              let backgroundcolor = chartJson[i].backgroundcolor;
              let changed_text = chartJson[i].changed_text;
              let chartheader = chartJson[i].chartheader;
              let filters=JSON.stringify(chartJson[i].filters);
              let line_column=chartJson[i].line_column;
              let tableName=chartJson[i].tableName;
              let color = chartJson[i].color;
              let plot_bg_color = chartJson[i].plot_bg_color;
              let global_bg = chartJson[i].global_bg;
              let grad_color = chartJson[i].grad_color;
              let global_bgcolor = chartJson[i].global_bgcolor;
              let global_ind_color = chartJson[i].global_ind_color;
              let config_color = chartJson[i].config_color;
              let config_labels = chartJson[i].config_labels;
              let config_xrange = chartJson[i].config_xrange;
              let config_yrange = chartJson[i].config_yrange;
              let config_x_axis_title = chartJson[i].config_x_axis_title;
              let legend_x = chartJson[i].legend_x;
              let legend_y = chartJson[i].legend_y;
              let config_label_placement = chartJson[i].config_label_placement;
              let config_y_axis_title = chartJson[i].config_y_axis_title;
              let config_element_color = chartJson[i].config_element_color;
              let element_label = chartJson[i].element_label;
              let total_y = chartJson[i].total_y;
              let total_L = chartJson[i].total_L;
              let data_shadowon = chartJson[i].data_shadowon;
              let data_shadecolor = chartJson[i].data_shadecolor;
              let data_shadowX = chartJson[i].data_shadowX;
              let data_shadowY = chartJson[i].data_shadowY;
              let data_shadowblurry = chartJson[i].data_shadowblurry;
              let data_borderColor = chartJson[i].data_borderColor;
              let data_borderStyle = chartJson[i].data_borderStyle;
              let data_borderon = chartJson[i].data_borderon;
              let data_borderThickness = chartJson[i].data_borderThickness;
              let data_shadowThick = chartJson[i].data_shadowThick;
              let header_fontsize = chartJson[i].header_fontsize;
              let header_fontweight = chartJson[i].header_fontweight;
              let header_fontstyle = chartJson[i].header_fontstyle;
              let header_alignment = chartJson[i].header_alignment;
              let header_color = chartJson[i].header_color;
              let header_bgcolor = chartJson[i].header_bgcolor;
              let conditional_table = chartJson[i].conditional_table;
              let slicerColumnId = tab_id.replace("analysisrow", "selectSlicerConfig_")
              let slicerColumnValue = []
              let slicerColumn = []
              if(chartJson[i]["app_code"] != undefined){
                app_code = chartJson[i]["app_code"];
              } else {
                if (calling == true && tab == false){
                  app_code = "";
                }
              }


              for (let i = 0; i < $(`.${slicerColumnId}`).length; i++) {
                  slicerColumnValue.push($(`.${slicerColumnId}`).eq(i).val());
                  slicerColumn.push($(`.${slicerColumnId}`).eq(i).attr("data-slicerColumn"))
              }

              let plotDict = {"thresholdConfig":thresholdGuage, 'is_title':is_title,'title_value':title_value,"element_id":parentId,"pr_code":windowLocation.split("/")[2],"conditional_table":conditional_table,"img_icon" : img_icon, "header_alignment":header_alignment,"header_fontstyle":header_fontstyle,"header_fontsize":header_fontsize,"header_fontweight":header_fontweight, "header_color":header_color,"header_bgcolor":header_bgcolor,"data_shadowon":data_shadowon, "data_shadecolor":data_shadecolor, "data_shadowX":data_shadowX, "data_shadowY":data_shadowY, "data_shadowblurry":data_shadowblurry, "data_shadowThick":data_shadowThick, "data_borderColor":data_borderColor, "data_borderStyle":data_borderStyle, "data_borderon":data_borderon, "data_borderThickness":data_borderThickness,'total_y':total_y,'total_L':total_L,'color':color,'plot_bg_color':plot_bg_color,'global_bg':global_bg,'grad_color':grad_color,'global_bgcolor':global_bgcolor,'global_ind_color':global_ind_color,"element_label":element_label,"config_element_color":config_element_color,"config_data_value":config_data_value,"config_valuesize":config_valuesize,"config_titlesize":config_titlesize, "config_label_placement":config_label_placement,"legend_x":legend_x,"legend_y":legend_y,'computed_number':computed_number,'operation_n':operation_n,"agg_distinct":agg_distinct, "operation": operation, "operation_line": operation_line, "tableName":tableName, "filters":filters,"line_column":line_column,"chartheader": chartheader, "chart_title": chart_title,"data_value":data_value, "x_axis": x_axis, "y_axis": y_axis, "second_column": second_column,  'graph_subtype': graph_subtype, 'tab_id': tab_id, 'height': height, 'width': width, 'data': graphdata, 'layout': layout, 'chartDivId': chartDivId, "position": position, "backgroundcolor": backgroundcolor, "titlefontsize": titlefontsize, "valuefontsize": valuefontsize,"titlefontsize": titlefontsize, "config_color":config_color,"config_xrange":config_xrange,"config_yrange":config_yrange,"config_gridlines":config_gridlines,"config_labels":config_labels,"config_x_axis_title":config_x_axis_title,"config_y_axis_title":config_y_axis_title,"changed_text": changed_text,"filters":filters,'filter_input_final': JSON.stringify(filter_input_final), 'drange': JSON.stringify(drange)}
              let y = false;
              if (editType == "Disable"){
                y = true;
              }
              plotFunction(plotDict, slicerColumn="", slicerColumnValue="", slicerColumnId=slicerColumnId,existingDivId=chartDivId, app_code_ = app_code, disable = y)

              slicerChangeUpdatePlots(app_code);
          }

          }
        }
      }
    """
    js += "</script>"
    return js


def importScript(request, app_code, item_code):
    tenant = tenant_schema_from_request(request)
    extend_template = """{% extends extend_template %}"""
    if item_code:
        theme_name = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "NavigationSideBar",
                    "Columns": [
                        "theme_name",
                    ],
                },
                "condition": [
                    {
                        "column_name": "item_code",
                        "condition": "Equal to",
                        "input_value": item_code,
                        "and_or": "",
                    },
                ],
            },
        )
        if len(theme_name) > 0:
            if theme_name.iloc[0]["theme_name"] is not None:
                theme_name = json.loads(theme_name.iloc[0]["theme_name"])["theme_name"]
                if os.path.isfile(
                    f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/theme/Section/{theme_name}/{item_code}/base_all.html"
                ):
                    extend_template = f"{{% extends 'user_defined_template/{tenant}/{app_code}/theme/Section/{theme_name}/{item_code}/base_all.html' %}}"
                else:
                    extend_template = f"{{% extends 'user_defined_template/{tenant}/{app_code}/theme/Section/{theme_name}/base_all.html' %}}"
            else:
                extend_template = """{% extends extend_template %}"""
        else:
            extend_template = """{% extends extend_template %}"""
    html = (
        """
    <!DOCTYPE html>

    """
        + extend_template
        + """
    {% load crispy_forms_tags %}
    {{ form.media }}
    {% load static %}
    {% block body_block %}
    <link rel="stylesheet" href="{% static 'css/KoreD/jquery.dataTables.min.css' %}">
    <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-responsive/css/responsive.bootstrap4.min.css' %}">
    <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-colreorder/css/colReorder.bootstrap4.min.css' %}">
    <link rel="stylesheet" href="{% static 'css/KoreD/buttons.dataTables.min.css' %}">
    <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{% static 'css/ebstyle.css' %}">
    <!-- DataTables -->
    <script src="{% static 'vendor/Base_theme/datatables/jquery.dataTables.min.js' %}"></script>
    <script src="{% static 'vendor/Base_theme/datatables-responsive/js/dataTables.responsive.min.js' %}"></script>
    <script src="{% static 'vendor/Base_theme/datatables-fixedheader/js/dataTables.fixedHeader.min.js' %}"></script>
    <script src="{% static 'vendor/Base_theme/datatables-colreorder/js/dataTables.colReorder.min.js' %}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-bs4/js/dataTables.bootstrap4.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-fixedcolumns/js/dataTables.fixedColumns.min.js'%}"></script>
    <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-fixedcolumns/css/fixedColumns.dataTables.min.css'%}">
    <!-- Treant JS -->
    <link href="{%static 'vendor/treant-js-master/Treant.css'%}" type="text/css" rel="stylesheet" />
    <script src="{%static 'vendor/treant-js-master/vendor/raphael.js'%}"></script>
    <script src="{%static 'vendor/treant-js-master/Treant.js'%}"></script>
    <!-- Timepicker -->
    <link rel="stylesheet" href="{%static 'bootstrap-datepicker/bootstrap-datetimepicker.min.css'%}">
    <link rel="stylesheet" href="{%static 'bootstrap_datepicker_plus/css/datepicker-widget.min.css'%}">
    <script type="text/javascript" src="{%static 'moment/moment-with-locales.min.js'%}"></script>
    <script type="text/javascript" src="{%static 'bootstrap-datetimepicker/bootstrap-datetimepicker.min.js'%}"></script>
    <script type="text/javascript" src="{%static 'bootstrap_datepicker_plus/js/datepicker-widget.js'%}"></script>

    <script src="{%static 'vendor/Base_theme/datatables-buttons/js/dataTables.buttons.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/jszip/jszip.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/pdfmake/pdfmake.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/pdfmake/vfs_fonts.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.html5.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.colVis.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.print.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.flash.min.js'%}"></script>
    <script src="{%static 'vendor/Base_theme/datatables-rowreorder/js/dataTables.rowReorder.min.js'%}"></script>
    <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-rowreorder/css/rowReorder.bootstrap4.min.css' %}">
    <!-- Pivot Table JS -->
    <script type="text/javascript" src=" {% static 'vendor/d3/d3.min.js' %}"></script>
    <script type="text/javascript" src=" {% static 'vendor/c3/c3.min.js' %}"></script>


    <script src="{%static 'vendor/Plotly/plotly-basic-latest.min.js'%}"></script>

    <script src=" {% static 'js/pivottable/dist/pivot.min.js' %}"></script>
    <script src=" {% static 'js/pivottable/dist/c3_renderers.min.js' %}"></script>

    <script src=" {% static 'js/pivottable/dist/d3_renderers.min.js' %}"></script>
    <script src=" {% static 'js/pivottable/dist/gchart_renderers.min.js' %}"></script>
    <script src=" {% static 'js/pivottable/dist/googleapis.js' %}"></script>
    <script src=" {% static 'js/pivottable/dist/plotly_renderers.min.js' %}"></script>

    <!-- Plotly -->
    <script src="{%static 'vendor/Plotly/plotly-latest.min.js'%}"></script>
    <link href="{%static 'vendor/Plotly/mapbox-gl.css'%}" rel='stylesheet' />
    <link href="{%static 'vendor/Tabulator/tabulator.min.css'%}" rel="stylesheet">
    <script type="text/javascript" src="{%static 'vendor/Tabulator/tabulator.min.js'%}"></script>
    <!-- jsPDF -->
    <script src="{%static 'js/jsPDF/dist/jspdf.umd.min.js'%}"></script>
    <!-- html2Canvas -->
    <script src="{%static 'js/html2canvas/html2canvas.min.js'%}"></script>

    <!-- Jcrop OCR -->
    <link rel="stylesheet" href="{% static 'vendor/Jcrop/jquery.Jcrop.css' %}">
    <script src="{%static 'vendor/Jcrop/popper.min.js'%}"></script>
    <script src="{%static 'vendor/Jcrop/jquery.Jcrop.js'%}"></script>
    <script src="{%static 'vendor/Jcrop/console.image.min.js'%}"></script>

  <!-- XLSX/XML Table Export --->
    <script src="{%static 'js/tableExport/tableExport.min.js'%}" ></script>
    <script>
      $('body').css('pointer-events', 'none')
      var id1 = {{element_id | safe}}
      const { jsPDF } = window.jspdf;
    </script>\n
  """
    )
    return html


def navLinkScript():
    html = ""
    html = (
        html
        + """<script>
      var justForCheck = 1;
      hrefOftabs= $('.l3items').eq(0).attr('href');
      $('.l3items').each(function(){
        if($(this).parent().css('display') != 'none') {
          if(justForCheck) {
            $(this).tab('show');
            justForCheck = 0
          }
        }
      })
      textbreadcrumb=$('.l3items').eq(0).text().trim();
      $('.breadcrumblist').remove();
      $('.breadcrumblist_mobile').each(function(){\
          $(this).remove();\
        });\
      $('#dynamic').append(`<li class='breadcrumb-item breadcrumblist'><b>${textbreadcrumb}</b></li>`);
      \n $('.mobile_breadcrumbs').append(`
      \n  <div class="down-arrow breadcrumblist_mobile"><i class="fa-solid fa-down-long"></i></div>
      \n  <div class="breadcrumb_item_mobile breadcrumblist_mobile">
            <span>${textbreadcrumb}</span>
          </div>`);

       """
    )
    html = (
        html
        + "const queryString = window.location.search; \
      const urlParams = new URLSearchParams(queryString);\
      const page_type = urlParams.get('value');\
      $('.breadcrumblist').remove();\
      $('.breadcrumblist_mobile').each(function(){\
          $(this).remove();\
        });\
    \nactiveElement = '{{element_id_active}}'\
    \nif (activeElement != 'no'){\
    \n    $('#'+activeElement+'-tab').trigger('click')\
    \n}\
   \n$('.l3-mobile-tabs .l3items,.l3-desktop-tabs .l3items').each(function(){\
   \n  if(page_type != null){\
    \n  if($(this).text().trim()==page_type){\
     \n hrefOftabs= $(this).attr('href');\
     \n hrefATagId = $(this).attr('id')"
    )
    html = (
        html
        + """
     \nif(! id1.includes(hrefATagId.split('-tab')[0])) {\n
        if (activeElement == "no"){
    \n    $(`.nav-item a[href='${hrefOftabs}']`).tab('show');\
        }
     \n   textbreadcrumb=$(this).text().trim();\
     \n   $('#dynamic').append(`<li class='breadcrumb-item breadcrumblist'><b>${textbreadcrumb}</b></li>`);\
     \n $('.mobile_breadcrumbs').append(`\
      \n  <div class="down-arrow breadcrumblist_mobile"><i class="fa-solid fa-down-long"></i></div>\
      \n  <div class="breadcrumb_item_mobile breadcrumblist_mobile">  \
            <span>${textbreadcrumb}</span>\
          </div>`);\
     \n } else {$(this).css('display', 'none')}\
     \n}\
     \n}\
   \n else{\
     \n hrefATagId = $(this).attr('id')\
   \n  if (!id1.includes(hrefATagId.split('-tab')[0])) {\
   \n if($(this).attr('class')=='nav-link l3items l3tabs active'){\
   \n  linkbreadcrumbs=$(this).attr('href');\
   \n  textbreadcrumb=$(this).text().trim();\
   \n  $('#dynamic').append(`<li class='breadcrumb-item breadcrumblist'><b>${textbreadcrumb}</b></li>`);\
   \n       \n $('.mobile_breadcrumbs').append(`\
      \n  <div class="down-arrow breadcrumblist_mobile"><i class="fa-solid fa-down-long"></i></div>\
      \n  <div class="breadcrumb_item_mobile breadcrumblist_mobile">  \
            <span>${textbreadcrumb}</span>\
          </div>`);\
   \n }\
   \n } else {$(this).css('display', 'none')}\
   \n};\
   });\
  \n \
   """
    )
    html = (
        html
        + """
      $(document).ready(function(){
        flowTabChange();
        $('body').css('pointer-events', 'all')
      });
    """
    )
    html = (
        html
        + "\
  \
    </script>\
    <script>;\
      $('.l3items').click(function(){\
        linkbreadcrumbs=$(this).attr('href');\
        textbreadcrumb=$(this).text();\
        $('.breadcrumblist').each(function(){\
          $(this).remove();\
        });\
        $('.breadcrumblist_mobile').each(function(){\
          $(this).remove();\
      \n  });\
      \n  $('#dynamic').append(`<li class='breadcrumb-item breadcrumblist'><b>${textbreadcrumb}</b></li>`); \
      \n  \n $('.mobile_breadcrumbs').append(`\
      \n  <div class='down-arrow breadcrumblist_mobile'><i class='fa-solid fa-down-long'></i></div>\
      \n  <div class='breadcrumb_item_mobile breadcrumblist_mobile'>  \
            <span>${textbreadcrumb}</span>\
          </div>`);\
     \n }\
    \n  )\
    \n</script>"
    )
    html = html + "</div>\n"
    html = (
        html
        + """
        <script>
        </script>
        <script>
        // Initialisation of variables to be used in multiple script tags
        var PATHNAME = windowLocation
        var PATHNAME_SPLIT_ARRAY = PATHNAME.split("/")

        // Initialise popover
        $('[data-toggle="popover"]').popover({ trigger: 'hover' });
          // Initialise select elements
          $('.select2bs4').select2({
          dropdownParent:$('.select2bs4').parent()
          });

          $('select.select2:not(.modal select.select2)').each(function(){
              parent = $(this).parent()
              $(this).select2({dropdownParent:parent})
          })
          $('.modal select.select2').each(function(){
              $(this).select2()
          })
          $('[data-toggle="tooltip"]').tooltip({
            placement: 'top'
          });
        //CHANGE THIS CODE

            function showpopOver(){
              let flag = $(this).attr("data-to_show")
              if(flag == undefined){
                $(this).attr("data-to_show",1)
                flag = 1
              }else if(flag == 1){
                $(this).attr("data-to_show",0)
              } else{
                $(this).attr("data-to_show",1)
              }
              if(flag == 1){
                $(this).popover('show')
              }

            }

          //Create view init
          $(".systemvaluedropdown").select2({
            tags: true
          });
          function goBack() {
            window.history.back();
          }
        </script>"""
    )
    html = (
        html
        + """<script type="text/javascript" src="{% static 'js/creditcard_js/src/creditcard.js' %}" defer></script> """
    )
    html = (
        html
        + """
      <!-- Date Range Picker -->
      <script type="text/javascript" src="{%static 'moment/moment.min.js'%}"></script>
      <script type="text/javascript" src="{%static 'daterangepicker/js/daterangepicker.min.js'%}"></script>
      <link rel="stylesheet" href="{%static 'daterangepicker/css/daterangepicker.css'%}">
      <script fetchpriority="low" type="text/javascript" src="{% static 'js/Kore_TI_js/htmlGeneratorScript.min.js' defer %}"></script>
    """
    )
    return html


def breadCrumbs(
    header_name,
    create_view_tab_body_content,
    element_id,
    tab_type_list,
    ids,
    breadcrumbs,
    tabs_multi_function_list,
    request,
):
    pass


def navLinkHtml():
    html = ""
    html = (
        html
        + """
    <style>
      .commentboxcard {
        height: 400px;
        width: 500px;
        flex-wrap:wrap;
      }
      strong {
        font-weight: bold;
      }
      .select2-container{
        width:auto;
      }
      .row {
        flex-wrap: wrap;
      }
      .l3-mobile-tabs{
        display:none;
      }
      .l3-desktop-tabs{
        display:flex;
      }
      .dropdown-header{
        padding: 0.7rem;
        background: #e9ecef;
        width:100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 16px;
      }
      .selected_text{
        word-break: break-word;
        white-space: break-spaces;
        text-align: left;
      }

      @media screen and (max-width: 426px) {
        .tab-container{
          width: 100% !important;
        }
        .vertical-tabs{
          margin-top: 0 !important;
        }
        .l3-mobile-tabs{
          display:block;
        }
        .vertical-mobile-tabs{
          width: 100%;
        }
        .l3-desktop-tabs{
          display:none;
        }
        .option-container{
          position: absolute;
          z-index: 2000;
          width: 90%;
          display: none;
          box-shadow: 0 0.5rem 1rem rgba(0,0,0,.175);
          border-radius: 5px;
          overflow: auto;
          height: auto;
          max-height: 16rem;
        }
      }

      @media screen and (max-width: 376px){
        .option-container{
          width: 89%;
        }
      }

      @media screen and (max-width: 321px) {
        .option-container{
          width: 87%;
        }
      }

      @media screen and (max-width: 281px) {
        .option-container{
          width: 85%;
        }
      }

    </style>
  """
    )
    html = html + eq_builder()
    html = (
        html
        + """<div class="modal fade" id="draftModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="draftModal"  aria-modal="true" style="z-index:1052 !important;">
          <div class="modal-dialog modal-xl modal-lg modal-dialog-centered"  role="document">
              <div class="modal-content">


              <div class="modal-header border-0 pl-3 pr-3">
                  <h6 class="modal-title">Draft Versions</h6>
                  <i class="fa-solid fa-box-archive fa-3x"></i>
              </div>

              <div class="modal-body " >
                  <table class="table table-striped" id="previewTable">

                  </table>
              </div>

              <div class="modal-footer d-flex justify-content-end border-0">
                  <button type="button" class="btn btn-primary buttonfooter btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
              </div>

              </div>
          </div>

      </div>
"""
    )

    html = (
        html
        + """<div class="modal fade" id="previewCreateViewModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="previewCreateViewModal"  aria-modal="true" style="z-index:1052 !important;">
          <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
              <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">


             <div class="modal-header" id="previewCreateviewHeader"  style="background:#565a5e;text-align: center;">
                  <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;"></h6>
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
              </div>

              <div class="modal-body " style="overflow: scroll;" id="previewCreateViewBody">

              </div>

              <div class="modal-footer" id='previewCreateView_footer'>
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
              </div>

              </div>
          </div>
      </div>
    """
    )
    html = (
        html
        + """<div class="modal fade" id="table_field_createView_dialog"  role="dialog" data-focus="false" aria-labelledby="table_field_createView_dialog" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal" onclick="$('#draftModal').modal('show')">Close</button>
              </div>
            </div>
          </div>
    """
    )
    return html


def navLink(
    header_name,
    create_view_tab_body_content,
    element_id,
    tab_type_list,
    ids,
    breadcrumbs,
    tabs_multi_function_list,
    request,
    tab_color_config,
    breadcrumbs_req=True,
    breadcrumbs_type="default",
):
    html = ""
    order = tabMultiFunc(tabs_multi_function_list, element_id, tab_type_list, request)
    order = err_handler_taborder(tabs_multi_function_list, element_id, tab_type_list, order, request)
    user_name = request.user.username
    html = (
        html
        + """
      <div class="breadcrumb-holder l3-breadcrumb-holder">
      <div class="row" style="width: 100%;">
        <div class="col-5 container-fluid breadcrumb-container l3-breadcrumbs">
          <div>
            <a {% if current_application_code != 'App0' %} {% if current_application_code == 'Dev' %}
              {% if current_dev_mode == 'Edit' %} {% if edit_app_code != 'Not Selected' %}
              href="{% url 'users:homePage' edit_app_code current_dev_mode %}"
              {% else %}
              href="{% url 'users:homePage' 'Dev' current_dev_mode %}"
              {% endif %} {% elif current_dev_mode == 'Build' %} {% if build_app_code != 'Not Selected' %}
              href="{% url 'users:homePage' build_app_code current_dev_mode %}"
              {% else %}
              href="{% url 'users:select_application' %}"
              {% endif %}  {% endif %}
              {% else %}
              href="{% url 'users:homePage' current_application_code 'User' %}"
              {% endif %}
              {% else %}
              href="{% url 'users:select_application' %}"
              {% endif %} >
              <i class="fa-solid fa-house" style="font-size: 18px;margin-top:3px;" data-toggle="tooltip" title="App Homepage"></i>
            </a>
          </div>
          <div> <button class="b-btn" style="border-radius:8rem" onclick="window.history.back();"><i class="fa-solid fa-clock-rotate-left mr-1"></i> Back</button> </div>


       </div>"""
    )

    html = (
        html
        + f"""
        <div class='col-7 container-fluid tabconfig'>
          <div>
            <button class="btn btn-dark tabconfig_button" data-data_list='{json.dumps(order["show"])}' onclick="populateTabFuctionalities.call(this)" data-toggle="modal" data-target="#tabsMultiFunc" >
              <i class="fas mr-1"></i> <div style="white-space:nowrap;"> Manage Tabs </div>
            </button>
          </div>
          <div>
            <button class="b-btn view_breadcrumbs" style="border-radius:8rem">View Path <i class="fa-solid fa-chevron-down ml-1 customtoggle"></i> </button>
          </div>
        </div>
        </div>
      </div>"""
    )

    if breadcrumbs_req:
        id_ = "dynamic"
        if breadcrumbs_type == "custom":
            id_ = "dynamic1"

        html = (
            html
            + """
      <style>
        .breadcrumb_item_mobile{
          padding: 2px 12px;
          background: var(--primary-color);
          border-radius: 8px;
          width: 90%;
          text-align: left;
          color: var(--font-hover-color);
          min-height: 60px;
          display: flex;
          align-items: center;
        }
        .mobile_breadcrumbs{
          display:flex;
          flex-direction: column;
          align-items: center;
        }
        .mobile_breadcrumbs .down-arrow{
          color: var(--primary-color);
        }


      </style>

      <div class="modal fade" id="view_breadcrumbs_modal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="view_breadcrumbs_modal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="width: 85%;margin: auto;">
          <div class="modal-content">
            <div class="modal-header" style="border-bottom:0">
              <div class="modal-title">Your Path</div>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="background-color: transparent; color: #000; padding: 0; font-size: 28px; margin:unset;">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="padding-bottom: 2.8rem;padding-top: 0rem;">

              <div class="mobile_breadcrumbs">"""
        )

        if breadcrumbs_type == "default":
            html = (
                html
                + """

                <div class="">
                  <a {% if current_application_code != 'App0' %} {% if current_application_code == 'Dev' %}
                    {% if current_dev_mode == 'Edit' %} {% if edit_app_code != 'Not Selected' %}
                    href="{% url 'users:homePage' edit_app_code current_dev_mode %}"
                    {% else %}
                    href="{% url 'users:homePage' 'Dev' current_dev_mode %}"
                    {% endif %} {% elif current_dev_mode == 'Build' %} {% if build_app_code != 'Not Selected' %}
                    href="{% url 'users:homePage' build_app_code current_dev_mode %}"
                    {% else %}
                    href="{% url 'users:select_application' %}"
                    {% endif %}  {% endif %}
                    {% else %}
                    href="{% url 'users:homePage' current_application_code 'User' %}"
                    {% endif %}
                    {% else %}
                    href="{% url 'users:select_application' %}"
                    {% endif %} >
                    <i class="fa-solid fa-house" style="font-size: 25px;margin-top:3px;" data-toggle="tooltip" title="App Homepage"></i>
                  </a>
                </div>
              """
            )

        if breadcrumbs:
            for b in breadcrumbs:
                step = f"""
                <div class="down-arrow"><i class="fa-solid fa-down-long"></i></div>
                <div class="breadcrumb_item_mobile">
                  <span>{b['item_name']}</span>
                </div>"""
                html += step

        html = (
            html
            + """

              </div>
            </div>
          </div>
        </div>
      </div>
       """
        )

        html = (
            html
            + f"""

          <ul class="breadcrumb breadcrumb-accordion" style="display:none; padding: .25rem 1rem; margin-block-end: 0em;" id="{id_}">"""
        )
        if breadcrumbs_type == "default":
            html = (
                html
                + """
        <li class="breadcrumb-item"><a {% if current_application_code != 'App0' %} {% if current_application_code == 'Dev' %}
              {% if current_dev_mode == 'Edit' %} {% if edit_app_code != 'Not Selected' %}
              href="{% url 'users:homePage' edit_app_code current_dev_mode %}"
              {% else %}
              href="{% url 'users:homePage' 'Dev' current_dev_mode %}"
              {% endif %} {% elif current_dev_mode == 'Build' %} {% if build_app_code != 'Not Selected' %}
              href="{% url 'users:homePage' build_app_code current_dev_mode %}"
              {% else %}
              href="{% url 'users:select_application' %}"
              {% endif %}  {% endif %}
              {% else %}
              href="{% url 'users:homePage' current_application_code 'User' %}"
              {% endif %}
              {% else %}
              href="{% url 'users:select_application' %}"
              {% endif %} >
          <b> Home </b></a></li>"""
            )
        if breadcrumbs:
            for b in breadcrumbs:
                html = html + f"""      <li class="breadcrumb-item"> <b> {b['item_name']} </b></li>"""

        html = (
            html
            + """ </ul>

      <script>
      $(".view_breadcrumbs").click(function(){
        var media = window.matchMedia("(min-width: 450px)")
        if (media.matches){
          $(this).closest(".breadcrumb-holder").siblings(".breadcrumb-accordion").slideToggle()
          $(this).find("i").toggleClass("toggle_arrow")
        }
        else{
          $("#view_breadcrumbs_modal").modal("show")
        }
      })
      </script>
      """
        )

    html = (
        html
        + """
      <datalist id="hosting-plan">
        <option value="=Count"/>
        <option value="=Count Distinct"/>
        <option value="=Sum"/>
        <option value="=Average"/>
        <option value="=Minimum"/>
        <option value="=Maximum"/>
        <option value="=Standard Deviation"/>
        <option value="=Variance"/>
        <option value="=Median"/>
        <option value="=Skewness"/>
        <option value="=Kurtosis"/>
      </datalist>
    """
    )
    html = html + commonHtml(request, tab_type_list=tab_type_list)
    html = (
        html
        + f"<section class='content' style='opacity: 0;'><div class='container-fluid'> <form id='form1' method='post'>"
        + "{% csrf_token %}"
        + "</form>"
    )
    tab_layout = "Horizontal"
    all_tab_height = "auto"
    all_tab_width = "auto"
    if tab_color_config:
        if tab_color_config.get("Tab_Layout") == "Vertical":
            tab_layout = "Vertical"
        else:
            pass
        if tab_color_config.get("Tab_Size"):
            all_tab_size_config = tab_color_config["Tab_Size"]
            if all_tab_size_config.get("height") and all_tab_size_config.get("height") != "0px":
                all_tab_height = all_tab_size_config["height"]
            else:
                pass
            if all_tab_size_config.get("width") and all_tab_size_config.get("width") != "0px":
                all_tab_width = all_tab_size_config["width"]
            else:
                if tab_layout == "Vertical":
                    all_tab_width = "300px"
                else:
                    all_tab_width = "auto"
        else:
            if tab_layout == "Vertical":
                all_tab_width = "300px"
            else:
                all_tab_width = "auto"
    else:
        pass

    if tab_layout == "Vertical":
        html = html + f"<div class='row'>"
        html = (
            html
            + f"<div style='width:{all_tab_width}; margin:0 1%;'><ul class='nav nav-tabs nav-fill l3-desktop-tabs' fetchpriority='high' id='myTab' role='tablist' style='flex-wrap:nowrap;overflow-x:hidden;overflow-y:auto; flex-direction: column; align-items:center;'>"
        )

        dropdown_html = (
            f"<div class='row'><div class='tab-container' style='width:{all_tab_width}; margin:0 1%;'>"
        )

        dropdown_html = """<div class="dropdown-container l3-mobile-tabs vertical-mobile-tabs" style="margin: 10px 7px 2px 8px;box-shadow: 0 0 1px rgba(0,0,0,.125), 0 1px 3px rgba(0,0,0,.2);border-radius: 5px;overflow: hidden;">"""
        dropdown_html += f"""<div class="dropdown-header" id='' data-toggle='tab' href=''><span class="selected_text" style="margin: auto 9px;"></span><i class="fa-lg fa-solid fa-angle-down"></i></div>"""
        dropdown_html += f"""<div class="option-container" style="display:none;">"""

    else:
        html = (
            html
            + f"<ul class='nav nav-tabs nav-fill l3-desktop-tabs' fetchpriority='high' id='myTab' role='tablist' style='flex-wrap:nowrap;overflow-x: scroll;overflow-y: hidden;margin-top:1%;padding: 12px 0 0 0 !important;'>"
        )

        dropdown_html = """<div class="dropdown-container l3-mobile-tabs" style="margin: 10px 7px 2px 8px;box-shadow: 0 0 1px rgba(0,0,0,.125), 0 1px 3px rgba(0,0,0,.2);border-radius: 5px;overflow: hidden;">"""

        dropdown_html += f"""<div class="dropdown-header" id='' data-toggle='tab' href=''><span class="selected_text" style="margin: auto 9px;"></span><i class="fa-lg fa-solid fa-angle-down"></i></div>"""
        dropdown_html += f"""<div class="option-container" style="display:none;">"""

    count = 0

    all_tab_customized_css = ""
    if tab_color_config:
        if tab_color_config.get("All_Tab"):
            all_tab_config = tab_color_config["All_Tab"]
            for k, v in all_tab_config.items():
                all_tab_customized_css += f"{k}:{v};"
        else:
            pass
        if all_tab_height:
            all_tab_customized_css += f"height:{all_tab_height};"
        else:
            pass
        if all_tab_width:
            if tab_layout == "Vertical":
                all_tab_customized_css += f"width:100%;"
            else:
                all_tab_customized_css += f"width:{all_tab_width};"
        else:
            pass
    else:
        pass
    for j in range(len(element_id)):
        if tab_layout == "Vertical":
            tab_border_radius = "border-radius: 5px;"
        else:
            tab_border_radius = "border-top-right-radius: 10px;border-top-left-radius: 8px;"

        hide_ = False
        if tab_type_list[j] not in ["decision_box", "flowlink", "flowlinkto", "flowController", "message"]:
            i = int(order["order"][str(count + 1)])
            individual_tab_customized_css = ""
            if tab_color_config:
                if tab_color_config.get(element_id[i]):
                    individual_tab_config = tab_color_config[element_id[i]]
                    for k, v in individual_tab_config.items():
                        individual_tab_customized_css += f"{k}:{v};"
                else:
                    pass
            else:
                pass
            show = order["show"][element_id[i]]["show"]
            if show == "1":
                if tab_layout == "Vertical":
                    css = "display:inline-block;white-space: nowrap; margin:38px 5px 0; border-bottom:none !important; width:100%;"
                else:
                    css = "display:inline-block;white-space: nowrap; margin:auto 5px; border-bottom:none !important;"
            else:
                if tab_layout == "Vertical":
                    css = "display:none;white-space: nowrap; width:300px; border-bottom:none !important;"
                else:
                    css = "display:none;white-space: nowrap; border-bottom:none !important;"
            if element_id[i].__contains__("parallelo"):
                data_ = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "TabScreens",
                            "Columns": ["tab_body_content"],
                        },
                        "condition": [
                            {
                                "column_name": "tab_body_content",
                                "condition": "Contains",
                                "input_value": f'"child": "{element_id[i]}"',
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not data_.empty:
                    data_ = json.loads(data_.iloc[0].tab_body_content)
                    if data_.get("elementHide") not in [None, False]:
                        hide_ = True

            if not hide_:
                if tab_type_list[i] == "analysis":

                    html = html + f"<li class='nav-item' data-tab_pk='{ids[i]}' style='{css}'>"
                    if individual_tab_customized_css:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="{individual_tab_customized_css}" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link analysisL3Tab l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html = (
                            html
                            + f"<a class='nav-link analysisL3Tab l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};{individual_tab_customized_css}'>"
                        )
                    elif all_tab_customized_css:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="{all_tab_customized_css}" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link analysisL3Tab l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html = (
                            html
                            + f"<a class='nav-link analysisL3Tab l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};{all_tab_customized_css}'>"
                        )
                    else:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html += f"<a class='nav-link analysisL3Tab l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};'>"
                    html = html + f"<span data-user={user_name} class='span_content_editable'>"
                    html = html + "{{tab_header_name_"
                    html = html + f"{element_id[i]}"
                    html = html + "}}</span></a></li>"

                elif tab_type_list[i] != "decision_box":

                    html = html + f"<li class='nav-item' data-tab_pk='{ids[i]}' style='{css}'>"
                    if individual_tab_customized_css:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="{individual_tab_customized_css}" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html = (
                            html
                            + f"<a class='nav-link l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};{individual_tab_customized_css}'>"
                        )
                    elif all_tab_customized_css:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="{all_tab_customized_css}" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html = (
                            html
                            + f"<a class='nav-link l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};{all_tab_customized_css}'>"
                        )
                    else:
                        dropdown_html += (
                            f"""<div class="mobile-text" data-style="" style="padding: 0.7rem;background: #fff;border-top: 1px solid lightgrey;width:100%;margin: unset !important;{css}"><a class='nav-link l3items' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 0 !important; box-shadow: none !important;word-break:break-word;white-space:break-spaces;'>"""
                            + """{{tab_header_name_"""
                            + f"""{element_id[i]}"""
                            + """}}</a></div>"""
                        )
                        html += f"<a class='nav-link l3items l3tabs' id='{element_id[i]}-tab'  data-toggle='tab' href='#{element_id[i]}_tab_content' role='tab'aria-controls='{element_id[i]}_tab_content' aria-selected='true' style='border: 1px solid #b9bcbe; border-bottom:none !important; {tab_border_radius};'>"
                    html = html + f"<span data-user={user_name} class='span_content_editable'>"
                    html = html + "{{tab_header_name_"
                    html = html + f"{element_id[i]}"
                    html = html + "}}</span></a></li>"
            count = count + 1

    if tab_layout == "Vertical":
        html = html + "</ul></div>"
        dropdown_html += "</div></div>"
    else:
        html = html + "</ul>"
        dropdown_html += "</div></div>"
    html = (
        html
        + """
    """
    )
    html = html + dropdown_html
    html += """<script>
              $(document).ready(function(){
                var shown_items = 0
                $(".dropdown-header .selected_text").text($(".option-container").find(".nav-link.l3items").eq(0).text())
                $(".dropdown-header").attr("style",$(".option-container").find(".mobile-text").eq(0).attr("data-style"))

                $(".option-container").css("width",$(".option-container").closest(".l3-mobile-tabs").width())

                $('.option-container').find(".mobile-text").each(function(){
                  if($(this).css("display") != "none"){
                    shown_items++
                  }
                })

                if(shown_items >= 2)
                {
                  $(".dropdown-header").click(function(){
                    $(this).siblings(".option-container").toggle()
                  })

                  $(".option-container").find(".nav-link.l3items").eq(0).addClass("active")

                  $(".option-container").find(".nav-link.l3items").click(function(){
                    current_nav = $(this)
                    $(".dropdown-header .selected_text").text($(this).text())
                    custom_style=$(this).parent().attr("data-style")
                    $(".dropdown-header").attr("style",custom_style)
                    $(".option-container").find(".nav-link.l3items").each(function(){
                        if($(this) != current_nav){
                          $(this).removeClass("active")
                        }
                    })
                    $(".option-container").toggle()
                  })

                  $(document).on("click", function(event){
                    var $trigger = $(".dropdown-container");
                    if($trigger !== event.target && !$trigger.has(event.target).length){
                        $(".option-container").css("display","none");
                    }
                  });

                }
                else{
                  $(".option-container").css("display","none")
                  $(".dropdown-header i").css("display","none")
                }

              })

              </script>"""
    html = html + navLinkHtml()
    return html


def eq_builder():
    html = ""
    html = (
        html
        + """
    <style>
      h2 {
        font-size: medium;
      }
      .ebDataElementsDiv {
        margin-bottom: 5px;
      }
      .popup {
        height:80%;
      }
      .select2-dropdown {
        z-index:9999
      }
    </style>

  """
    )
    return html


def create_view_grid_layout(styling_dict, button_identifier, field_name):
    if styling_dict is not None:
        if styling_dict["grid_layout_on_off"] == True:
            if "exception" in styling_dict:
                if field_name in styling_dict["exception"]:
                    if button_identifier == "form":
                        styling = f"'display:grid;grid-template-columns:repeat({styling_dict['field-no-one-row']},minmax(300px, 1fr));gap:{styling_dict['field-padding']}px;'"
                    elif button_identifier == "input":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem !important;border:{styling_dict['exception'][field_name]['field-border-width']}px {styling_dict['exception'][field_name]['field-border-style']} {styling_dict['exception'][field_name]['field-border-color-rgba']};box-shadow:{styling_dict['exception'][field_name]['field-shadow-h-offset']}px {styling_dict['exception'][field_name]['field-shadow-v-offset']}px {styling_dict['exception'][field_name]['field-shadow-blur']}px {styling_dict['exception'][field_name]['field-shadow-spread']}px {styling_dict['exception'][field_name]['field-shadow-color-rgba']};text-align:{styling_dict['exception'][field_name]['font-alignment-content']};color:{styling_dict['exception'][field_name]['font-content-color']};font-size:{styling_dict['exception'][field_name]['font-content-size']}'"
                    elif button_identifier == "date_div":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem;border:{styling_dict['exception'][field_name]['field-border-width']}px {styling_dict['exception'][field_name]['field-border-style']} {styling_dict['exception'][field_name]['field-border-color-rgba']};box-shadow:{styling_dict['exception'][field_name]['field-shadow-h-offset']}px {styling_dict['exception'][field_name]['field-shadow-v-offset']}px {styling_dict['exception'][field_name]['field-shadow-blur']}px {styling_dict['exception'][field_name]['field-shadow-spread']}px {styling_dict['exception'][field_name]['field-shadow-color-rgba']};'"
                    elif button_identifier == "date_input":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem !important;text-align:{styling_dict['exception'][field_name]['font-alignment-content']};color:{styling_dict['exception'][field_name]['font-content-color']} !important;font-size:{styling_dict['exception'][field_name]['font-content-size']};'"
                    elif button_identifier == "label":
                        styling = f"'font-size:{styling_dict['exception'][field_name]['font-label-size']};color:{styling_dict['exception'][field_name]['font-label-color']} !important;text-align:{styling_dict['exception'][field_name]['font-alignment-label']};'"
                    dict_a = {"styling": styling}
                    return dict_a
                else:
                    if button_identifier == "form":
                        styling = f"'display:grid;grid-template-columns:repeat({styling_dict['field-no-one-row']},minmax(300px, 1fr));gap:{styling_dict['field-padding']}px;'"
                    elif button_identifier == "input":
                        styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem !important;border:{styling_dict['field-border-width']}px {styling_dict['field-border-color-rgba']};border-style: {styling_dict['field-border-style']};box-shadow:{styling_dict['field-shadow-h-offset']}px {styling_dict['field-shadow-v-offset']}px {styling_dict['field-shadow-blur']}px {styling_dict['field-shadow-spread']}px {styling_dict['field-shadow-color-rgba']};text-align:{styling_dict['font-alignment-content']};color:{styling_dict['font-content-color']};font-size:{styling_dict['font-content-size']}'"
                    elif button_identifier == "date_div":
                        styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem;border:{styling_dict['field-border-width']}px {styling_dict['field-border-color-rgba']};border-style: {styling_dict['field-border-style']};box-shadow:{styling_dict['field-shadow-h-offset']}px {styling_dict['field-shadow-v-offset']}px {styling_dict['field-shadow-blur']}px {styling_dict['field-shadow-spread']}px {styling_dict['field-shadow-color-rgba']};'"
                    elif button_identifier == "date_input":
                        styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem !important;text-align:{styling_dict['font-alignment-content']};color:{styling_dict['font-content-color']} !important;font-size:{styling_dict['font-content-size']};'"
                    elif button_identifier == "label":
                        styling = f"'font-size:{styling_dict['font-label-size']};color:{styling_dict['font-label-color']} !important;text-align:{styling_dict['font-alignment-label']};'"
                    dict_a = {"styling": styling}
                    return dict_a
            else:
                if button_identifier == "form":
                    styling = f"'display:grid;grid-template-columns:repeat({styling_dict['field-no-one-row']},minmax(300px, 1fr));gap:{styling_dict['field-padding']}px;'"
                elif button_identifier == "input":
                    styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem !important;border:{styling_dict['field-border-width']}px {styling_dict['field-border-style']} {styling_dict['field-border-color-rgba']};box-shadow:{styling_dict['field-shadow-h-offset']}px {styling_dict['field-shadow-v-offset']}px {styling_dict['field-shadow-blur']}px {styling_dict['field-shadow-spread']}px {styling_dict['field-shadow-color-rgba']};text-align:{styling_dict['font-alignment-content']};color:{styling_dict['font-content-color']};font-size:{styling_dict['font-content-size']}'"
                elif button_identifier == "date_div":
                    styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem;border:{styling_dict['field-border-width']}px {styling_dict['field-border-style']} {styling_dict['field-border-color-rgba']};box-shadow:{styling_dict['field-shadow-h-offset']}px {styling_dict['field-shadow-v-offset']}px {styling_dict['field-shadow-blur']}px {styling_dict['field-shadow-spread']}px {styling_dict['field-shadow-color-rgba']};'"
                elif button_identifier == "date_input":
                    styling = f"'height:{styling_dict['field-height']}rem !important;width:{styling_dict['field-width']}rem !important;text-align:{styling_dict['font-alignment-content']};color:{styling_dict['font-content-color']} !important;font-size:{styling_dict['font-content-size']};'"
                elif button_identifier == "label":
                    styling = f"'font-size:{styling_dict['font-label-size']};color:{styling_dict['font-label-color']} !important;text-align:{styling_dict['font-alignment-label']};'"
                dict_a = {"styling": styling}
                return dict_a
        else:
            if "exception" in styling_dict:
                if field_name in styling_dict["exception"]:
                    if button_identifier == "form":
                        styling = f"'display:grid;grid-template-columns:repeat({styling_dict['field-no-one-row']},minmax(300px, 1fr));gap:{styling_dict['field-padding']}px;'"
                    elif button_identifier == "input":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem !important;border:{styling_dict['exception'][field_name]['field-border-width']}px {styling_dict['exception'][field_name]['field-border-style']} {styling_dict['exception'][field_name]['field-border-color-rgba']};box-shadow:{styling_dict['exception'][field_name]['field-shadow-h-offset']}px {styling_dict['exception'][field_name]['field-shadow-v-offset']}px {styling_dict['exception'][field_name]['field-shadow-blur']}px {styling_dict['exception'][field_name]['field-shadow-spread']}px {styling_dict['exception'][field_name]['field-shadow-color-rgba']};text-align:{styling_dict['exception'][field_name]['font-alignment-content']};color:{styling_dict['exception'][field_name]['font-content-color']};font-size:{styling_dict['exception'][field_name]['font-content-size']}'"
                    elif button_identifier == "date_div":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem;border:{styling_dict['exception'][field_name]['field-border-width']}px {styling_dict['exception'][field_name]['field-border-style']} {styling_dict['exception'][field_name]['field-border-color-rgba']};box-shadow:{styling_dict['exception'][field_name]['field-shadow-h-offset']}px {styling_dict['exception'][field_name]['field-shadow-v-offset']}px {styling_dict['exception'][field_name]['field-shadow-blur']}px {styling_dict['exception'][field_name]['field-shadow-spread']}px {styling_dict['exception'][field_name]['field-shadow-color-rgba']};'"
                    elif button_identifier == "date_input":
                        styling = f"'height:{styling_dict['exception'][field_name]['field-height']}rem !important;width:{styling_dict['exception'][field_name]['field-width']}rem !important;text-align:{styling_dict['exception'][field_name]['font-alignment-content']};color:{styling_dict['exception'][field_name]['font-content-color']} !important;font-size:{styling_dict['exception'][field_name]['font-content-size']};'"
                    elif button_identifier == "label":
                        styling = f"'font-size:{styling_dict['exception'][field_name]['font-label-size']};color:{styling_dict['exception'][field_name]['font-label-color']} !important;text-align:{styling_dict['exception'][field_name]['font-alignment-label']};'"
                    dict_a = {"styling": styling}
                    return dict_a
                else:
                    dict_a = {"styling": f"''"}
            else:
                dict_a = {"styling": f"''"}
            return dict_a
    else:
        dict_a = {"styling": f"''"}
        return dict_a


def html_generator(
    model_name,
    create_view_tab_body_content,
    element_id,
    request_user,
    edit=False,
    tab_pane=1,
    item_code="",
    user_group=[],
    linked_bool=True,
    view="create view",
    iden="",
    iden2="",
    subprocess_flowchart_elements={},
    list_view_flag=False,
):
    curr_app_code, db_connection_name = current_app_db_extractor(request_user)
    user_db_engine, db_type = db_engine_extractor(db_connection_name)
    html = ""
    script = ""
    model_name1 = dynamic_model_create.get_model_class(model_name, request_user)
    fields = {}
    dic = {}
    columnMappedTable = {}
    fields_to_be_displayed = []
    showsave = True
    backbtn_ = False
    showDraftsave = False
    showCustomValidation = False
    showCustomValidationDev = False
    showHistoryView = False
    showTransaction = False
    showRejectedEntries = False
    createview_preview_mode = False
    createview_pdf_mode = False
    master_preview_mode = False
    auto_compute_mode = False
    viewRTFCB_mode = False
    showComputedVal = False
    carousel = False
    carousel_first = ""
    carousel_list = []
    carousel_dict = {}
    attrlist = []
    fieldslist = {}
    parent = []
    child = []
    direct_relation = []
    duplicate_column = []
    duplicate_column_foreign = []
    dropped_field = []
    restrict_field = []
    editNS_field = []
    editApproval_table = ""
    editApproval_fields = []
    group_field = []
    allField = True
    selectFieldL3 = []
    allow_approval_assingment = "disallow"
    decision_sep = ""
    decision_col = []
    file_input_field_list = []
    file_field_upload_html = ""
    user_field_inputs = []
    privacy_field_script = ""
    jsvalidation_createview_config = ""
    fk_script_ = ""
    autopopulate_fields = []
    js_action_attr_dic = {}
    maximum_levels_allowed = ""
    maximum_approvers_allowed = ""
    pr_code = read_data_func(
        request_user,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "TabScreens",
                "Columns": ["related_item_code"],
            },
            "condition": [
                {
                    "column_name": "element_id",
                    "condition": "Equal to",
                    "input_value": element_id,
                    "and_or": "",
                },
            ],
        },
    ).iloc[0]["related_item_code"]
    process_flow_design = read_data_func(
        request_user,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "NavigationSideBar",
                "Columns": ["process_flow_design"],
            },
            "condition": [
                {
                    "column_name": "item_code",
                    "condition": "Equal to",
                    "input_value": pr_code,
                    "and_or": "",
                },
            ],
        },
    ).iloc[0]["process_flow_design"]
    if process_flow_design is not None:
        process_flow_design = json.loads(process_flow_design)
    process_flow_design_type = None
    if process_flow_design is not None:
        if element_id in process_flow_design["prCodes"]:
            process_flow_design_type = process_flow_design
    is_multi_select_field = False
    multi_select_field_dict = {}
    grid_layout_config = create_view_tab_body_content["Category_attributes"]["Template"].get(
        "grid_layout_config"
    )
    if create_view_tab_body_content["Category_attributes"]["Template"].get("selectedField") not in [None]:
        selectFieldL3 = create_view_tab_body_content["Category_attributes"]["Template"].get("selectedField")
        if len(selectFieldL3) == 0:
            allField = True
        else:
            allField = False
    create_view_tab_body_content = create_view_tab_body_content
    if create_view_tab_body_content.get("restrict_wrap"):
        restrict_wrap_bool = create_view_tab_body_content["restrict_wrap"]
        if restrict_wrap_bool:
            restrict_wrap = "false"
        else:
            restrict_wrap = "true"
    else:
        restrict_wrap = "true"
    if create_view_tab_body_content["Category_attributes"]["Template"].get("carousel_view") not in [None]:
        if create_view_tab_body_content["Category_attributes"]["Template"].get("carousel_view") not in [
            "",
            {},
        ]:
            carousel_dict = create_view_tab_body_content["Category_attributes"]["Template"].get(
                "carousel_view"
            )
            carousel = True
            carousel_first = f"""<section>
                          <div class="row">
                          <div class="col-12">
                          <div id="carouselExampleIndicators{element_id}" class="carousel" data-interval="false" data-wrap='{restrict_wrap}'>
                          <div class="carousel-inner" style="overflow: unset;"><carousel-to-append>"""
    if create_view_tab_body_content["Category_attributes"]["Template"].get(
        "carousel_view_min_fields"
    ) not in [None]:
        if create_view_tab_body_content["Category_attributes"]["Template"].get(
            "carousel_view_min_fields"
        ) not in ["", {}]:
            carousel_view_min_fields_dict = create_view_tab_body_content["Category_attributes"][
                "Template"
            ].get("carousel_view_min_fields")
        else:
            carousel_view_min_fields_dict = {}
    else:
        carousel_view_min_fields_dict = {}

    if "Dropped_fields" in create_view_tab_body_content:
        if "dropped_fields" in create_view_tab_body_content["Dropped_fields"]:
            dropped_field = create_view_tab_body_content["Dropped_fields"]["dropped_fields"]

    if "EditNs_fields" in create_view_tab_body_content:
        editNS_field = create_view_tab_body_content["EditNs_fields"]

    if "editApproval_table" in create_view_tab_body_content:
        editApproval_table = create_view_tab_body_content["editApproval_table"]

    if "editApproval_fields" in create_view_tab_body_content:
        editApproval_fields = create_view_tab_body_content["editApproval_fields"]

    if create_view_tab_body_content["Category_attributes"]["Template"].get("jsvalidation_config"):
        jsvalidation_createview_config = create_view_tab_body_content["Category_attributes"]["Template"][
            "jsvalidation_config"
        ]
    else:
        jsvalidation_createview_config = []

    embededComputationCreatViewConfig = create_view_tab_body_content["Category_attributes"]["Template"].get(
        "embededComputationCreatView"
    )
    if embededComputationCreatViewConfig is not None:
        for i in embededComputationCreatViewConfig:
            for j in embededComputationCreatViewConfig[i]:
                if len(embededComputationCreatViewConfig[i][j]) > 4:
                    if (
                        embededComputationCreatViewConfig[i][j][4]
                        and embededComputationCreatViewConfig[i][j][3] == "target_output"
                    ):
                        embedded_noneditable = True
                        embedded_noneditable_cols = embededComputationCreatViewConfig[i][j][1]
                    else:
                        embedded_noneditable = False
                        embedded_noneditable_cols = []
                else:
                    embedded_noneditable = False
                    embedded_noneditable_cols = []
    else:
        embedded_noneditable = False
        embedded_noneditable_cols = []

    if create_view_tab_body_content.get("Restrict_fields"):
        if "Groups_fields" in create_view_tab_body_content:
            group_field = create_view_tab_body_content["Groups_fields"]
            if len(list(group_field)) > 0:
                for u in list(user_group):
                    if str(u) in group_field:
                        restrict_field = create_view_tab_body_content["Restrict_fields"]
            else:
                restrict_field = create_view_tab_body_content["Restrict_fields"]

    custom_btn = {}
    template_name = create_view_tab_body_content["Category_attributes"]["Template"]["Template_choice"]
    form_field = create_view_tab_body_content["Category_attributes"]["Template"].get("formLevelField")
    comparable_dict = {}
    if create_view_tab_body_content["Category_sub_elements"][0]["Category_sub_element_attributes"][1].get(
        "value_cases"
    ) not in [None]:
        dic_cases = create_view_tab_body_content["Category_sub_elements"][0][
            "Category_sub_element_attributes"
        ][1].get("value_cases")
    else:
        dic_cases = {}
    if create_view_tab_body_content.get("edit_labels"):
        edit_labels = create_view_tab_body_content["edit_labels"]
    else:
        edit_labels = ""
    if create_view_tab_body_content.get("copy_paste_config"):
        copy_paste_config = create_view_tab_body_content["copy_paste_config"]
    else:
        copy_paste_config = ""

    if create_view_tab_body_content.get("Columns_value"):
        cols_val = create_view_tab_body_content["Columns_value"]
    else:
        cols_val = 3
    if grid_layout_config is not None:
        if grid_layout_config["grid_layout_on_off"] == True:
            cols_val = ""
    if create_view_tab_body_content.get("restrict_mand"):
        restrict_mand = "restrict_mand"
    else:
        restrict_mand = "not_restrict_mand"
    if create_view_tab_body_content.get("check_validForm"):
        check_validForm_now = "check_validForm_now"
    else:
        check_validForm_now = ""
    check_validForm_now_bk = check_validForm_now
    if create_view_tab_body_content["Category_attributes"]["Template"].get("recurrence_config"):
        recurrence_config = create_view_tab_body_content["Category_attributes"]["Template"][
            "recurrence_config"
        ]
        if recurrence_config["to_apply"]:
            showRecurrButton = True
        else:
            showRecurrButton = False
    else:
        showRecurrButton = False
    if create_view_tab_body_content.get("card_logo"):
        card_logo = create_view_tab_body_content["card_logo"]
    else:
        card_logo = False
    if create_view_tab_body_content.get("email_logo"):
        email_logo = create_view_tab_body_content["email_logo"]
    else:
        email_logo = False
    if create_view_tab_body_content.get("user_profile_pic"):
        user_profile_pic = create_view_tab_body_content["user_profile_pic"]
    else:
        user_profile_pic = False
    if create_view_tab_body_content.get("user_email"):
        user_email = create_view_tab_body_content["user_email"]
    else:
        user_email = False
    if create_view_tab_body_content["Category_attributes"]["Template"].get("restict_min_config"):
        restict_min_config = create_view_tab_body_content["Category_attributes"]["Template"][
            "restict_min_config"
        ]
        if restict_min_config["to_apply"]:
            restict_min_class = "restict_min_class"
            restrict_min_cols = restict_min_config["colList"]
            restrict_min_no_fields = restict_min_config["no_of_fields"]
            if restrict_min_cols:
                carousel_view_min_fields_dict = restrict_min_cols
            else:
                carousel_view_min_fields_dict = [-1]
        else:
            restict_min_class = ""
            restrict_min_cols = []
            restrict_min_no_fields = -1
    else:
        restict_min_class = ""
        restrict_min_cols = []
        restrict_min_no_fields = -1
    if create_view_tab_body_content["Category_attributes"]["Template"].get("column_reorder"):
        column_reorder = create_view_tab_body_content["Category_attributes"]["Template"]["column_reorder"]
    else:
        column_reorder = {}
    if create_view_tab_body_content["Category_attributes"]["Template"].get("createViewCustomVal"):
        createViewCustomVal = create_view_tab_body_content["Category_attributes"]["Template"].get(
            "createViewCustomVal"
        )
        if len(createViewCustomVal) > 0:
            showCustomValidationDev = True
    else:
        createViewCustomVal = {}
    # Form Styling Settings
    if create_view_tab_body_content["Category_attributes"]["Template"].get("form_styling_config"):
        form_styling_config = create_view_tab_body_content["Category_attributes"]["Template"][
            "form_styling_config"
        ]
    else:
        form_styling_config = {}

    # Column Alignment Settings
    if create_view_tab_body_content["Category_attributes"]["Template"].get("column_alignment"):
        column_alignment_config = create_view_tab_body_content["Category_attributes"]["Template"][
            "column_alignment"
        ]
    else:
        column_alignment_config = {}

    if form_styling_config.get("grid_settings"):
        row_definition = form_styling_config["grid_settings"]["rowDefinition"]
        if row_definition == "manual":
            no_of_rows = int(form_styling_config["grid_settings"]["noOfRows"])
        else:
            no_of_rows = 1
    else:
        no_of_rows = 1

    # Sizing And Placement Config
    if form_styling_config.get("sizing_placement_settings"):
        sizing_placement_settings = form_styling_config["sizing_placement_settings"]
    else:
        sizing_placement_settings = {}

    # Buttons Placement Config
    if form_styling_config.get("button_row_config"):
        button_row_config = form_styling_config["button_row_config"]
    else:
        button_row_config = []

    # Server-side dropdowns
    if create_view_tab_body_content["Category_attributes"]["Template"].get("big_data_parameters"):
        big_data_parameters = create_view_tab_body_content["Category_attributes"]["Template"][
            "big_data_parameters"
        ]
    else:
        big_data_parameters = {}
    server_side_columns = big_data_parameters.get("server_side_columns", [])
    server_side_page_length = big_data_parameters.get("server_side_page_length", 100)

    if (template_name != "Constraint") & (template_name != "Asset Grouping"):
        if tab_pane:
            tab_pane_class = "tab-pane fade"
            style = ""
        else:
            tab_pane_class = "c"
            style = "style=overflow-x:unset"
            html = html + "<div>"
        if iden2 == "yes":
            html = (
                html
                + f"\n <div class='{tab_pane_class}' fetchpriority='high' {style} id='{element_id}_tab_content' aria-labelledby='{element_id}-tab'>"
            )
        else:
            html = (
                html
                + f"\n <div class='{tab_pane_class}' fetchpriority='high' {style} id='{element_id}_tab_content' role='tabpanel' aria-labelledby='{element_id}-tab'>"
            )
        if view == "create view":
            html = (
                html
                + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card' id='createview{element_id}' "
                + "onclick='enableSaveButton.call(this)' "
                + f" style='width:100%'>"
            )
        elif view == "list view":
            html = (
                html
                + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card' id='list_view_edit_modal_{element_id}' "
                + "onclick='enableSaveButton.call(this)' "
                + f" style='width:100%'>"
            )
        if template_name == "Create view with search":
            html = (
                html
                + """
                <div class="card-body">
                    <div class="row">
                        <div class="col-8 search_create_view">
                            <form method="post"> {%csrf_token%} <div class="form-row">
            """
            )
        else:
            if carousel is True:
                html = (
                    html
                    + '<div class="card-body"> <form method="post" enctype="multipart/form-data"> {%csrf_token%}<div>'
                    + carousel_first
                )
            else:
                if process_flow_design_type is not None:
                    html = html + '<div class="card-body">'
                    html = (
                        html
                        + f""" <div class="col-12">
                <div id="processFlowDesignDiv{element_id}" class="displaynone processflowdiv" style="height: 10rem; width: 100%; border: 1px solid #cabebe; border-radius: 5px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">

                    </div>
                <div class="text-center">
                <i style="cursor: pointer;" class="fa-solid fa-angle-down" onclick="processDesignDiv_createview(this)" data-sub-process="{pr_code}" data-id="{element_id}" data-process="{process_flow_design_type['process_code']}" data-list='{json.dumps(process_flow_design_type)}'></i>
                </div>
                </div>"""
                    )
                    html = html + '<form method="post" enctype="multipart/form-data"> {%csrf_token%}'
                else:
                    html = (
                        html
                        + '<div class="card-body"> <form method="post" enctype="multipart/form-data"> {%csrf_token%}'
                    )
        # Empty object to store the inidividual element's html
        form_element_html = {}
        for sub_element in create_view_tab_body_content["Category_sub_elements"]:
            if sub_element["Category_sub_element_name"] == "Form":
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    ###for loop closes if sub_element_attr is None
                    if sub_element_attr and sub_element_attr is not None:
                        if sub_element_attr["Category_attr"] == "Table_name":
                            if type(sub_element_attr["value"]) == str:
                                user_Selected_tables = json.loads(sub_element_attr["value"])
                            else:
                                user_Selected_tables = sub_element_attr["value"]
                            user_Selected_tables = sub_element_attr["value"]
                            comparable_dict["table"] = sub_element_attr["value"]
                            Tablename = json.dumps(sub_element_attr["value"], separators=(",", ":"))

                        if sub_element_attr["Category_attr"] == "Comparable_Choice":
                            comparable_dict["char_col"] = sub_element_attr["char_column"]
                            comparable_dict["agg_func"] = sub_element_attr["value"]
                            comparable_dict["period"] = sub_element_attr["period"]
                        if sub_element_attr["Category_attr"] == "Field_Choice":
                            attrlist = sub_element_attr["value"]
                            for i in sub_element_attr["value"]:
                                for attrs in i:
                                    fields_to_be_displayed.append(attrs)
                                    for j in i[attrs]:
                                        tableattrlist = j.get("tableattr")
                                        if j.get("jsattr") is not None:
                                            if len(j.get("jsattr")) > 0:
                                                for k in j.get("jsattr"):
                                                    if k["parentvalue"] == "JS Action Populate":
                                                        js_action_attr_dic[
                                                            k["finaljsattr"]["first_dependant_field"]
                                                        ] = [k]
                                                        js_action_attr_dic[
                                                            k["finaljsattr"]["second_dependant_field"]
                                                        ] = [k]
                                                        if (
                                                            "static" in k["finaljsattr"]
                                                            and k["finaljsattr"]["static"]
                                                            == "master_field_comparison"
                                                        ):
                                                            if len(k["finaljsattr"]["conditions"]) > 0:
                                                                for h in k["finaljsattr"]["conditions"]:
                                                                    if h["condition_type"] == "field_based":
                                                                        js_action_attr_dic[
                                                                            h["conditional_input_value"]
                                                                        ] = [k]
                                        for elements in tableattrlist:
                                            key = elements["value"]
                                            value = attrs
                                            dic.setdefault(key, [])
                                            dic[key].append(value)

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Save" in sub_element_attr["value"]
                        ):
                            showsave = True
                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Back" in sub_element_attr["value"]
                        ):
                            backbtn_ = True
                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Save as Draft" in sub_element_attr["value"]
                        ):
                            Tablename = sub_element_attr["Table_name"]
                            if sub_element_attr.get("viewDraft_columns"):
                                viewDraft_columns = json.dumps(sub_element_attr["viewDraft_columns"])
                            else:
                                viewDraft_columns = json.dumps({})
                            showDraftsave = True

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Custom Validation" in sub_element_attr["value"]
                        ):

                            showCustomValidation = True
                            showCustomValidationDev = False

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Preview_mode" in sub_element_attr
                        ):

                            createview_preview_mode = sub_element_attr["Preview_mode"]
                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Pdf_mode" in sub_element_attr
                        ):

                            createview_pdf_mode = sub_element_attr["Pdf_mode"]

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Master_preview" in sub_element_attr
                        ):

                            master_preview_mode = sub_element_attr["Master_preview"]

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Auto_compute" in sub_element_attr
                        ):
                            auto_compute_mode = sub_element_attr["Auto_compute"]

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "RTF_popup" in sub_element_attr
                        ):
                            viewRTFCB_mode = sub_element_attr["RTF_popup"]

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "Refresh Computation" in sub_element_attr["value"]
                        ):

                            showComputedVal = True

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "View Transactions Status" in sub_element_attr["value"]
                        ):
                            showTransaction = True

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "View History" in sub_element_attr["value"]
                        ):
                            showHistoryView = True
                            viewHistory_columns = json.dumps(sub_element_attr["viewHistory_columns"])
                            if sub_element_attr.get("viewHistory_displayColumns_columns"):
                                viewHistory_displayColumns_columns = json.dumps(
                                    sub_element_attr["viewHistory_displayColumns_columns"]
                                )
                            else:
                                viewHistory_displayColumns_columns = json.dumps({})
                        if (sub_element_attr["Category_attr"] == "Action") and (
                            sub_element_attr.get("custom_button") not in [None]
                        ):
                            custom_btn = sub_element_attr.get("custom_button")

                        if (sub_element_attr["Category_attr"] == "Action") and (
                            "View Rejected Records" in sub_element_attr["value"]
                        ):
                            showRejectedEntries = True
                            if sub_element_attr.get("viewRejectedRecords_displayColumns_columns"):
                                viewRejectedRecords_displayColumns_columns = json.dumps(
                                    sub_element_attr["viewRejectedRecords_displayColumns_columns"]
                                )
                            else:
                                viewRejectedRecords_displayColumns_columns = json.dumps({})
                    else:
                        pass

        # Check Approval Assignment in connected Decision Box
        if not subprocess_flowchart_elements:
            item_code = getPrCodeFromElementId(element_id, request_user)
            related_item_flowchart = read_data_func(
                request_user,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "Process_subprocess_flowchart",
                        "Columns": ["flowchart_elements"],
                    },
                    "condition": [
                        {
                            "column_name": "related_item_code",
                            "condition": "Equal to",
                            "input_value": item_code,
                            "and_or": "",
                        }
                    ],
                },
            )
            if not related_item_flowchart.empty:
                subprocess_flowchart_elements = json.loads(related_item_flowchart.flowchart_elements.iloc[0])
        else:
            pass
        child_element_id = "#"
        child_element_id_aug = "#"
        for fli in subprocess_flowchart_elements:
            if fli["shapeID"] == element_id:
                for child in fli["child"]:
                    if child.startswith("decision"):
                        child_element_id = child
                        break
                    elif child.startswith("flowController"):
                        child_element_id_aug = child
                        break
                    else:
                        continue
            else:
                continue
        if child_element_id_aug != "#":
            for fli in subprocess_flowchart_elements:
                if (fli["shapeID"] == child_element_id_aug) and (fli["text"] == "Flow controller"):
                    for child in fli["child"]:
                        if child.startswith("decision"):
                            child_element_id = child
                            break
                        else:
                            continue
                else:
                    continue
        if child_element_id != "#":
            connected_decision_box_config = read_data_func(
                request_user,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": child_element_id,
                            "and_or": "and",
                        },
                        {
                            "column_name": "tab_type",
                            "condition": "Equal to",
                            "input_value": "decision_box",
                            "and_or": "",
                        },
                    ],
                },
            )
            if not connected_decision_box_config.empty:
                connected_decision_box_config = json.loads(
                    connected_decision_box_config.tab_body_content.iloc[0]
                )
                if connected_decision_box_config["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"].get("maximum_levels_allowed"):
                    maximum_levels_allowed = connected_decision_box_config["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][1]["value"]["maximum_levels_allowed"]
                if connected_decision_box_config["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"].get("maximum_approvers_allowed"):
                    maximum_approvers_allowed = connected_decision_box_config["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][1]["value"]["maximum_approvers_allowed"]
                if connected_decision_box_config["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"].get("allow_users_to_set_approval_parameter"):
                    allow_approval_assingment = connected_decision_box_config["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][1]["value"]["allow_users_to_set_approval_parameter"]
                else:
                    allow_approval_assingment = "disallow"

                if connected_decision_box_config["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"].get("approversDispFields"):
                    decision_col = connected_decision_box_config["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][1]["value"]["approversDispFields"]

                if connected_decision_box_config["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"].get("approversDispFormat"):
                    decision_sep = connected_decision_box_config["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][1]["value"]["approversDispFormat"]

            else:
                pass
        else:
            pass

        """Code to check if the table is user defined or system defined """
        entity_name_list_builtin = {}
        for model_name in user_Selected_tables:
            entity_name_list_builtin["users_" + model_name.lower()] = model_name
        for model_name in user_Selected_tables:
            table1_query = extract_foreign_keys(f"users_{model_name.lower()}", user_db_engine, db_type)
            if not table1_query.empty:
                table1_query = table1_query.to_dict("records")
                for j in table1_query:
                    if j["FKTABLE_NAME"] in list(entity_name_list_builtin.keys()):
                        parent.append(entity_name_list_builtin[j["PKTABLE_NAME"]])
                        child.append(entity_name_list_builtin[j["FKTABLE_NAME"]])
                        direct_relation.append(
                            {
                                "parent": entity_name_list_builtin[j["PKTABLE_NAME"]],
                                "children": entity_name_list_builtin[j["FKTABLE_NAME"]],
                                "column": j["FKCOLUMN_NAME"],
                            }
                        )
        for model_name in user_Selected_tables:
            list_col = []
            fields = {}
            model_name1 = dynamic_model_create.get_model_class(model_name, request_user)
            options = model_name1
            """ Code ends """
            for field in options.concrete_fields + options.many_to_many:
                if field.name not in [
                    "id",
                    "Id",
                    "created_by",
                    "modified_by",
                    "created_date",
                    "modified_date",
                    "active_to",
                    "active_from",
                    "approval_status",
                    "approved_by",
                    "transaction_id",
                    "is_active_flag",
                ]:
                    if field.get_internal_type() != "BooleanField":
                        check1 = 0
                        if model_name in parent or model_name in child:
                            for x in direct_relation:
                                if field.name == x["column"]:
                                    list_col.append(field.name)
                                    check1 = 1
                                    break
                        if check1 == 0:
                            if field.get_internal_type() == "ForeignKey":
                                list_col.append(field.name)
                            else:
                                list_col.append(model_name + "__" + field.name)
                    elif field.get_internal_type() == "BooleanField":
                        list_col.append(model_name + "__" + field.name)
                if not fields_to_be_displayed:
                    fields[field.name] = field
                else:
                    filterlist = dic.get(f"{model_name}")
                    if filterlist:
                        if field.name in filterlist:
                            fields[field.name] = field
            fieldslist[model_name] = fields
            columnMappedTable[model_name] = list_col
        columnMappedTable = json.dumps(columnMappedTable, separators=(",", ":"))
        model_fields = []
        cases_attr = ""
        show_hide_col = []
        att1 = ""

        all_fk_dict = {}
        source_target_dict = {}
        for model_name, fields in fieldslist.items():
            for field in fields.values():
                attributes = {}
                if field.name in fields_to_be_displayed:
                    for i in attrlist:
                        for atr in i:
                            if field.name == atr:
                                for j in i[atr]:
                                    cssattrlist = j.get("cssattr")
                                    jsattrlist = j.get("jsattr")
                                    if cssattrlist is not None:
                                        for elements in cssattrlist:
                                            key = elements["attr"]
                                            value = elements["value"]
                                            dic = {key: value}
                                            attributes.update(dic)
                                    if jsattrlist is not None:
                                        key = "data-jsattr"
                                        value = jsattrlist
                                        dic = {key: value}
                                        attributes.update(dic)
                if linked_bool:
                    for key, val in attributes.items():
                        if key == "data-jsattr":
                            for i1 in val:
                                if i1.get("table") and i1.get("column"):
                                    foreign = 1
                                    att1 = att1 + " " + f"""data-table = "{i1.get('table')}" """
                                    att1 = att1 + " " + f"""data-column = "{i1.get('column')}" """
                                    if i1.get("default"):
                                        defval = i1.get("default")
                                    else:
                                        defval = "def"
                                    att1 = att1 + " " + f"""data-default_value = "{defval}" """
                        if key == "data-jsattr":
                            for z in val:
                                if z["parentvalue"] == "Show-hide":
                                    for y in z["finaljsattr"][2][0]["value"]:
                                        for x in y["selectedColumn"]:
                                            show_hide_col.append(x)
                            for ik in val:
                                if ik["parentvalue"] == "Foreign-key-relation":
                                    all_fk_dict[field.name] = ik

        drop_cols_list = [
            "created_by",
            "modified_by",
            "created_date",
            "modified_date",
            "active_to",
            "active_from",
            "transaction_id",
            "approval_status",
            "approved_by",
            model_name1.pk.name,
        ]

        columnList = {
            field.verbose_name: field.name
            for field in model_name1.concrete_fields
            if field.name not in drop_cols_list
        }
        columnList2 = {
            field.name: field.verbose_name
            for field in model_name1.concrete_fields
            if field.name not in drop_cols_list
        }
        columnListDtype = {field.name: field.internal_type for field in model_name1.concrete_fields}
        column_validator_cols_all = []
        column_validator_cols_dict = {}
        column_validator_cols_master_dict = {}
        if not iden:
            for field in model_name1.concrete_fields:
                if field.validators:
                    validator_dict = field.validators
                    if validator_dict.get("ColumnValidator"):
                        field_validator_config = validator_dict["ColumnValidator"]
                        column_validator_cols_all.append(field_validator_config["colV_col1_val"])
                        column_validator_cols_all.append(field_validator_config["colV_col2_val"])
                        column_validator_cols_dict[field.name] = field_validator_config["colV_col2_val"]
                    else:
                        continue
                else:
                    continue
            column_validator_cols_all = list(set(column_validator_cols_all))
        if len(column_reorder) > 0:
            desired_order_list = []
            for ord, col in column_reorder.items():
                if col in columnList2:
                    desired_order_list.append(col)
            for model_name, fields in fieldslist.items():
                reordered_dict = {k: fields[k] for k in desired_order_list}
                fieldslist[model_name] = reordered_dict
        for model_name, fields in fieldslist.items():
            for field in fields.values():
                if (field.name in selectFieldL3 or allField) or field.null == 0:
                    cases_attr = ""
                    if (
                        (
                            (field.editable not in ["0", 0, "False", False])
                            or (
                                field.editable not in ["0", 0, "False", False]
                                or field.get_internal_type()
                                in ["IntegerField", "BigIntegerField", "FloatField"]
                            )
                            or (
                                field.editable not in ["0", 0, "False", False]
                                or field.get_internal_type() == "ConcatenationField"
                            )
                        )
                        and field.name not in ["modified_by", "modified_date", "created_by", "created_date"]
                        and field.name not in dropped_field
                    ):
                        json_dic = {}
                        for key, val in dic_cases.items():
                            if val["column"] == field.name:
                                json_dic[key] = val
                                val = json.dumps(json_dic, separators=(",", ":"))
                                cases_attr = f"""data-cases = '{val}' """
                            if type(val) != dict:
                                if "field_based" in json.loads(val):
                                    if json.loads(val)["field_based"] == field.name:
                                        json_dic[key] = json.loads(val)
                                        val = json.dumps(json_dic, separators=(",", ":"))
                                        cases_attr = f"""data-cases = '{json.loads(val)}' """
                            else:
                                if "field_based" in val:
                                    if val["field_based"] == field.name:
                                        json_dic[key] = val
                                        val = json.dumps(json_dic, separators=(",", ":"))
                                        cases_attr = f"""data-cases = '{val}' """

                        if copy_paste_config != "":
                            if copy_paste_config["copy"]["to_apply"]:
                                copy_class_to_apply = "copy_class_to_apply"
                                copy_collist = copy_paste_config["copy"]["colList"]
                            else:
                                copy_class_to_apply = ""
                                copy_collist = ""
                            if copy_paste_config["paste"]["to_apply"]:
                                paste_class_to_apply = "paste_class_to_apply"
                                paste_collist = copy_paste_config["paste"]["colList"]
                            else:
                                paste_class_to_apply = ""
                                paste_collist = ""
                        else:
                            copy_class_to_apply = ""
                            copy_collist = ""
                            paste_class_to_apply = ""
                            paste_collist = ""
                        if restrict_min_cols:
                            if field.name in restrict_min_cols:
                                restict_min_class = "restict_min_class"
                            else:
                                restict_min_class = ""
                        else:
                            restict_min_class = ""
                        if check_validForm_now_bk:
                            if field.name in column_validator_cols_all:
                                column_validator = "column_validator"
                                check_validForm_now = ""
                            else:
                                column_validator = ""
                                check_validForm_now = check_validForm_now_bk
                        else:
                            column_validator = ""
                            check_validForm_now = check_validForm_now_bk

                        if field.computed_field:
                            is_computed_field = "data-computed-field='true' readonly"
                            computed_input_temp = field.computed_input
                            if computed_input_temp is not None:
                                computed_input = [i[0] for i in computed_input_temp]
                            else:
                                computed_input = []
                        else:
                            is_computed_field = "data-computed-field='false'"
                            computed_input = []

                        if field.name in embedded_noneditable_cols and embedded_noneditable:
                            embedded_noneditable_attr = "readonly"
                        else:
                            embedded_noneditable_attr = ""

                        if field.name not in duplicate_column:
                            js_foreign_table = ""
                            js_foreign_column = ""
                            field_class_attr, field_style_attr = form_field_sizing_handler(
                                field.name, sizing_placement_settings, cols_val
                            )
                            if field_style_attr:
                                field_style_attr, field_height_style = field_style_attr.split("; ")
                            else:
                                field_height_style = ""
                            if field.get_internal_type() == "ConcatenationField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                url_or_text = "text"
                                model_fields.append(field.name)
                                attributes = {}
                                attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                y = getattr(field, "choices")
                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.computed_field:
                                    if field.editable in ["0", 0, "False", False]:
                                        comp_class = ""
                                    else:
                                        comp_class = "compfield_dis"
                                else:
                                    comp_class = ""
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} class="form-control select2 {check_validForm_now} {embedded_noneditable_attr} {comp_class} {column_validator} {restict_min_class} {compjs}" id='id_{field.name}_{element_id}' {att} name='{name_with_table}' {form_field_attr} {data_table} {is_computed_field}  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                elif y is not None:
                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {restrict_locked} {cases_attr} name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {is_computed_field} class='form-control select2 {check_validForm_now} {comp_class}  {column_validator} {restict_min_class} {compjs}' {req} {data_table}>"
                                    if len(field.choices) > 0:
                                        if not show_labels:
                                            choice = (
                                                choice
                                                + f"<option disabled selected>{field.verbose_name.title()  + mand}</option>"
                                            )
                                        else:
                                            choice = (
                                                choice + f"<option value='' disabled selected>---</option>"
                                            )
                                        for i, k in field.choices:
                                            choice = choice + f"<option value='{i}'>{i}</option>"
                                        choice = choice + "</select>"
                                    else:
                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {column_validator} {comp_class}  {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table} data-concatfield='{field.columns}' data-divider='{field.divider}' data-id='{element_id}'data-field_name='{field.name}'  disabled>"""

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {check_validForm_now} {comp_class} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-concatfield='{field.columns}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-divider='{field.divider}' data-id='{element_id}' disabled>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-concatfield='{field.columns}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-divider='{field.divider}' data-id='{element_id}' disabled>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {comp_class} {restict_min_class}  {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}' data-comp_input='{json.dumps(computed_input)}' data-concatfield='{field.columns}' data-divider='{field.divider}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-id='{element_id}' disabled >"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {check_validForm_now} {comp_class} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-concatfield='{field.columns}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-divider='{field.divider}' data-id='{element_id}' disabled>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-concatfield='{field.columns}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-divider='{field.divider}' data-id='{element_id}' disabled>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                            if field.get_internal_type() == "ForeignKey":
                                if field.name not in duplicate_column_foreign:
                                    if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                        "show_labels"
                                    ) not in [None]:
                                        show_labels = create_view_tab_body_content["Category_attributes"][
                                            "Template"
                                        ]["show_labels"]
                                        if not show_labels:
                                            placeholder = "placeholder='{ptext}'"
                                            vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                            dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                        else:
                                            placeholder = ""
                                            vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                            dfocus = ""
                                    else:
                                        show_labels = False
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                    model_fields.append(field.name)
                                    attributes = {}
                                    obj = field.parent
                                    jsattrlist1 = []
                                    """Add field attributes from front end"""
                                    if field.name in fields_to_be_displayed:
                                        for i in attrlist:
                                            for atr in i:
                                                if field.name == atr:
                                                    for j in i[atr]:
                                                        cssattrlist = j.get("cssattr")
                                                        jsattrlist = j.get("jsattr")
                                                        if cssattrlist is not None:
                                                            for elements in cssattrlist:
                                                                key = elements["attr"]
                                                                value = elements["value"]
                                                                dic = {key: value}
                                                                attributes.update(dic)
                                                        if jsattrlist is not None:
                                                            key = "data-jsattr"
                                                            value = jsattrlist
                                                            jsattrlist1 = value
                                                            value = reorder_js(value)
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                    att = ""
                                    att1 = ""
                                    classs = "form-control select2"
                                    choice = ""
                                    mand = ""
                                    compjs = ""

                                    is_autopopulated_field = False
                                    if "data-jsattr" in attributes:
                                        for g in attributes["data-jsattr"]:
                                            if g.get("parentvalue") == "Auto-populate Constant":
                                                if not g["cases"] and g.get("allow_edit_c") == "no":
                                                    is_autopopulated_field = True
                                                else:
                                                    pass
                                            if g.get("parentvalue") == "Auto-populate":
                                                if not g["cases"] and g.get("allow_edit") == "no":
                                                    autopopulate_fields.extend(
                                                        g["finaljsattr"][0][0]["value"]["depField"]
                                                    )
                                                else:
                                                    pass
                                            else:
                                                continue
                                    else:
                                        pass

                                    if is_autopopulated_field or field.name in autopopulate_fields:
                                        autopopulate_attr = "data-is-autopopulate='yes'"
                                    else:
                                        autopopulate_attr = "data-is-autopopulate='no'"

                                    is_server_side_fk_field = False
                                    if field.name in server_side_columns:
                                        serverside_attribute = f"data-is-serverside-fetch='yes' data-serverside-page-length='{server_side_page_length}'"
                                        is_server_side_fk_field = True
                                    else:
                                        serverside_attribute = "data-is-serverside-fetch='no'"

                                    if len(direct_relation) > 0:
                                        for k in direct_relation:
                                            if k["children"] == model_name:
                                                if k["column"] == field.name:
                                                    name_with_table = field.name
                                                    duplicate_column.append(field.name)
                                                    break
                                                else:
                                                    name_with_table = field.name
                                            else:
                                                name_with_table = field.name
                                    else:
                                        name_with_table = field.name
                                    duplicate_column_foreign.append(field.name)
                                    data_table = f"data-tablename='{model_name}'"
                                    req = ""
                                    foreign = 0
                                    if field.null == 0:
                                        mand = "*"
                                        req = "required"
                                    else:
                                        if field.name in show_hide_col:
                                            display = "display:none;"
                                    if not fields_to_be_displayed:
                                        if field.null == 1:
                                            pass
                                        else:
                                            att = att + " " + f"{req}"
                                    if linked_bool:
                                        for key, val in attributes.items():
                                            if key == "data-jsattr":
                                                for i1 in val:
                                                    if i1.get("table") and i1.get("column"):
                                                        foreign = 1
                                                        att1 = (
                                                            att1
                                                            + " "
                                                            + f"""data-table = "{i1.get('table')}" """
                                                        )
                                                        att1 = (
                                                            att1
                                                            + " "
                                                            + f"""data-column = "{i1.get('column')}" """
                                                        )
                                                        if i1.get("default"):
                                                            defval = i1.get("default")
                                                        else:
                                                            defval = "def"
                                                        att1 = (
                                                            att1
                                                            + " "
                                                            + f"""data-default_value = "{defval}" """
                                                        )
                                            if key == "data-jsattr":
                                                for conf in val:
                                                    if conf["parentvalue"] == "Validation based message":
                                                        compjs = "compjs"
                                                val = json.dumps(val, separators=(",", ":"))
                                                att = att + "onchange='jsChange.call(this)'"
                                            att = att + " " + f"""{key} = '{val}' """
                                    display = ""
                                    if field.computed_field:
                                        if field.editable in ["0", 0, "False", False]:
                                            comp_class = ""
                                        else:
                                            comp_class = "compfield_dis"
                                    else:
                                        comp_class = ""
                                    if field.name in restrict_field:
                                        restrict_locked = "disabled"
                                    else:
                                        restrict_locked = ""
                                    form_field_attr = ""
                                    if form_field:
                                        form_field_attr = []
                                        for form_field1 in form_field:
                                            for i in list(form_field1.values()):
                                                if field.name in i["selectedColumn"]:
                                                    if field.null == 1:
                                                        display = "display:none;"
                                                if field.name == i["column"]:
                                                    form_field_attr.append(i)
                                        form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                    if field.name in editNS_field:
                                        display = "display:none;"
                                    if obj is None:
                                        choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {autopopulate_attr} {serverside_attribute} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {form_field_attr} {is_computed_field} name='{name_with_table}' class='form-control select2  {check_validForm_now} {comp_class} {column_validator} {restict_min_class} {compjs}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' {data_table} data-car_mand='{restrict_mand}'>"

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {autopopulate_attr} {serverside_attribute} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {form_field_attr} {is_computed_field} name='{name_with_table}' class='form-control select2  {copy_class_to_apply} {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'>"
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {autopopulate_attr} {serverside_attribute} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {form_field_attr} {is_computed_field} name='{name_with_table}' class='form-control select2  {copy_class_to_apply} {comp_class} {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' {data_table} data-car_mand='{restrict_mand}'>"

                                        if not show_labels:
                                            choice = (
                                                choice
                                                + f"<option selected value=''>{field.verbose_name.title() + mand}</option>"
                                            )
                                        else:
                                            choice = choice + f"<option value=''>----</option>"
                                        choice = choice + "</select>"
                                    else:
                                        choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {autopopulate_attr} {serverside_attribute} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {att1} name='{name_with_table}' {form_field_attr} {is_computed_field} class='form-control select2  {check_validForm_now} {comp_class} {column_validator} {restict_min_class} {compjs}' {req} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' {data_table} data-field_name='{field.name}' data-car_mand='{restrict_mand}'>"

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {restrict_locked} {autopopulate_attr} {serverside_attribute} {cases_attr} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {att1} name='{name_with_table}' {form_field_attr} {is_computed_field} class='form-control select2  {copy_class_to_apply} {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'>"
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {restrict_locked} {autopopulate_attr} {serverside_attribute} {cases_attr} data-type='ForeignKey' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} {att1} name='{name_with_table}' {form_field_attr} {is_computed_field} class='form-control select2  {copy_class_to_apply} {comp_class} {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'>"

                                        if not show_labels:
                                            choice = (
                                                choice
                                                + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                            )
                                        else:
                                            choice = choice + f"<option value='----'>----</option>"
                                        if list_view_flag and not is_server_side_fk_field:
                                            c_list = foreign_key_value_listView(
                                                field.parent, field.name, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        else:
                                            choice_list = []
                                        for i in choice_list:
                                            choice = choice + f"<option value='{i}'>{i}</option>"
                                        choice = choice + "</select>"
                                    if len(direct_relation) > 0:
                                        for x in direct_relation:
                                            if x["parent"] in user_Selected_tables:
                                                if model_name == x["children"]:
                                                    if field.name == x["column"]:
                                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {cases_attr} type='text' name='{name_with_table}' {att} {is_computed_field}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='form-control {check_validForm_now}  {comp_class} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-car_mand='{restrict_mand}'>"""
                                                        break

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f""""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {cases_attr} type='text' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='form-control {copy_class_to_apply}  {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table}>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {cases_attr} type='text' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='form-control {copy_class_to_apply} {comp_class}  {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table}>"""

                                    if field.name in comparable_dict["char_col"]:
                                        classs = classs + " character_field"
                                    if field.null == 0:
                                        pass
                                    else:
                                        if field.name in show_hide_col:
                                            display = "display:none;"
                                    if not fields_to_be_displayed:
                                        if field.null == 1:
                                            pass
                                        else:
                                            att = att + " " + f"required"
                                    if choice.startswith("<select"):
                                        if grid_layout_config is not None:
                                            if grid_layout_config["grid_layout_on_off"] == True:
                                                html = (
                                                    html
                                                    + f"""<style>
                            #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                            """
                                                    + """ { """
                                                    + f"""
                              {create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")}
                              {field_height_style}
                            """
                                                    + """}

                            </style> """
                                                )
                                    if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                        "show_labels"
                                    ) not in [None]:
                                        show_labels = create_view_tab_body_content["Category_attributes"][
                                            "Template"
                                        ]["show_labels"]
                                        if not show_labels:
                                            placeholder = "placeholder='{ptext}'"
                                            vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                            dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                        else:
                                            placeholder = ""
                                            vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                            dfocus = ""
                                    else:
                                        show_labels = False
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            field_label_name = edit_labels[field.name]
                                        else:
                                            field_label_name = field.verbose_name
                                        if is_server_side_fk_field:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{field_label_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group'> {choice} <div class='input-group-append input-group-text' style='padding: .25rem .65rem;'><button class='btn' style='padding:0;' type='button' data-toggle='modal'  data-target='#id_{field.name}_{element_id}_serverside_modal'><i class='fas fa-search ihover thin-icon' style='cursor:pointer;color: #495057;font-size: 17px;'></i></button></div> </div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{field_label_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        if field_height_style:
                                            form_element_html[field.name] += (
                                                f"""
                          <style>
                            #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                            """
                                                + """ { """
                                                + f"""
                              {field_height_style}
                            """
                                                + """}
                          </style>
                          """
                                            )
                                        else:
                                            pass

                                        if is_server_side_fk_field:
                                            form_element_html[
                                                field.name
                                            ] += f"""
                            <div style='z-index:1060;' class='modal fade' id='id_{field.name}_{element_id}_serverside_modal' tabindex='-1' role='dialog' data-focus='false' aria-hidden='true'>
                              <div class='modal-dialog modal-dialog-centered modal-md' role='document'>
                                <div class='modal-content'>
                                  <div class='modal-header'>
                                    <h5 class='modal-title'>Select from below</h5>
                                    <button type="button" class="btn btn-light " data-dismiss="modal" aria-label="Close" style="height: 27px;width: 27px;padding: 0;">
                                      <i class="fa-solid fa-times"></i>
                                    </button>
                                  </div>
                                  <div class='modal-body' style="padding: 2rem 8%">
                                    <table id="id_{field.name}_{element_id}_serverside_table" class="table hover table-bordered">
                                      <thead>
                                        <tr></tr>
                                      </thead>
                                      <tbody>
                                      </tbody>
                                    </table>
                                  </div>
                                </div>
                              </div>
                            </div>
                          """

                            if field.get_internal_type() in ["CharField", "URLField"]:
                                charfield_field_type_settings = None
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if field.get_internal_type() == "URLField":
                                    url_or_text = "url"
                                else:
                                    url_or_text = "text"
                                model_fields.append(field.name)

                                x1 = getattr(field, "max_length", False)
                                if field.get_internal_type() == "URLField":
                                    x1 = False
                                attributes = {}
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""
                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        if g.get("parentvalue") == "Auto-populate":
                                            if not g["cases"] and g.get("allow_edit") == "no":
                                                autopopulate_fields.extend(
                                                    g["finaljsattr"][0][0]["value"]["depField"]
                                                )
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field or field.name in autopopulate_fields:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"

                                is_server_side_fk_field = False
                                if field.name in server_side_columns:
                                    serverside_attribute = f"data-is-serverside-fetch='yes' data-serverside-page-length='{server_side_page_length}'"
                                    is_server_side_fk_field = True
                                else:
                                    serverside_attribute = "data-is-serverside-fetch='no'"

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                                if conf["parentvalue"] == "Field Type Settings":
                                                    charfield_field_type_settings = conf
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                y = getattr(field, "choices")
                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.computed_field:
                                    if field.editable in ["0", 0, "False", False]:
                                        comp_class = ""
                                    else:
                                        comp_class = "compfield_dis"
                                else:
                                    comp_class = ""
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} {is_computed_field} {autopopulate_attr} {serverside_attribute} class="form-control select2 {comp_class}  {check_validForm_now} {column_validator} {restict_min_class} {compjs}" id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} name='{name_with_table}' {form_field_attr} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}'  data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag and not is_server_side_fk_field:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        else:
                                            choice_list = []
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                elif y is not None:
                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {restrict_locked} {cases_attr} {is_computed_field} {autopopulate_attr} name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} class='form-control select2 {check_validForm_now}  {column_validator} {comp_class} {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}'   data-columnb_val='{json.dumps(column_validator_cols_dict)}' {req} {data_table}>"
                                    if len(field.choices) > 0:
                                        if not show_labels:
                                            choice = (
                                                choice
                                                + f"<option disabled selected>{field.verbose_name.title()  + mand}</option>"
                                            )
                                        else:
                                            choice = (
                                                choice + f"<option value='' disabled selected>---</option>"
                                            )
                                        for i, k in field.choices:
                                            choice = choice + f"<option value='{i}'>{i}</option>"
                                        choice = choice + "</select>"
                                        if charfield_field_type_settings is not None:
                                            charfield_field_type_settings = charfield_field_type_settings[
                                                "finaljsattr"
                                            ]
                                            choice = (
                                                choice
                                                + f"""<div class="radioGroup charfield_field_type_settings" style="width:100% !important;background-color:{charfield_field_type_settings['not_selected']['rgba_value_bg-not-selected']}">"""
                                            )
                                            charfield_field_type_settings_styles = f"<style>"
                                            indicator_width = f"50"
                                            for i, k in field.choices:
                                                choice = (
                                                    choice
                                                    + f"""
                                <input type="radio" id="{i}_{field.name}_{element_id}" name="id_{field.name}_{element_id}" onchange="charfield_field_type_settings_onchange(this,'id_{field.name}_{element_id}','{i}','{charfield_field_type_settings['selected']['text-color-selected']}','{charfield_field_type_settings['not_selected']['text-color-not-selected']}')" ">
                                <label style="align-items:center;justify-content:center;display:flex;margin:0 !important;padding: 0 !important;font-size:0.8rem;color:{charfield_field_type_settings['not_selected']['text-color-not-selected']};" for="{i}_{field.name}_{element_id}">{i}</label>"""
                                                )
                                            if len(field.choices) == 1:
                                                indicator_width = f"96"
                                                charfield_field_type_settings_styles = (
                                                    charfield_field_type_settings_styles
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(1):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 2% !important;
                                """
                                                    + """}
                                """
                                                )
                                            if len(field.choices) == 3:
                                                indicator_width = f"33"
                                                charfield_field_type_settings_styles = (
                                                    charfield_field_type_settings_styles
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(1):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 2%!important;
                                """
                                                    + """}
                                """
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(3):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 33%!important;
                                """
                                                    + """}
                                """
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(5):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 66%!important;
                                """
                                                    + """}
                                """
                                                )
                                            if len(field.choices) == 4:
                                                indicator_width = f"25"
                                                charfield_field_type_settings_styles = (
                                                    charfield_field_type_settings_styles
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(1):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 1%!important;
                                """
                                                    + """}
                                """
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(3):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 25%!important;
                                """
                                                    + """}
                                """
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(5):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 50%!important;
                                """
                                                    + """}
                                """
                                                    + f"""
                                .charfield_field_type_settings input[type=radio]:nth-child(7):checked ~ .indicator
                                """
                                                    + """ { """
                                                    + f"""
                                  left: 74%!important;
                                """
                                                    + """}
                                """
                                                )
                                            charfield_field_type_settings_styles = (
                                                charfield_field_type_settings_styles + f"</style>"
                                            )
                                            choice = (
                                                choice
                                                + f"""<span class="indicator" style="width:{indicator_width}% !important;box-shadow:{charfield_field_type_settings['selected']['rgba_value_bg-selected']} 0px 2px 20px inset, rgba(0, 0, 0, 0.31) 1px 1px 10px;border:1px solid {charfield_field_type_settings['selected']['rgba_value_bg-selected']};background-color:{charfield_field_type_settings['selected']['rgba_value_bg-selected']};"></span>
                              </div>"""
                                            )
                                            choice = (
                                                choice
                                                + f"""{charfield_field_type_settings_styles}<style>
                                #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                                """
                                                + """ { """
                                                + f"""
                                  display:none;
                                """
                                                + """}
                                </style> """
                                            )
                                    else:
                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {column_validator}  {comp_class} {restict_min_class} {compjs}' data-field_name='{field.name}'data-comp_input='{json.dumps(computed_input)}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}'   data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table}>"""

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table}>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {comp_class} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' {req} {data_table}>"""
                                else:
                                    if edit:
                                        if model_name == "ApprovalTable" and (
                                            field.name == "approver_group" or field.name == "approver_user"
                                        ):
                                            if field.name == "approver_group":
                                                atitle = "approver group"
                                            else:
                                                atitle = "approver user"
                                            choice = f"""<input style='display:none;' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' class='{classs} p-2' data-colb-master='{json.dumps(column_validator_cols_master_dict)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'><p title="Edit {atitle}" data-ug_iden = '{atitle}' data-elementID = '{element_id}' onclick="EditApprovalGroupUser.call(this)"><i name="edit_approver_group_user" value="" class="fa fa-edit ihover javaSC thin-icon" style="font-size:15px;cursor:pointer;"></i></p>"""
                                        else:
                                            choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' class='{classs} p-2 {check_validForm_now} {comp_class} {column_validator}  {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}'  {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                    else:
                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {comp_class} {column_validator}  {restict_min_class} {compjs}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}'  {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}'  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} p-2 {copy_class_to_apply} {comp_class} {check_validForm_now} {column_validator}  {restict_min_class} {compjs}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='{url_or_text}' name='{name_with_table}' {att} {is_computed_field} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs}  p-2 {copy_class_to_apply} {comp_class} {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table}>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if choice.startswith("<select"):
                                    if grid_layout_config is not None:
                                        if grid_layout_config["grid_layout_on_off"] == True:
                                            html = (
                                                html
                                                + f"""<style>
                            #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                            """
                                                + """ { """
                                                + f"""
                              {create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")}
                              {field_height_style}
                            """
                                                + """}

                            </style> """
                                            )
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            field_label_name = edit_labels[field.name]
                                        else:
                                            field_label_name = field.verbose_name

                                        if is_server_side_fk_field:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group'> {choice} <div class='input-group-append input-group-text' style='padding: .25rem .65rem;'><button class='btn' style='padding:0;' type='button' data-toggle='modal'  data-target='#id_{field.name}_{element_id}_serverside_modal'><i class='fas fa-search ihover thin-icon' style='cursor:pointer;color: #495057;font-size: 17px;'></i></button></div> </div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )

                                        if is_server_side_fk_field:
                                            form_element_html[
                                                field.name
                                            ] += f"""
                              <div style='z-index:1060;' class='modal fade' id='id_{field.name}_{element_id}_serverside_modal' tabindex='-1' role='dialog' data-focus='false' aria-hidden='true'>
                                <div class='modal-dialog modal-dialog-centered modal-md' role='document'>
                                  <div class='modal-content'>
                                    <div class='modal-header'>
                                      <h5 class='modal-title'>Select from below</h5>
                                      <button type="button" class="btn btn-light " data-dismiss="modal" aria-label="Close" id="closeCreateUsers" style="height: 27px;width: 27px;padding: 0;">
                                        <i class="fa-solid fa-times"></i>
                                      </button>
                                    </div>
                                    <div class='modal-body' style="padding: 2rem 8%">
                                      <table id="id_{field.name}_{element_id}_serverside_table"  class="table hover table-bordered">
                                        <thead>
                                          <tr></tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                      </table>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            """
                                        else:
                                            pass

                            if field.get_internal_type() == "DateField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        if g.get("parentvalue") == "Auto-populate":
                                            if not g["cases"] and g.get("allow_edit") == "no":
                                                autopopulate_fields.extend(
                                                    g["finaljsattr"][0][0]["value"]["depField"]
                                                )
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field or field.name in autopopulate_fields:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                dic1 = {"placeholder": "YYYY-MM-DD"}
                                attributes.update(dic1)
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                display = ""
                                form_field_attr = ""

                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {restrict_locked} {att1} name='{name_with_table}' {att} {autopopulate_attr}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {is_computed_field} class="form-control select2 {check_validForm_now}  {compjs} {column_validator} {restict_min_class}" {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:

                                    isValidator = False
                                    validator_config = ""
                                    if field.validators:
                                        if "AdvanceDateValidation" in field.validators.keys():
                                            isValidator = True
                                            validator_config = json.dumps(
                                                field.validators["AdvanceDateValidation"]
                                            )

                                        else:
                                            validator_config = ""

                                    choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                        <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2  {check_validForm_now} {compjs} {column_validator} {restict_min_class}" data-car_mand='{restrict_mand}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-validator_config='{validator_config}'>
                        <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply}" data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply} data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {paste_class_to_apply}" data-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if isValidator:
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:

                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply}" data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' zdata-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:

                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply} data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {paste_class_to_apply}" data-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                    date_field_script_string = (
                                        """
                                  <script>
                                    $(document).ready(function(){
                                        $('select.select2:not(.modal select.select2)').each(function(){
                                          parent = $(this).parent()
                                          $(this).select2({dropdownParent:parent})
                                          $(".select2-dropdown").css("width",$(".select2.select2-container.select2-container--default.select2-container--open").css("width"))
                                        })
                                        $('select.select2:not(.modal select.select2)').each(function(){
                                            parent = $(this).parent()
                                            $(this).select2({dropdownParent:parent})
                                        })
                                      })
                                    """
                                        + f"""
                                        function updateDateRange(){{
                                          var validators = JSON.parse($("#id_{field.name}_{element_id}").attr("data-validator_config"));
                                          function check(date) {{
                                            if(validators["colV_cond_val"]==="Equal to"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                return [date.getMonth()===currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear() && date.getDate()===currentDate.getDate()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [date.getMonth()===yesterday.getMonth() && date.getFullYear() === yesterday.getFullYear() && date.getDate()===yesterday.getDate()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [date.getMonth()===tomorrow.getMonth() && date.getFullYear() === tomorrow.getFullYear() && date.getDate()===tomorrow.getDate()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1) - 7));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date >= startOfWeek && date <= endOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date >= startOfWeek && date <= endOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [date.getMonth() === currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [date.getMonth() === (currentDate.getMonth()-1) && date.getFullYear() === currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() === currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() === (currentDate.getFullYear() - 1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                return [date.getMonth()===customDate.getMonth() && date.getFullYear() === customDate.getFullYear() && date.getDate()===customDate.getDate()]
                                              }}

                                            }}

                                            if(validators["colV_cond_val"]==="Not Equal to"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                return [!(date.getMonth()===currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear() && date.getDate()===currentDate.getDate())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [!(date.getMonth()===yesterday.getMonth() && date.getFullYear() === yesterday.getFullYear() && date.getDate()===yesterday.getDate())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [!(date.getMonth()===tomorrow.getMonth() && date.getFullYear() === tomorrow.getFullYear() && date.getDate()===tomorrow.getDate())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1) - 7));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [!(date >= startOfWeek && date <= endOfWeek)]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [!(date >= startOfWeek && date <= endOfWeek)]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [!(date.getMonth() === currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [!(date.getMonth() === (currentDate.getMonth()-1) && date.getFullYear() === currentDate.getFullYear())]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [!(date.getFullYear() === currentDate.getFullYear())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [!(date.getFullYear() === (currentDate.getFullYear() - 1))]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                return [!(date.getMonth()===customDate.getMonth() && date.getFullYear() === customDate.getFullYear() && date.getDate()===customDate.getDate())]
                                              }}
                                            }}
                                            if(validators["colV_cond_val"]==="Greater than"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                currentDate.setHours(0,0,0,0);
                                                return [date > currentDate]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [date > yesterday]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [date > tomorrow]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1) - 7));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date > endOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date > endOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()>currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() > currentDate.getMonth())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()>currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() >= currentDate.getMonth())]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() > currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() >= currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                customDate.setHours(0,0,0,0);
                                                return [date > customDate]
                                              }}
                                            }}
                                            if(validators["colV_cond_val"]==="Smaller than"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                currentDate.setHours(0,0,0,0);
                                                return [date < currentDate]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [date < yesterday]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [date < tomorrow]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfLastWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1) - 14));
                                                return [date < startOfLastWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date < startOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()<currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() < currentDate.getMonth())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()<currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() < currentDate.getMonth()-1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() < currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() < (currentDate.getFullYear() - 1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                customDate.setHours(0,0,0,0);
                                                return [date < customDate]
                                              }}
                                            }}
                                            if(validators["colV_cond_val"]==="Greater than equal to"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                currentDate.setHours(0,0,0,0);
                                                return [date >= currentDate]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [date >= yesterday]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [date >= tomorrow]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfLastWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1) - 7));
                                                return [date >= startOfLastWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date >= startOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()>currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() >= currentDate.getMonth())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()>currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() >= currentDate.getMonth()-1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() >= currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() >= (currentDate.getFullYear() - 1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                customDate.setHours(0,0,0,0);
                                                return [date >= customDate]
                                              }}
                                            }}
                                            if(validators["colV_cond_val"]==="Smaller than equal to"){{
                                              if(validators["colV_cond_val2"]==="Today"){{
                                                var currentDate = new Date();
                                                currentDate.setHours(0,0,0,0);
                                                return [date <= currentDate]
                                              }}
                                              if(validators["colV_cond_val2"]==="Yesterday"){{
                                                var currentDate = new Date()
                                                var yesterday = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);
                                                return [date <= yesterday]
                                              }}
                                              if(validators["colV_cond_val2"]==="Tomorrow"){{
                                                var currentDate = new Date()
                                                var tomorrow = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);
                                                return [date <= tomorrow]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last week"){{
                                                var currentDate = new Date();
                                                var startOfLastWeek = new Date(currentDate.setDate((currentDate.getDate() - currentDate.getDay() - 1)));
                                                var endOfLastWeek = new Date(startOfLastWeek + 7)
                                                return [date <= endOfLastWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This week"){{
                                                var currentDate = new Date();
                                                var startOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() - 1));
                                                var endOfWeek = new Date(currentDate.setDate(currentDate.getDate() + 7));
                                                return [date <= endOfWeek]
                                              }}
                                              if(validators["colV_cond_val2"]==="This month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()<currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() <= currentDate.getMonth())]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last month"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear()<currentDate.getFullYear() ||  (date.getFullYear() === currentDate.getFullYear() && date.getMonth() <= currentDate.getMonth()-1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="This year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() <= currentDate.getFullYear()]
                                              }}
                                              if(validators["colV_cond_val2"]==="Last year"){{
                                                var currentDate = new Date();
                                                return [date.getFullYear() <= (currentDate.getFullYear() - 1)]
                                              }}
                                              if(validators["colV_cond_val2"]==="Custom date"){{
                                                var customDate = new Date((validators["custom-date"]));
                                                customDate.setHours(0,0,0,0);
                                                return [date <= customDate]
                                              }}
                                            }}
                                          }}

                                          $("#id_{field.name}_{element_id}").datepicker({{
                                            beforeShowDay: check,
                                            dateFormat: 'yy-mm-dd',
                                            changeMonth: true,
                                            changeYear: true,
                                            constrainInput: true
                                          }});

                                          $("#id_{field.name}_{element_id}_calendar_btn").click(function(){{
                                            $("#id_{field.name}_{element_id}").datepicker("show");
                                          }});
                                        }}
                                        updateDateRange()
                                      </script>
                          """
                                    )
                                else:
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:

                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply}" data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' zdata-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:

                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'>
                              <input type='text' id='id_{field.name}_{element_id}' autocomplete="off" {embedded_noneditable_attr} style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class} {copy_class_to_apply} data-car_mand='{restrict_mand}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {paste_class_to_apply}" data-validator_config='{validator_config}'>
                              <div class="input-group-append input-group-text" id="id_{field.name}_{element_id}_calendar_btn" style="cursor: pointer;"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                    date_field_script_string = (
                                        """
                            <script>
                            $(document).ready(function(){
                                        $('select.select2:not(.modal select.select2)').each(function(){
                                          parent = $(this).parent()
                                          $(this).select2({dropdownParent:parent})
                                          $(".select2-dropdown").css("width",$(".select2.select2-container.select2-container--default.select2-container--open").css("width"))
                                        })
                                        $('select.select2:not(.modal select.select2)').each(function(){
                                            parent = $(this).parent()
                                            $(this).select2({dropdownParent:parent})
                                        })
                                      })"""
                                        + f"""
                              function updateDateRange(){{
                                $("#id_{field.name}_{element_id}").datepicker({{
                                  dateFormat: 'yy-mm-dd',
                                  changeMonth: true,
                                  changeYear: true,
                                  constrainInput: true
                                }});
                                $("#id_{field.name}_{element_id}_calendar_btn").click(function(){{
                                  $("#id_{field.name}_{element_id}").datepicker("show");
                                }});
                              }}
                              updateDateRange()
                            </script>
                          """
                                    )
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    carousel_list[j] += date_field_script_string
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    form_element_html[field.name] += date_field_script_string

                            if field.get_internal_type() == "DateRangeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""

                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {att1} name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {form_field_attr} {is_computed_field} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class}" {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}">
                        <input type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 dtrangepicker {check_validForm_now}  {column_validator} {restict_min_class}" data-car_mand='{restrict_mand}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}'>
                        <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}">
                              <input type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 dtrangepicker {check_validForm_now}  {column_validator} {restict_min_class} {copy_class_to_apply}" data-car_mand='{restrict_mand}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}'>
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}">
                              <input type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {restrict_locked} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 dtrangepicker {check_validForm_now}  {column_validator} {restict_min_class} {copy_class_to_apply} data-car_mand='{restrict_mand}' {paste_class_to_apply}" data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}'>
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "BooleanField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        if g.get("parentvalue") == "Auto-populate":
                                            if not g["cases"] and g.get("allow_edit") == "no":
                                                autopopulate_fields.extend(
                                                    g["finaljsattr"][0][0]["value"]["depField"]
                                                )
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field or field.name in autopopulate_fields:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "aciescustom-control-label checkboxinput custom-control-input"
                                choice = ""
                                js_foreign_table = ""
                                js_foreign_column = ""
                                boolean_sliders = None
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if "parentvalue" in g:
                                            if g["parentvalue"] == "Field Type Settings":
                                                boolean_sliders = g["finaljsattr"]
                                boolean_sliders_new_configs = False
                                if boolean_sliders is not None and "new_configs" in boolean_sliders:
                                    boolean_sliders_new_configs = True
                                if (
                                    boolean_sliders is not None
                                    and boolean_sliders["style_slider"] == "silder"
                                ):
                                    classs = (
                                        "aciescustom-control-label checkboxinput custom-control-input switch"
                                    )
                                else:
                                    classs = "aciescustom-control-label checkboxinput custom-control-input"
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                else:
                                    if boolean_sliders is not None:
                                        if boolean_sliders["style_slider"] == "text_silder":
                                            display = ""
                                        else:
                                            display = "display:flex;"
                                    else:
                                        display = "display:flex;"
                                if not show_labels:
                                    placeholder = f"placeholder='{field.verbose_name}'"
                                else:
                                    placeholder = ""
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} {autopopulate_attr} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class}" {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}'  data-car_mand='{restrict_mand}' {data_table}>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"<input {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='date' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2  {restict_min_class} {check_validForm_now} {column_validator}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {data_table}>"
                                if boolean_sliders is not None:
                                    if boolean_sliders_new_configs:
                                        if boolean_sliders["style_slider"] == "silder":
                                            if boolean_sliders["text_aligment"] == "both_sides":
                                                boolean_sliders_new_configs_label1 = f"<label style='margin-left: 0.5rem;margin-top: 0.5rem;'>{boolean_sliders['text_right']}</label>"
                                                boolean_sliders_new_configs_label2 = f"<label style='margin-right: 0.5rem;margin-top: 0.5rem;'>{boolean_sliders['text_left']}</label>"
                                            elif boolean_sliders["text_aligment"] == "left_side":
                                                boolean_sliders_new_configs_label1 = f""
                                                boolean_sliders_new_configs_label2 = f"<label style='margin-right: 0.5rem;margin-top: 0.5rem;'>{boolean_sliders['text_left']}</label>"
                                            elif boolean_sliders["text_aligment"] == "right_side":
                                                boolean_sliders_new_configs_label1 = f"<label style='margin-left: 0.5rem;margin-top: 0.5rem;'>{boolean_sliders['text_right']}</label>"
                                                boolean_sliders_new_configs_label2 = f""
                                            else:
                                                boolean_sliders_new_configs_label1 = f"<label style='margin-left: 0.5rem;margin-top: 0.5rem;'>{field.verbose_name + mand}</label>"
                                                boolean_sliders_new_configs_label2 = ""

                                            choice = (
                                                f"""
                            <div class="switch-container">
                              <input {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='checkbox' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {restict_min_class} {check_validForm_now}  {column_validator}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {data_table}>
                              <div class="switch-color"><label class="trigger-label" for="id_{field.name}_{element_id}"></label></div>
                              <label class="switch-label" for="id_{field.name}_{element_id}"></label>
                            </div>
                            <style>
                              #id_{field.name}_{element_id} ~ .switch-color
                              """
                                                + """ { """
                                                + f"""
                                background:{boolean_sliders['rgba_value_bg_in_active']};
                                {field_height_style}
                              """
                                                + """}
                              """
                                                + f"""
                              #id_{field.name}_{element_id}:checked ~ .switch-color
                              """
                                                + """ { """
                                                + f"""
                                background:{boolean_sliders['rgba_value_bg_active']};
                                {field_height_style}
                              """
                                                + """}

                              </style>
                            """
                                            )
                                    else:
                                        if boolean_sliders["style_slider"] == "text_silder":
                                            choice = f"""
                            <input {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='checkbox' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {restict_min_class} {check_validForm_now}  {column_validator}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {data_table}>
                            <div class="radioGroup" style="width:100% !important;background-color:{boolean_sliders['not_selected']['rgba_value_bg-not-selected']}">
                            <input type="radio" class="yes_bool" id="yes_bool_id_{field.name}_{element_id}" name="boolean_quick_filter_id_{field.name}_{element_id}" onchange="boolean_slider_onchange(this,id_{field.name}_{element_id},'yes','{boolean_sliders['not_selected']['text-color-not-selected']}','{boolean_sliders['selected']['text-color-selected']}')">
                            <label style="align-items:center;justify-content:center;display:flex;margin:0 !important;padding: 0 !important;font-size:0.8rem;color:{boolean_sliders['not_selected']['text-color-not-selected']};" for="yes_bool_id_{field.name}_{element_id}">{boolean_sliders['selected']['text-true']}</label>
                            <input type="radio" class="no_bool" id="no_bool_id_{field.name}_{element_id}" name="boolean_quick_filter_id_{field.name}_{element_id}" onchange="boolean_slider_onchange(this,id_{field.name}_{element_id},'no','{boolean_sliders['not_selected']['text-color-not-selected']}','{boolean_sliders['selected']['text-color-selected']}')" >
                            <label for="no_bool_id_{field.name}_{element_id}" style="align-items:center;justify-content:center;display:flex;margin:0 !important;padding: 0 !important;font-size:0.8rem;color:{boolean_sliders['not_selected']['text-color-not-selected']};">{boolean_sliders['not_selected']['text-false']}</label>
                            <span class="indicator" style="width:50% !important;box-shadow:{boolean_sliders['selected']['rgba_value_bg-selected']} 0px 2px 20px inset, rgba(0, 0, 0, 0.31) 1px 1px 10px;border:1px solid {boolean_sliders['selected']['rgba_value_bg-selected']};background-color:{boolean_sliders['selected']['rgba_value_bg-selected']};"></span>
                          </div>"""
                                        if boolean_sliders["style_slider"] == "silder":
                                            choice = (
                                                f"""
                            <div class="switch-container">
                              <input {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='checkbox' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {restict_min_class} {check_validForm_now}  {column_validator}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {data_table}>
                              <div class="switch-color"><label class="trigger-label" for="id_{field.name}_{element_id}"></label></div>
                              <label class="switch-label" for="id_{field.name}_{element_id}"></label>
                            </div>
                            <style>
                              #id_{field.name}_{element_id}:checked ~ .switch-color
                              """
                                                + """ { """
                                                + f"""
                                background:{boolean_sliders['rgba_value_bg']};
                                {field_height_style}
                              """
                                                + """}

                              </style>
                            """
                                            )
                                else:
                                    choice = f"<input {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='checkbox' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {restict_min_class} {check_validForm_now}  {column_validator}' {form_field_attr} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {data_table}>"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                    else:
                                        if boolean_sliders is not None:
                                            if boolean_sliders["style_slider"] == "text_silder":
                                                display = ""
                                            else:
                                                display = "display:flex;"
                                        else:
                                            display = "display:flex;"
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}'> <div id='div_id_{field.name}' class='custom-control custom-checkbox'><div>{choice} <label for='id_{field.name}_{element_id}' class='custom-control-label'></label></div><label>{edit_labels[field.name]} {mand}</label></div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}'> <div id='div_id_{field.name}' class='custom-control custom-checkbox'><div>{choice} <label for='id_{field.name}_{element_id}' class='custom-control-label'></label></div><label>{field.verbose_name} {mand}</label></div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if boolean_sliders is not None:
                                        if boolean_sliders["style_slider"] == "text_silder":
                                            if edit_labels != "" and field.name in edit_labels:
                                                form_element_html[field.name] = (
                                                    f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}'> <div id='div_id_{field.name}'><div><label style='margin-left: 0.3rem;'>{edit_labels[field.name]} {mand}</label>{choice} </div></div> </div>"
                                                )
                                            else:
                                                form_element_html[field.name] = (
                                                    f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}'> <div id='div_id_{field.name}'><div><label style='margin-left: 0.3rem;'>{field.verbose_name} {mand}</label>{choice} </div></div> </div>"
                                                )
                                        else:
                                            if boolean_sliders_new_configs:
                                                form_element_html[field.name] = (
                                                    f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}height: auto;justify-content: start;align-items:center;'> <div id='div_id_{field.name}'><div style='display:flex;justify-content: start;flex-direction: row-reverse;align-items: center;height: auto;'>{boolean_sliders_new_configs_label1}&nbsp;{choice}&nbsp;{boolean_sliders_new_configs_label2}</div></div> </div>"
                                                )
                                            else:
                                                if edit_labels != "" and field.name in edit_labels:
                                                    form_element_html[field.name] = (
                                                        f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}height: auto;justify-content: start;align-items:center;'> <div id='div_id_{field.name}'><div style='display:flex;justify-content: start;flex-direction: row-reverse;align-items: center;height: auto;'><label style='margin-left: 0.5rem;margin-top: 0.5rem;'><label style='margin-left: 0.3rem;'>{edit_labels[field.name]} {mand}</label>{choice} </div></div> </div>"
                                                    )
                                                else:
                                                    form_element_html[field.name] = (
                                                        f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}height: auto;justify-content: start;align-items:center;'> <div id='div_id_{field.name}'><div style='display:flex;justify-content: start;flex-direction: row-reverse;align-items: center;height: auto;'><label style='margin-left: 0.5rem;margin-top: 0.5rem;'>{field.verbose_name} {mand}</label>{choice} </div></div> </div>"
                                                    )
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}height: auto;justify-content: start;align-items:center;'> <div id='div_id_{field.name}' style='display: flex;' class='custom-control custom-checkbox'><div>{choice} <label for='id_{field.name}_{element_id}' class='custom-control-label'></label></div><label style='margin-left: 0.3rem;'>{edit_labels[field.name]} {mand}</label></div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr} {field_height_style};{display}height: auto;justify-content: start;align-items:center;'> <div id='div_id_{field.name}' style='display: flex;' class='custom-control custom-checkbox'><div>{choice} <label for='id_{field.name}_{element_id}' class='custom-control-label'></label></div><label style='margin-left: 0.3rem;'>{field.verbose_name} {mand}</label></div> </div>"
                                            )
                            if (
                                field.get_internal_type() == "TextField"
                                or field.get_internal_type() == "BinaryField"
                            ):
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if value.get("limit_value"):
                                                x = value["limit_value"]
                                                if z == "MinLengthValidator":
                                                    attributes["minlength"] = x
                                                elif z == "MaxLengthValidator":
                                                    attributes["maxlength"] = x
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                dic1 = {"rows": 8, "cols": 10}
                                attributes.update(dic1)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                attributes.update(dic1)
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                y = getattr(field, "choices")
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if foreign == 1:
                                    if not show_labels:
                                        optn = f"<option disabled selected value='------'>{field.verbose_name.title() + mand}</option>"
                                    else:
                                        optn = "<option value='------' disabled selected>-------</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            optn += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                    choice = (
                                        f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} {att1} name='{name_with_table}' {att} data-car_mand='{restrict_mand}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {compjs} {column_validator} {restict_min_class}" {req} {form_field_attr} {data_table}>"""
                                        + optn
                                        + """</select>"""
                                    )
                                elif y is not None:
                                    choice = f"<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='form-control select2 {compjs}  {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"
                                    if len(field.choices) > 0:
                                        for i, k in field.choices:
                                            choice = choice + f"<option value='{i}'>{i}</option>"
                                        choice = choice + "</select>"
                                    else:
                                        choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'  {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} placeholder='' class='{classs} p-2 {check_validForm_now} {column_validator} {compjs}  {restict_min_class}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'></textarea>"""

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} placeholder='' class='{classs} p-2 {copy_class_to_apply} {compjs} {check_validForm_now}  {restict_min_class}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'></textarea>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} placeholder='' class='{classs} p-2 {copy_class_to_apply} {paste_class_to_apply} {compjs}  {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'></textarea>"""
                                else:
                                    if edit:
                                        if model_name == "ApprovalTable" and (
                                            field.name == "json_data" or field.name == "approval_level_config"
                                        ):
                                            if field.name == "json_data":
                                                atitle = "json data"
                                                fncall = "EditApprovalData.call(this)"
                                            else:
                                                atitle = "approval level config"
                                                fncall = "EditAppLevelConfig.call(this)"

                                            choice = f"""<textarea style='display:none' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' placeholder='' class='' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-car_mand='{restrict_mand}'></textarea><p title="Edit {atitle}" data-editApproval_fields='{json.dumps(editApproval_fields)}' data-editApproval_table='{editApproval_table}' data-elementID = '{element_id}' data-iden = "{atitle}" onclick="{fncall}"><i name="edit_json_data" value="" class="fa fa-edit ihover javaSC thin-icon" style="font-size:15px;cursor:pointer;"></i></p>"""
                                        elif (
                                            model_name == "ApprovalTable"
                                            and field.name == "approval_information"
                                        ):
                                            choice = f"""<textarea style='display:none;' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' placeholder='' class='{classs} p-2 {check_validForm_now} {column_validator}  {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'></textarea>"""
                                        else:
                                            choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' placeholder='' class='{classs} p-2 {check_validForm_now} {column_validator}  {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'></textarea>"""
                                    else:
                                        choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att}  id='id_{field.name}_{element_id}' placeholder='' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {column_validator}  {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'></textarea>"""

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} placeholder='' class='{classs} p-2 {compjs} {copy_class_to_apply}  {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}></textarea>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<textarea style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}'  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} placeholder='' class='{classs} p-2 {compjs} {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}></textarea>"""

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}' > <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if (
                                field.get_internal_type() == "IntegerField"
                                or field.get_internal_type() == "BigIntegerField"
                            ):
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                if len(field.validators) > 0:
                                    for key, value in (field.validators).items():
                                        if key in ["MinValueValidator", "MaxValueValidator"]:
                                            z = key
                                            x = value["limit_value"]
                                            if z == "MinValueValidator":
                                                y = "min"
                                            else:
                                                y = "max"
                                            attributes[y] = x
                                        else:
                                            continue
                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                                        if len(jsattrlist) > 0:
                                                            jstype = jsattrlist[0]
                                                            if (
                                                                jstype.get("parentvalue")
                                                                == "Linked-field-autopopulate"
                                                            ):
                                                                parent_column = jstype["finaljsattr"][2][0][
                                                                    "value"
                                                                ]
                                                                reference_table = jstype["finaljsattr"][1][0][
                                                                    "value"
                                                                ]
                                                                nextindent = int(
                                                                    non_standard_read_data_func(
                                                                        f"SELECT IDENT_CURRENT('users_{reference_table}') + 1",
                                                                        user_db_engine,
                                                                        db_type,
                                                                    ).iloc[0, 0]
                                                                )
                                                                linked_choices = read_data_func(
                                                                    request_user,
                                                                    {
                                                                        "inputs": {
                                                                            "Data_source": "Database",
                                                                            "Table": reference_table,
                                                                            "Columns": ["id", parent_column],
                                                                        },
                                                                        "condition": [],
                                                                    },
                                                                )
                                                                if not linked_choices.empty:
                                                                    linked_choices = [
                                                                        (row["id"], row[parent_column])
                                                                        for index, row in linked_choices.iterrows()
                                                                    ]
                                                                if not edit:
                                                                    linked_choices = [
                                                                        (nextindent, "-----")
                                                                    ] + linked_choices
                                                                field.choices = linked_choices
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                y = getattr(field, "choices")
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.computed_field:
                                    if field.editable in ["0", 0, "False", False]:
                                        comp_class = ""
                                        restrict_locked = "disabled"
                                    else:
                                        restrict_locked = ""
                                        comp_class = "compfield_dis"
                                else:
                                    comp_class = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if foreign == 1:
                                    if not show_labels:
                                        optn = f"<option disabled selected value='------'>{field.verbose_name.title() + mand}</option>"
                                    else:
                                        optn = "<option value='------' disabled selected>-------</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            optn += f"<option value='{value}'>{value}</option>"
                                    choice = (
                                        f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} {att1} name='{name_with_table}' {att} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}'  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {column_validator} {comp_class} {restict_min_class} {compjs}" {form_field_attr} {req} {data_table}>"""
                                        + optn
                                        + """</select>"""
                                    )
                                elif y is not None:
                                    if len(field.choices) > 0:
                                        choice = f"<select {cases_attr} {is_computed_field} name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='form-control select2 {check_validForm_now}  {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"
                                        if len(field.choices) > 0:
                                            for i, k in field.choices:
                                                choice = choice + f"<option value='{k}'>{k}</option>"
                                            choice = choice + "</select>"
                                    else:
                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now}  {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                        if copy_paste_config != "":
                                            if copy_class_to_apply:
                                                if copy_collist == [] or field.name in copy_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {check_validForm_now} {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'>"""
                                                else:
                                                    copy_class_to_apply = ""

                                            if paste_class_to_apply:
                                                if paste_collist == [] or field.name in paste_collist:
                                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-car_mand='{restrict_mand}'>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {column_validator} {comp_class}  {restict_min_class} {compjs}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {check_validForm_now} {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} type='number' name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                            else:
                                                paste_class_to_apply = ""

                                numeric_range_slider = None
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if "parentvalue" in g:
                                            if g["parentvalue"] == "Field Type Settings":
                                                numeric_range_slider = g["finaljsattr"]
                                if numeric_range_slider is not None:
                                    if (
                                        numeric_range_slider["minvalue"]
                                        and numeric_range_slider["maxvalue"]
                                        and numeric_range_slider["stepvalue"] != ""
                                    ):
                                        choice = f"""
                            <div class="rangeContainer_{field.name}" style="padding:0px 0.5rem 0px 0.5rem;">
                            <output for="range" id="section_rangeValue_float_{field.name}_{element_id}" style="background: #fff;font-size:11px;border-radius: 10px;position: relative;left:-15px;text-align:center;padding-right:6px;padding-left:6px;color:white;">{numeric_range_slider['minvalue']}</output>
                            <input type="range" class="custom-range" {cases_attr} {is_computed_field} {restrict_locked} name='{name_with_table}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}'
                                data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id="id_{field.name}_{element_id}" {att} value="18" min="{numeric_range_slider['minvalue']}" max="{numeric_range_slider['maxvalue']}"
                                step="{numeric_range_slider['stepvalue']}" oninput="sildervalue_float('section_rangeValue_float_{field.name}_{element_id}','id_{field.name}_{element_id}')" style="-webkit-appearance: none;width: 100%;height: 10px;border-radius: 5px;background-size: 0% 100%;">
                            <script>
                              function sildervalue_float(value1, value2) {{
                                var input_value = document.getElementById(value1);
                                var sliderValue = document.getElementById(value2);
                                input_value.textContent = sliderValue.value;
                                var containerWidth = sliderValue.offsetWidth;
                                var rangeValue = sliderValue.value - sliderValue.min;
                                var rangeMax = sliderValue.max - sliderValue.min;
                                var progress = rangeValue / rangeMax;
                                var startPoint = containerWidth*progress - input_value.offsetWidth * progress;
                                input_value.style.left = startPoint + "px";
                              }}
                              rangeContainer_int = document.querySelector('.rangeContainer_{field.name}');
                              rangeOutput_int = rangeContainer_int.querySelector('output');
                              rangeContainer_int.addEventListener('mouseenter', () => {{
                                rangeOutput_int.style.color = 'black';
                                rangeOutput_int.style.border = '2px solid black';
                              }});
                              rangeContainer_int.addEventListener('mouseleave', () => {{
                                rangeOutput_int.style.color = 'white';
                                rangeOutput_int.style.border = '2px solid white';
                              }});
                            </script>
                            <style>
                              #id_{field.name}_{element_id}::-webkit-slider-thumb {{
                                -webkit-appearance: none;
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-moz-range-thumb {{
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-webkit-slider-runnable-track {{
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-moz-range-track {{
                                background: {numeric_range_slider['slider_color']};
                                }}
                              #id_{field.name}_{element_id}::-ms-track {{
                                background: {numeric_range_slider['slider_color']};
                                }}
                            </style>
                            </div>
                          """
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                            if field.get_internal_type() == "TimeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.use_seconds == "false":
                                    dic1 = {"placeholder": "HH:MM"}
                                else:
                                    dic1 = {"placeholder": "HH:MM:SS"}
                                attributes.update(dic1)
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class} {compjs}" {form_field_attr} {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    if field.use_seconds == "false":
                                        dtformat = "HH:mm"
                                    else:
                                        dtformat = "HH:mm:ss"
                                    choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} class="form-control timepickerinput form-control p-2  {check_validForm_now} {column_validator} {compjs} {restict_min_class}" data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' data-dp-config="{{&quot;id&quot;: &quot;dp_4&quot;, &quot;picker_type&quot;: &quot;TIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;}}}}">
                        <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} class="form-control timepickerinput form-control p-2 {copy_class_to_apply} {check_validForm_now}  {compjs} {column_validator} {restict_min_class}" data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}' data-dp-config="{{&quot;id&quot;: &quot;dp_4&quot;, &quot;picker_type&quot;: &quot;TIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;}}}}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' data-field_name='{field.name}' class="form-control {compjs} timepickerinput form-control p-2 {copy_class_to_apply} {paste_class_to_apply} {check_validForm_now}  {column_validator} {restict_min_class}" data-dp-config="{{&quot;id&quot;: &quot;dp_4&quot;, &quot;picker_type&quot;: &quot;TIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;}}}}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "DateTimeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "form-control datetimepickerinput form-control"
                                choice = ""
                                if field.use_seconds == "false":
                                    dic1 = {"placeholder": "YYYY-MM-DD HH:MM"}
                                else:
                                    dic1 = {"placeholder": "YYYY-MM-DD HH:MM:SS"}
                                attributes.update(dic1)
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                dp_config = "{'id': 'dp_11', 'picker_type': 'DATETIME', 'linked_to': null, 'options': {'showClose': true, 'showClear': true, 'showTodayButton': true, 'format': 'YYYY-MM-DD HH:mm:ss'}}"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-comp_input='{json.dumps(computed_input)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now} {column_validator} {compjs}  {restict_min_class}" {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    if field.use_seconds == "false":
                                        dtformat = "YYYY-MM-DD HH:mm"
                                    else:
                                        dtformat = "YYYY-MM-DD HH:mm:ss"
                                    choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} name='{name_with_table}' {att} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {restrict_locked} {data_table} data-car_mand='{restrict_mand}' type='text' type="text" class="form-control datetimepickerinput form-control p-2 {check_validForm_now}  {column_validator} {compjs} {restict_min_class}" data-dp-config="{{&quot;id&quot;: &quot;dp_3&quot;, &quot;picker_type&quot;: &quot;DATETIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;, &quot;locale&quot;: &quot;en&quot;}}}}">
                          <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i> </div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} type='text' type="text" class="form-control datetimepickerinput form-control p-2 {copy_class_to_apply}  {compjs} {check_validForm_now} {column_validator} {restict_min_class}" data-dp-config="{{&quot;id&quot;: &quot;dp_3&quot;, &quot;picker_type&quot;: &quot;DATETIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;, &quot;locale&quot;: &quot;en&quot;}}}}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i> </div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div class="input-group date" style='{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}'><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} type='text' type="text" class="form-control datetimepickerinput form-control p-2 {copy_class_to_apply}  {compjs} {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class}" data-dp-config="{{&quot;id&quot;: &quot;dp_3&quot;, &quot;picker_type&quot;: &quot;DATETIME&quot;, &quot;linked_to&quot;: null, &quot;options&quot;: {{&quot;showClose&quot;: true, &quot;showClear&quot;: true, &quot;showTodayButton&quot;: true, &quot;format&quot;: &quot;{dtformat}&quot;, &quot;locale&quot;: &quot;en&quot;}}}}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i> </div></div>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "DateTimeRangeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"

                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}'  data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class}" {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}">
                        <input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} {restrict_locked} type='text' name='{name_with_table}' {att} class="form-control p-2 dttrangepicker {check_validForm_now} {column_validator}  {restict_min_class}" data-car_mand='{restrict_mand}'>
                        <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}">
                              <input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {restrict_locked} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 dttrangepicker {check_validForm_now}  {column_validator} {restict_min_class} {copy_class_to_apply}" data-car_mand='{restrict_mand}'>
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}">
                              <input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' {form_field_attr} {req} {data_table} {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {restrict_locked} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} class="form-control p-2 dttrangepicker {check_validForm_now}  {column_validator} {restict_min_class} {copy_class_to_apply} data-car_mand='{restrict_mand}' {paste_class_to_apply}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-calendar"></i></div></div>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "EmailField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now} {column_validator}  {restict_min_class}" {form_field_attr} data-car_mand='{restrict_mand}' {req} {data_table}>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now} {column_validator}  {restict_min_class}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "FloatField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                if field.name in js_action_attr_dic:
                                    attributes["data-new-js-actions"] = json.dumps(
                                        js_action_attr_dic[field.name], separators=(",", ":")
                                    )
                                jsattrlist1 = []
                                if len(field.validators) > 0:
                                    for key, value in (field.validators).items():
                                        z = key
                                        if (z == "MinValueValidator") or (z == "MaxValueValidator"):
                                            x = value["limit_value"]
                                            if z == "MinValueValidator":
                                                y = "min"
                                            elif z == "MaxValueValidator":
                                                y = "max"
                                            else:
                                                pass
                                            attributes[y] = x
                                        if z == "DecimalValidator":
                                            maxdigits = value["max_digits"]
                                            dec_places = value["decimal_places"]
                                            if maxdigits is not None:
                                                var1 = int(maxdigits - dec_places)
                                                var2 = int(dec_places)
                                                y = "pattern"
                                                a1 = {}
                                                a1[y] = (
                                                    "^[0-9]{0,"
                                                    + str(var1)
                                                    + r"}(\.[0-9]"
                                                    + "{0,"
                                                    + str(var2)
                                                    + "})?$|^-?[0-9]"
                                                    + "{0,"
                                                    + str(var1)
                                                    + r"}(\."
                                                    + "[0-9]"
                                                    + "{0,"
                                                    + str(var2)
                                                    + "})?$"
                                                )
                                                attributes.update(a1)
                                            else:
                                                var2 = int(dec_places)
                                                y = "pattern"
                                                a1 = {}
                                                a1[y] = (
                                                    "^[0-9]{0,"
                                                    + r"}(\.[0-9]"
                                                    + "{0,"
                                                    + str(var2)
                                                    + "})?$|^-?[0-9]"
                                                    + "{0,"
                                                    + r"}(\."
                                                    + "[0-9]"
                                                    + "{0,"
                                                    + str(var2)
                                                    + "})?$"
                                                )
                                            attributes.update(a1)
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                compjs = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            for conf in val:
                                                if conf["parentvalue"] == "Validation based message":
                                                    compjs = "compjs"
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.computed_field:
                                    if field.editable in ["0", 0, "False", False]:
                                        comp_class = ""
                                    else:
                                        comp_class = "compfield_dis"
                                else:
                                    comp_class = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {restrict_locked} {att1} name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now} {column_validator} {comp_class} {restict_min_class}  {compjs}" {form_field_attr} {req} {data_table} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}'  data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='number' step='0.0001'name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-comp_input='{json.dumps(computed_input)}' {embedded_noneditable_attr} id='id_{field.name}_{element_id}' class='{classs} p-2 {check_validForm_now} {column_validator}  {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='number' step='0.0001'  name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply} {check_validForm_now}  {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} type='number' step='0.0001' name='{name_with_table}' {att} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {comp_class} {restict_min_class} {compjs}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                            else:
                                                paste_class_to_apply = ""

                                numeric_range_slider = None
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if "parentvalue" in g:
                                            if g["parentvalue"] == "Field Type Settings":
                                                numeric_range_slider = g["finaljsattr"]
                                if numeric_range_slider is not None:
                                    if (
                                        numeric_range_slider["minvalue"]
                                        and numeric_range_slider["maxvalue"]
                                        and numeric_range_slider["stepvalue"] != ""
                                    ):
                                        choice = f"""
                            <div class="rangeContainer_{field.name}" style="padding:0px 0.5rem 0px 0.5rem;">
                            <output for="range" id="section_rangeValue_float_{field.name}_{element_id}" style="padding-right:6px;padding-left:6px;background: #fff;font-size:11px;border-radius: 10px;position: relative;left:-15px;text-align:center;color:white;">{numeric_range_slider['minvalue']}</output>
                            <input type="range" class="custom-range" {cases_attr} {is_computed_field} {restrict_locked} name='{name_with_table}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}'
                                data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id="id_{field.name}_{element_id}" {att} value="18" min="{numeric_range_slider['minvalue']}" max="{numeric_range_slider['maxvalue']}"
                                step="{numeric_range_slider['stepvalue']}" oninput="sildervalue_float('section_rangeValue_float_{field.name}_{element_id}','id_{field.name}_{element_id}')" default-value="18" style="-webkit-appearance: none;margin-right: 41px;
                                width: 100%;height: 10px;border-radius: 5px;background-size: 0% 100%;
                                background-repeat: no-repeat;">
                            <script>
                              function sildervalue_float(value1, value2) {{
                                var input_value = document.getElementById(value1);
                                var sliderValue = document.getElementById(value2);
                                input_value.textContent = sliderValue.value;
                                var containerWidth = sliderValue.offsetWidth;
                                var rangeValue = sliderValue.value - sliderValue.min;
                                var rangeMax = sliderValue.max - sliderValue.min;
                                var progress = rangeValue / rangeMax;
                                var startPoint = containerWidth*progress - input_value.offsetWidth * progress;
                                input_value.style.left = startPoint + "px";
                              }}
                              rangeContainer_float = document.querySelector('.rangeContainer_{field.name}');
                              rangeOutput_float = rangeContainer_float.querySelector('output');
                              rangeContainer_float.addEventListener('mouseenter', () => {{
                                rangeOutput_float.style.color = 'black';
                                rangeOutput_float.style.border = '2px solid black';
                              }});
                              rangeContainer_float.addEventListener('mouseleave', () => {{
                                rangeOutput_float.style.color = 'white';
                                rangeOutput_float.style.border = '2px solid white';
                              }});
                            </script>
                            <style>
                              #id_{field.name}_{element_id}::-webkit-slider-thumb {{
                                -webkit-appearance: none;
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-moz-range-thumb {{
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-webkit-slider-runnable-track {{
                                background: {numeric_range_slider['slider_color']};
                              }}
                              #id_{field.name}_{element_id}::-moz-range-track {{
                                background: {numeric_range_slider['slider_color']};
                                }}
                              #id_{field.name}_{element_id}::-ms-track {{
                                background: {numeric_range_slider['slider_color']};
                                }}
                            </style>
                            </div>
                          """
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "VideoField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = field.get_internal_type()
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "custom-file-input"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                for key, val in attributes.items():
                                    if key == "data-jsattr":
                                        val = json.dumps(val, separators=(",", ":"))
                                        att = att + "onchange='jsChange.call(this)'"
                                    att = att + " " + f"""{key} = '{val}' """

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if not show_labels:
                                    cfile = "Choose " + field.verbose_name.title() + mand
                                else:
                                    cfile = "Choose file"
                                accept = ""
                                file = ""
                                if field.video_type:
                                    if field.video_type == "external_link":
                                        accept = ""
                                        file = "text"
                                        choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} accept='{accept}' type='{file}' name='{name_with_table}' {att} {restrict_locked}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='character_field form-control' {form_field_attr} {data_table} {is_computed_field} multiple>"""
                                    elif field.video_type == "Video":
                                        accept = ".mp4,.webm,.ogv"
                                        file = "file"
                                        choice = f"""<input {cases_attr} accept='{accept}' type='{file}' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs}'{form_field_attr} {data_table} {is_computed_field}>
                          <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""
                                    elif field.video_type == "mp4":
                                        accept = ".mp4"
                                        file = "file"
                                        choice = f"""<input {cases_attr} accept='{accept}' type='{file}' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs}'{form_field_attr} {data_table} {is_computed_field}>
                          <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""
                                    elif field.video_type == "webm":
                                        accept = ".webm"
                                        file = "file"
                                        choice = f"""<input {cases_attr} accept='{accept}' type='{file}' name='{name_with_table}' {att} {restrict_locked}  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs}'{form_field_attr} {data_table} {is_computed_field}>
                          <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""
                                    elif field.video_type == "ogv":
                                        accept = ".ogv"
                                        file = "file"
                                        choice = f"""<input {cases_attr} accept='{accept}' type='{file}' name='{name_with_table}' {att} {restrict_locked} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs}'{form_field_attr} {data_table} {is_computed_field}>
                          <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='custom-file'> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='custom-file'> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='custom-file'> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='custom-file'> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "FileField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                file_input_field_list.append(field.name)
                                attributes = {}
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "custom-file-input"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if "datatype" not in attributes:
                                    attributes["datatype"] = field.get_internal_type()
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                else:
                                    pass
                                att += f""" datatype='{field.get_internal_type()}' """

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if not show_labels:
                                    cfile = "Choose " + field.verbose_name.title() + mand
                                else:
                                    cfile = "Choose file"
                                accept = "*"
                                if field.file_extension:
                                    if field.file_extension == "Any":
                                        accept = "*"
                                    elif field.file_extension == "Images":
                                        accept = "image/*"
                                    elif field.file_extension == "Document":
                                        accept = ".doc,.docx,.rtf,.pdf,.csv,xlsx,.odt,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                    elif field.file_extension == "PDF":
                                        accept = ".pdf"
                                choice = f"""<input {cases_attr} data-car_mand='{restrict_mand}' accept={accept} type='file' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {data_table} {is_computed_field} multiple>
                      <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""
                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        field_label_name = edit_labels[field.name]
                                                    else:
                                                        field_label_name = field.verbose_name
                                                    carousel_list[
                                                        j
                                                    ] = f"""<div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'> <label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> </label>
                                  <div class="input-group">
                                    <input type="text" class='{check_validForm_now} {column_validator} {restict_min_class} form-control textInput textinput' {form_field_attr} {data_table} {is_computed_field} placeholder="Upload Files" id='id_{field.name}_{element_id}' {cases_attr} data-car_mand='{restrict_mand}' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' readonly>
                                    <div class="input-group-append">
                                      <button class="btn btn-outline-secondary" type="button" data-toggle="modal" data-target="#{field.name}_{element_id}_upload_modal"><i class="fas fa-upload" aria-hidden="true"></i></button>
                                    </div>
                                  </div>
                                </div> </div>"""
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        field_label_name = edit_labels[field.name]
                                    else:
                                        field_label_name = field.verbose_name

                                    form_element_html[
                                        field.name
                                    ] = f"""<div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'> <label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> </label>
                          <div class="input-group">
                            <input type="text" class='{check_validForm_now} {column_validator} {restict_min_class} form-control textInput textinput' {form_field_attr} {data_table} {is_computed_field} placeholder="Upload Files" id='id_{field.name}_{element_id}' {cases_attr} data-car_mand='{restrict_mand}' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style} caret-color: transparent;' onkeypress="return false;" autocomplete="off">
                            <div class="input-group-append">
                              <button class="btn btn-outline-secondary" type="button" data-toggle="modal" data-target="#{field.name}_{element_id}_upload_modal"><i class="fas fa-upload" aria-hidden="true"></i></button>
                            </div>
                          </div>
                         </div> </div>"""

                                file_field_upload_html += f"""
                          <div style="z-index:1060;" class="modal fade" id="{field.name}_{element_id}_upload_modal" tabindex="-1" role="dialog" data-focus="false" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                              <div class="modal-content">
                                <div class="modal-header">
                                  <h5 class="modal-title">Upload Files</h5>
                                </div>
                                <div class="modal-body">
                                  <div class="row">
                                    <div class="col-12 m-1">
                                      <div class="upload-file">
                                        <div class="file-upload-wrapper">
                                          <label>
                                            <input type="file" name="{field.name}_{element_id}_upload_input" id="{field.name}_{element_id}_upload_input" multiple accept={accept} style="display:none;">
                                            <i class="fa-solid uploadPanelIcon fa-cloud-arrow-up fa-5x"></i>
                                            <br>
                                            <p>Drop your files here. <br>or <a>Browse</a></p>
                                          </label>
                                        </div>
                                      </div>
                                    </div>
                                    <br>
                                    <br>
                                    <div class="col-12 m-1">
                                      <ul class="list-group uploaded-files-gallery">
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                                <div class="modal-footer">
                                  <button type="button" class="btn btn-primary buttonfooter closeUploadedFiles" onclick="$(`#{field.name}_{element_id}_upload_modal`).modal('hide')"><i class="fas fa-times"></i> &nbsp; Close</button>
                                  <button type="button" class="btn btn-primary buttonfooter resetUploadedFiles"><i class="fas fa-refresh"></i> &nbsp; Reset</button>
                                  <button type="button" class="btn btn-primary buttonfooter saveUploadedFiles"><i class="fas fa-save"></i> &nbsp; Save</button>
                                </div>
                              </div>
                            </div>
                          </div>
                        """

                            if field.get_internal_type() == "ImageField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                file_input_field_list.append(field.name)
                                attributes = {}
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "custom-file-input"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if not show_labels:
                                    cfile = "Choose " + field.verbose_name.title() + mand
                                else:
                                    cfile = "Choose file"
                                choice = f"""<input {cases_attr} data-car_mand='{restrict_mand}' type='file' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} accept="image/*" class='{classs} {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {data_table} {is_computed_field}>
                      <label style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' class='custom-file-label' for='id_{field.name}_{element_id}'>{cfile}</label>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        field_label_name = edit_labels[field.name]
                                                    else:
                                                        field_label_name = field.verbose_name.title()
                                                    carousel_list[
                                                        j
                                                    ] = f"""<div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'> <label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label>
                                  <div class="input-group">
                                    <input type="text" class='{check_validForm_now} {column_validator} {restict_min_class} form-control textInput textinput' {form_field_attr} {data_table} placeholder="Upload Files" id='id_{field.name}_{element_id}' {cases_attr} {is_computed_field} data-car_mand='{restrict_mand}' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' readonly>
                                    <div class="input-group-append">
                                      <button class="btn btn-outline-secondary" type="button" data-toggle="modal" data-target="#{field.name}_{element_id}_upload_modal"><i class="fas fa-upload" aria-hidden="true"></i></button>
                                    </div>
                                  </div>
                                </div> </div>"""
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        field_label_name = edit_labels[field.name]
                                    else:
                                        field_label_name = field.verbose_name.title()

                                    form_element_html[
                                        field.name
                                    ] = f"""<div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'> <label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label>
                          <div class="input-group">
                            <input type="text" class='{check_validForm_now} {column_validator} {restict_min_class} form-control textInput textinput' {form_field_attr} {data_table} {is_computed_field} placeholder="Upload Files" id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {cases_attr} data-car_mand='{restrict_mand}' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' readonly>
                            <div class="input-group-append">
                              <button class="btn btn-outline-secondary" type="button" data-toggle="modal" data-target="#{field.name}_{element_id}_upload_modal"><i class="fas fa-upload" aria-hidden="true"></i></button>
                            </div>
                          </div>
                         </div> </div>"""

                                file_field_upload_html += f"""
                          <div style="z-index:1060;" class="modal fade" id="{field.name}_{element_id}_upload_modal" tabindex="-1" role="dialog" data-focus="false" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                              <div class="modal-content">
                                <div class="modal-header">
                                  <h5 class="modal-title">Upload Files</h5>
                                </div>
                                <div class="modal-body">
                                  <div class="row">
                                    <div class="col-12 m-1">
                                      <div class="upload-file">
                                        <div class="file-upload-wrapper">
                                          <label>
                                            <input type="file" name="{field.name}_{element_id}_upload_input" id="{field.name}_{element_id}_upload_input" multiple accept="image/*" style="display:none;">
                                            <i class="fa-solid uploadPanelIcon fa-cloud-arrow-up fa-5x"></i>
                                            <br>
                                            <p>Drop your files here. <br>or <a>Browse</a></p>
                                          </label>
                                        </div>
                                      </div>
                                    </div>
                                    <br>
                                    <br>
                                    <div class="col-12 m-1">
                                      <ul class="list-group uploaded-files-gallery">
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                                <div class="modal-footer">
                                  <button type="button" class="btn btn-primary buttonfooter closeUploadedFiles" onclick="$(`#{field.name}_{element_id}_upload_modal`).modal('hide')"><i class="fas fa-times"></i> &nbsp; Close</button>
                                  <button type="button" class="btn btn-primary buttonfooter resetUploadedFiles"><i class="fas fa-refresh"></i> &nbsp; Reset</button>
                                  <button type="button" class="btn btn-primary buttonfooter saveUploadedFiles"><i class="fas fa-save"></i> &nbsp; Save</button>
                                </div>
                              </div>
                            </div>
                          </div>
                        """

                            if field.get_internal_type() == "TimeRangeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {is_computed_field} {att1} name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class}" {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}"><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} class="form-control ttrangepicker p-2 {check_validForm_now}  {column_validator} {restict_min_class}" data-car_mand='{restrict_mand}'>
                        <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""
                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'date_div',field.name)['styling'].replace("'","")} {field_height_style}"><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-field_name='{field.name}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} class="form-control ttrangepicker p-2 {copy_class_to_apply} {check_validForm_now}  {column_validator} {restict_min_class}" data-car_mand='{restrict_mand}'>
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<div style="display:flex;{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}"><input style='{create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")} {field_height_style}' type='text' {placeholder.format(ptext=field.verbose_name+mand)} {dfocus} {cases_attr} {is_computed_field} type='text' name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}' class="form-control ttrangepicker p-2 {copy_class_to_apply}  {paste_class_to_apply} {check_validForm_now} {column_validator} {restict_min_class}">
                              <div class="input-group-addon input-group-append input-group-text"> <i class="glyphicon glyphicon-time"></i> </div></div>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "HierarchyField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                hierarchy_group = field.hierarchy_group
                                hierarchy_level = field.hierarchy_level

                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name

                                classs = "form-control select2"
                                choice = ""
                                mand = ""
                                req = ""
                                if field.null == 0:
                                    mand = "*"
                                    req = "required"
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"{req}"
                                data_table = f"data-tablename='{model_name}'"
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if hierarchy_group is None:
                                    choice = f"<select id='id_{field.name}_{element_id}' {att} {is_computed_field} {form_field_attr} name='{name_with_table}' class='form-control select2 {check_validForm_now} {column_validator} {restict_min_class}' {data_table} data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-car_mand='{restrict_mand}'>"
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option value='' {placeholder.format(ptext=field.verbose_name+mand)} disabled selected>Select {field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value=''>----</option>"
                                    choice = choice + "</select>"
                                else:
                                    choice = f"<select id='id_{field.name}_{element_id}' {att} {is_computed_field} {att1} name='{name_with_table}' {form_field_attr} class='form-control select2 {check_validForm_now} {column_validator} {restict_min_class}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-comp_input='{json.dumps(computed_input)}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' {req} {data_table} data-car_mand='{restrict_mand}'>"
                                    choice_list = read_data_func(
                                        request_user,
                                        {
                                            "inputs": {
                                                "Data_source": "Database",
                                                "Table": "Hierarchy_table",
                                                "Columns": ["hierarchy_name"],
                                            },
                                            "condition": [
                                                {
                                                    "column_name": "hierarchy_group",
                                                    "condition": "Equal to",
                                                    "input_value": hierarchy_group,
                                                    "and_or": "AND",
                                                },
                                                {
                                                    "column_name": "hierarchy_level_name",
                                                    "condition": "Equal to",
                                                    "input_value": hierarchy_level,
                                                    "and_or": "",
                                                },
                                            ],
                                        },
                                    )["hierarchy_name"].tolist()
                                    for i in choice_list:
                                        choice = choice + f"<option value='{i}'>{i}</option>"
                                    choice = choice + "</select>"

                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField'>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() in ["CardField"]:
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                x1 = getattr(field, "max_length", False)
                                attributes = {}
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if att == "":
                                    att = att + " " + f"""maxlength = '{19}' """

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if card_logo:
                                    card_style = "card_style"
                                else:
                                    card_style = ""

                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {is_computed_field} {restrict_locked} {att1} class="form-control select2 {restict_min_class} " data-issuer_type={field.card_config} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} name='{name_with_table}' {form_field_attr} onchange="checkvalidCC.call(this)" {data_table} data-car_mand='{restrict_mand}' data-field_name='{field.name}' >"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {is_computed_field} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' pattern='[0-9 ]+' onkeyup="formatCreditCardOnKey(event,'id_{field.name}_{element_id}')" onblur="formatCreditCard('id_{field.name}_{element_id}')" onchange="checkvalidCC.call(this)" data-issuer_type='{field.card_config}' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr}  data-field_name='{field.name}' class='{classs} p-2 {card_style}  {restict_min_class}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {is_computed_field} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' pattern='[0-9 ]+' onkeyup="formatCreditCardOnKey(event,'id_{field.name}_{element_id}')" onblur="formatCreditCard('id_{field.name}_{element_id}')" onchange="checkvalidCC.call(this)" data-issuer_type='{field.card_config}' name='{name_with_table}' data-car_mand='{restrict_mand}' {att} id='id_{field.name}_{element_id}' data-field_name='{field.name}' class='{classs} p-2 {copy_class_to_apply}  {restict_min_class} {card_style}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {is_computed_field} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' pattern='[0-9 ]+' onkeyup="formatCreditCardOnKey(event,'id_{field.name}_{element_id}')" onblur="formatCreditCard('id_{field.name}_{element_id}')" onchange="checkvalidCC.call(this)" data-issuer_type='
                              {field.card_config}' name='{name_with_table}' data-car_mand='{restrict_mand}' data-field_name='{field.name}' {att} id='id_{field.name}_{element_id}' class='{classs} p-2 {copy_class_to_apply} {paste_class_to_apply}  {restict_min_class} {card_style}' {form_field_attr} {req} {data_table}>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid card no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid card no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid card no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid card no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid card no' style='color: #28a745;font-size: 1rem;display: none;'>button><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid card no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid card no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid card no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )

                            if field.get_internal_type() in ["CardCvvField"]:
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                x1 = getattr(field, "max_length", False)
                                attributes = {}
                                jsattrlist1 = []
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""

                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if att == "":
                                    att = att + " " + f"""maxlength = '{4}' """

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} class="form-control select2  {restict_min_class}" onchange="checkvalidCCV.call(this)" {embedded_noneditable_attr} id='id_{field.name}_{element_id}' {att} name='{name_with_table}'  {form_field_attr} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} onchange="checkvalidCCV.call(this)"  id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} p-2 {restict_min_class} ' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} onchange="checkvalidCCV.call(this)" {embedded_noneditable_attr} id='id_{field.name}_{element_id}' data-field_name='{field.name}' class='{classs} p-2   {copy_class_to_apply} {restict_min_class}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} onchange="checkvalidCCV.call(this)" {embedded_noneditable_attr} id='id_{field.name}_{element_id}' data-field_name='{field.name}' class='{classs} p-2  {copy_class_to_apply} {paste_class_to_apply} {restict_min_class}' {form_field_attr} {req} {data_table}>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid cvv no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid cvv no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid cvv no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid cvv no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid cvv no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid cvv no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid cvv no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid cvv no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )

                            if field.get_internal_type() in ["CardExpiryField"]:
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                x1 = getattr(field, "max_length", False)
                                attributes = {}
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} class="form-control select2  {restict_min_class}" data-field_name='{field.name}' {embedded_noneditable_attr} id='id_{field.name}_{element_id}' onchange="checkvalidExpiry.call(this)" {att} name='{name_with_table}'  {form_field_attr} {data_table} data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='month' name='{name_with_table}' {att} onchange="checkvalidExpiry.call(this)" data-field_name='{field.name}' {embedded_noneditable_attr} id='id_{field.name}_{element_id}' class='{classs} p-2 {restict_min_class} ' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='month' name='{name_with_table}' {att} onchange="checkvalidExpiry.call(this)" data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {restict_min_class}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='month' name='{name_with_table}' {att} onchange="checkvalidExpiry.call(this)" data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {copy_class_to_apply}  {paste_class_to_apply} {restict_min_class}' {form_field_attr} {req} {data_table}>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid expiry no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid expiry no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid expiry no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid expiry no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid expiry no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid expiry no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><button type='button' class='btn btn-link fas fa-check popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Valid expiry no' style='color: #28a745;font-size: 1rem;display: none;'><button type='button' class='btn btn-link fas fa-times popoverclass_card float-right' data-container='body' data-toggle='popover' data-placement='top' data-content='Invalid expiry no' style='color: #d81b60;font-size: 1rem;display: none;'></button><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )

                            if field.get_internal_type() in ["CardTypeField"]:
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                x1 = getattr(field, "max_length", False)
                                attributes = {}
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""
                                jsattrlist1 = []
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if foreign == 1:
                                    choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} class="form-control select2 {restict_min_class}" id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' {att} name='{name_with_table}' {form_field_attr} {data_table}  data-car_mand='{restrict_mand}'>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} p-2 {restict_min_class}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}' readonly>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} p-2 {copy_class_to_apply} {restict_min_class}' {form_field_attr} {req} {data_table} readonly>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-field_name='{field.name}' class='{classs} p-2 {copy_class_to_apply} {paste_class_to_apply} {restict_min_class}' {form_field_attr} {req} {data_table} readonly>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )

                            if field.get_internal_type() == "UserField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                x1 = getattr(field, "max_length", False)
                                attributes = {}
                                if x1 is not False:
                                    attributes["maxlength"] = field.max_length
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""

                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""

                                choice = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} {autopopulate_attr} class="form-control select2 user_logo {restict_min_class}  {check_validForm_now}" id='id_{field.name}_{element_id}' {embedded_noneditable_attr} {att} name='{name_with_table}' data-field_name='{field.name}'  {form_field_attr} {data_table} data-car_mand='{restrict_mand}' data-field-type='UserField'>"""
                                if not show_labels:
                                    choice = (
                                        choice
                                        + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                    )
                                else:
                                    choice = choice + f"<option value='----' selected>----</option>"

                                if edit:
                                    choice_list = read_data_func(
                                        request_user,
                                        {
                                            "inputs": {
                                                "Data_source": "Database",
                                                "Table": "Profile",
                                                "Agg_Type": "DISTINCT",
                                                "Columns": [
                                                    "username",
                                                    "email",
                                                    "first_name",
                                                    "last_name",
                                                    "profile_pic",
                                                ],
                                            },
                                            "condition": [],
                                        },
                                    ).fillna("-")
                                    choice_list_uname = choice_list["username"].tolist()
                                    choice_list_email = choice_list["email"].tolist()
                                    choice_list_fname = choice_list["first_name"].tolist()
                                    choice_list_lname = choice_list["last_name"].tolist()
                                    choice_list_pic = choice_list["profile_pic"].tolist()

                                    if not user_profile_pic:
                                        choice_list_pic = ["" for i in choice_list_pic]

                                    if not user_email:
                                        choice_list_email = ["" for i in choice_list_email]

                                    for kk in range(len(choice_list_uname)):
                                        choice += f"<option value='{choice_list_uname[kk]}' data-email='{choice_list_email[kk]}' data-fname='{choice_list_fname[kk]}' data-lname='{choice_list_lname[kk]}' data-pic='{choice_list_pic[kk]}'>{choice_list_uname[kk]}</option>"
                                choice += """</select>"""

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if choice.startswith("<select"):
                                    if grid_layout_config is not None:
                                        if grid_layout_config["grid_layout_on_off"] == True:
                                            html = (
                                                html
                                                + f"""<style>
                            #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                            """
                                                + """ { """
                                                + f"""
                              {create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")}
                              {field_height_style}
                            """
                                                + """}

                            </style> """
                                            )

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> </div> </div>"
                                            )
                                            if field_height_style:
                                                form_element_html[field.name] += (
                                                    f"""<style>
                              #id_{field.name}_{element_id} + .select2-container--default .select2-selection--single
                              """
                                                    + """ { """
                                                    + f"""
                                {field_height_style}
                              """
                                                    + """}

                              </style> """
                                                )
                                    if not is_autopopulated_field:
                                        user_field_inputs.append(field.name)
                                    else:
                                        pass

                            if field.get_internal_type() == "EmailTypeField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                jsattrlist1 = []
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        jsattrlist1 = value
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        if g.get("parentvalue") == "Auto-populate":
                                            if not g["cases"] and g.get("allow_edit") == "no":
                                                autopopulate_fields.extend(
                                                    g["finaljsattr"][0][0]["value"]["depField"]
                                                )
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field or field.name in autopopulate_fields:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""
                                if email_logo:
                                    email_icon_style = "position: absolute;left: 1rem;top: calc(50% - 0.6em);z-index: 1;font-size: large;"
                                    email_padding = "padding-left: 2.5rem !important;"
                                else:
                                    email_icon_style = "position: absolute;left: 1rem;top: calc(50% - 0.6em);z-index: 1;font-size: large;display:none;"
                                    email_padding = ""
                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {att1} name='{name_with_table}' {att} {restrict_locked} {autopopulate_attr} data-columnb_val='{json.dumps(column_validator_cols_dict)}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class="form-control select2 {check_validForm_now}  {column_validator} {restict_min_class}" {form_field_attr} data-car_mand='{restrict_mand}' {req} {data_table}>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if list_view_flag:
                                            c_list = foreign_key_value_listView(
                                                js_foreign_table, js_foreign_column, jsattrlist1, request_user
                                            )
                                            choice_list = c_list[0]
                                        elif not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' style='{email_padding}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} class='{classs} p-2 {check_validForm_now}  {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table} data-car_mand='{restrict_mand}'>"""

                                    if copy_paste_config != "":
                                        if copy_class_to_apply:
                                            if copy_collist == [] or field.name in copy_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} style='{email_padding}' class='{classs} p-2 {copy_class_to_apply} {check_validForm_now}  {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}>"""
                                            else:
                                                copy_class_to_apply = ""

                                        if paste_class_to_apply:
                                            if paste_collist == [] or field.name in paste_collist:
                                                choice = f"""<input style='{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}' {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} type='email' name='{name_with_table}' {att} {restrict_locked} data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} style='{email_padding}' class='{classs} p-2 {copy_class_to_apply} {paste_class_to_apply}  {check_validForm_now} {column_validator} {restict_min_class}' {form_field_attr} {req} {data_table}>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group' style='position:relative;'><div class='input-group-addon' style='display:flex;border:1px solid #d3d3d3;border-radius:4px;border-right:0;border-top-right-radius:0;border-bottom-right-radius:0;'><i class='fas fa-envelope fa-xl' style='margin-top:auto;margin-bottom:auto;padding-right:0.5rem;padding-left:0.5rem;'></i></div> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group' style='position:relative;'><div class='input-group-addon' style='display:flex;border:1px solid #d3d3d3;border-radius:4px;border-right:0;border-top-right-radius:0;border-bottom-right-radius:0;'><i class='fas fa-envelope fa-xl' style='margin-top:auto;margin-bottom:auto;padding-right:0.5rem;padding-left:0.5rem;'></i></div> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        if not foreign:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group' style='position:relative;'><div class='input-group-addon' style='display:flex;border:1px solid #d3d3d3;border-radius:4px;border-right:0;border-top-right-radius:0;border-bottom-right-radius:0;'><i class='fas fa-envelope fa-xl' style='margin-top:auto;margin-bottom:auto;padding-right:0.5rem;padding-left:0.5rem;'></i></div> {choice}</div> </div> </div>"
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group' style='position:relative;'>{choice} </div> </div>"
                                            )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group' style='position:relative;'><div class='input-group-addon' style='display:flex;border:1px solid #d3d3d3;border-radius:4px;border-right:0;border-top-right-radius:0;border-bottom-right-radius:0;'><i class='fas fa-envelope fa-xl' style='margin-top:auto;margin-bottom:auto;padding-right:0.5rem;padding-left:0.5rem;'></i></div> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "TableField":
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""
                                model_fields.append(field.name)
                                attributes = {}
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""

                                choice = f"""<input {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}'  data-field_name='{field.name}' class='{classs} p-2' {form_field_attr} {req} {data_table} style='display:none;{create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")} {field_height_style}'> """
                                master_table = json.loads(field.table_config)

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'><div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span>  <button class='plusBtn float-right' onclick="tableselectShow.call(this,'{field.name}','{element_id}','{master_table["table_field_master"]}')" type='button' style='position: relative; border: transparent; border-radius:10p;'> ✚ </button></label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice} </div> </div> </div>"""
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'><div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span>  <button class='plusBtn float-right' onclick="tableselectShow.call(this,'{field.name}','{element_id}','{master_table["table_field_master"]}')" type='button' style='position: relative; border: transparent; border-radius:10p;'> ✚ </button></label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice} </div> </div> </div>"""
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> <button class='plusBtn float-right' onclick="tableselectShow.call(this,'{field.name}','{element_id}','{master_table["table_field_master"]}')" type='button' style='position: relative; border: transparent; border-radius:10p;'> ✚ </button></label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice} </div> </div> </div>"""
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'><div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> <button class='plusBtn float-right' onclick="tableselectShow.call(this,'{field.name}','{element_id}','{master_table["table_field_master"]}')" type='button' style='position: relative; border: transparent; border-radius:10p;'> ✚ </button></label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice} </div> </div> </div>"""
                                        )

                            if field.get_internal_type() in ["MultiselectField"]:
                                if create_view_tab_body_content["Category_attributes"]["Template"].get(
                                    "show_labels"
                                ) not in [None]:
                                    show_labels = create_view_tab_body_content["Category_attributes"][
                                        "Template"
                                    ]["show_labels"]
                                    if not show_labels:
                                        placeholder = "placeholder='{ptext}'"
                                        vlabel = f"""style='opacity:0';{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}"""
                                        dfocus = """onfocus="(this.type=this.getAttribute('atype'))" onfocusout="(this.type='text')\""""
                                    else:
                                        placeholder = ""
                                        vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                        dfocus = ""
                                else:
                                    show_labels = False
                                    placeholder = ""
                                    vlabel = f"""style='{create_view_grid_layout(grid_layout_config,'label',field.name)['styling'].replace("'","")}'"""
                                    dfocus = ""

                                is_server_side_fk_field = False
                                if field.name in server_side_columns:
                                    serverside_attribute = f"data-is-serverside-fetch='yes' data-serverside-page-length='{server_side_page_length}'"
                                    is_server_side_fk_field = True
                                else:
                                    serverside_attribute = "data-is-serverside-fetch='no'"

                                is_multi_select_field = True
                                temp_mul_config = json.loads(field.mulsel_config)
                                if not is_server_side_fk_field:
                                    for attri, conf_val in temp_mul_config.items():
                                        if (
                                            attri == "value"
                                            or attri == "masterColumn"
                                            or attri == "master"
                                            or attri == "add"
                                            or attri == "def_MulVal"
                                            or attri == "checkBox"
                                            or attri == "condition"
                                        ):
                                            if attri in multi_select_field_dict:
                                                multi_select_field_dict[attri].append(conf_val[0])
                                            else:
                                                multi_select_field_dict[attri] = conf_val
                                        elif attri == "plusBtn" or attri == "popUpOption":
                                            if attri in multi_select_field_dict:
                                                multi_select_field_dict[attri].update(conf_val)
                                            else:
                                                multi_select_field_dict[attri] = conf_val
                                        else:
                                            multi_select_field_dict[attri] = conf_val
                                else:
                                    pass

                                model_fields.append(field.name)
                                attributes = {}
                                if field.validators not in [None]:
                                    if len(field.validators) > 0:
                                        for key, value in (field.validators).items():
                                            z = key
                                            if z == "MinLengthValidator":
                                                x = value["limit_value"]
                                                attributes["minlength"] = x
                                            elif z == "MaxLengthValidator":
                                                x = value["limit_value"]
                                                attributes["maxlength"] = x

                                """Add field attributes from front end"""

                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        value = reorder_js(value)
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""

                                is_autopopulated_field = False
                                if "data-jsattr" in attributes:
                                    for g in attributes["data-jsattr"]:
                                        if g.get("parentvalue") == "Auto-populate Constant":
                                            if not g["cases"] and g.get("allow_edit_c") == "no":
                                                is_autopopulated_field = True
                                            else:
                                                pass
                                        if g.get("parentvalue") == "Auto-populate":
                                            if not g["cases"] and g.get("allow_edit") == "no":
                                                autopopulate_fields.extend(
                                                    g["finaljsattr"][0][0]["value"]["depField"]
                                                )
                                            else:
                                                pass
                                        else:
                                            continue
                                else:
                                    pass

                                if is_autopopulated_field or field.name in autopopulate_fields:
                                    autopopulate_attr = "data-is-autopopulate='yes'"
                                else:
                                    autopopulate_attr = "data-is-autopopulate='no'"

                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                classs = "textinput textInput form-control"
                                choice = ""
                                foreign = 0
                                js_foreign_table = ""
                                js_foreign_column = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """

                                y = getattr(field, "choices")
                                if (
                                    field.name
                                    in create_view_tab_body_content["Search_fields"]["search_fields"]
                                ):
                                    classs = classs + " search_enabled"
                                if field.name in comparable_dict["char_col"]:
                                    classs = classs + " character_field"
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                display = ""
                                form_field_attr = ""
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                stylecss = 'style="display:none"'
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if field.computed_field:
                                    if field.editable in ["0", 0, "False", False]:
                                        comp_class = ""
                                    else:
                                        comp_class = "compfield_dis"
                                else:
                                    comp_class = ""
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""

                                plus_btn_req = ""
                                additionalInfoBtn_req = ""
                                for ke, va in temp_mul_config.items():
                                    if ke == "plusBtn":
                                        if va.get(field.name):
                                            plus_btn_req = ""
                                        else:
                                            plus_btn_req = "display:none;"
                                    if ke == "additionalInfoBtn":
                                        additionalInfoBtn_req = f"""additionalInfoBtn = "{va}" """

                                choice = f"<input {cases_attr} {restrict_locked} {placeholder.format(ptext=field.verbose_name+mand)} type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' class='{classs} p-2 {check_validForm_now} {comp_class}  {column_validator} {restict_min_class}' data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' data-columnb_val='{json.dumps(column_validator_cols_dict)}'  {form_field_attr} {req} {data_table} style='display:none;' data-car_mand='{restrict_mand}' {serverside_attribute} data-fieldType='MultiselectField' data-connectedSelectField='{element_id}_{field.name}_unique'>"

                                choice2 = f"""<select {placeholder.format(ptext=field.verbose_name+mand)} {cases_attr} {restrict_locked} {att1} {autopopulate_attr} data-col='{field.name}' data-id='{element_id}' data-master='{field.name}' class="form-control select2 {comp_class} {column_validator}  {restict_min_class}" id='{element_id}_{field.name}_unique' {embedded_noneditable_attr} {att} name='table' {form_field_attr} {data_table}  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' multiple data-columnb_val='{json.dumps(column_validator_cols_dict)}' data-car_mand='{restrict_mand}' {additionalInfoBtn_req}>"""
                                if not is_server_side_fk_field:
                                    choice2 = (
                                        choice2 + f"<option value='----' selected>----</option></select>"
                                    )
                                else:
                                    choice2 = choice2 + f"</select>"

                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + " " + f"required"
                                if choice2.startswith("<select"):
                                    if grid_layout_config is not None:
                                        if grid_layout_config["grid_layout_on_off"] == True:
                                            html = (
                                                html
                                                + f"""<style>
                            #{element_id}_{field.name}_unique + span li
                            """
                                                + """ { """
                                                + f"""
                              {create_view_grid_layout(grid_layout_config,'date_input',field.name)['styling'].replace("'","")}
                            """
                                                + """} """
                                                + f"""
                            #{element_id}_{field.name}_unique + .select2-container--default .select2-selection--multiple
                            """
                                                + """ { """
                                                + f"""
                              {create_view_grid_layout(grid_layout_config,'input',field.name)['styling'].replace("'","")}

                            """
                                                + """}

                            </style> """
                                            )

                                if field.editable:
                                    if carousel is True:
                                        for i in carousel_dict:
                                            carousel_list = carousel_dict[i]
                                            if field.name in carousel_list:
                                                for j, fld in enumerate(carousel_list):
                                                    if fld == field.name:
                                                        if edit_labels != "" and field.name in edit_labels:
                                                            carousel_list[j] = (
                                                                f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> <button class="plusBtn float-right" onclick="multiselectShow_{element_id}.call(this,'{field.name}','{element_id}')" data-col='{field.name}' type='button' style='position:relative; border: transparent; border-radius:10px;{plus_btn_req}'> &#10010; </button></label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> {choice2} </div> </div>"""
                                                            )
                                                        else:
                                                            carousel_list[j] = (
                                                                f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> <button class="plusBtn float-right" onclick="multiselectShow_{element_id}.call(this,'{field.name}','{element_id}')" data-col='{field.name}' type='button' style='position:relative; border: transparent; border-radius:10px;{plus_btn_req}'> &#10010; </button></label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> {choice2} </div> </div>"""
                                                            )
                                                carousel_dict[i] = carousel_list
                                    else:
                                        if edit_labels != "" and field.name in edit_labels:
                                            field_label_name = edit_labels[field.name]
                                        else:
                                            field_label_name = field.verbose_name

                                        if is_server_side_fk_field:
                                            form_element_html[field.name] = (
                                                f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='input-group'> {choice} {choice2} <div class='input-group-append input-group-text' style='padding: .25rem .65rem;'><button class='btn' style='padding:0;' type='button' data-toggle='modal'  data-target='#id_{field.name}_{element_id}_serverside_modal'><i class='fas fa-search ihover thin-icon' style='cursor:pointer;color: #495057;font-size: 17px;'></i></button></div> </div> </div> </div>"""
                                            )
                                        else:
                                            form_element_html[field.name] = (
                                                f""" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label {vlabel} for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field_label_name}<span class='asteriskField'>{mand}</span> <button class="plusBtn float-right" onclick="multiselectShow_{element_id}.call(this,'{field.name}','{element_id}')" data-col='{field.name}' type='button' style='position:relative; border: transparent; border-radius:10px;{plus_btn_req}'> &#10010; </button></label><div id='{field.name}_{element_id}_div' class=''> {choice}</div> {choice2} </div> </div>"""
                                            )

                                        if field_height_style:
                                            form_element_html[field.name] += (
                                                f"""<style>
                            #{element_id}_{field.name}_unique + span li
                            """
                                                + """ { """
                                                + f"""
                              {field_height_style}
                            """
                                                + """} """
                                                + f"""
                            #{element_id}_{field.name}_unique + .select2-container--default .select2-selection--multiple
                            """
                                                + """ { """
                                                + f"""
                              {field_height_style}

                            """
                                                + """}

                            </style> """
                                            )

                                        if is_server_side_fk_field:
                                            form_element_html[
                                                field.name
                                            ] += f"""
                              <div style='z-index:1060;' class='modal fade' id='id_{field.name}_{element_id}_serverside_modal' tabindex='-1' role='dialog' data-focus='false' aria-hidden='true'>
                                <div class='modal-dialog modal-dialog-centered modal-md' role='document'>
                                  <div class='modal-content'>
                                    <div class='modal-header'>
                                      <h5 class='modal-title'>Select from below</h5>
                                      <button type="button" class="btn btn-light " data-dismiss="modal" aria-label="Close" id="closeCreateUsers" style="height: 27px;width: 27px;padding: 0;">
                                        <i class="fa-solid fa-times"></i>
                                      </button>
                                    </div>
                                    <div class='modal-body' style="padding: 2rem 8%">
                                      <table id="id_{field.name}_{element_id}_serverside_table"  class="table hover table-bordered">
                                        <thead>
                                          <tr></tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                      </table>
                                    </div>
                                    <div class='modal-footer'>
                                      <button type='button' class='btn btn-primary buttonfooter' id='id_{field.name}_{element_id}_serverside_save' >Save</button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            """
                                        else:
                                            pass
                            if field.get_internal_type() == "RTFField":
                                model_fields.append(field.name)
                                attributes = {}
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                    pointer_events = "style='cursor:not-allowed;'"
                                    cursor_attribute = "cursor:not-allowed;"
                                    on_click_attribute = ""
                                else:
                                    restrict_locked = ""
                                    pointer_events = ""
                                    cursor_attribute = "cursor:pointer;"
                                    on_click_attribute = 'onclick="rftField.call(this)"'

                                if foreign == 1:
                                    choice = f"""<select {cases_attr} {att1} name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' data-element_id='{element_id}' class="form-control select2 {check_validForm_now} {column_validator} {restict_min_class}" {form_field_attr} data-car_mand='{restrict_mand}' {req} {data_table}>"""
                                    if not show_labels:
                                        choice = (
                                            choice
                                            + f"<option selected value='----'>{field.verbose_name.title() + mand}</option>"
                                        )
                                    else:
                                        choice = choice + f"<option value='----' selected>----</option>"
                                    if edit:
                                        if not list_view_flag:
                                            choice_list = []
                                        elif js_foreign_table and js_foreign_column:
                                            choice_list = read_data_func(
                                                request_user,
                                                {
                                                    "inputs": {
                                                        "Data_source": "Database",
                                                        "Table": js_foreign_table,
                                                        "Agg_Type": "DISTINCT",
                                                        "Columns": [js_foreign_column],
                                                    },
                                                    "condition": [],
                                                },
                                            )[js_foreign_column].tolist()
                                        for value in choice_list:
                                            choice += f"<option value='{value}'>{value}</option>"
                                    choice += """</select>"""
                                else:
                                    choice = f"""<input type='text' name='{name_with_table}' {att} id='id_{field.name}_{element_id}' data-field_name='{field.name}' data-element_id='{element_id}' class='{classs} p-2' {form_field_attr} {req} {data_table} style='display:none;'><p title="RTF editor" {on_click_attribute} {pointer_events}><i name="rtfeditor" value="" class="fa fa-edit ihover javaSC thin-icon" style="font-size:15px;{cursor_attribute}"></i></p>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                        )

                            if field.get_internal_type() == "PrivacyField":
                                model_fields.append(field.name)
                                attributes = {}
                                privacy_config = json.loads(field.privacy_config)
                                """Add field attributes from front end"""
                                if field.name in fields_to_be_displayed:
                                    for i in attrlist:
                                        for atr in i:
                                            if field.name == atr:
                                                for j in i[atr]:
                                                    cssattrlist = j.get("cssattr")
                                                    jsattrlist = j.get("jsattr")
                                                    if cssattrlist is not None:
                                                        for elements in cssattrlist:
                                                            key = elements["attr"]
                                                            value = elements["value"]
                                                            dic = {key: value}
                                                            attributes.update(dic)
                                                    if jsattrlist is not None:
                                                        key = "data-jsattr"
                                                        value = jsattrlist
                                                        dic = {key: value}
                                                        attributes.update(dic)
                                att = ""
                                att1 = ""
                                mand = ""
                                if len(direct_relation) > 0:
                                    for k in direct_relation:
                                        if k["parent"] == model_name:
                                            if k["column"] == field.name:
                                                name_with_table = field.name
                                                duplicate_column.append(field.name)
                                                break
                                            else:
                                                name_with_table = model_name + "__" + field.name
                                        else:
                                            name_with_table = model_name + "__" + field.name
                                else:
                                    name_with_table = model_name + "__" + field.name
                                data_table = f"data-tablename='{model_name}'"
                                foreign = 0
                                classs = "textinput textInput form-control"
                                choice = ""
                                if field.null == 0:
                                    req = "required"
                                else:
                                    req = ""
                                if linked_bool:
                                    for key, val in attributes.items():
                                        if key == "data-jsattr":
                                            for i1 in val:
                                                if i1.get("table") and i1.get("column"):
                                                    foreign = 1
                                                    att1 = (
                                                        att1 + " " + f"""data-table = "{i1.get('table')}" """
                                                    )
                                                    att1 = (
                                                        att1
                                                        + " "
                                                        + f"""data-column = "{i1.get('column')}" """
                                                    )
                                                    if i1.get("default"):
                                                        defval = i1.get("default")
                                                    else:
                                                        defval = "def"
                                                    att1 = (
                                                        att1 + " " + f"""data-default_value = "{defval}" """
                                                    )
                                                    js_foreign_table = i1.get("table")
                                                    js_foreign_column = i1.get("column")
                                        if key == "data-jsattr":
                                            val = json.dumps(val, separators=(",", ":"))
                                            att = att + "onchange='jsChange.call(this)'"
                                        att = att + " " + f"""{key} = '{val}' """
                                if not fields_to_be_displayed:
                                    if field.null == 1:
                                        pass
                                    else:
                                        att = att + f"required"
                                display = ""
                                form_field_attr = ""
                                if field.null == 0:
                                    mand = "*"
                                else:
                                    if field.name in show_hide_col:
                                        display = "display:none;"
                                if form_field:
                                    form_field_attr = []
                                    for form_field1 in form_field:
                                        for i in list(form_field1.values()):
                                            if field.name in i["selectedColumn"]:
                                                if field.null == 1:
                                                    display = "display:none;"
                                            if field.name == i["column"]:
                                                form_field_attr.append(i)
                                    form_field_attr = f"""data-form_js='{json.dumps(form_field_attr,separators=(",",":"))}' data-element_id = '{element_id}' """
                                if field.name in editNS_field:
                                    display = "display:none;"
                                if field.name in restrict_field:
                                    restrict_locked = "disabled"
                                else:
                                    restrict_locked = ""

                                choice = f"""<select {cases_attr} {att1} name='{name_with_table}' {att} {restrict_locked} data-columnb_val='{json.dumps(column_validator_cols_dict)}'  data-colb-master='{json.dumps(column_validator_cols_master_dict)}' data-field_name='{field.name}' id='id_{field.name}_{element_id}' {embedded_noneditable_attr} data-element_id='{element_id}' class="form-control select2 {check_validForm_now} {column_validator} {restict_min_class}" {form_field_attr} data-car_mand='{restrict_mand}' {req} {data_table} multiple><option value='all'>Restrict all</option>"""

                                if privacy_config:
                                    if privacy_config.get("privacy_option"):
                                        privacy_option = privacy_config["privacy_option"]

                                if privacy_option == "users":
                                    choiceitems = (
                                        read_data_func(
                                            request_user,
                                            {
                                                "inputs": {
                                                    "Data_source": "Database",
                                                    "Table": "user",
                                                    "Columns": ["username"],
                                                },
                                                "condition": [],
                                            },
                                        )
                                    ).username.tolist()
                                elif privacy_option == "master":
                                    choiceitems = read_data_func(
                                        request_user,
                                        {
                                            "inputs": {
                                                "Data_source": "Database",
                                                "Agg_Type": "DISTINCT",
                                                "Table": privacy_config["master_table"],
                                                "Columns": [privacy_config["group_field"]],
                                            },
                                            "condition": [],
                                        },
                                    )
                                    choiceitems = choiceitems[privacy_config["group_field"]].tolist()
                                else:
                                    choiceitems = (
                                        read_data_func(
                                            request_user,
                                            {
                                                "inputs": {
                                                    "Data_source": "Database",
                                                    "Table": "auth_group",
                                                    "Columns": ["name"],
                                                },
                                                "condition": [],
                                            },
                                        )
                                    ).name.tolist()

                                for opt in choiceitems:
                                    choice += f"<option value='{opt}'>{opt}</option>"
                                choice += """</select>"""

                                if carousel is True:
                                    for i in carousel_dict:
                                        carousel_list = carousel_dict[i]
                                        if field.name in carousel_list:
                                            for j, fld in enumerate(carousel_list):
                                                if fld == field.name:
                                                    if edit_labels != "" and field.name in edit_labels:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                                        )
                                                    else:
                                                        carousel_list[j] = (
                                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                                        )
                                            carousel_dict[i] = carousel_list
                                else:
                                    if edit_labels != "" and field.name in edit_labels:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{edit_labels[field.name]}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                        )
                                    else:
                                        form_element_html[field.name] = (
                                            f" <div class='form-group {field_class_attr}' style='{field_style_attr};{display}'> <div id='div_id_{field.name}' class='form-group'><label for='id_{field.name}_{element_id}' class='requiredField' {vlabel}>{field.verbose_name}<span class='asteriskField'>{mand}</span> </label><div id='{field.name}_{element_id}_div' class='' style='position:relative;'> {choice}</div> </div> </div>"
                                        )
                                privacy_field_script += f"""
                          <script>
                            $.ajax({{
                              url: `/users/${{urlPath}}/dynamicVal/`,
                              data: {{
                                  'operation': 'fetchPrivacyFiedList',
                                  'privacy_option': '{privacy_option}',
                                  'privacy_config': JSON.stringify({privacy_config})
                                }},
                                type: "POST",
                                dataType:"json",
                                success:function(data){{
                                  $("#id_{field.name}_{element_id}").empty();
                                  $("#id_{field.name}_{element_id}").append("<option value='all'>Restrict all</option>")
                                  for (user of data.user_list) {{
                                    $("#id_{field.name}_{element_id}").append(`
                                      <option value='${{user}}'>${{user}}</option>
                                    `)
                                  }};
                                }}, error: ()=>{{}}
                            }});
                          </script>
                        """
        for f_fieldname, f_config in all_fk_dict.items():
            if len(f_config["finaljsattr"]) > 3:
                if f_config["finaljsattr"][3][0].get("config"):
                    for i in f_config["finaljsattr"][3][0]["config"]:
                        if i["inputFormColumn"] in source_target_dict:
                            source_target_dict[i["inputFormColumn"]].append(i["column_name"])
                        else:
                            source_target_dict[i["inputFormColumn"]] = [i["column_name"]]
            else:
                pass
            if len(f_config["finaljsattr"]) > 4:
                if f_config["finaljsattr"][4][0].get("config"):
                    for i in f_config["finaljsattr"][4][0]["config"]:
                        if i["inputFormColumn"] in source_target_dict:
                            source_target_dict[i["inputFormColumn"]].append(f_fieldname)
                        else:
                            source_target_dict[i["inputFormColumn"]] = [f_fieldname]
            else:
                pass
        if source_target_dict:
            fk_script_ = f"""
          <script>
          var None = undefined;
          var all_fk_dict_js = {all_fk_dict}
          for (let [key,value] of Object.entries({source_target_dict})){{

            $(`#id_${{key}}_{element_id}`).on("change", function(){{

                for(let i in value){{
                    let temp_con_dict = all_fk_dict_js[value[i]]

                    let master_fk_config = temp_con_dict["finaljsattr"][3][0]["config"]
                    let column_fk_config = temp_con_dict["finaljsattr"][4][0]["config"]
                    let allok_master = 'no'
                    let all_ok_column = "no"

                    for(let ii=0;ii<master_fk_config.length;ii++){{

                        if($(`#id_${{master_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == '' || $(`#id_${{master_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == null || $(`#id_${{master_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == "---" || $(`#id_${{master_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == "----"){{
                            allok_master = 'no'
                            break

                        }}else{{
                            allok_master = "yes"
                        }}
                    }}

                    if(allok_master=="yes"){{
                        let jsattr= temp_con_dict

                        if(!jsattr.hasOwnProperty("cases")){{
                            jsattr["cases"] = []
                        }}

                        foreignKeyJs1($(`#id_${{value[i]}}_{element_id}`),jsattr)
                    }}


                    for(let ii=0;ii<column_fk_config.length;ii++){{

                        if($(`#id_${{column_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == '' || $(`#id_${{column_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == null || $(`#id_${{column_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == "---" || $(`#id_${{column_fk_config[ii]["inputFormColumn"]}}_{element_id}`).val() == "----"){{
                            all_ok_column = 'no'
                            break

                        }}else{{
                            all_ok_column = "yes"
                        }}
                    }}

                    if(all_ok_column=="yes"){{
                        let jsattr= temp_con_dict

                        if(!jsattr.hasOwnProperty("cases")){{
                            jsattr["cases"] = []
                        }}

                        foreignKeyJs1($(`#id_${{value[i]}}_{element_id}`),jsattr)
                    }}

                }}
            }})
        }}

          </script>
          """
        if iden:
            return html, ""
        """ Code to check if the user has defined the fields to be displayed on the front end """
        if not fields_to_be_displayed:
            remove_fields = [
                "created_by",
                "modified_by",
                "created_date",
                "modified_date",
                "active_from",
                "active_to",
            ]
            model_fields_final = [i for i in model_fields if i not in remove_fields]
            fields_to_be_displayed = model_fields_final
        else:
            fields_to_be_displayed = fields_to_be_displayed
        if len(dropped_field) > 0:
            fields_to_be_displayed = [i for i in fields_to_be_displayed if i not in dropped_field]
        if restrict_field:
            if len(restrict_field) > 0:
                fields_to_be_displayed = [i for i in fields_to_be_displayed if i not in restrict_field]
        """ Code ends """

        form_buttons_html = {}
        if carousel is True:
            first_active = "active"
            caro_html = ""
            for ci in carousel_dict:
                caro_html += f"""<div class="carousel-item {first_active}">
                          <div class="row">
                          <div class="col-md-12 ml-1 mb-3 form-row" style="display:inline-flex">
                        """
                for cix in carousel_dict[ci]:
                    caro_html += cix
                    first_active = ""
                caro_html += "</div></div></div>"
            caro_html = caro_html + """</div></div></div></div></section>"""
            html = html.replace("<carousel-to-append>", caro_html)
        createViewButtonStyling = create_view_tab_body_content["Category_attributes"]["Template"].get(
            "createViewStylingValues"
        )
        embededComputationCreatView = create_view_tab_body_content["Category_attributes"]["Template"].get(
            "embededComputationCreatView"
        )
        if showsave is True:
            form_buttons_html["default"] = (
                f"<input type='hidden' name='tablename' value='{Tablename}'> <input type='hidden' name='tableCol' value='{columnMappedTable}'> <input type='hidden' name='pr_code' value='{getPrCodeFromElementId(element_id,request_user)}'> <input type='hidden' name='elementid' value='{element_id}'> <input type='hidden' id='hidden_recurr_{element_id}' name='recurr_config'> <input type='hidden' name='approval_level_change_comment_edit' value=''>"
            )
            if template_name == "Comparable":
                comparable_dict = json.dumps(comparable_dict)

                form_buttons_html["Compare With Existing"] = (
                    f"<div class='form-buttons'><input type='button' name='save' value='Compare With Existing' data-compare-context='{comparable_dict}' class='btn btn-primary buttonstyling' data-color='var(--primary-color)' id='compare_existing_{element_id}' style='margin-right:4px;'></div>"
                )
                if createview_preview_mode:
                    if edit:
                        form_buttons_html["Save"] = (
                            f"<div class='form-buttons'><input type='button' name='submit' value='Save' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='editPreviewMode(this)' disabled> </div>"
                        )
                    else:
                        form_buttons_html["Save"] = (
                            f"<div class='form-buttons'><input type='button' value='Save' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewSave(this)' disabled> </div>"
                        )
                else:
                    form_buttons_html["Save"] = (
                        f"<div class='form-buttons'><input type='submit' name='submit' value='Save' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' ></div>"
                    )
            else:
                if master_preview_mode:
                    if createview_preview_mode:
                        function_check = button_styling(createViewButtonStyling, "save")
                        if function_check is not None:
                            styling_to_put = function_check["styling"].replace("'", "")
                            if edit:
                                form_buttons_html["Save"] = (
                                    f"<div class='form-buttons'><button type='button' value='Save' name='submit' class='btn btn-primary buttonstyling button_standard_save {function_check['class']}' id='savebutton_{element_id}' data-color='var(--primary-color)' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='editPreviewMode(this)' style='margin-left:10px; "
                                    + f"{styling_to_put}"
                                    + f"'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                                )
                            else:
                                form_buttons_html["Save"] = (
                                    f"<div class='form-buttons'><button type='button' value='Save' class='btn btn-primary buttonstyling button_standard_save {function_check['class']}' id='savebutton_{element_id}' data-color='var(--primary-color)' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewSave(this)' style='margin-left:10px;"
                                    + f"{styling_to_put}"
                                    + f"'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                                )
                        else:
                            if edit:
                                form_buttons_html["Save"] = (
                                    f"<div class='form-buttons'><button type='button' value='Save' name='submit' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='editPreviewMode(this)' style='margin-left:10px;'>Save</button></div>"
                                )
                            else:
                                form_buttons_html["Save"] = (
                                    f"<div class='form-buttons'><button type='button' value='Save' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewSave(this)' style='margin-left:10px;'>Save</button></div>"
                                )
                    elif createview_pdf_mode:
                        function_check = button_styling(createViewButtonStyling, "save")
                        if function_check is not None:
                            styling_to_put = function_check["styling"].replace("'", "")
                            form_buttons_html["Save"] = (
                                f"<div class='form-buttons'><button type='button' style='margin-left:10px;"
                                + f"{styling_to_put}"
                                + f"' value='Save' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} class='btn btn-primary buttonstyling button_standard_save {function_check['class']}' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewPdfSave(this)'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                            )
                        else:
                            form_buttons_html["Save"] = (
                                f"<div class='form-buttons'><button type='button' style='margin-left:10px;' value='Save' class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewPdfSave(this)'>Save</button></div>"
                            )
                else:
                    if carousel_view_min_fields_dict:
                        btn_type = "button"
                        btn_name = "button1"
                    else:
                        btn_type = "submit"
                        btn_name = "submit"
                    if carousel_view_min_fields_dict:
                        if isinstance(carousel_view_min_fields_dict, list):
                            func_name = "onclick='checkRequired_save.call(this)'"
                        elif isinstance(carousel_view_min_fields_dict, dict):
                            func_name = "onclick='checkRequired.call(this)'"
                    else:
                        func_name = ""
                    function_check = button_styling(createViewButtonStyling, "save")
                    if function_check is not None:
                        styling_to_put = function_check["styling"].replace("'", "")
                        form_buttons_html["Save"] = (
                            f"<div class='form-buttons'><button type={btn_type} name={btn_name} {func_name} value='Save' data_min_no={restrict_min_no_fields} class='btn btn-primary buttonstyling button_standard_save {function_check['class']}' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id='savebutton_{element_id}' data_min_fields='{json.dumps(carousel_view_min_fields_dict)}' data-jsvalidation_createview_config='{json.dumps(jsvalidation_createview_config)}' data-curr_user='{request_user.user.username}' data-dtype='{json.dumps(columnListDtype)}' data-color='var(--primary-color)' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' style='margin-left:10px;"
                            + f"{styling_to_put}"
                            + f"'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                        )
                    else:
                        form_buttons_html["Save"] = (
                            f"<div class='form-buttons'><button type={btn_type} name={btn_name} {func_name} value='Save' data_min_no={restrict_min_no_fields} class='btn btn-primary buttonstyling button_standard_save' id='savebutton_{element_id}' data_min_fields='{json.dumps(carousel_view_min_fields_dict)}' data-jsvalidation_createview_config='{json.dumps(jsvalidation_createview_config)}' data-curr_user='{request_user.user.username}' data-dtype='{json.dumps(columnListDtype)}' data-color='var(--primary-color,var(--primary,darkgoldenrod))' data-table-name='{Tablename}' data-template-name='{template_name}' data-element-id='{element_id}' style='margin-left:10px;'>Save</button></div>"
                        )
            form_buttons_html[
                "Save"
            ] += f"""
              <div class="modal fade bd-example-modal-sm" id="creation_in_progress_{element_id}" style="" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-lg-center modal-dialog-centered">
                  <div class="modal-content" style="width:350px; padding-top:1.5rem; padding-bottom:1.5rem; margin:auto;">
                    <div class="modal-body" style="display: flex; text-align: center; justify-content: center; flex-direction: column; align-items: center;">
                      <div class="loader2" style="margin:auto;"></div>
                      <h6 style="font-weight: 200;font-family: var(--font-family); text-align:center;margin-top:14px; margin-bottom:unset;">Saving your data.Please wait...</h6>
                      <style>
                        .loader2 {{
                          --c1:var(--primary-color);
                          --c2:var(--primary-color);
                          width: 25px;
                          height: 50px;
                          border-top: 4px solid var(--c1);
                          border-bottom: 4px solid var(--c1);
                          background: linear-gradient(90deg, var(--c1) 2px, var(--c2) 0 5px,var(--c1) 0) 50%/7px 8px no-repeat;
                          display: grid;
                          overflow: hidden;
                          animation: l5-0 2s infinite linear;
                        }}
                        .loader2::before,
                        .loader2::after {{
                          content: "";
                          grid-area: 1/1;
                          width: 75%;
                          height: calc(50% - 4px);
                          margin: 0 auto;
                          border: 2px solid var(--c1);
                          border-top: 0;
                          box-sizing: content-box;
                          border-radius: 0 0 40% 40%;
                          -webkit-mask:
                            linear-gradient(#000 0 0) bottom/4px 2px no-repeat,
                            linear-gradient(#000 0 0);
                          -webkit-mask-composite: destination-out;
                                  mask-composite: exclude;
                          background:
                            linear-gradient(var(--d,0deg),var(--c2) 50%,#0000 0) bottom /100% 205%,
                            linear-gradient(var(--c2) 0 0) center/0 100%;
                          background-repeat: no-repeat;
                          animation: inherit;
                          animation-name: l5-1;
                        }}
                        .loader2::after {{
                          transform-origin: 50% calc(100% + 2px);
                          transform: scaleY(-1);
                          --s:3px;
                          --d:180deg;
                        }}
                        @keyframes l5-0 {{
                          80%  {{transform: rotate(0)}}
                          100% {{transform: rotate(0.5turn)}}
                        }}
                        @keyframes l5-1 {{
                          10%,70%  {{background-size:100% 205%,var(--s,0) 100%}}
                          70%,100% {{background-position: top,center}}
                        }}
                      </style>
                    </div>
                  </div>
                </div>
              </div>"""
        if embededComputationCreatView is not None:
            for i in embededComputationCreatView:
                for j in embededComputationCreatView[i]:
                    if embededComputationCreatView[i][j][2] == "auto_trigger":
                        form_buttons_html["Run Computation"] = (
                            f"<div class='form-buttons'><button style='display:none;' name='embeded_computation' type='button' data-list='{json.dumps(embededComputationCreatView)}'  data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2' onclick='embededComputation(this)' data-elementID='{element_id}' id='calval_embededComputation_{element_id}' data-color='var(--primary-color)'>Run Computation</button></div>"
                        )
                    elif embededComputationCreatView[i][j][2] == "manual_trigger":
                        form_buttons_html["Run Computation"] = (
                            f"<div class='form-buttons'><button name='embeded_computation' type='button' data-list='{json.dumps(embededComputationCreatView)}'  data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2' onclick='embededComputation(this)' data-elementID='{element_id}' id='calval_embededComputation_{element_id}' data-color='var(--primary-color)'>Run Computation</button></div>"
                        )
        if auto_compute_mode is True:
            form_buttons_html["Auto-Refresh Computation"] = (
                f"<div class='form-buttons'><button type='button' style ='display:none;' name='compValue' value='Refresh Computation' data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2' onclick='calVal.call(this)' data-elementID='{element_id}' id='autoCompute_{element_id}' data-color='var(--primary-color)'>Computation</button></div>"
            )
        if showDraftsave is True:
            function_check = button_styling(createViewButtonStyling, "saveasdraft")
            if function_check is not None:
                form_buttons_html["Save as Draft"] = (
                    f"<div class='form-buttons'><button type='submit' style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} name='submit' value='Save as Draft' data-entry='New' class='btn btn-primary buttonstyling ml-2 {function_check['class']}' id='saveDraftbutton_{element_id}' formnovalidate>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                )
            else:
                form_buttons_html["Save as Draft"] = (
                    f"<div class='form-buttons'><button type='submit' name='submit' value='Save as Draft' data-entry='New' class='btn btn-primary buttonstyling ml-2' id='saveDraftbutton_{element_id}' formnovalidate>Save as Draft</button></div>"
                )
            function_check = button_styling(createViewButtonStyling, "viewdraftversions")
            if column_alignment_config.get("view_draft_config"):
                view_draft_ca_config = json.dumps(column_alignment_config["view_draft_config"])
            else:
                view_draft_ca_config = "{}"
            if function_check is not None:
                form_buttons_html["View Draft Versions"] = (
                    f"<div class='form-buttons'><button style={function_check['styling']} data-column-alignment='{view_draft_ca_config}' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type='button' name='previewButton' value='View Draft Versions' data-table-name='{Tablename}' data-draft_cols='{viewDraft_columns}' data-color='var(--primary-color)' class='btn btn-primary buttonstyling ml-2 {function_check['class']}' id='previewDraft_{element_id}' viewRTFCB_mode='{viewRTFCB_mode}'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                )
            else:
                form_buttons_html["View Draft Versions"] = (
                    f"<div class='form-buttons'><button type='button' name='previewButton' data-column-alignment='{view_draft_ca_config}' value='View Draft Versions' data-table-name='{Tablename}' data-draft_cols='{viewDraft_columns}' data-color='var(--primary-color)' class='btn btn-primary buttonstyling ml-2' id='previewDraft_{element_id}' viewRTFCB_mode='{viewRTFCB_mode}'>View Draft Versions</button></div>"
                )
            function_check = button_styling(createViewButtonStyling, "resetdraftstatus")
            if function_check is not None:
                form_buttons_html["Reset Draft Status"] = (
                    f"<div class='form-buttons'><button style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type='button' name='resetDraft' value='Reset Draft Status ' data-table-name='{Tablename}' data-color='var(--primary-color)' class='btn btn-primary buttonstyling ml-2 {function_check['class']}' id='resetDraft_{element_id}'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                )
            else:
                form_buttons_html["Reset Draft Status"] = (
                    f"<div class='form-buttons'><button type='button' name='resetDraft' value='Reset Draft Status ' data-table-name='{Tablename}' data-color='var(--primary-color)' class='btn btn-primary buttonstyling ml-2' id='resetDraft_{element_id}'>Reset Draft Status</button></div>"
                )

        if showCustomValidationDev is True and showCustomValidation is False:
            form_buttons_html[
                "default"
            ] += f"""<input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">"""

        if showCustomValidation is True:
            function_check = button_styling(createViewButtonStyling, "customvalidation")
            if function_check is not None:
                form_buttons_html["Custom Validation"] = (
                    f"""<div class='form-buttons'><button style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="customValidationList{element_id}"  name="customValidation"  type="button" class="btn btn-primary buttonstyling ml-2 customValidationButton {function_check['class']}"  data-table-name='{Tablename}' data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" data-save-config="" >{function_check['iconAppend']} {function_check['changeText']}</button></div>"""
                )
            else:
                form_buttons_html[
                    "Custom Validation"
                ] = f"""<div class='form-buttons'><input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">
            <button id="customValidationList{element_id}"  name="customValidation"  type="button" class="btn btn-primary buttonstyling ml-2  customValidationButton"  data-table-name='{Tablename}' data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" data-save-config="" >&nbsp;Custom Validation</button></div>"""

        if showComputedVal is True:
            function_check = button_styling(createViewButtonStyling, "refreshcomputation")
            if function_check is not None:
                form_buttons_html["Refresh Computation"] = (
                    f"<div class='form-buttons'><button style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type='button' name='compValue' value='Refresh Computation' data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2 {function_check['class']}' onclick='calVal.call(this)' data-elementID='{element_id}' id='calCompVal_{element_id}' data-color='var(--primary-color)'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                )
            else:
                form_buttons_html["Refresh Computation"] = (
                    f"<div class='form-buttons'><button type='button' name='compValue' value='Refresh Computation' data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2' onclick='calVal.call(this)' data-elementID='{element_id}' id='calCompVal_{element_id}' data-color='var(--primary-color)'>Refresh Computation</button></div>"
                )

        if showRecurrButton:
            form_buttons_html["Add recurrence"] = (
                f"<div class='form-buttons'><button type='button' name='compRecurr' value='Recurrence' data-table-name='{Tablename}' class='btn btn-primary buttonstyling ml-2' onclick='showRecurrModal.call(this)' data-elementID='{element_id}' id='RecurVal_{element_id}' data-color='var(--primary-color)'>Add recurrence</button></div>"
            )

        if showHistoryView is True:
            if column_alignment_config.get("view_history_config"):
                view_history_ca_config = json.dumps(column_alignment_config["view_history_config"])
            else:
                view_history_ca_config = "{}"

            function_check = button_styling(createViewButtonStyling, "viewhistory")
            if function_check is not None:
                form_buttons_html[
                    "View History"
                ] = f"""<div class='form-buttons'><button style={function_check['styling']} data-column-alignment='{view_history_ca_config}' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}  name="viewHistoryCreate"  type="button" class="btn btn-primary buttonstyling  ml-1 {function_check['class']}"  data-table-name='{model_name}' data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"  data_history_cols='{viewHistory_columns}' data_history_display_cols = '{viewHistory_displayColumns_columns}' onclick="HistoryViewTable(this)" id="viewHistory_{element_id}" data-color='var(--primary-color)' viewRTFCB_mode='{viewRTFCB_mode}'>{function_check['iconAppend']} {function_check['changeText']}</button></div>

            <div class="modal fade" id="view_history_tabular"  role="dialog" data-focus="false" aria-labelledby="view_history_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>

            """
            else:
                form_buttons_html[
                    "View History"
                ] = f"""<div class='form-buttons'><button  name="viewHistoryCreate" data-column-alignment='{view_history_ca_config}' type="button" class="btn btn-primary buttonstyling  ml-1"  data-table-name='{model_name}' data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"  data_history_cols='{viewHistory_columns}' data_history_display_cols = '{viewHistory_displayColumns_columns}' onclick="HistoryViewTable(this)" id="viewHistory_{element_id}" data-color='var(--primary-color)' viewRTFCB_mode='{viewRTFCB_mode}'>&nbsp;View History</button></div>
            <div class="modal fade" id="view_history_tabular"  role="dialog" data-focus="false" aria-labelledby="view_history_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div> """
        if showTransaction is True:
            function_check = button_styling(createViewButtonStyling, "viewtransactionstatus")
            if function_check is not None:
                form_buttons_html["View Transaction Status"] = (
                    f"""<div class='form-buttons'><button style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}  name="viewTransaction"  type="button" class="btn btn-primary buttonstyling  ml-1 {function_check['class']}"  data-table-name='{Tablename}' data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >{function_check['iconAppend']} {function_check['changeText']}</button></div>"""
                )
            else:
                form_buttons_html["View Transaction Status"] = (
                    f"""<div class='form-buttons'><button  name="viewTransaction"  type="button" class="btn btn-primary buttonstyling  ml-1"  data-table-name='{Tablename}' data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >&nbsp;View Transaction Status</button></div>"""
                )
        if showRejectedEntries is True:
            if column_alignment_config.get("view_rejected_config"):
                view_rejected_ca_config = json.dumps(column_alignment_config["view_rejected_config"])
            else:
                view_rejected_ca_config = "{}"
            function_check = button_styling(createViewButtonStyling, "viewrejectedrecords")
            if function_check is not None:
                form_buttons_html[
                    "View Rejected Records"
                ] = f"""<div class='form-buttons'><button style={function_check['styling']} data-column-alignment='{view_rejected_ca_config}' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}  name="viewRejectedEntriesCreate" data-color='var(--primary-color)' type="button" class="btn btn-primary buttonstyling  ml-1 {function_check['class']}"  data-table-name='{model_name}' data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}" data_rejected_records_display_cols='{viewRejectedRecords_displayColumns_columns}'   onclick="ViewRejectedEntryTable(this)" id="rejectedRecords{element_id}" viewRTFCB_mode='{viewRTFCB_mode}'>{function_check['iconAppend']} {function_check['changeText']}</button></div>

            <div class="modal fade" id="rejected_records_tabular"  role="dialog" data-focus="false" aria-labelledby="rejected_records_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                 <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>

            """
            else:
                form_buttons_html[
                    "View Rejected Records"
                ] = f"""<div class='form-buttons'><button  name="viewRejectedEntriesCreate" data-column-alignment='{view_rejected_ca_config}' data-color='var(--primary-color)' type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{model_name}' data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}" data_rejected_records_display_cols='{viewRejectedRecords_displayColumns_columns}'  onclick="ViewRejectedEntryTable(this)" id="rejectedRecords{element_id}" viewRTFCB_mode='{viewRTFCB_mode}'>&nbsp;View Rejected Records</button></div>

            <div class="modal fade" id="rejected_records_tabular"  role="dialog" data-focus="false" aria-labelledby="rejected_records_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
            """

        # Approval Assignment Parameter Button
        if allow_approval_assingment != "disallow":
            form_buttons_html[
                "default"
            ] += f"""<input type="hidden" name="approvalAssignmentConfig" id="approvalAssignmentConfig{element_id}" value="{{}}">"""
            function_check = button_styling(createViewButtonStyling, "setApprovalParameters")
            if function_check is not None:
                form_buttons_html["Set Approval Parameters"] = (
                    f"""<div class='form-buttons'><button style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} name="approvalAssignmentParameter" data-controlLevel='{allow_approval_assingment}' data-color='var(--primary-color)' type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{Tablename}' data-toggle="modal" data-target="#approvalAssignmentParameterModal{element_id}" data-elementID="{element_id}" id="approvalAssignmentParameter{element_id}">{function_check['iconAppend']} {function_check['changeText']}</button></div>"""
                )
            else:
                form_buttons_html["Set Approval Parameters"] = (
                    f"""<div class='form-buttons'><button name="approvalAssignmentParameter" data-controlLevel='{allow_approval_assingment}' data-color='var(--primary-color)' type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{Tablename}' data-toggle="modal" data-target="#approvalAssignmentParameterModal{element_id}" data-elementID="{element_id}" id="approvalAssignmentParameter{element_id}">&nbsp;Set Approval Parameters</button></div>"""
                )
        else:
            pass

        if backbtn_:
            function_check = button_styling(createViewButtonStyling, "back")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                form_buttons_html["Back"] = (
                    f"<div class='form-buttons'><button onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type='button' data-color='var(--primary-color)' name='back' value='&#8592;' class='btn btn-primary buttonstylin  ml-1 {function_check['class']}' id='button-id-back{element_id}' onclick='goBack()' style='margin-bottom:10px; "
                    + f"{styling_to_put}"
                    + f"'>{function_check['iconAppend']} {function_check['changeText']}</button></div>"
                )
            else:
                form_buttons_html["Back"] = (
                    f"<div class='form-buttons'><button type='button' data-color='var(--primary-color)' name='back' value='&#8592;' class='btn btn-primary buttonstylin  ml-1' id='button-id-back{element_id}' onclick='goBack()' style='margin-bottom:10px;'>&#8592;</button></div>"
                )

        if carousel is True:
            html = (
                html
                + f"""<a class="btn btn-primary ml-1 mb-2" data_min_fields='{json.dumps(carousel_view_min_fields_dict)}' onclick="checkRequired.call(this)" href="#carouselExampleIndicators{element_id}" role="button" data-slide="prev">
                            <i class="fa fa-arrow-left pr-2"></i>Previous</a>
                            <a class="btn btn-primary ml-1 mb-2" data_min_fields='{json.dumps(carousel_view_min_fields_dict)}' onclick="checkRequired.call(this)" href="#carouselExampleIndicators{element_id}" role="button" data-slide="next">Next<i class="fa fa-arrow-right fa-lg pl-1"></i>
                            </a>"""
            )
        if len(custom_btn) > 0:
            for key, val in custom_btn.items():
                href_ = "#"
                href_link = ""
                if val["navigation"] == "Navigate":
                    if val["navigation_type"] != "In App":
                        href_ = val["link"]
                        href_link = href_
                    else:
                        pr_code = read_data_func(
                            request_user,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "NavigationSideBar",
                                    "Columns": ["item_code"],
                                },
                                "condition": [
                                    {
                                        "column_name": "item_group_name",
                                        "condition": "Equal to",
                                        "input_value": val["process"],
                                        "and_or": "AND",
                                    },
                                    {
                                        "column_name": "item_name",
                                        "condition": "Equal to",
                                        "input_value": val["subprocess"],
                                        "and_or": "",
                                    },
                                ],
                            },
                        ).iloc[0]["item_code"]
                        href_link = f"""Click to navigate to {val["subprocess"]}"""
                        href_ = f"""/users/{pr_code}/"""
                href_style = ""
                if val["navigation"] == "Idle":
                    href_style = "pointer-events: none;"
                form_buttons_html[
                    key
                ] = f"""<div class='form-buttons'>
                <a href="{href_}" name='{key}' value='{key}' data-color="{val["color"]}" href="{href_}" class='btn btn-primary' id='{key}__cbbutton{element_id}' style="background-color:{val["color"]};{href_style}" data-toggle="tooltip" title="{href_link}" target="_blank">{key}</a> </div>
            """
        fields_added = []
        buttons_added = []
        if sizing_placement_settings:
            for row, r_config in sizing_placement_settings.items():
                row_html = "<div class='form-row'>"
                for name, config in r_config.items():
                    if config["type"] == "field":
                        if form_element_html.get(name):
                            row_html += form_element_html[name]
                            fields_added.append(name)
                        else:
                            continue
                    else:
                        if form_buttons_html.get(name):
                            row_html += form_buttons_html[name]
                            buttons_added.append(name)
                        else:
                            continue
                if int(row) == no_of_rows - 1:
                    fields_left_out = set(form_element_html.keys()) - set(fields_added)
                    if fields_left_out:
                        for i in fields_left_out:
                            row_html += form_element_html[i]
                    else:
                        pass
                else:
                    pass
                row_html += "</div>"
                html += row_html
        else:
            row_html = "<div class='form-row'>"
            for field_html in form_element_html.values():
                row_html += field_html
            row_html += "</div>"
            html += row_html

        button_row = "<div class='row'>"
        if button_row_config:
            button_row += form_buttons_html["default"]
            for bt_config in button_row_config:
                if form_buttons_html.get(bt_config["name"]):
                    button_row += form_buttons_html[bt_config["name"]]
                    buttons_added.append(bt_config["name"])
                else:
                    continue
            buttons_left_out = set(form_buttons_html.keys()) - set(buttons_added)
            if buttons_left_out:
                for i in buttons_left_out:
                    if i != "default":
                        button_row += form_buttons_html[i]
                    else:
                        continue
            else:
                pass
        else:
            for btn_html in form_buttons_html.values():
                button_row += btn_html
        button_row += "</div>"
        html += button_row
        html += "</form>"
        if embededComputationCreatView is not None:
            for i in embededComputationCreatView:
                for j in embededComputationCreatView[i]:
                    if embededComputationCreatView[i][j][3] == "full_output":
                        html = (
                            html
                            + f"""
                <!-- Full Output Embeded Computation Modal -->
                <div class="modal" id="embededComputationCreateView_{element_id}">
                <div class="modal-dialog modal-xl modal-dialog-centered">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h6 class="modal-title" style="text-align:center;">Results</h6>
                      <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body" id="embededComputationCreateViewBody_{element_id}" style="max-height:38rem;overflow:auto;">

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
            </div>
            <!-- New-->
                """
                        )
        html = (
            html
            + f"""
          <div style="z-index:3000" class="modal fade" id="show_info_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
              <div class="modal-content">
                <div id="show_info_header{element_id}" class="modal-header">
                  <h5 class="modal-title"></h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body" id="show_info_body{element_id}">
                </div>
                <div class="modal-footer" id='show_info_footer{element_id}'>
                            <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                        </div>
          </div>

          </div>
          </div>

          <div class="modal" id="tablefield_modal_{element_id}" style= "height: 100vh;" >
                            <div class="modal-dialog modal-xl modal-dialog-centered" style="height:70%">
                              <div class="modal-content" style='height:80%;'>
                                <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
                                  <h5 class="modal-title" id="tablem{element_id}" style="width:100%;text-align: center;height:auto;">Add Records</h5>
                                  <button type="button" class="close" onclick="$('#tablefield_modal_{element_id}').modal('hide');" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                  </button>
                                </div>
                                <div class="modal-body" style= "height: 20vh;overflow: auto;">
                                  <div class="card-body pt-0">
                                    <span>
                                      <button class="btn btn-primary btn-md add_newtblf_{element_id}  mb-2" style="color: var(--font-hover-color);margin: 2px 0px;float: right;display: flex;align-items: center;font-size: 15px;">Add new record <i class="fa fa-plus ml-2"></i></button>
                                    </span>
                                    <div class="table-responsive tbl_table_input" style="overflow-x:unset">
                                        <table id="tables_f{element_id}"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll; table-layout:fixed">
                                          <thead>
                                            <tr class="constraint_tblef_tableHeader">
                                            </tr>
                                          </thead>

                                          <tbody style="max-height: 4rem;overflow: scroll;">
                                            <br>
                                            <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                                            </tr>
                                          </tbody>
                                        </table>
                                    </div>
                                  </div>
                                </div>

                                  <div class="modal-footer">
                                  <button type="button" class="btn btn-secondary" id="save_table_field_{element_id}">Save</button>
                                  </div>
                                </div>
                              </div>
                            </div>
        """
        )
        if allow_approval_assingment != "disallow":
            html += f"""
          <style>
          .input-info{{
            height: 1.5em;
            width: 1.5em;
            border-radius: 50%;
            text-align: center;
            border: 1px solid #3fc3ee;
            color: #3fc3ee;
            font-weight: bold;
            margin-left: 1px;
            margin-bottom: 3px;
            font-size: 13px;
            display: inline-block;
          }}
          .bs-popover-right {{
            margin-left: 10px;
          }}
          .popover .arrow{{
            border: 0;
          }}
          .popover-body{{
            font-size: 12px;
          }}


          </style>
            <div class="modal fade" id="approvalAssignmentParameterModal{element_id}" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Set Approval Parameters</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">

                  <div class="row">
                    <!--  Nature of approval -->
                    <div class="col-12 form-group">
                      <label for="selectNatureOfApproval{element_id}" style="display:inline-block;">Select Nature of Approval <sup style="left:3px;"><i class="fa-solid fa-circle-info info_approval_type" data-toggle="popover" data-html="true" data-content="<b>Single Level: </b>The approval decision will flow in a single level to the members present in the list of approvers<br><b>Multi Level: </b>The approval decision will flow in a level-wise order of sequence to the members present in each level of the list of approvers" data-original-title="" title="" aria-describedby="popover313900"></i></sup></label>
                      <select class="select2 form-control" id="selectNatureOfApproval{element_id}">
                        <option value='single_level' selected>Single Level</option>
                        <option value='multi_level'>Multi Level</option>
                      </select>
                    </div>
                  </div>

                  <div class="single_level_parameter">
                    <div class="row">
                      <div class="col-6 form-group">
                        <label for="selectApproverTypeUAA{element_id}" style="display:inline-block;">Select Approver Type <sup style="left:3px;"><i class="fa-solid fa-circle-info info_approver_type" data-toggle="popover" data-content="<b>Several Approvers:</b> this implies that the approval decision can be undertaken by any single member from the list of approvers <br><b>Joint Approvers:</b> this implies that the approval decision will need to be individually undertaken by all members from the list of approvers" data-html="true" data-bs-html="true" data-original-title="" title="" aria-describedby="popover313900"></i></sup></label>
                        <select class="select2 form-control" id="selectApproverTypeUAA{element_id}">
                          <option value='several' selected>Several Approvers</option>
                          <option value='joint'>Joint Approvers</option>
                        </select>

                      </div>
                      <div class="col-6 form-group" id="userApprovalAssignmentContainer{element_id}">
                        <label for="selectApproverUsersUAA{element_id}">Select Approvers</label>
                        <select class="select2 form-control" id="selectApproverUsersUAA{element_id}"  multiple>
                        </select>
                      </div>
                    </div>
                  </div>

                  <div id="multi_level_parameter{element_id}" style="display:none;">
                    <div class="d-flex justify-content-end align-items-center">
                      <button id="add_levels_button{element_id}" class="btn btn-primary" data-toggle="tooltip" title="The approval decision will flow in a level-wise order of sequence to the members present in each level of the list of approvers">Add Level <i class="fa-solid fa-plus pl-1"></i></button>
                    </div>
                    <div class="multi_approval_levels">
                      <div class="row multi_level_form_group">
                        <div class="col-5 form-group">
                          <label for="selectApproverType" style="display:inline-block;">Select Approver Type <sup style="left:3px;"><i class="fa-solid fa-circle-info info_approver_type" data-toggle="popover" data-content="<b>Several Approvers:</b> this implies that the approval decision can be undertaken by any single member from the list of approvers <br><b>Joint Approvers:</b> this implies that the approval decision will need to be individually undertaken by all members from the list of approvers" data-html="true" data-bs-html="true" data-original-title="" title="" aria-describedby="popover313900"></i></sup></label>
                          <select class="select2 form-control selectApproverType" name="selectApproverType">
                            <option value='several' selected>Several Approvers</option>
                            <option value='joint'>Joint Approvers</option>
                          </select>
                        </div>
                        <div class="col-6 form-group">
                          <label for="selectApproverLevel">Select Approvers</label>
                          <select class="select2 form-control selectApproverLevel" name="selectApproverLevel"  multiple>
                          </select>
                        </div>
                        <span class="col-1 removeApprovalLevel" style="font-size:large; color:red; text-align:center; margin:auto;"><i class="fa-solid fa-remove"></i></span>
                      </div>
                    </div>
                  </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                    <button type="button" id="assignApprovalButton{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2">Save</button>
                </div>
              </div>
            </div>
          </div>"""
            script += f"""
            <script>
              var userListForApprovals = [];
              var incomingDataType = [];

              $(".info_approval_type, .info_approver_type").popover()

              $(`#selectNatureOfApproval{element_id}`).on("select2:select", function(){{
                if(this.value == "single_level"){{
                  $(".single_level_parameter").css("display","block")
                  $("#multi_level_parameter{element_id}").css("display","none")
                  if ("{maximum_approvers_allowed}" != "") {{
                    $('#selectApproverUsersUAA{element_id}').select2({{
                      maximumSelectionLength: {maximum_approvers_allowed if maximum_approvers_allowed else 1}
                    }});
                  }}
                }}
                else{{
                  $(".single_level_parameter").css("display","none")
                  $("#multi_level_parameter{element_id}").css("display","block")
                  if (incomingDataType == 'object' && userListForApprovals !== null){{
                    for(let [key,value] of Object.entries(userListForApprovals) ){{
                      $('.multi_approval_levels').find('.multi_level_form_group').eq(0).find('.selectApproverLevel').append(`<option value="${{key}}">${{value}}</option>`);
                    }}
                  }}else{{
                    for (i of userListForApprovals) {{
                      $('.multi_approval_levels').find('.multi_level_form_group').eq(0).find('.selectApproverLevel').append(`<option value="${{i}}">${{i}}</option>`);
                    }}
                  }}
                  if ("{maximum_approvers_allowed}" != "") {{
                    $('.multi_approval_levels').find('.multi_level_form_group').find('.selectApproverLevel').eq(0).select2({{
                      maximumSelectionLength: {maximum_approvers_allowed if maximum_approvers_allowed else 1}
                    }});
                  }}
                  $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(0).find('.removeApprovalLevel').on('click', function(){{
                    $(this).parent().remove();
                  }});
                }}
              }});

              $("#add_levels_button{element_id}").on("click", function(){{
                form_group_html = `
                  <div class="row multi_level_form_group">
                    <div class="col-5 form-group">
                      <label for="selectApproverType" style="display:inline-block;"> Select Approver Type <sup style="left:3px;"><i class="fa-solid fa-circle-info info_approver_type" data-toggle="popover" data-content="<b>Several Approvers:</b> this implies that the approval decision can be undertaken by any single member from the list of approvers <br><b>Joint Approvers:</b> this implies that the approval decision will need to be individually undertaken by all members from the list of approvers" data-html="true" data-bs-html="true" data-original-title="" title="" aria-describedby="popover313900"></i></sup></label>
                      <select class="select2 form-control selectApproverType" name="selectApproverType">
                        <option value='several' selected>Several Approvers</option>
                        <option value='joint'>Joint Approvers</option>
                      </select>
                    </div>
                    <div class="col-6 form-group">
                      <label for="selectApproverLevel">Select Approvers</label>
                      <select class="select2 form-control selectApproverLevel" multiple name="selectApproverLevel">
                      </select>
                    </div>
                    <span class="col-1 removeApprovalLevel" style="font-size:large; color:red; text-align:center; margin:auto;"><i class="fa-solid fa-remove"></i></span>
                  </div>
                `

                if ("{maximum_levels_allowed}" != '') {{
                  var currentCount = $("#multi_level_parameter{element_id}").find(".multi_level_form_group").length;
                  if (currentCount < {maximum_levels_allowed if maximum_levels_allowed else 1}) {{
                    $("#multi_level_parameter{element_id}").find(".multi_approval_levels").append(form_group_html)
                    $("#multi_level_parameter{element_id}").find(".info_approval_type, .info_approver_type").popover()
                    $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.removeApprovalLevel').on('click', function(){{
                      $(this).parent().remove();
                    }});
                    if (incomingDataType == 'object' && userListForApprovals !== null){{
                      for(let [key,value] of Object.entries(userListForApprovals) ){{
                        $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').append(`<option value="${{key}}">${{value}}</option>`);
                      }}
                    }}else{{
                      for (i of userListForApprovals) {{
                        $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').append(`<option value="${{i}}">${{i}}</option>`);
                      }}
                    }}
                    $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.select2').select2()
                    if ("{maximum_approvers_allowed}" != "") {{
                      $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').select2({{
                        maximumSelectionLength: {maximum_approvers_allowed if maximum_approvers_allowed else 1}
                      }});
                    }}
                  }} else {{

                  }}
                }} else {{
                  $("#multi_level_parameter{element_id}").find(".multi_approval_levels").append(form_group_html)
                  $("#multi_level_parameter{element_id}").find(".info_approval_type, .info_approver_type").popover()
                  $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.removeApprovalLevel').on('click', function(){{
                    $(this).parent().remove();
                  }});
                  if (incomingDataType == 'object' && userListForApprovals !== null){{
                    for(let [key,value] of Object.entries(userListForApprovals) ){{
                      $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').append(`<option value="${{key}}">${{value}}</option>`);
                    }}
                  }}else{{
                    for (i of userListForApprovals) {{
                      $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').append(`<option value="${{i}}">${{i}}</option>`);
                    }}
                  }}
                  $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.select2').select2()
                  if ("{maximum_approvers_allowed}" != "") {{
                    $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").eq(-1).find('.selectApproverLevel').select2({{
                      maximumSelectionLength: {maximum_approvers_allowed if maximum_approvers_allowed else 1}
                    }});
                  }}
                }}
              }});

              $('#selectApproverTypeUAA{element_id}').on('select2:select', function(){{
                if ($(this).val() == 'several'){{
                  $(".approval_type_note").html("Please note: You have selected Several Approvers - this implies that the approval decision can be undertaken by any single member from the list of approvers")
                }}
                else {{
                  $(".approval_type_note").html("Please note: You have selected Joint Approvers - this implies that the approval decision will need to be individually undertaken by all members from the list of approvers")
                }}
              }})
            </script>"""
        else:
            pass

        if file_field_upload_html:
            html += file_field_upload_html
        else:
            pass

        if fk_script_ and edit:
            html += fk_script_

        if showCustomValidation is True:
            html = (
                html
                + f"""<!-- Custom Validation Modal -->
                          <div class="modal fade" id="customValidation{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="customValidation{element_id}" aria-hidden="true" style= "height: 100vh;" >
                            <div class="modal-dialog modal-xl" role="document" >
                              <div class="modal-content" style='height:600px;'>
                                <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
                                  <h5 class="modal-title" id="customValidation{element_id}" style="width:100%;text-align: center;height:auto;">Configure Custom Validation</h5>
                                  <button type="button" class="close" data-dismiss="modal"  data-target='#customValidation{element_id}' aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                  </button>
                                </div>
                                <div class="modal-body" style= "height: 40vh;overflow-y: auto">
                                  <div id="carouselCustomValidation{element_id}" class="carousel slide" data-interval="false" >
                                    <div class="card">
                                      <div class="card-body">

                                        <div class="carousel-inner">

                                            <!-- Existing  Configuration -->
                                            <div class="carousel-item active" name='existing_config'>
                                              <div class='card'>
                                                <div class='card-header' style="font-size: medium;font-weight: bold;">Configure Custom Validation</div>
                                                <div class='card-body' style='overflow:auto'>
                                                  <div class="row" style="width: 100%;display: flex;justify-content: flex-end; align-items: center;">

                                                  </div>
                                                  <div>
                                                    <table class="table" id="reload_custom_table">
                                                      <thead style="text-align:center">
                                                        <tr>
                                                          <th>Sr.no</th>
                                                          <th>Table Name</th>
                                                          <th>Actions</th>
                                                        </tr>
                                                      </thead>
                                                      <tbody style="text-align:center" id="configuration_val_row_{element_id}">

                                                      </tbody>
                                                    </table>
                                                  </div>
                                                </div>
                                              </div>
                                            </div>

                                              <!-- Setting Condition  -->
                                                <div class="carousel-item" name='setting_config'>
                                                  <div class='card'>
                                                    <div class='card-header' style="font-size: medium; font-weight: bold;"> Custom Condition Set:</div>
                                                    <div class='card-body' style='overflow:auto'>

                                                      <div class="row">
                                                        <div class="col-4">
                                                          <select id="custommValidationSelection_{element_id}" class="select2 form-control" name="table" onchange="conditionalTable(elementID='{element_id}')">
                                                            <option value="" disabled selected>Select Table name</option>
                                                          </select>
                                                        </div>
                                                      </div>

                                                      <div style="margin-top:2em;">
                                                        <div class="btn-group">
                                                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                          Add Condition
                                                            <span class="caret"></span>
                                                          </button>
                                                          <ul class="dropdown-menu" id="condition_dropdown{element_id}" style="max-height:12rem;">
                                                          </ul>
                                                        </div>
                                                        <div class="btn-group">
                                                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                          Add Master Based Condition
                                                            <span class="caret"></span>
                                                          </button>
                                                          <ul class="dropdown-menu" id="condition_dropdown1{element_id}" style="max-height:12rem;">
                                                          </ul>
                                                        </div>
                                                        <div class="row" id="items">
                                                          <table class="table " id= 'custom_validation_table_{element_id}'>
                                                          </table>
                                                        </div>
                                                      </div>

                                                      <button type="button" style="float:right"
                                                        class="btn btn-md btn-primary save_custom_validation" data-elementID="{element_id}"  onclick="saveCustomValidation(elementID='{element_id}')" data-slide="next">Save Validation</button>

                                                    </div>
                                                  </div>
                                                </div>
                                        </div>
                                        <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselCustomValidation{element_id}"
                                          role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                                        <span class="sr-only">Previous</span>

                                        <span class="carousel-control-next-icon carousel-control-next" href="#carouselCustomValidation{element_id}"
                                          role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                                        <span class="sr-only">Next</span>
                                      </div>
                                    </div>
                                  </div>
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn-primary submitcustomvalidation"   data-elementID="{element_id}" >Set Custom Validation</button>
                                    <button type="button" class="btn btn-primary removecustomvalidation"   data-elementID="{element_id}" >Remove Custom Validation</button>
                                  <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close" data-target='#customValidation{element_id}'>Close</button>
                                  </div>
                                </div>
                              </div>
                            </div>
                        <!-- End Custom Validation -->"""
            )
        if showHistoryView is True or showRejectedEntries is True:
            html = (
                html
                + f"""
          <br>
          <div class="card" id="createHistoryView{element_id}"  style="overflow:auto;width:100%;display:none;">

          <div class="card-header">
                      <h6 class="card-title">View History</h6>
                      <div class="card-tools">
                      <button type="button" class="cardUploadtoggle btn btn-tool" data-card-widget="collapse">
                      <i class="fas fa-plus">
                      </i>
                      </button>
                      </div></div>
          <div class='card-body'>

          <div class='card-table_insertion' style='display:none;height: 60vh;overflow-y: auto;margin-top: 20px;'>
            <table id="createhistory_datatable_{element_id}" class="row-border display" >
            <thead>
              <th>No Data Found</th>
            </thead>
            <tbody>

            </tbody>
          </table>
          </div>
          </div>
          </div>
          <div class="modal fade" id="view_history_tabular"  role="dialog" data-focus="false" aria-labelledby="view_history_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
          """
            )
        if is_multi_select_field and multi_select_field_dict:
            if not element_id.startswith("process"):
                html = (
                    html
                    + f"<div class='modal' id='formModal{element_id}' style='backdrop-filter: brightness(0.4);' tabindex='-1' role='dialog' aria-labelledby='formModalLabel' aria-hidden='true'>"
                )
                html = html + f"<div class='modal-dialog modal-lg' role='document'>"
                html = html + f"            <div class='modal-content' style='position: relative;'>"
                html = (
                    html
                    + f"              <div class='modal-header' style='background:#565a5e; color:white;'>"
                )
                html = (
                    html
                    + f"                <h5 class='modal-title' id='formModalLabel' style='margin-left: 44%'>Select Values</h5>"
                )
                html = (
                    html
                    + f"                <button type='button' class='close' data-dismiss='modal' aria-label='Close'>"
                )
                html = html + f"                  <span aria-hidden='true'>&times;</span>"
                html = html + f"                </button>"
                html = html + f"              </div>"
                html = (
                    html
                    + f"              <div class='modal-body' style='overflow-y: scroll ;max-height: 30rem;'>"
                )
                html = html + f"                <div class='card'>"
                html = html + f"                  <div class='card-body'>"
                html = html + f"                    <table id='masterTable{element_id}' class='row-border'>"
                html = html + f"                      <thead>"

                html = html + f"                      </thead>"
                html = html + f"                      <tbody>"
                html = html + f"                      </tbody>"
                html = html + f"                    </table>"
                html = html + f"                  </div>"
                html = html + f"              </div>"
                html = html + f"              </div>"
                html = html + f"                <div class='modal-footer'>"
                html = (
                    html
                    + f"                  <button type='button' value='save'class=' btn mb-2 btn-primary savebutton' data-toggle='modal'>"
                )
                html = html + f"                    <i class='{{butn.icon}}'></i>Save</button>"
                html = html + f"             </div>"
                html = html + f"          </div>"
                html = html + f"        </div>"
                html = html + f"      </div>"
                html = html + f"    "
                script = script + scriptGenerator(
                    "multi select",
                    "create view",
                    element_id,
                    request_user,
                    dic=multi_select_field_dict,
                    tablename=Tablename,
                    iden=iden,
                )
        elif template_name == "Create view with search":
            html = (
                html
                + f"""</div>
                <div class="col-4">
                    <div class="card" id="search_card_{element_id}">
                    <div class="card-header">
                        <h6 class="card-title">Search results</h6>
                    </div>
                    <div class="card-body search_results_display" style="overflow-y:scroll;">
                    </div>
                    </div>
                </div>
            </div>"""
            )
        elif template_name == "Comparable":
            dataTab = read_data_func(
                request_user,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])

            comparable_context = json.dumps(
                {
                    "table": create_view_tab_body_content["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][0]["value"],
                    "agg_func": create_view_tab_body_content["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][2]["value"],
                    "period": create_view_tab_body_content["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][2]["period"],
                    "char_col": create_view_tab_body_content["Category_sub_elements"][0][
                        "Category_sub_element_attributes"
                    ][2]["char_column"],
                }
            )
            html = (
                html
                + f"""
            <div>
            <form method="post" id="uploadCSVForm_{element_id}" enctype="multipart/form-data" data-form-id='uploadfileform{element_id}'>"""
                + "    {% csrf_token %}"
                + f"""    <label for="uploadFileInput">Upload file</label>
                 <div class="col-3 custom-file mr-4">
                          <input type="file" id="uploadFileInput_{element_id}"  class="custom-file-input" data-file-id="{element_id}" name="uploadFileInput" style="border-bottom-color:white; width:230px"  accept=".csv">
                          <label id="c1" class="custom-file-label" >Choose file</label>
                          </div>
                <input type="hidden"name="operation"value="uploadCSVInput">
                <input type="hidden"name="context_dict"value='{comparable_context}'>
                  <input type="hidden"  name="columnmapperDict" id="columnmapperDict{element_id}" value=""  data-save-config="" data-element_id="columnmapperDict{element_id}">


                  <input type="hidden" name="tables_name_comp" class='upload_tables_comp' value>

                <input type="hidden"name="element_id"value="{element_id}">
                <button id="uploadCSVBtn_{element_id}" class="buttonstylin" style="margin-right:4px">Upload and Compare</button>
                 <button name="ColumnMapper"  type="button" class="btn btn-primary rounded columnMapperButton"  data-table-name="" data-toggle="modal" data-target="#columnMapperModal{element_id}" data-elementID="{element_id}" >Map Columns</button>
                <button id="savefiledata_{element_id}" class="btn btn-primary  rounded " disabled>Save</button>
            </form>
            </div>
                <div class="row buttonalign">
                </div>
            <div class="card" id="comparable_card_{element_id}" hidden>
                <div class="card-header">
                <h6 class="card-title">Compare With Existing</h6>
                </div>
                <div class="card-body">
                <table id="comparable_table_{element_id}">
                    <thead id="comparable_table_head_{element_id}">
                    <!-- <tr>
                        <th>Column Name</th>
                        <th>Input Value</th>
                        <th>Existing Value</th>
                    </tr> -->
                    </thead>
                    <tbody id="comparable_table_body_{element_id}">

                    </tbody>
                </table>
                </div>
            </div>
            <div class="card" id="comparable_file_card_{element_id}" hidden>
                <div class="card-header">
                <h6 class="card-title">Compare With Existing</h6>
                </div>
                <div class="card-body">
                <form id="comparable_file_form_{element_id}">"""
                + "    {% csrf_token %}"
                + f"""    <table id="comparable_file_table_{element_id}">
                    <thead id="comparable_file_table_head_{element_id}">

                    </thead>
                    <tbody id="comparable_file_table_body_{element_id}">

                    </tbody>
                    </table>
                </form>
                </div>
                        </div>
                         <!-- Upload Map Columns Modal -->
      <div class="modal fade" id="columnMapperModal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="columnMapperModal{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="columnMapperModal{element_id}" style="width:100%;text-align: center;height:auto;">Configure Column Mapper</h5>
              <button type="button" class="close" data-dismiss="modal" data-target='#columnMapperModal{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class='card'>
                <div class='card-header' style="font-size: medium; font-weight: bold;">Column Mapper</div>
                <div class='card-body' style="max-height: 15rem; overflow-y: scroll;">
                  <div class="row">
                    <div class="form-group col-10">
                      <select id="Columnmapper{element_id}" class="select2 form-control" name="Columnmapper"  data-placeholder="Column Mapper">
                        <option value="value" selected disabled>Select Option Name</option>
                      </select>

                    </div>
                    <div class="form-group col-2" style="float: right;">
                      <button type="button" class="btn btn-primary columnconfiguremapper"   data-elementID="{element_id}"><i class="fa fa-upload"></i></button>
                      </div>
                  </div>
                  <table id="columnmapperdone{element_id}" class="table table-bordered table-sm table-hover" >
                    <thead id="modal-table-head-done{element_id}">
                      <th>Table Name</th>
                      <th>Reconfigure</th>
                      <th>Apply</th>

                    </thead>
                    <tbody id="modal-table-body-columnmapperdone{element_id}">

                    </tbody>
                  </table>
                  <table id="columnmapper{element_id}" class="table table-bordered table-sm table-hover">
                    <thead id="modal-table-head{element_id}">

                    </thead>
                    <tbody id="modal-table-body-columnmapper{element_id}">

                    </tbody>
                  </table>
                  <br>
                  <div id="samecolumnwarning{element_id}" style="color:red">
                  </div>
                  <br>
                </div>
              </div>
            </div>
              <div class="modal-footer">
               <button type="button" class="btn btn-primary submitconfigmapper"  style="display: none;" data-elementID="{element_id}" >Save and Submit</button>
                <button type="button" class="btn btn-primary savecolumnconfiguremapper"  style="display: none;" data-elementID="{element_id}" >Save</button>
                <button type="button" class="btn btn-primary saveConfigMapper" data-elementID="{element_id}">Save Configuration</button>
                <button type="button" class="btn btn-primary loadConfigMapper"  data-elementID="{element_id}">Load Configuration</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close">Close</button>
              </div>
          </div>
        </div>
      </div>
      <!-- Upload Map Columns Modal End -->
            """
            )
            script = script + scriptGenerator(
                "Comparable", "create view", element_id, request_user, dic=comparable_context
            )
        elif template_name == "Flow Definition":
            script = script + scriptGenerator("Flow Definition", "create view", element_id, request_user)
        html = html + "</div></div></div></div></div>"
        if not tab_pane:
            html = html + "</div>"
        script = script + scriptGenerator("mandatory", "create view", element_id, request_user)
        if allow_approval_assingment != "disallow":
            script += f"""
          <script>


            $.ajax({{
              url: `/users/${{urlPath}}/dynamicVal/`,
              data: {{
                'operation': 'fetchUsersList',
                'decision_sep': '{decision_sep}',
                'decision_col': JSON.stringify({decision_col}),
                'type': '{allow_approval_assingment}',
              }},
              type: "POST",
              dataType: "json",
              success: function (data) {{
                userListForApprovals = data.approver_list;
                incomingDataType = data.data_type;
                $('#selectApproverUsersUAA{element_id}').empty();
                if (data.data_type == 'object' && userListForApprovals !== null){{
                  for(let [key,value] of Object.entries(userListForApprovals) ){{
                    $("#selectApproverUsersUAA{element_id}").append(`<option value="${{key}}">${{value}}</option>`);
                  }}
                }}else{{
                  for (i of userListForApprovals) {{
                    $("#selectApproverUsersUAA{element_id}").append(`<option value="${{i}}">${{i}}</option>`);
                  }}
                }}


              }},
              error: function () {{
                Swal.fire({{icon: 'error',text: 'Error! Please try again.'}});
              }}
            }});"""
            if maximum_approvers_allowed != "":
                script += f"""
            $('#approvalAssignmentParameter{element_id}').on('click', function(){{
                $('#selectApproverUsersUAA{element_id}').select2({{
                    maximumSelectionLength: {maximum_approvers_allowed}
                }});
            }})"""

            script += f"""
            $('#assignApprovalButton{element_id}').on('click', function(){{
              var approvalType = $('#selectNatureOfApproval{element_id}').val();
              var approval_config = {{}};
              if (approvalType == 'multi_level') {{
                var approvalLevelConfig = [];
                $("#multi_level_parameter{element_id}").find(".multi_approval_levels > .multi_level_form_group").each(function(){{
                  var levelConfig = {{
                    'approver_list': $(this).find('.selectApproverLevel').val(),
                    'approver_type': $(this).find('.selectApproverType').val(),
                  }};
                  approvalLevelConfig.push(levelConfig);
                }})
                approval_config = {{
                  'approval_type': approvalType,
                  'level_config': approvalLevelConfig,
                  'assignment_type': $('#approvalAssignmentParameter{element_id}').attr('data-controlLevel'),
                }}
              }} else {{
                approval_config = {{
                  'approval_type': approvalType,
                  'approver_type': $('#selectApproverTypeUAA{element_id}').val(),
                  'approver_list': $('#selectApproverUsersUAA{element_id}').val(),
                  'assignment_type': $('#approvalAssignmentParameter{element_id}').attr('data-controlLevel'),
                }}
              }};
              $('#approvalAssignmentConfig{element_id}').val(JSON.stringify(approval_config));
              $('#approvalAssignmentParameterModal{element_id}').modal('hide');
            }});
          </script>
        """

        if file_input_field_list:
            script += """
            <script>
            function validateUploadedFile(file) {
              if (file.name.includes(',')) {
                return false
              } else {
                return true
              }
            }

            function formFileUploadHandler(fileInputRawId) {
              $(`#id_${fileInputRawId}`).on('click', ()=>{
                $(this).closest('.btn-outline-secondary').trigger('click');
              })
              var fileInputId = fileInputRawId + "_upload_input"
              var uploadedFileDropElement = document.getElementById(fileInputId).closest('.file-upload-wrapper');
              var uploadedFileContainerElement = $(`#${fileInputRawId}_upload_modal`).find('.uploaded-files-gallery');

              var uploadedFilesFormData = new FormData();
              uploadedFilesFormData.append("operation", "saveUploadedFiles");

              function addUploadedFilehandler(file, container) {
                uploadedFilesFormData.append(file.name, file);
                container.append(`
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  ${file.name}
                  <span class="badge previewUploadedFile" style="margin-right:0; margin-left:auto;" data-file-name="${file.name}"><a href='${URL.createObjectURL(file)}' target="_blank"><i class="fas fa-eye fa-2x"></i></a></span>
                  <span class="badge downloadUploadedFile" style="margin-right:0;" data-file-name="${file.name}"><a href='${URL.createObjectURL(file)}' target="_blank" download="${file.name}"><i class="fas fa-download fa-2x"></i></a></span>
                  <span class="badge removeUploadedFile" data-file-name="${file.name}"><i class="fas fa-trash-alt fa-2x" style="color:red;"></i></span>
                </li>
                `);
                container.find('.list-group-item').eq(-1).find('.removeUploadedFile').on('click', function(){
                  uploadedFilesFormData.delete($(this).attr('data-file-name'));
                  $(this).parent().remove();
                  if (container.find('.list-group-item').length == 0) {
                    $(`#${fileInputId}`).val('');
                  }
                });
              }
              function removeUploadedFile() {
                uploadedFilesFormData.delete($(this).attr('data-file-name'));
                $(this).parent().remove();
              }

              uploadedFileDropElement.addEventListener('dragover', function(e){
                e.preventDefault();
              });
              uploadedFileDropElement.addEventListener('dragleave', function(e){
                e.preventDefault();
              });
              $(`#${fileInputId}`).on('change', function(e){
                if (e.target.files.length) {
                  var uploadedFiles = e.target.files;
                  for (upf of uploadedFiles) {
                    if (validateUploadedFile(upf)) {
                      addUploadedFilehandler(upf, uploadedFileContainerElement);
                    } else {
                      Swal.fire({icon: 'error',text: `Error uploading ${upf.name}! File name cannot contain commas(,).`});
                    }
                  }
                }
              });
              uploadedFileDropElement.addEventListener('drop', function(e){
                e.preventDefault();
                if (e.dataTransfer.files.length) {
                  var uploadedFiles = e.dataTransfer.files;
                  for (upf of uploadedFiles) {
                    if (validateUploadedFile(upf)) {
                      addUploadedFilehandler(upf, uploadedFileContainerElement);
                    } else {
                      Swal.fire({icon: 'error',text: `Error uploading ${upf.name}! File name cannot contain commas(,).`});
                    }
                  }
                }
              });
              $(`#${fileInputRawId}_upload_modal`).find('button.resetUploadedFiles').on('click', function(){
                for (const key of uploadedFilesFormData.keys()) {
                  if (key !== "operation") {
                    uploadedFilesFormData.delete(key);
                  }
                }
                uploadedFileContainerElement.empty();
                $(`#${fileInputId}`).val('');
                $(`#id_${fileInputRawId}`).val('').trigger('change');
              });
              $(`#${fileInputRawId}_upload_modal`).find('button.resetUploadedFiles').on('click', function(){
                $(`#${fileInputRawId}_upload_modal`).modal('hide');
              });
              $(`#${fileInputRawId}_upload_modal`).find('button.saveUploadedFiles').on('click', function(){
                let uploadSaveButtonElement = $(this);
                uploadSaveButtonElement.prop('disabled', true);
                var filesUploaded = [];
                for (const key of uploadedFilesFormData.keys()) {
                  if (key !== 'operation') {
                    filesUploaded.push(key);
                  }
                }
                if (filesUploaded.length>0) {
                  $.ajax({
                    url: `/users/${urlPath}/dynamicVal/`,
                    data: uploadedFilesFormData,
                    type: 'POST',
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                      if (data.msg == "file_invalid"){
                        Swal.fire({text:"Incorrect file uploaded.",icon:"error"},$('.removeUploadedFile').trigger('click'))
                        $(`#${fileInputRawId}_upload_modal`).modal('hide');
                        uploadSaveButtonElement.prop('disabled', false);
                      }else{
                        if (typeof data == 'string') {
                          data = JSON.parse(data)
                        }
                        if (Object.keys(data).length>0) {
                          for (let [k,v] of Object.entries(data)) {
                            uploadedFilesFormData.append(v, uploadedFilesFormData.get(k));
                            uploadedFilesFormData.delete(k);
                            uploadedFileContainerElement.find(`span[data-file-name="${k}"]`).attr('data-file-name', v);
                          }
                        }
                        var uploadedFileString = "";
                        for (const key of uploadedFilesFormData.keys()) {
                          if (key !== "operation") {
                            uploadedFileString += key;
                            uploadedFileString += ", ";
                          }
                        }
                        uploadedFileString = uploadedFileString.replace(/, $/, '');
                        $(`#id_${fileInputRawId}`).val(uploadedFileString).trigger('change');
                        $(`#${fileInputRawId}_upload_modal`).modal('hide');
                        uploadSaveButtonElement.prop('disabled', false);
                      }
                    },
                    error: ()=>{
                      uploadSaveButtonElement.prop('disabled', false);
                      Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    }
                  });
                } else {
                  var uploadedFileString = "";
                  uploadedFileContainerElement.find('.list-group-item').each(function(){
                    uploadedFileString += $(this).text().trim();
                  });
                  uploadedFileString = uploadedFileString.replace(/, $/, '');
                  $(`#id_${fileInputRawId}`).val(uploadedFileString).trigger('change');
                  $(`#${fileInputRawId}_upload_modal`).modal('hide');
                  uploadSaveButtonElement.prop('disabled', false);
                }
              });
            }
          """
            for fif in file_input_field_list:
                script += f"""
            formFileUploadHandler('{fif}_{element_id}');
            """
            script += """
          </script>
          """
        else:
            pass

        if user_field_inputs:
            script += f"""
            <script>
              $.ajax({{
                url: `/users/${{urlPath}}/dynamicVal/`,
                data: {{
                    'operation': 'fetchUserFiedList',
                    'profile': '{user_profile_pic}',
                    'email': '{user_email}',
                  }},
                  type: "POST",
                  dataType:"json",
                  success:function(data){{
                    for (uFI of {user_field_inputs}) {{
                      $(`#id_${{uFI}}_{element_id}`).empty();
                      var existingVal = $(`#id_${{uFI}}_{element_id}`).val();
                      $(`#id_${{uFI}}_{element_id}`).append(`
                        <option value='' data-email='' data-fname='' data-lname='' data-pic=''>---</option>
                      `)
                      for (user of data.user_list) {{
                        $(`#id_${{uFI}}_{element_id}`).append(`
                          <option value='${{user.username}}' data-email='${{user.email}}' data-fname='${{user.first_name}}' data-lname='${{user.last_name}}' data-pic='${{user.profile_pic}}'>${{user.username}}</option>
                        `)
                      }};
                      if (existingVal && existingVal != '---' && existingVal != '----' ) {{
                        $(`#id_${{uFI}}_{element_id}`).val(existingVal).trigger('select2:select');
                        $(`#id_${{uFI}}_{element_id}`).val(existingVal).trigger('change');
                      }}
                    }}
                  }}, error: ()=>{{}}
              }});
            </script>
          """
        if privacy_field_script:
            script += privacy_field_script
        if fk_script_ and not edit:
            html += fk_script_
        if server_side_columns:
            script += """
          <script>
          var ctoken = $('form').find(`input[name='csrfmiddlewaretoken']`).attr('value');
          $.ajaxSetup({
            beforeSend: function (xhr, settings) {
              xhr.setRequestHeader('X-CSRFToken', ctoken);
            }
          });
          function serverSideDataSearch(fieldName, blockElementId){
            let fieldIdentifier = `id_${fieldName}_${blockElementId}`;
            let tableIdentifier = `id_${fieldName}_${blockElementId}_serverside_table`;
            let fieldObject = $(`#${fieldIdentifier}`);
            let tableObject = $(`#${tableIdentifier}`);
            let pageLength = fieldObject.attr('data-serverside-page-length');
            pageLength = Number(pageLength);
            let dataType = fieldObject.attr('data-type');

            let fetchConfig = {};
            let isMultiSelect = false
            if (dataType == "ForeignKey") {
              let sourceModelName = fieldObject.attr('data-tablename');
              let sourceFieldName = fieldObject.attr('name');
              let conditionObject = {};
              if (fieldObject.attr('data-jsattr')) {
                var jsAttrArray = JSON.parse(fieldObject.attr('data-jsattr'));
                for(let i = 0; i < jsAttrArray.length; i++) {
                  if (jsAttrArray[i]["parentvalue"] == "Foreign-key-relation") {
                    if (jsAttrArray[i]['finaljsattr'][2][0].hasOwnProperty('condition')) {
                      if (cases(jsAttrArray[i], blockElementId)) {
                        conditionObject = jsAttrArray[i]['finaljsattr'][2][0]['condition'];
                        break;;
                      }
                    }
                  }
                }
              };
              fetchConfig['type'] = 'foreignkey';
              fetchConfig['field_config'] = {
                model_name: sourceModelName,
                field_name: sourceFieldName,
                condition: conditionObject,
              };
            } else if (fieldObject.attr('data-fieldType') == "MultiselectField") {
              isMultiSelect = true;
              let modelName = fieldObject.attr('name').replace(`__${fieldName}`, '');
              fetchConfig['type'] = 'multi-select';
              fetchConfig['field_config'] = {
                model_name: modelName,
                field_name: fieldName,
              };
            } else if (fieldObject.attr('data-jsattr')) {
              let conditionObject = {};
              let sourceModelName = fieldObject.attr('data-table');
              let sourceFieldName = fieldObject.attr('data-column');
              var jsAttrArray = JSON.parse(fieldObject.attr('data-jsattr'));
              for(let i = 0; i < jsAttrArray.length; i++) {
                if (jsAttrArray[i]["parentvalue"] == "Foreign-key-relation") {
                  if (jsAttrArray[i]['finaljsattr'][2][0].hasOwnProperty('condition')) {
                    if (cases(jsAttrArray[i], blockElementId)) {
                      conditionObject = jsAttrArray[i]['finaljsattr'][2][0]['condition'];
                      break;;
                    }
                  }
                }
              };
              fetchConfig['type'] = 'js-foreignkey';
              fetchConfig['field_config'] = {
                model_name: sourceModelName,
                field_name: sourceFieldName,
                condition: conditionObject,
              };
            }
            if($.fn.dataTable.isDataTable(`#${tableIdentifier}`)){
              tableObject.DataTable().clear().destroy()
            }
            var table = tableObject.DataTable({
              scrollY: "50vh",
              scrollCollapse: true,
              scrollX: "120%",
              sScrollX: "120%",
              serverSide: true,
              ordering: false,
              orderCellsTop: true,
              responsive: true,
              select: true,
              colReorder: {
                fixedColumnsLeft: 1,
              },
              stateSave: false,
              deferRender: true,
              paging: true,
              pageLength: pageLength,
              bLengthChange: false,
              dom: "lfrtip",
              buttons: [],
              ajax: {
                url: `${window.location.pathname}serverside_search/`,
                type: "POST",
                data: function (d, settings) {
                  d.fetch_config = JSON.stringify(fetchConfig);
                  d.searchValue = $(`#${tableIdentifier}_filter input`).val();
                  return d;
                },
              },
              columns: [
                {
                  data: null,
                  defaultContent: '',
                  className: 'select-checkbox',
                  orderable: false
                },
                { data: fieldName, title: "" },
              ],
              columnDefs: [
                {
                  targets: "_all",
                  className: "dt-left allColumnClass all",
                },
                {
                  targets: 0,
                  orderable: false,
                  width: "20%",
                  className: 'select-checkbox dt-center',
                  render: function (data, type, full, meta) {
                    let content = '';
                    if (isMultiSelect) {
                      content = `<input type="checkbox" class="big_data_select_checkbox" data-row-id="${full.id}" data-value="${full[fieldName]}">`;
                    } else {
                      content = `<input type="checkbox" class="big_data_select_checkbox">`;
                    }
                    content += `
                    <style>
                      .big_data_select_checkbox {
                        position: relative;
                        cursor: pointer;
                        accent-color: var(--primary-color);
                        transform: scale(1.05);
                      }
                      .big_data_select_checkbox::before {
                          content: '';
                          position: absolute;
                          left: 1.2px;
                          top: 1.2px;
                          width: 11px;
                          height: 11px;
                          border: 0px solid #838383;
                          border-radius: 0.8px;
                          background-color: transparent;
                      }
                      .big_data_select_checkbox:hover::before {
                          background-color: #f8f9fa;
                      }
                      .big_data_select_checkbox:checked::before {
                          accent-color: var(--primary-color);
                      }
                      .big_data_select_checkbox:checked:hover::before {
                          background-color: transparent;
                      }
                    </style>`;
                    return content;
                  }
                },
                {
                  targets: 1,
                  width: "80%"
                }
              ],
              select: {
                style: 'os',
                selector: 'td:first-child'
              }
            })
            .columns.adjust();
            $(`#${tableIdentifier}`).on( 'column-visibility.dt', function ( e, settings, column, state ) {
              $(`#${tableIdentifier}`).DataTable().columns.adjust()
            });
            $(document).on('shown.bs.modal', function (e) {
              $.fn.dataTable.tables( {visible: true, api: true} ).columns.adjust();
            });
            let selectecValuesMS = {};
            let selectecValue = [];
            $(`#${tableIdentifier}`).on('change', '.big_data_select_checkbox', function() {
              if (isMultiSelect) {
                if ($(this).is(':checked')) {
                  var value = $(this).attr('data-value');
                  selectecValuesMS[$(this).attr('data-row-id')] = "";
                  selectecValue.push(value);
                } else {
                  delete selectecValuesMS[$(this).attr('data-row-id')];
                  var index = selectecValue.indexOf(value);
                  if (index > -1) {
                    selectecValue.splice(index, 1);
                  }
                }
              } else {
                if ($(this).is(':checked')) {
                  var value = $(this).closest('td').next('td').text();
                  if ($(`#${fieldIdentifier} > option[value='${value}']`).length > 0) {
                    $(`#${fieldIdentifier}`).val(value).trigger('change');
                  } else {
                    $(`#${fieldIdentifier}`).append(`<option value="${value}" selected>${value}</option>`);
                    $(`#${fieldIdentifier}`).select2().trigger('change');
                  }
                }
                $(`#${fieldIdentifier}_serverside_modal`).modal('hide');
              }
            });
            if (isMultiSelect) {
              $(`#${fieldIdentifier}_serverside_save`).off('click').on('click', function(){
                $(`#${fieldIdentifier}`).val(JSON.stringify(selectecValuesMS)).trigger('change');
                let connectecSelectTag = $(`#${fieldIdentifier}`).attr('data-connectedselectfield');
                for (let i = 0; i < selectecValue.length; i++) {
                  const element = selectecValue[i];
                  $(`#${connectecSelectTag}`).append(`<option value="${element}" selected>${element}</option>`);
                }
                $(`#${connectecSelectTag}`).select2().trigger('change');
                $(`#${fieldIdentifier}_serverside_modal`).modal('hide');
              });
            }

            $(`#${tableIdentifier}_wrapper thead tr`).css({"background": "var(--primary-color)","color": "var(--font-hover-color)"})
            $(`#${tableIdentifier}_wrapper .dataTables_scrollHead`).css("width","100%")
            $(`#${tableIdentifier}_wrapper .dataTables_scrollHeadInner`).css("width","100%")
            $(`#${tableIdentifier}_wrapper .table.hover.table-bordered `).css("width","100%")
            $(`#${tableIdentifier}_filter`).css("float","left")
            $(`#${tableIdentifier}_filter`).css("width","100%")
            $(`#${tableIdentifier}_filter input`).attr("style","border-radius: 1.8rem !important;border:1px solid lightgrey !important;height:28px;padding: 4px 9px;width:85%;")

          }
          """
            for ssc in server_side_columns:
                script += f"""
            serverSideDataSearch('{ssc}', '{element_id}');
            """
            script += """
          </script>
          """
        else:
            pass
    else:
        if template_name == "Constraint":
            if tab_pane:
                tab_pane_class = "tab-pane fade"
            else:
                tab_pane_class = "c"
                html = html + "<div>"
            html = (
                html
                + f"\n <div class='{tab_pane_class}' id='{element_id}_tab_content' fetchpriority='high' role='tabpanel' aria-labelledby='{element_id}-tab'>"
            )
            if view == "create view":
                html = (
                    html
                    + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card ' id='createview{element_id}'>"
                )
            elif view == "list view":
                html = (
                    html
                    + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card ' id='list_view_edit_modal_{element_id}'>"
                )
            dataTab = read_data_func(
                request_user,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])
            model_name = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            verboseList = None

            actual_model_name = dynamic_model_create.get_model_class(model_name, request_user)
            verboseList = {
                field.name: field.verbose_name.title() for field in actual_model_name.concrete_fields
            }
            data = {}
            viewHistory_columns = "{}"
            data["table_hidden"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            data["constraint_name"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_name"]
            data["constraint_type"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_type"]
            data["selected_tables"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["selected_tables"]
            data["selectedConstraint_fields"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4].get("selectedConstraint_fields")
            data["constraint_holder"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_holder"]
            data["remove_additional_column"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4].get("remove_additional_column")
            data["verbose_list"] = verboseList
            data["actions"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3]["value"]
            data["preview_mode"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3].get("Preview_mode")
            data["viewHistory_columns"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3].get("viewHistory_columns")
            if data["preview_mode"]:
                createview_preview_mode = data["preview_mode"]
            if data["viewHistory_columns"]:
                viewHistory_columns = json.dumps(data["viewHistory_columns"])

            html = (
                html
                + f"""
                <div class="card-body">

                    <div class=" table-responsive">
                <table id="tables_constraint{element_id}"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll">
                    <thead>
                    <tr  class="constraint_tableHeader"  style="border-top: 1px solid var(--primary-color);border-bottom:1px solid var(--primary-color);display: flex;justify-content: space-around ;align-items: center;" >
                    <th data-name="use_case" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['use_case']}</th>
                    <th data-name="rule_set" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['rule_set']}</th>
                    <th data-name="constraint_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['constraint_name']}</th>
                    <th data-name="constraint_type" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['constraint_type']}</th>
                    <th data-name="table_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['table_name']}</th>
                    <th data-name="unique_constraint_column" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['unique_constraint_column']}</th>
                    <th data-name="constraint_parameter" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['constraint_parameter']} </th>
                    <th data-name="constraint_parameter_value" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['constraint_parameter_value']} </th>
                    <th data-name="condition_datatype" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['condition_datatype']} </th>
                    <th data-name="condition" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['condition']}</th>
                    <th data-name="threshold" style="width:150px;text-align: center;white-space: pre-line;" >&nbsp;&nbsp;{data['verbose_list']['threshold']} </th>
                    <th data-name="applicability_status" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['applicability_status']}</th>
                    <th><i class="add_constraint{element_id} fa fa-plus-square fa-2x" aria-hidden="true" style="color:var(--primary-color);margin: 2px 0px;"></i></th>
                    </tr>
                </thead>

                <tbody style="max-height: 4rem;overflow: scroll;">
                    <br>
                    <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                      <td  data-name="use_case">
                        <input  data-name="use_case" class="use_cases form-control p-2 textInput"   placeholder="Usecase Name" style="width:150px;">
                        </td>
                        <td>
                        <select class="constraint_row_reference_id select2 form-control "     data-name="rule_set"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['rule_set']} </option>
                        </select>
                    </td>

                    <td >
                        <input  data-name="constraint_name" class="constraint_row_names form-control p-2 textInput"  data-name="constraint_name"  placeholder="Constraint Name" style="width:150px;">
                    </td>

                    <td>
                        <select  class="constraint_row_selection select2 form-control " data-name="constraint_type"  name="template" style="width:150px;">
                        <option selected disabled>Constraint Type </option> """
            )
            for k, v in data["constraint_holder"].items():
                html = html + f"""<option value="{k}"  data-type="{v}"> {k} </option>"""

            html = (
                html
                + f""" </select>
                    </td>

                    <td >
                        <select class="constraint_row_tables select2 form-control" data-name="table_name"   name="template" style="width:150px;">
                        <option selected disabled>Select {data['verbose_list']['table_name']}</option> """
            )
            for i in data["selected_tables"]:
                html = html + f"""<option value="{i}">{i}</option> """
            html = (
                html
                + """ </select>
                    </td>

                    <td >"""
                + f"""        <select  class="constraint_row_mapping select2 form-control " data-name="unique_constraint_column"   name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['unique_constraint_column']}</option>

                        </select>
                    </td>

                    <td >
                        <select  class="constraint_row_column select2 form-control" data-name="constraint_parameter"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['constraint_parameter']} </option>
                        </select>
                    </td>

                    <td size=5 style="max-height: 80px;overflow: hidden;">
                        <select  class="constraint_row_value select2 form-control" name="template" data-name="constraint_parameter_value" style="width:150px;" placeholder="{data['verbose_list']['constraint_parameter_value']} ">
                        </select>
                    </td>

                    <td >
                        <select class="constraint_row_condition_type select2 form-control" data-name="condition_datatype"   name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['condition_datatype']}</option>
                        <option value="Character">Character Type</option>
                        <option value="Numeric">Numeric Type</option>
                    </td>

                    <td >
                        <select class="constraint_row_condition select2 form-control" data-name="condition" onchange="updateThreshold(this)" name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['condition']}</option>
                    </td>

                    <td >
                        <input data-name="threshold"  class="constraint_row_input form-control p-2 textInput" data-name="threshold"   placeholder="Enter {data['verbose_list']['threshold']} " style="width:150px;">
                    </td>

                    <td>
                        <select class="constraint_row_status select2 form-control" data-name="applicability_status"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['applicability_status']}</option>
                        <option value="Applicable">Applicable</option>
                        <option value="Not Applicable">Not Applicable</option>
                        </select>
                    </td>

                    <td>
                        <a href="#"  class=" fa fa-times" style="color:white;"></a>
                    </td>

                    </tr>

                </tbody>
                </table>
                </div>
            </div>

            <!-- Save & Close  -->
            <div  style="margin-top:20px;margin-left:2rem"class="form-group">"""
            )
            for i in data["actions"]:
                if i == "Save":
                    if createview_preview_mode:
                        if edit:
                            html = (
                                html
                                + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling standard_button_click" id="savebuttoninfo{element_id}"  data-preview-mode='preview' data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='editPreviewMode(this)'>"""
                            )
                        else:
                            html = (
                                html
                                + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling standard_button_click" id="savebuttoninfo{element_id}"  data-preview-mode='preview' data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewSave(this)'>"""
                            )
                    else:
                        html = (
                            html
                            + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling standard_button_click" id="savebuttoninfo{element_id}"   data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' >"""
                        )

                if i == "Save as Draft":
                    html = (
                        html
                        + f"""<input type="button" name="button" value="Save as Draft" class="btn btn-primary buttonstyling" id="saveDraftbuttoninfo{element_id}" data-entry="New" style="margin-left: 5px;" onclick="saveAsDraft()">
                    <input type="button" name="previewDraft" value="Preview Draft" class="btn btn-primary buttonstylin"  id="previewButton" onclick="previewDraft()" style="margin-left: 5px;">
                    <input type="button" name="resetDraft" value="Reset Draft Status" class="btn btn-primary buttonstylin"  id="resetButton" onclick="resetDraft()" style="margin-left: 5px;">"""
                    )

                if i == "Refresh Computation":
                    html = (
                        html
                        + f"""<input type="submit" name="submitComp" value="Refresh Computation" class="btn btn-primary buttonstylin button_standard_save" data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' id="calculateComp{element_id}">"""
                    )

                if i == "Custom Validation":
                    html = (
                        html
                        + f"""<input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">
                  <button  name="customValidation" id="customValidationList{element_id}" type="button" class="btn btn-primary buttonstylin ml-2  customValidationButton"  data-table-name='{data['table_hidden']}' data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" data-save-config="" data-element_id="customValidationList{element_id}" >&nbsp;Custom Validation</button>"""
                    )
                    html = (
                        html
                        + f"""<!-- Custom Validation Modal -->
                        <div class="modal fade" id="customValidation{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="customValidation{element_id}" aria-hidden="true" style= "height: 100vh;" >
                          <div class="modal-dialog modal-xl" role="document" >
                            <div class="modal-content" style='height:600px;'>
                              <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
                                <h5 class="modal-title" id="customValidation{element_id}" style="width:100%;text-align: center;height:auto;">Configure Custom Validation</h5>
                                <button type="button" class="close" data-dismiss="modal"  data-target='#customValidation{element_id}' aria-label="Close">
                                  <span aria-hidden="true">&times;</span>
                                </button>
                              </div>
                              <div class="modal-body" style= "height: 40vh;overflow-y: auto">
                                <div id="carouselCustomValidation{element_id}" class="carousel slide" data-interval="false" >
                                  <div class="card">
                                    <div class="card-body">

                                      <div class="carousel-inner">

                                          <!-- Existing  Configuration -->
                                          <div class="carousel-item active" name='existing_config'>
                                            <div class='card'>
                                              <div class='card-header' style="font-size: medium; font-weight: bold;">Configure Custom Validation</div>
                                              <div class='card-body' style='overflow:auto'>
                                                <div class="row" style="width: 100%;display: flex;justify-content: flex-end; align-items: center;">

                                                </div>
                                                <div>
                                                  <table class="table" id="reload_custom_table">
                                                    <thead style="text-align:center">
                                                      <tr>
                                                        <th>Sr.no</th>
                                                        <th>Table Name</th>
                                                        <th>Actions</th>
                                                      </tr>
                                                    </thead>
                                                    <tbody style="text-align:center" id="configuration_val_row_{element_id}">

                                                    </tbody>
                                                  </table>
                                                </div>
                                              </div>
                                            </div>
                                          </div>

                                            <!-- Setting Condition  -->
                                              <div class="carousel-item" name='setting_config'>
                                                <div class='card'>
                                                  <div class='card-header' style="font-size: medium; font-weight: bold;"> Custom Condition Set:</div>
                                                  <div class='card-body' style='overflow:auto'>

                                                    <div class="row">
                                                      <div class="col-4">
                                                        <select id="custommValidationSelection_{element_id}" class="select2 form-control" name="table" onchange="conditionalTable(elementID='{element_id}')">
                                                          <option value="" disabled selected>Select Table name</option>
                                                        </select>
                                                      </div>
                                                    </div>

                                                    <div style="margin-top:2em;">
                                                      <div class="btn-group">
                                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                        Add Condition
                                                          <span class="caret"></span>
                                                        </button>
                                                        <ul class="dropdown-menu" id="condition_dropdown{element_id}" style="max-height:12rem;">
                                                        </ul>
                                                      </div>
                                                      <div class="btn-group">
                                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                        Add Master Based Condition
                                                          <span class="caret"></span>
                                                        </button>
                                                        <ul class="dropdown-menu" id="condition_dropdown1{element_id}" style="max-height:12rem;">
                                                        </ul>
                                                      </div>
                                                      <div class="row" id="items">
                                                        <table class="table " id= 'custom_validation_table_{element_id}'>
                                                        </table>
                                                      </div>
                                                    </div>

                                                    <button type="button" style="float:right"
                                                      class="btn btn-md btn-primary save_custom_validation" data-elementID="{element_id}"  onclick="saveCustomValidation(elementID='{element_id}')" data-slide="next">Save Validation</button>

                                                  </div>
                                                </div>
                                              </div>
                                      </div>
                                      <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselCustomValidation{element_id}"
                                        role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                                      <span class="sr-only">Previous</span>

                                      <span class="carousel-control-next-icon carousel-control-next" href="#carouselCustomValidation{element_id}"
                                        role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                                      <span class="sr-only">Next</span>
                                    </div>
                                  </div>
                                </div>
                                </div>
                                <div class="modal-footer">
                                  <button type="button" class="btn btn-primary submitcustomvalidation"   data-elementID="{element_id}" >Set Custom Validation</button>
                                  <button type="button" class="btn btn-primary removecustomvalidation"   data-elementID="{element_id}" >Remove Custom Validation</button>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close" data-target='#customValidation{element_id}'>Close</button>
                                </div>
                              </div>
                            </div>
                          </div>
                      <!-- End Custom Validation -->"""
                    )

                if i == "View History":
                    html = (
                        html
                        + f"""<button  name="viewHistoryCreate"  type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{data['table_hidden']}' data-template="Constraint" data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"  data_history_cols='{viewHistory_columns}' onclick="HistoryViewTable(this)" >&nbsp;View History</button>
                    <div class="modal fade" id="view_history_tabular"  role="dialog" data-focus="false" aria-labelledby="view_history_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
                      <div class="modal-dialog modal-xl" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="">Details</h5>
                          </div>
                          <div class="modal-body" style="padding:50px;">
                          </div>
                          <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                    </div>

                  """
                    )
                if i == "View Rejected Records":
                    html = (
                        html
                        + f"""<button  name="viewRejectedRecord"  type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{data['table_hidden']}'  data-template="Constraint" data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"   onclick="ViewRejectedEntryTable(this)" >&nbsp;View Rejected Records</button>

                  <div class="modal fade" id="rejected_records_tabular"  role="dialog" data-focus="false" aria-labelledby="rejected_records_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
                  <div class="modal-dialog modal-xl" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="">Details</h5>
                      </div>
                      <div class="modal-body" style="padding:50px;">
                      </div>
                      <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
            """
                    )
                if i == "View Transactions Status":
                    html = (
                        html
                        + f"""<button  name="viewTransaction"  type="button" class="btn btn-primary buttonstylin  ml-1"  data-table-name='{data['table_hidden']}' data-template="Constraint" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" >&nbsp;View Transaction Status</button>"""
                    )

            html = (
                html
                + f"""<input type="button" name="back" value="&#8592;" class="btn backbtn" id="button-id-back" onclick="goBack()" style="margin-left: 5px; margin-bottom:10px;">"""
            )
            html = (
                html
                + f"""<br><div class="card" id="createHistoryView{element_id}"  style="overflow:auto;width:100%;display:none;">
                    <div class="card-header">
                    <h6 class="card-title"></h6>
                    <div class="card-tools">
                    <button type="button" class="cardUploadtoggle btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-plus">
                    </i>
                    </button>
                    </div></div>
                    <div class='card-body'>
                    <div class='card-table_insertion' style='height: 60vh;overflow-y: auto;margin-top: 20px;'><table id="createhistory_datatable_{element_id}" class="row-border display" ><thead><th>No Data Found</th></thead><tbody></tbody></table></div></div></div>

            </div>
            <input id="table_hidden{element_id}" type="hidden" value="{data['table_hidden']}">
            """
            )
            if not tab_pane:
                html = html + "</div>"
            script = script + scriptGenerator("Constraint", "create view", element_id, request_user)
        elif template_name == "Asset Grouping":
            html = (
                html
                + f"\n <div class='tab-pane fade' fetchpriority='high' id='{element_id}_tab_content' role='tabpanel' aria-labelledby='{element_id}-tab'>"
            )
            if view == "create view":
                html = (
                    html
                    + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card ' id='createview{element_id}'>"
                )
            if view == "list view":
                html = (
                    html
                    + f"<div class='container-fluid'> <div class='font-weight-light'> <div class='card ' id='list_view_edit_modal_{element_id}'>"
                )
            dataTab = read_data_func(
                request_user,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])
            model_name = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            verboseList = None
            actual_model_name = dynamic_model_create.get_model_class(model_name, request_user)
            verboseList = {
                field.name: field.verbose_name.title() for field in actual_model_name.concrete_fields
            }
            data = {}
            viewHistory_columns = "{}"
            data["table_hidden"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            data["condition_type"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["constraint_type"]
            data["selected_tables"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["selected_tables"]
            data["usecase_name"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["usecase_name"]
            data["verbose_list"] = verboseList
            data["actions"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3]["value"]
            data["preview_mode"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3].get("Preview_mode")
            data["viewHistory_columns"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3].get("viewHistory_columns")
            if data["preview_mode"]:
                createview_preview_mode = data["preview_mode"]

            if data["viewHistory_columns"]:
                viewHistory_columns = json.dumps(data["viewHistory_columns"])

            html = (
                html
                + f"""
                <div class="card-body">

                <div class=" table-responsive">
                <table id="tables_asset{element_id}"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll">
                    <thead>
                    <tr  class="f"  style="border-top: 1px solid var(--primary-color);border-bottom:1px solid var(--primary-color);display: flex;justify-content: space-around ;align-items: center;" >
                    <th data-name="model_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Model_name']}</th>
                    <th data-name="rule_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Rule_name']}</th>
                    <th data-name="rule_description" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Rule_description']}</th>
                    <th data-name="constraint_type" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constraint_type']}</th>
                    <th data-name="table_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constraint_table']}</th>
                    <th data-name="constraint_parameter" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constaint_parameter']} </th>
                    <th data-name="condition_datatype" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Condition_datatype']} </th>
                    <th data-name="condition" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Condition']}</th>
                    <th data-name="threshold" style="width:150px;text-align: center;white-space: pre-line;" >&nbsp;&nbsp;{data['verbose_list']['Threshold']} </th>
                    <th><i class="add_asset{element_id} fa fa-plus-square fa-2x" aria-hidden="true" style="color:var(--primary-color);margin: 2px 0px;"></i></th>

                    </tr>
                </thead>

                <tbody style="max-height: 4rem;overflow: scroll;">
                    <br>
                    <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                    <td>
                        <input  data-name="model_name" class="asset_model_name form-control p-2"  data-name="model_name"  placeholder="Rule Name" style="width:150px;">
                    </td>
                    <td>
                        <select class="constraint_row_reference_id select2 form-control "     data-name="rule_set"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['Rule_name']} </option>
                        </select>
                    </td>

                    <td >
                        <input  data-name="constraint_name" class="constraint_row_names form-control p-2"  data-name="constraint_name"  placeholder="Constraint Name" style="width:150px;">
                    </td>

                    <td>
                        <select  class="assets_constraint_row_selection select2 form-control " data-name="constraint_type"  name="template" style="width:150px;">
                        <option selected disabled>Constraint Type </option>"""
            )
            for i in data["condition_type"]:

                html = html + f""" <option value="{i}"  data-type="{i}"> {i}</option>"""

            html = (
                html
                + f"""</select>
                    </td>

                    <td >
                        <select class="assets_row_tables select2 form-control" data-name="table_name"   name="template" style="width:150px;">
                        <option selected disabled>Select {data['verbose_list']['table_name']}</option>"""
            )
            for i in data["selected_tables"]:
                html = html + f"""<option value="{i}">{i}</option>"""
            html = (
                html
                + """</select>
                  </td>

                  <td >"""
                + f"""     <select  class="asset_row_column select2 form-control" data-name="constraint_parameter"  name="template" style="width:150px;">
                      <option selected disabled>{data['verbose_list']['Constaint_parameter']} </option>
                    </select>
                  </td>
                  <td >
                    <select class="asset_constraint_row_condition_type select2 form-control"  data-name="condition_datatype"   name="template" style="width:150px;">
                      <option selected disabled>{data['verbose_list']['Condition_datatype']}</option>
                      <option value="Character">Character Type</option>
                      <option value="Numeric">Numeric Type</option>
                  </td>

                  <td >
                    <select class="asset_constraint_row_condition select2 form-control" data-name="condition"  name="template" style="width:150px;">
                      <option selected disabled>{data['verbose_list']['Condition']}</option>
                  </td>

                  <td >
                    <input data-name="threshold"  class="constraint_row_input form-control p-2 " data-name="threshold"   placeholder="Enter {data['verbose_list']['Threshold']} " style="width:150px;">
                  </td>
                  <td><button type="button"  data-toggle="tooltip" title="Modal for extra condition"  disabled class="add_conditions btn btn-primary btn-md rounded mb-1 px-2"   ><i class="fas fa-check-circle fa-lg" style="font-size: large;"></i></button>
                    <!-- <button type="button" data-toggle="tooltip" title="Pending for Rejection" disabled class="userpermission_reject btn btn-primary btn-md rounded mb-1 px-2" ><i class="fa fa-times-circle fa-lg" style="font-size: large;"></i></button> -->
                  </td>
                  <td>
                    <a href="#"  class=" fa fa-times" style="color:white;"></a>
                  </td>

                </tr>

              </tbody>
              </table>
            </div>
          </div>
          <!-- Save & Close  -->
          <div  style="margin-top:20px;margin-left:2rem"class="form-group">"""
            )
            for i in data["actions"]:
                if i == "Save":
                    if createview_preview_mode:
                        if edit:
                            html = (
                                html
                                + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling button_standard_save" data-table-name='{data['table_hidden']}' data-preview-mode='preview'  data-template-name='{template_name}' data-element-id='{element_id}' onclick='editPreviewMode(this)' id="savebuttonasset{element_id}">"""
                            )
                        else:
                            html = (
                                html
                                + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling button_standard_save" data-table-name='{data['table_hidden']}' data-preview-mode='preview'  data-template-name='{template_name}' data-element-id='{element_id}' onclick='previewCreateViewSave(this)' id="savebuttonasset{element_id}">"""
                            )
                    else:
                        html = (
                            html
                            + f"""<input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling button_standard_save" data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' id="savebuttonasset{element_id}">"""
                        )

                if i == "Refresh Computation":
                    html = (
                        html
                        + f"""<input type="submit" name="submitComp" value="Refresh Computation" class="btn btn-primary buttonstyling button_standard_save" data-table-name='{data['table_hidden']}' data-template-name='{template_name}' data-element-id='{element_id}' id="calculateComp{element_id}">"""
                    )

                if i == "Custom Validation":
                    html = (
                        html
                        + f"""<input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">
                  <button id="customValidationList{element_id}"  name="customValidation" data-save-config="" data-element_id="customValidationList{element_id}" type="button" class="btn btn-primary buttonstyling ml-2  customValidationButton"  data-table-name='{data['table_hidden']}' data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" >&nbsp;Custom Validation</button>"""
                    )
                    html = (
                        html
                        + f"""<!-- Custom Validation Modal -->
                        <div class="modal fade" id="customValidation{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="customValidation{element_id}" aria-hidden="true" style= "height: 100vh;" >
                          <div class="modal-dialog modal-xl" role="document" >
                            <div class="modal-content" style='height:600px;'>
                              <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
                                <h5 class="modal-title" id="customValidation{element_id}" style="width:100%;text-align: center;height:auto;">Configure Custom Validation</h5>
                                <button type="button" class="close" data-dismiss="modal"  data-target='#customValidation{element_id}' aria-label="Close">
                                  <span aria-hidden="true">&times;</span>
                                </button>
                              </div>
                              <div class="modal-body" style= "height: 40vh;overflow-y: auto">
                                <div id="carouselCustomValidation{element_id}" class="carousel slide" data-interval="false" >
                                  <div class="card">
                                    <div class="card-body">

                                      <div class="carousel-inner">

                                          <!-- Existing  Configuration -->
                                          <div class="carousel-item active" name='existing_config'>
                                            <div class='card'>
                                              <div class='card-header' style="font-size: medium; font-weight: bold;">Configure Custom Validation</div>
                                              <div class='card-body' style='overflow:auto'>
                                                <div class="row" style="width: 100%;display: flex;justify-content: flex-end; align-items: center;">

                                                </div>
                                                <div>
                                                  <table class="table" id="reload_custom_table">
                                                    <thead style="text-align:center">
                                                      <tr>
                                                        <th>Sr.no</th>
                                                        <th>Table Name</th>
                                                        <th>Actions</th>
                                                      </tr>
                                                    </thead>
                                                    <tbody style="text-align:center" id="configuration_val_row_{element_id}">

                                                    </tbody>
                                                  </table>
                                                </div>
                                              </div>
                                            </div>
                                          </div>

                                            <!-- Setting Condition  -->
                                              <div class="carousel-item" name='setting_config'>
                                                <div class='card'>
                                                  <div class='card-header' style="font-size: medium; font-weight: bold;"> Custom Condition Set:</div>
                                                  <div class='card-body' style='overflow:auto'>

                                                    <div class="row">
                                                      <div class="col-4">
                                                        <select id="custommValidationSelection_{element_id}" class="select2 form-control" name="table" onchange="conditionalTable(elementID='{element_id}')">
                                                          <option value="" disabled selected>Select Table name</option>
                                                        </select>
                                                      </div>
                                                    </div>

                                                    <div style="margin-top:2em;">
                                                      <div class="btn-group">
                                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                        Add Condition
                                                          <span class="caret"></span>
                                                        </button>
                                                        <ul class="dropdown-menu" id="condition_dropdown{element_id}" style="max-height:12rem;">
                                                        </ul>
                                                      </div>
                                                      <div class="btn-group">
                                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                        Add Master Based Condition
                                                          <span class="caret"></span>
                                                        </button>
                                                        <ul class="dropdown-menu" id="condition_dropdown1{element_id}" style="max-height:12rem;">
                                                        </ul>
                                                      </div>
                                                      <div class="row" id="items">
                                                        <table class="table " id= 'custom_validation_table_{element_id}'>
                                                        </table>
                                                      </div>
                                                    </div>

                                                    <button type="button" style="float:right"
                                                      class="btn btn-md btn-primary save_custom_validation" data-elementID="{element_id}"  onclick="saveCustomValidation(elementID='{element_id}')" data-slide="next">Save Validation</button>

                                                  </div>
                                                </div>
                                              </div>
                                      </div>
                                      <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselCustomValidation{element_id}"
                                        role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                                      <span class="sr-only">Previous</span>

                                      <span class="carousel-control-next-icon carousel-control-next" href="#carouselCustomValidation{element_id}"
                                        role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                                      <span class="sr-only">Next</span>
                                    </div>
                                  </div>
                                </div>
                                </div>
                                <div class="modal-footer">
                                  <button type="button" class="btn btn-primary submitcustomvalidation"   data-elementID="{element_id}" >Set Custom Validation</button>
                                  <button type="button" class="btn btn-primary removecustomvalidation"   data-elementID="{element_id}" >Remove Custom Validation</button>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close" data-target='#customValidation{element_id}'>Close</button>
                                </div>
                              </div>
                            </div>
                          </div>
                      <!-- End Custom Validation -->"""
                    )
                if i == "View History":
                    html = (
                        html
                        + f"""<button  name="viewHistoryCreate"  type="button" class="btn btn-primary buttonstyling   ml-1"  data-table-name='{data['table_hidden']}' data-template="Asset Grouping" data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"  data_history_cols='{viewHistory_columns}' onclick="HistoryViewTable(this)" >&nbsp;View History</button>
                      <div class="modal fade" id="view_history_tabular"  role="dialog" data-focus="false" aria-labelledby="view_history_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
                      <div class="modal-dialog modal-xl" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="">Details</h5>
                          </div>
                          <div class="modal-body" style="padding:50px;">
                          </div>
                          <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                    </div>
                  """
                    )
                if i == "View Rejected Records":
                    html = (
                        html
                        + f"""<button  name="viewRejectedRecord"  type="button" class="btn btn-primary buttonstyling   ml-1"  data-table-name='['{data['table_hidden']}'']' data-template="Asset Grouping" data-toggle="modal" data-target="#viewHistoryCreate{element_id}" data-elementID="{element_id}"   onclick="ViewRejectedEntryTable(this)" >&nbsp;View Rejected Records</button>

                  <div class="modal fade" id="rejected_records_tabular"  role="dialog" data-focus="false" aria-labelledby="rejected_records_tabular" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
                  <div class="modal-dialog modal-xl" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="">Details</h5>
                      </div>
                      <div class="modal-body" style="padding:50px;">
                      </div>
                      <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
            """
                    )

            html = (
                html
                + f"""<input type="button" name="back" value="&#8592;" class="btn backbtn" id="button-id-form" onclick="goBack()" style="margin-left: 5px;margin-bottom:10px;">"""
            )

            html = (
                html
                + f"""<br><div class="card" id="createHistoryView{element_id}"  style="overflow:auto;width:100%;display:none;">
                    <div class="card-header">
                    <h6 class="card-title"></h6>
                    <div class="card-tools">
                    <button type="button" class="cardUploadtoggle btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-plus">
                    </i>
                    </button>
                    </div></div>
                    <div class='card-body'>
                    <div class='card-table_insertion' style='display:none;height: 60vh;overflow-y: auto;margin-top: 20px;'><table id="createhistory_datatable_{element_id}" class="row-border display" ><thead><th>No Data Found</th></thead><tbody></tbody></table></div></div></div>


            </div>

            <input id="table_hidden{element_id}" type="hidden" value="{data['table_hidden']}">

            <div class ="modal fade" id="condition_modal"  role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"aria-hidden="true">
              <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                  <div class="modal-content" style="border:none;">
                      <div class="modal-header" style="background:#565a5e; color:white; text-align:center;">
                          <h5 class="modal-title text-center w-100" style="margin:0 auto;">Condition</h5>
                          <button type="button" class="close asset_modal_button" data-dismiss="modal" aria-label="Close"style="float:right;display:inline;margin:0;padding:0">
                          <span aria-hidden="true">&times;</span>
                          </button>&nbsp
                          <button  type="button" data-dismiss="modal" aria-label="Save" class="btn btn-floating buttonfooter save_button_asset_modal" style="padding:0; float: left !important;">
                            <span aria-hidden="true"><i class="fa fa-check-square fa-2x text-primary"></i></span>
                          </button>
                      </div>
                      <div class="modal-body">

                        <div class=" table-responsive">
                          <table id="tables_asset_modal{element_id}"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll">
                            <thead>
                            <tr  class="asset_tableHeader"  style="border-top: 1px solid var(--primary-color);border-bottom:1px solid var(--primary-color);display: flex;justify-content: space-around ;align-items: center;" >
                              <th data-name="model_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Model_name']}</th>
                              <th data-name="rule_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Rule_name']}</th>
                              <th data-name="rule_description" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Rule_description']}</th>
                              <th data-name="constraint_type" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constraint_type']}</th>
                              <th data-name="table_name" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constraint_table']}</th>
                              <th data-name="constraint_parameter" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Constaint_parameter']} </th>
                              <th data-name="condition_datatype" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Condition_datatype']} </th>
                              <th data-name="condition" style="width:150px;text-align: center;white-space: pre-line;">&nbsp;&nbsp;{data['verbose_list']['Condition']}</th>
                              <th data-name="threshold" style="width:150px;text-align: center;white-space: pre-line;" >&nbsp;&nbsp;{data['verbose_list']['Threshold']} </th>
                              <th><i class="add_asset_1{element_id} fa fa-plus-square fa-2x" aria-hidden="true" style="color:var(--primary-color);margin: 2px 0px;"></i></th>

                            </tr>
                          </thead>

                          <tbody style="max-height: 4rem;overflow: scroll;">
                              <br>
                              <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                                <td>
                                  <input  data-name="model_name" class="model_name form-control p-2"  data-name="model_name"  placeholder="Rule Name" style="width:150px;">
                                </td>
                                <td>
                                  <input  data-name="asset_row_reference_id" class="asset_row_reference_id form-control p-2"  data-name="rule_set"  style="width:150px;">
                                </td>

                                <td >
                                  <input  data-name="asset_name" class="asset_row_names form-control p-2"  data-name="asset_name"  placeholder="Rule Name" style="width:150px;">
                                </td>

                              <td>
                                <select  class="assets_constraint_row_selection select2 form-control " data-name="constraint_type"  name="template" style="width:150px;">
                                  <option selected disabled>Constraint Type </option>"""
            )
            for i in data["condition_type"]:
                html = html + f"""<option value="{i}"  data-type="{i}">{i} </option>"""
            html = (
                html
                + f"""</select>
                    </td>
                    <td >
                    <select class="assets_row_tables select2 form-control" data-name="table_name"   name="template" style="width:150px;">
                        <option selected disabled>Select {data['verbose_list']['table_name']}</option>"""
            )
            for i in data["selected_tables"]:
                html = html + f"""<option value="{i}">{i}</option>"""
            html = (
                html
                + f"""</select>
                          </td>
                            <td>"""
                + f"""<select  class="asset_row_column select2 form-control" data-name="constraint_parameter"  name="template" style="width:150px;">
                <option selected disabled>{data['verbose_list']['Constaint_parameter']} </option>
            </select>
            </td>
            <td >
    <select class="asset_constraint_row_condition_type select2 form-control"  data-name="condition_datatype"   name="template" style="width:150px;">
                <option selected disabled>{data['verbose_list']['Condition_datatype']}</option>
                <option value="Character">Character Type</option>
                <option value="Numeric">Numeric Type</option>
            </td>

            <td>
            <select class="asset_constraint_row_condition select2 form-control" data-name="condition"  name="template" style="width:150px;">
                <option selected disabled>{data['verbose_list']['Condition']}</option>
            </td>

            <td>
            <input data-name="threshold"  class="constraint_row_input form-control p-2 " data-name="threshold"   placeholder="Enter {{t.verbose_list.Threshold}} " style="width:150px;">
            </td>

            <td>
            <a href="#"  class=" fa fa-times" style="color:white;"></a>
            </td>

            </tr>

            </tbody>
            </table>
            </div></div></div></div></div>"""
            )
            script = script + scriptGenerator("Asset Grouping", "create view", element_id, request_user)
        html = html + "</div></div></div></div>"
    return html, script


def button_styling(styling_dict, button_identifier):
    if styling_dict is not None and styling_dict.get(button_identifier) is not None:
        Button = styling_dict.get(button_identifier)
        hoverColorOption = ""
        hoverBgColoroption = ""
        if Button["text"] != "":
            changeText = Button["text"]
        else:
            changeText = ""
        if Button["data-icon"] != "":
            if Button["icon-color"] != "#ffffff":
                iconAppend = f"<i class='{Button['data-icon']}' style='color:{Button['icon-color']}'></i>"
            else:
                iconAppend = f"<i class='{Button['data-icon']}'></i>"
        else:
            iconAppend = ""
        if Button["hoveractions"] == "Color":
            hoverColorOption = f"this.style.backgroundColor='{Button['hover-color']}'"
            hoverBgColoroption = f"this.style.backgroundColor='{Button['rgba']}'"
        elif Button["hoveractions"] == "Gradient":
            hoverColorOption = f"this.style.backgroundImage='{Button['type-gradient']}({Button['gradient-color-1']},{Button['gradient-color-2']})'"
            hoverBgColoroption = f"this.style.backgroundImage=''"
        elif Button["hoveractions"] == "textsize":
            hoverColorOption = f"this.style.fontSize='{Button['hover-text-size']}'"
            if Button["font-size"] != "none":
                hoverBgColoroption = f"this.style.fontSize='{Button['font-size']}'"
            else:
                hoverBgColoroption = f"this.style.fontSize=''"
        else:
            hoverColorOption = f"''"
            hoverBgColoroption = f"''"
        classes = f""
        if "shape" in Button:
            if Button["shape"] == "square":
                if Button["font-size"] != "none":
                    if Button["font-size"] == "10px":
                        classes = f"btn-square-xsm"
                    elif Button["font-size"] == "12px":
                        classes = f"btn-square-sm"
                    elif Button["font-size"] == "16px":
                        classes = f"btn-square-md"
                    elif Button["font-size"] == "20px":
                        classes = f"btn-square-lg"
                    elif Button["font-size"] == "24px":
                        classes = f"btn-square-xl"
                else:
                    classes = f"btn-square-md"
            elif Button["shape"] == "circle":
                if Button["font-size"] != "none":
                    if Button["font-size"] == "10px":
                        classes = f"btn-circle-xsm"
                    elif Button["font-size"] == "12px":
                        classes = f"btn-circle-sm"
                    elif Button["font-size"] == "16px":
                        classes = f"btn-circle-md"
                    elif Button["font-size"] == "20px":
                        classes = f"btn-circle-lg"
                    elif Button["font-size"] == "24px":
                        classes = f"btn-circle-xl"
                else:
                    classes = f"btn-circle-md"
            elif Button["shape"] == "oval":
                if Button["font-size"] != "none":
                    if Button["font-size"] == "10px":
                        classes = f"btn-oval-xsm"
                    elif Button["font-size"] == "12px":
                        classes = f"btn-oval-sm"
                    elif Button["font-size"] == "16px":
                        classes = f"btn-oval-md"
                    elif Button["font-size"] == "20px":
                        classes = f"btn-oval-lg"
                    elif Button["font-size"] == "24px":
                        classes = f"btn-oval-xl"
                else:
                    classes = f"btn-oval-md"
            elif Button["shape"] == "parallelogram":
                classes = f"btn-parallelogram mx-3"
                changeText = f"<span class='btn-skew-fix'>{iconAppend} {changeText}</span>"
                iconAppend = f""
        styling = f"'color:{Button['color']};background-color:{Button['rgba']} !important;border-style:{Button['border-style']};border-width:{Button['border-width']}{Button['border-measure']};border-color:{Button['border-color']} !important;font-size:{Button['font-size']};'"
        onMouseOver = hoverColorOption
        onMouseOut = hoverBgColoroption
        iconAppend
        changeText
        dict_a = {
            "styling": styling,
            "onMouseOver": onMouseOver,
            "onMouseOut": onMouseOut,
            "iconAppend": iconAppend,
            "changeText": changeText,
            "class": classes,
        }
        return dict_a
    else:
        return None


def html_generator_list_view_tabpane(
    model_name,
    create_view_tab_body_content,
    element_id,
    ele_id,
    tab_type,
    header_name,
    request,
    data1,
    template,
    count=1,
    length=1,
    edit=False,
    tab_pane=True,
    plot=False,
    app_code="",
    mode="",
    iden="",
    iden2="",
):
    username = request.user.username
    pr_code = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "TabScreens",
                "Columns": ["related_item_code"],
            },
            "condition": [
                {
                    "column_name": "element_id",
                    "condition": "Equal to",
                    "input_value": ele_id,
                    "and_or": "",
                },
            ],
        },
    ).iloc[0]["related_item_code"]
    process_flow_design = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "NavigationSideBar",
                "Columns": ["process_flow_design"],
            },
            "condition": [
                {
                    "column_name": "item_code",
                    "condition": "Equal to",
                    "input_value": pr_code,
                    "and_or": "",
                },
            ],
        },
    ).iloc[0]["process_flow_design"]
    if process_flow_design is not None:
        process_flow_design = json.loads(process_flow_design)
    row_data = {}
    row_data["element_id"] = ele_id
    row_data["tab_header_name"] = header_name
    row_data["tab_type"] = tab_type
    dp_config = "{'id': 'dp_11', 'picker_type': 'DATETIME', 'linked_to': null, 'options': {'showClose': true, 'showClear': true, 'showTodayButton': true, 'format': 'DD-MM-YYYY HH:mm:ss'}}"
    row_data["tab_body_content"] = create_view_tab_body_content
    mtmap = False
    pr_code = getPrCodeFromElementId(ele_id, request)
    actual_model_name = dynamic_model_create.get_model_class(model_name, request)
    verboseList = {field.name: field.verbose_name.title() for field in actual_model_name.concrete_fields}
    verboseList_notitle = {field.name: field.verbose_name for field in actual_model_name.concrete_fields}
    create_view_element_id = None
    if "MultipleTableMapping" in json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"]:
        mconfig = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"][
            "MultipleTableMapping"
        ]
        mtmap = True
        if model_name in mconfig:
            create_view_element_id = mconfig[model_name]
        else:
            mtmap = False
    list_type_template = ""
    download_action_button = ""
    if "listViewCustomVal" in json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"]:
        list_cust_config = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"][
            "listViewCustomVal"
        ]
        if len(list_cust_config) > 0:
            listviewcustAllowBoth = True
        else:
            listviewcustAllowBoth = False
    else:
        listviewcustAllowBoth = False
    if "allowListViewCustV" in json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"]:
        if json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"]["allowListViewCustV"]:
            listviewcustAllow = True
        else:
            listviewcustAllow = False
    else:
        listviewcustAllow = False
    try:
        download_action = list(json.loads(create_view_tab_body_content)["Category_sub_elements"])[4][
            "Category_sub_element_attributes"
        ][6]["value"]
        if download_action == "Yes":
            download_action_button = '<a type="button" class="acies_btn-primary btn btn-primary">Download</a>'
    except Exception:
        pass
    if create_view_tab_body_content:
        template_config = json.loads(create_view_tab_body_content)
        if "reportingView" in template_config:
            list_type_template = template_config["reportingView"]["Template_choice"]

    t = list_view_tab("", "", row_data, request)
    html = ""
    script = ""
    if tab_pane:
        tab_pane_class = "tab-pane fade"
        style = ""
    else:
        tab_pane_class = "c"
        style = "style='display:grid;'"
        if template != "Multiple table":
            html = html + "<div>"
    # Create View Content on List View Modal
    create_view_mode = "YES"
    if template_config.get("mulview_comp_element_id"):
        comp_element_id = template_config["mulview_comp_element_id"]
    else:
        comp_element_id = ""
    process_number = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "TabScreens",
                "Columns": ["related_item_code"],
            },
            "condition": [
                {
                    "column_name": "element_id",
                    "condition": "Equal to",
                    "input_value": ele_id,
                    "and_or": "and",
                },
                {
                    "column_name": "tab_type",
                    "condition": "Equal to",
                    "input_value": "list_view",
                    "and_or": "",
                },
            ],
        },
    )

    related_item_flowchart = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "Process_subprocess_flowchart",
                "Columns": ["flowchart_elements"],
            },
            "condition": [
                {
                    "column_name": "related_item_code",
                    "condition": "Equal to",
                    "input_value": process_number.values[0][0],
                    "and_or": "",
                }
            ],
        },
    )
    tablesUserDefined = read_data_func(
        request,
        {
            "inputs": {"Data_source": "Database", "Table": "Tables", "Columns": ["tablename"]},
            "condition": [],
        },
    ).tablename.tolist()
    if not related_item_flowchart.empty:
        related_item_flowchart = related_item_flowchart.to_dict()
        flowchart_element = json.loads(related_item_flowchart["flowchart_elements"][0])
        data_create_html = ""
        # extracting parent element id
        parent_element_id = "#"
        for i in flowchart_element:
            if (i["shapeID"] == element_id) and (i["shape"] == "process"):
                for parent in i["parent"]:
                    if parent.startswith("whiteSpacewrap"):
                        parent_element_id = parent
            elif (i["shape"] == "proces") and mtmap:
                for parent in i["parent"]:
                    if parent.startswith("whiteSpacewrap") and element_id in mconfig.values():
                        parent_element_id = element_id
                    else:
                        mtmap = False
        if create_view_element_id is not None:
            parent_element_id = create_view_element_id
        if parent_element_id != "#":
            createview_df = read_data_func(
                request,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["table_name", "tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": parent_element_id,
                            "and_or": "and",
                        },
                        {
                            "column_name": "tab_type",
                            "condition": "Equal to",
                            "input_value": "create_view",
                            "and_or": "",
                        },
                    ],
                },
            )
            createview_content = createview_df.to_dict()
            model_name1 = json.loads(createview_content["table_name"][0])[0]
            createview_content = json.loads(createview_content["tab_body_content"][0])
            create_view_dict = json.loads(create_view_tab_body_content)
            if "create_view_selection_checker" not in create_view_dict.keys():
                create_view_dict["create_view_selection_checker"] = False
            if "create_view_selection_checker" in create_view_dict.keys():
                if (not create_view_dict["create_view_selection_checker"]) or mtmap:
                    create_view_mode = "NO"
                    data_create_html, scriptInd = html_generator(
                        model_name1, createview_content, parent_element_id, request, edit=False
                    )
                    data_create_html = data_create_html
                    script = script + scriptInd
    htmlBtn = ""
    table_Button_config = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
        "tableButtonConfig"
    )

    editedDisplayNamesMultipleTable_config = json.loads(create_view_tab_body_content)["Category_attributes"][
        "Mandatory"
    ].get("editedDisplayNamesMultipleTable")

    if template == "Multiple table":
        if count == 1 and not data1.get("no"):
            if table_Button_config is not None:
                if table_Button_config["addTableBtn"] is True:
                    htmlBtn = f"""<button class='float-right changeTab fuller-listview-button' data-toggle="modal" data-target="#addTableCard{ele_id}" style="display:inline-block;cursor:pointer; margin-right:2px;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-plus" style="padding-right: 5px;"></i>  Add table</button>"""
                else:
                    htmlBtn = f"""<button class='float-right changeTab fuller-listview-button' data-toggle="modal" data-target="#addTableCard{ele_id}" style="display:none;cursor:pointer; margin-right:2px;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-plus" style="padding-right: 5px;"></i>  Add table</button>"""
                if table_Button_config["tableOrderBtn"] is True:
                    htmlBtn += f"""<button class='float-right changeTab fuller-listview-button' id ="tableOrderingBtn{ele_id}" data_list="" data-element-id="{ele_id}" data-toggle="modal" onclick="tableOrdering(this)" style="display:inline-block;cursor:pointer; margin-right:3%;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-chart-bar" style="padding-right: 5px;"></i>  Table Order</button>"""
                else:
                    htmlBtn += f"""<button class='float-right changeTab fuller-listview-button' id ="tableOrderingBtn{ele_id}" data_list="" data-element-id="{ele_id}" data-toggle="modal" onclick="tableOrdering(this)" style="display:none;cursor:pointer; margin-right:3%;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-chart-bar" style="padding-right: 5px;"></i>  Table Order</button>"""
            else:
                htmlBtn = f"""<button class='float-right changeTab fuller-listview-button' data-toggle="modal" data-target="#addTableCard{ele_id}" style="display:inline-block;cursor:pointer; margin-right:2px;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-plus" style="padding-right: 5px;"></i>  Add table</button>"""
                htmlBtn += f"""<button class='float-right changeTab fuller-listview-button' id ="tableOrderingBtn{ele_id}" data_list="" data-element-id="{ele_id}" data-toggle="modal" onclick="tableOrdering(this)" style="display:inline-block;cursor:pointer; margin-right:3%;margin-bottom:9px;font-size:17px;padding:9px;margin-top:9px;"><i class="fas fa-chart-bar" style="padding-right: 5px;"></i>  Table Order</button>"""
        else:
            htmlBtn = ""
        classes = "card card-default collapsed-card col-12"
        style = "style='width:99%;'"
        htmlHeader = f"""
      <div class="card-header">
          <h6 class="card-title"><p class="{ele_id}_editable" onfocusout="edit1.call(this)" data-user={username} data-table={model_name} data-element_id={element_id} style="margin-bottom:0px;" contenteditable="true">"""

        if editedDisplayNamesMultipleTable_config:
            if model_name in editedDisplayNamesMultipleTable_config:
                htmlHeader = htmlHeader + f"{editedDisplayNamesMultipleTable_config[model_name]}"

            else:
                htmlHeader = htmlHeader + "{{card_name_"
                htmlHeader = htmlHeader + f"{element_id}"
                htmlHeader = htmlHeader + "}}"

        else:
            htmlHeader = htmlHeader + "{{card_name_"
            htmlHeader = htmlHeader + f"{element_id}"
            htmlHeader = htmlHeader + "}}"

        htmlHeader = (
            htmlHeader
            + f"""</p></h6>
          <div class="card-tools">
            <button type="button" class="btn btn-tool" onclick="datatableAdjustBtn.call(this)" data-elementID="{element_id}" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

          </div>
        </div>
      """
        )
    else:
        classes = "card col-12"
        style = "style='height:auto;'"
        htmlHeader = ""
    if not data1.get("no") and count == 1:
        if iden2 == "yes":
            html = (
                html
                + f"""
        <div class="{tab_pane_class}" fetchpriority='high' {style} id="{ele_id}_tab_content" data-template-type="{t.get('reportingViewTemplate')}" aria-labelledby="{ele_id}-tab">"""
            )
        else:
            html = (
                html
                + f"""
        <div class="{tab_pane_class}" fetchpriority='high' {style} id="{ele_id}_tab_content" data-template-type="{t.get('reportingViewTemplate')}" role="tabpanel" aria-labelledby="{ele_id}-tab">"""
            )
    else:
        pass
    if template in ["Reporting View", "Approval Template", "List View With History"]:
        dont_show_detail_btn = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("dont_show_detail_btn")
        if t.get("reportingViewColumns"):
            reporting_parameter_name = t["reportingViewColumns"]
            reporting_parameter_verbose_name = t["reportViewVerboseColumn"]
            reporting_table_name = t["reportingViewTableName"]
            default_filter_config = t["basicfilter_config"]
            parameter_html = ""
            for p_idx, parameter in enumerate(reporting_parameter_name):
                parameter_html += f"""
            <div class="form-group col-md-3 col-sm-12">
              <label class="acies_label col-md-12">{reporting_parameter_verbose_name[p_idx]}:</label>
              <select class="select2 form-control" data-parameter-name="{parameter}" data-dont_show_detail_btn="{dont_show_detail_btn}">
                  <option value="" disabled selected>Select Value</option>
              </select>
            </div>
          """
            html += f"""
        <div class="container-fluid">
          <div class="card col-12" id="tableTab{ele_id}">
            <div class="card-header">
              <h6 class="card-title">Select Parameters</h6>
              <div class="card-tools">
                  <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
              {parameter_html}
              </div>"""
            if dont_show_detail_btn == False:
                html += f"""
              <div id="{ele_id}_tableTabSaveBtn" class='row saveReportView' style='padding:0rem;' data-table-name='{reporting_table_name}' data-reporting-parameters='{reporting_parameter_name}'>
                <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" disabled>
                    View Detail
                </button>
              </div>"""
            html += f"""
            </div>
          </div>
        </div>
        """
        else:
            pass
    elif template == "Multi Dropdown View":
        options_html = ""
        if t.get("reportingViewColumnsValue"):
            if t.get("default_view_name"):
                default_option = t["default_view_name"]
            else:
                default_option = t["reportingViewColumnsValue"][0]
            for view in t["reportingViewColumnsValue"]:
                if view == default_option:
                    options_html += f"<option value='{view}' data-default-view='yes' selected>{view}</option>"
                else:
                    options_html += f"<option value='{view}' data-default-view='no'>{view}</option>"
        else:
            pass
        html += f"""
        <div class="container-fluid">
          <div class="card col-12" id="tableTab{ele_id}">
            <div class="card-header">
              <h6 class="card-title">Select View</h6>
              <div class="card-tools">
                  <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="form-group col-md-3 col-sm-12">
                  <select class="select2 form-control">
                    {options_html}
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>
        """
    else:
        pass

    if True and not iden:
        html = (
            html
            + f"""
        <div class="modal fade FilePreviewModalClass" id="FilePreviewModal_{ele_id}" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="FilePreviewModalLabel" aria-hidden="true" style="z-index:2000;">
          <div class="modal-dialog modal-dialog-scrollable modal-xl" style="height:100%">
            <div class="modal-content text-center">
              <div class="modal-header">
                <h5 class="modal-title" id="FilePreviewModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">x</button>
              </div>
              <div class="modal-body filetoappend">
              Modal
              </div>
              <div class="modal-footer">
                {download_action_button}
              </div>
            </div>
          </div>
        </div>
      """
        )
    if (count == 1 and not data1.get("no") and not iden) or (
        count == 1 and template == "Multi Dropdown View" and not iden
    ):
        html = (
            html
            + """
        <div class="modal fade" id="viewDetailOnModal" style="display: none; backdrop-filter: brightness(0.4);" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document" style="margin-top: 5%">
              <div class="modal-content">
                <div class="modal-header" style='background:#565a5e; color:white;'>
                  <h5 class="modal-title" style="padding-left: 40%;">View Column Details</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">

                </div>
            </div>
          </div>
        </div>\n

        <div class="modal fade" id='approvalCommentModal_"""
            + f"""{element_id}"""
            + """' data-focus="false" role="dialog" data-focus="false" aria-labelledby='approvalCommentModal_"""
            + f"""{element_id}"""
            + """ ' style="backdrop-filter: brightness(0.4);z-index:2000 !important;" aria-hidden="true">
          <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
            <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
              <div class="modal-header"  style="background:#565a5e;text-align: center;">
                  <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve/ Reject Comment</h6>
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
              </div>

              <div class="modal-body " style="overflow: scroll;overflow-x:hidden;">
                <div class="approvers_edit_data" style="margin-bottom:50px"></div>
                <div class='row delegateApprovalContainer' style="display:none;">
                  <div class="form-group col-md-6 col-sm-12">
                    <label for="delegateApprovalTo" style="text-align: left;">Delegate Approval Action To:</label>
                    <select class="select2 form-control" name="delegateApprovalTo">
                    </select>
                  </div>
                  <hr>
                </div>
                <div>
                  <div class='approvalCommentTextTab_"""
            + f"""{element_id}"""
            + """' id="rtf_action_tab_id" style="display:flex;">
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1 active" data-tab-name="Text" type="button">Text Format</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1" data-tab-name="Insert" type="button">Insert</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1" data-tab-name="Form" type="button">Form</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button" data-tab-name="Page Layout" type="button">Page Layout</button>
                  </div>
                  <textarea class='approvalCommentText"""
            + f"""{element_id}"""
            + """' id='approvalCommentText"""
            + f"""{element_id}"""
            + """' name='approvalCommentText"""
            + f"""{element_id}"""
            + """' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                  <p class="form-text">Note: Please leave blank if you do not wish to put in a comment.</p>
                </div>
              </div>
              <div class="modal-footer">
                  <button type="button" id="approval_final_send" onclick="approve_ind.call(this)" class="btn btn-primary mx-2 rounded px-2" >Send</button>
              </div>
            </div>
          </div>
        </div>
        <script>
          var form_rtf = ['CreateDiv,Anchor,Language,About,PasteText,PasteFromWord,Find,Replace,SelectAll,Scayt,Blockquote,Outdent,Indent,BulletedList,NumberedList,CopyFormatting,RemoveFormat,Bold,Italic,Underline,Strike,Subscript,Superscript,TextColor,BidiLtr,BidiRtl,Templates,Link,Unlink,Source,Save,NewPage,ExportPdf,Preview,Print,Styles,Format,Font,FontSize,BGColor,ShowBlocks,Maximize,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,HorizontalRule,SpecialChar,PageBreak,Iframe,Flash,Table,Image,Smiley'];
          var home_rtf =['Source,Save,Templates,CreateDiv,Unlink,Anchor,Language,Link,Image,Flash,Table,HorizontalRule,SpecialChar,PageBreak,Iframe,ShowBlocks,Maximize,About,Print,Preview,ExportPdf,NewPage,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Smiley'];
          var tools_rtf =['Flash,About,Templates,Cut,Copy,Paste,PasteText,PasteFromWord,Redo,Undo,Find,Replace,SelectAll,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Bold,Italic,Underline,Strike,Subscript,Superscript,CopyFormatting,RemoveFormat,Outdent,NumberedList,BulletedList,Indent,Blockquote,JustifyLeft,CreateDiv,JustifyCenter,JustifyRight,JustifyBlock,Language,BidiRtl,BidiLtr,Link,Unlink,Anchor,Image,Table,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,Styles,Format,Font,FontSize,TextColor,BGColor'];
          var insert_rtf1 =['Source,Save,NewPage,ExportPdf,Preview,Print,Templates,PasteText,PasteFromWord,Replace,Find,SelectAll,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Bold,BidiLtr,BidiRtl,Language,JustifyRight,JustifyBlock,JustifyCenter,CreateDiv,Indent,BulletedList,NumberedList,Outdent,Blockquote,JustifyLeft,CopyFormatting,RemoveFormat,Styles,Format,Font,FontSize,TextColor,BGColor,ShowBlocks,Maximize,About,Italic,Underline,Strike,Subscript,Superscript'];
          CKEDITOR.replace('approvalCommentText"""
            + f"""{element_id}"""
            + """',{height: 250, removeButtons:home_rtf[0], editorplaceholder: "Add Comment..."});
          CKEDITOR.config.removePlugins = 'exportpdf';
          $('.approvalCommentTextTab_"""
            + f"""{element_id}"""
            + """ ').find('button').each(function(){
            $(this).on('click',function(){
              $('.approvalCommentTextTab_"""
            + f"""{element_id}"""
            + """ ').find('button').removeClass('active')
              $(this).addClass('active')
              if($(this).attr('data-tab-name') == "Form"){
                var editor = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'];
                var editor_data = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].getData()
                if (editor) { editor.destroy(true); }
                CKEDITOR.replace('approvalCommentText"""
            + f"""{element_id}"""
            + """',{height: 250,removeButtons:form_rtf[0], editorplaceholder: "Add Comment..."});
                CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].setData(editor_data)
              } else if ($(this).attr('data-tab-name') == "Text"){
                var editor = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'];
                var editor_data = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].getData()
                if (editor) { editor.destroy(true); }
                CKEDITOR.replace('approvalCommentText"""
            + f"""{element_id}"""
            + """',{height: 250,removeButtons:home_rtf[0], editorplaceholder: "Add Comment..."});
                CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].setData(editor_data)
              } else if ($(this).attr('data-tab-name') == "Insert"){
                var editor = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'];
                var editor_data = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].getData()
                if (editor) { editor.destroy(true); }
                CKEDITOR.replace('approvalCommentText"""
            + f"""{element_id}"""
            + """',{height: 250,removeButtons: insert_rtf1[0], editorplaceholder: "Add Comment..."});
                CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].setData(editor_data)
              } else if ($(this).attr('data-tab-name') == "Page Layout"){
                var editor = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'];
                var editor_data = CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].getData()
                if (editor) { editor.destroy(true); }
                CKEDITOR.replace('approvalCommentText"""
            + f"""{element_id}"""
            + """',{height: 250,removeButtons:tools_rtf[0], editorplaceholder: "Add Comment..."});
                CKEDITOR.instances['approvalCommentText"""
            + f"""{element_id}"""
            + """'].setData(editor_data)
              }
            });
          });
        </script>

        <style>
          #comment_status"""
            + element_id
            + """.active_comment, .comment_status_ind.active_comment{
            background: #ffd700;
            padding: 5px 8px;
            border-radius: 4px;
          }
          #comment_status"""
            + element_id
            + """.resolved_comment, .comment_status_ind.resolved_comment{
            background: #87e297;
            padding: 5px 8px;
            border-radius: 4px;
          }
          #comment_status"""
            + element_id
            + """.reopened_comment, .comment_status_ind.reopened_comment{
            background: #efa332;
            padding: 5px 8px;
            border-radius: 4px;
          }
          .approval-options-dropdown .dropdown-divider{
            margin: 0;
          }
          .approval-options-dropdown{
            height: fit-content;
            min-width: 15em;
            border-radius: 1rem;
            overflow-y: auto;
            padding:0;
            overflow: hidden;
          }
          .approval-options-dropdown.show{
            overflow-y: unset;
          }
          .approval-options-dropdown a.dropdown-item:hover{
            background-color: var(--primary-color);
            color: var(--font-hover-color);
          }
          .approval-options-dropdown a.dropdown-item{
            font-size: 85%;
            padding: 5% 10%;
            display: flex;
            align-items: center;
          }

          .approval_timeline {
            margin: 20px auto;
            padding: 20px;
            margin-right: 1.5rem;
          }
          .approvalCommentsModal .approval_timeline{
            margin: 0px auto;
          }

          .conversation_container{
            padding: 6px 0 !important;
          }
          .reply-area{
            gap: 30px !important;
          }

          /* Outer Layer with the timeline border */
          .approval_outer {
            border-left: 2px solid rgba(218,218,218,1);
          }

          /* Card container */
          .approval_card {
            position: relative;
            margin: 0 0 20px 23px;
            padding: 10px;
            border-radius: 8px;
            width: 100%;
          }

          /* Information about the timeline */
          .approval_info {
            display: flex;
            align-items:center;
            gap:6px;
            width: 100%;
          }

          /* Title of the card */
          .approval_title {
            position: relative;
            width: 5%;
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
          }

          .btn-alpha{
            background: rgba(0, 0, 0, .06);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: .25rem;
            box-shadow: rgba(0, 0, 0, 0.02) 0 1px 3px 0;
            box-sizing: border-box;
            line-height: 1.25;
            text-decoration: none;
            transition: all 250ms;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
            vertical-align: baseline;
            width: auto;
            display: flex;
            align-items: center;
          }

          .btn-alpha:hover,
          .btn-alpha:focus {
            border-color: rgba(0, 0, 0, 0.15);
            box-shadow: rgba(0, 0, 0, 0.1) 0 4px 12px;
          }

          .btn-alpha:hover {
            transform: translateY(-1px);
          }

          .btn-alpha:active {
            background-color: #F0F0F1;
            border-color: rgba(0, 0, 0, 0.15);
            box-shadow: rgba(0, 0, 0, 0.06) 0 2px 4px;
            transform: translateY(0);
          }

          /* User profile initials */
          .approval_title span, .add_comment_span, .created_title span{
            height: 30px;
            width: 30px;
            border-radius: 50%;
            background: var(--primary-color);
            color: var(--font-hover-color);
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            font-size: 13px;
          }

          .add_comment_span{
            display: inline-flex !important;
            margin-right: 12px;
          }
          .created_by_info .show{
            display:flex !important;
          }

          /* Timeline dot  */
          .approval_title::before, .add_comment_span::before {
            content: "";
            font-family: "Font Awesome 6 Free";
            font-weight: 600;
            color: lightgrey;
            font-size: small;
            position: absolute;
            width: 10px;
            height: 10px;
            background: lightgrey;
            border-radius: 999px;
            left: -39px;
            border: 2px solid white;
            top: 50%;
            transform: translateY(-50%);
          }

          .add_comment_span::before {
            left: -29px !important;
            top: 15% !important;
          }
          .text-approved, .text-rejected{
            width: 78% !important;
          }

          .levelclass{
            padding: 5px;
            border-radius: 8rem;
            background: darkgrey;
            color: white;
            margin-top: 9%;
          }

          .approval_level_divs{
            margin: 10px;
            padding: 12px 10px;
            border: 1px solid lightgrey;
            border-radius: 5px;
            background: #f9f9f9;
            box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
          }
          .levelclass::after {
            content: "";
            font-family: "Font Awesome 6 Free";
            font-weight: 600;
            color: lightgrey;
            font-size: small;
            position: absolute;
            width: 10px;
            height: 10px;
            background: lightgrey;
            border-radius: 999px;
            border: 2px solid white;
            right: 7px;
            transform: translate(12px, 3px);
            z-index: 1;
        }

          .approval_text{
            width: 83%;
            margin-bottom: 0;
            text-align:left;
          }
          .approval_timestamp{
            width: 100%;
            margin-bottom: -4px;
          }
          .rollup_comments, .expand_comments{
            position: absolute;
            left: -33px;
            font-weight: bold;
            z-index: 1;
            font-size: 16px;
            height: 18px;
            width: 18px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
          }
          .expand_comments{
            color: lightgrey !important;
          }
          .approval_comment, prev_new_content_card, .edited_content{
            box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.132), 0 0.6px 1.8px 0 rgba(0,0,0,.108);
            background: white;
          }
          .approval_comment_text{
            text-align: left;
            margin: auto 7%;
            font-size: 20px;
          }
          .approval_comment_text img{
            object-fit: contain;
            width: 100%;
          }
          .approval_comment_text a{
            color:#0782C1;
          }
          .approved_title{
            width: 10% !important;
          }
          .li_approvers{
            box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
            border: 1px solid lightgray;
            padding: 8px;
            border-radius: 5px;
          }
          .prev_new_content{
            text-align: left;
            margin-left: 7% !important;
            margin: 20px;
            font-size: 15px;
          }
          .approval_comment_card{
            border-bottom: 1px solid rgba(234,234,234,1);
            margin-bottom: 15px;
          }
          .reply_comment_card{
            margin-left: 3rem;
            margin-top: 1rem;
          }
          .reply_comment_card .approval_title::before, .reply_comment_card .add_comment_span::before{
            display: none !important;
          }
          .transaction_datatable{
            box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.132), 0 0.6px 1.8px 0 rgba(0,0,0,.108);
            background: white;
            padding: 10px;
            border-radius: 8px !important;
            padding-top: 1px !important;
          }
          #approvalWallModalBody_"""
            + element_id
            + """, #approvalCommentsModalBody_"""
            + element_id
            + """{
            overflow: scroll;
            overflow-x:hidden;
            padding:2.5rem;
            background:#f9f9f9c2;
          }
          #approvalCommentsModalBody_"""
            + element_id
            + """{
            padding-top: 0;
          }
          .approvalCommentsModal .modal-dialog{
            height: 90vh;
            overflow: auto;
            background: whitesmoke;
            z-index: 10;
            position: relative;
            width: 95%;
            max-width: unset;
            border-radius: 0.3rem;
          }
          .upper-container{
            padding-right: 3rem;
          }
          #view_at_all_levels_"""
            + element_id
            + """{
            margin: 15px 0;
          }
          .info-wrapper {
            flex-direction: row;
            margin: 20px auto;
          }
          .created_title_status, .created_by_info h6{
            font-size: 15px;
          }
          .created_title_status{
            margin-right: 0.5rem;
          }
          .lower-container{
            padding-left: 2rem;
            padding-right: 2rem;
          }

          #approvalWallModalBody_"""
            + element_id
            + """ .cke_bottom.cke_reset_all, #approvalCommentsModalBody_"""
            + element_id
            + """ .cke_bottom.cke_reset_all{
            display: none;
          }
          #approvalWallModalBody_"""
            + element_id
            + """ .cke_top.cke_reset_all, #approvalCommentsModalBody_"""
            + element_id
            + """ .cke_top.cke_reset_all{
            display: none;
          }
          #approvalWallModalBody_"""
            + element_id
            + """ .cke_contents.cke_reset, #approvalCommentsModalBody_"""
            + element_id
            + """ .cke_contents.cke_reset{
            border-bottom: 1px solid #d1d1d1!important;
            border-radius: 10px !important;
          }
          .mobile_level_buttons, .mobile_level_accordion_arrow, .additional_header, .conversation_header{
            display:none;
          }
          .additional_approval_details{
            flex-direction: row;
            margin: 0 0px;
            display:flex;
            margin-top: 1.2rem;
          }
          .additional_cards{
            border-radius: 4px;
            box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.05), 0 0.6px 1.8px 0 rgba(0,0,0,.108);
            background: white;
            padding: 10px;
            border-radius: 8px;
            flex:1;
            width: 95%;
            min-height: 100px;
          }
          .additional_cards:not(:last-child){
            margin-right: 8px;
          }
          .name_card{
            text-align:left;
            margin-left:1rem;
          }
          .button-action{
            margin-right:20px;
          }
          .approval_wall_btn:hover{
            background-color: var(--secondary-color) !important;
            color:var(--font-hover-color) !important;
          }
          .modal{
            backdrop-filter: blur(8px);
          }
          .view_requesters_details{
            display:none;
          }
          .additional_bg{
            background-color: #002060;
            color: white;
          }

          @media screen and (max-width: 768px) {
            #approvalWallModalBody_"""
            + element_id
            + """{
              padding: 1rem;
            }
            .upper-container{
              padding-right: unset;
            }
            .approval-title{
              width: 12%;
            }
            .approved_title {
              width: 26% !important;
            }
            .lower-container{
              padding-left: unset;
              padding-right: unset;
            }
          }

          @media screen and (max-width: 500px) {
          #approvalCommentsModalBody_"""
            + element_id
            + """{
            padding-left: 10px;
            padding-right: 10px;
          }
          .approval_comment_text {
              font-size: 15px;
          }
          .approval_wall_btn, .reply_comments{
            font-size: 10px !important;
          }
          .reply_comment_card {
              margin-left: 20px;
          }
            .additional_cards .card-text{
              font-size: 10px;
            }
            .upper-container {
              padding-right: unset;
              padding-left: unset;
            }
            .view_requesters_details{
              display:block;
              font-size: 10px !important;
            }
            .btn-light{
              background-color: #d1d3d6;
              border-color: #f8f9fa;
              box-shadow: none;
              border-radius: 8rem;
            }
            .btn-light:hover{
              background-color: #d1d3d6;
              border-color: #f8f9fa;
              box-shadow: none;
              border-radius: 8rem;
            }
            .additional_cards{
              margin: 8px;
            }
            .additional_cards:not(:last-chlid){
              margin-right: unset;
            }
            .name_card{
              text-align:left;
              margin-left: 0rem;
            }
            .approval_timeline {
              margin-right: 2.5rem;
            }
            .created_title_status, .created_by_info h6{
              font-size: 10px !important;
            }
            .created_title_status {
              width: 60px !important;
              margin-right: 0;
            }
            .approval-created-info, .created_title {
              display:none;
            }
            #requester_details .approval-created-info, #requester_details .created_title {
              display:block;
              font-size: 14px;
            }
            .toggle-actions{
              margin: -6px !important;
              width: 80px !important;
              font-size: 10px !important;
            }
            #level_config_"""
            + element_id
            + """ .select2, #level_config_"""
            + element_id
            + """ .select2-container, #level_config_"""
            + element_id
            + """ .select2-container--default, #level_config_"""
            + element_id
            + """ .select2-container--below, #level_config_"""
            + element_id
            + """ .select2-container--focus {
              width: 100% !important;
            }
            #level_config_"""
            + element_id
            + """, .div_transaction, #approvalWallModalBody_"""
            + element_id
            + """ .conversation_container, #approver_users_"""
            + element_id
            + """{
              margin: 8px 0px !important;
              padding: 10px 0;
              display: block;
              box-shadow: rgba(0, 0, 0, 0.05) 0px 3.2px 7.2px 0px, rgba(0, 0, 0, 0.11) 0px 0.6px 1.8px 0px;
              background: white;
              border-radius: 8px;
            }
            #approver_users_"""
            + element_id
            + """{
              margin-top: 0 !important;
            }
            .div_transaction{
              padding: 6px 0;
            }
            .approval_level_divs {
              margin: 10px 0;
              padding: 12px 6px;
            }
            .transaction_datatable{
              box-shadow: none;
            }
            .mobile_level_buttons, .mobile_transaction_buttons, .mobile_approver_buttons{
              display:flex;
              gap: 5px;
              margin-top: 10px;
              margin-right: 8px;
            }
            .mobile_level_buttons button, .mobile_transaction_buttons button, .mobile_approver_buttons button{
              font-size: 12px !important;
            }
            .mobile_level_accordion_arrow{
              display: block;
              font-size: 15px;
            }
            .additional_accordion{
              box-shadow: rgba(0, 0, 0, 0.05) 0px 3.2px 7.2px 0px, rgba(0, 0, 0, 0.11) 0px 0.6px 1.8px 0px;
              background: white;
              padding: 6px 0;
              border-radius: 8px;
              flex: 1;
              margin: 0px 0px;
            }
            .additional_header, .transaction_header, #approvalWallModalBody_"""
            + element_id
            + """ .conversation_header{
              display: flex;
              margin: 5px 12px;
            }
            .levelclass{
              font-size: 10px;
            }
            .levelclass::after {
              right: 6px;
            }
            .mobile_level_accordion_div{
              display:none;
            }
            .additional_approval_details{
              flex-direction: column;
              display:none;
              margin-top: unset;
            }
            .additional_cards{
              box-shadow: none;
              background: white;
              padding: 10px;
              border-radius: 8px;
              flex:1;
              margin: 8px;
              width: 100%;
            }
            .approval_timeline{
              padding-top: 0;
            }
            #approvalWallModalBody_"""
            + element_id
            + """ .approval_timeline, .transaction_div, .approver_users_accordion_div{
              display:none;
            }
            .approver_users{
              margin-top: 8px !important;
            }
            .approval_title{
              width: 11%;
            }
            .approval_text {
              width: 64%;
              font-size: 10px;
            }
            .approval_timestamp {
              font-size: 9px;
            }
            .approval_card small{
              font-size: 54%;
            }
            .text-approved, .text-rejected {
                width: 52% !important;
            }
            .button-action{
              margin-right:unset;
            }
            .approval_title span, .add_comment_span, .created_title span {
              height: 20px;
              width: 20px;
            }
          }
          </style>

        <div class="modal fade bd-example-modal-sm" id="requester_details" style="z-index:2000;" role="dialog" aria-labelledby="requester_details">
          <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
            <div class="modal-content modal-options">
              <div class="modal-header modal-options-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Requester's Details </h5>
                <button type="button" class="btn btn-light " data-dismiss="modal" style="height: 27px;width: 27px;padding: 0;border-radius: 1rem !important;border-color: #d9d9d9;position: relative;" aria-label="Close" >
                    <i class="fa-solid fa-times"></i>
                </button>
              </div>
              <div class="modal-body">
                <div class="d-flex justify-content-between align-items-center details" style="margin:20px 0;">
                  <h5 class="created_title mb-0 mr-2"></h5>
                  <h6 class="approval-created-info text-left mb-1"></h6>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal approvalWallModal" id="approvalWallModal_"""
            + element_id
            + """" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalWallModal_"""
            + element_id
            + """" style="display: none; backdrop-filter: brightness(0.4);" aria-hidden="true">
          <div class="" style="height: 100vh;overflow: auto;background: whitesmoke;z-index: 10;position: relative;width: 100%;" role="document">
            <div class="modal-content" style="margin-right: auto;margin-left: auto;width: 100%;text-align: center;background: #fcfcfc;height: 100%;">
              <div class="modal-header"  style="background:#565a5e;text-align: center;">
                  <h6 class="text-primary modal-title">Transaction Approval Details</h6>
                  <button type="button" class="close closeApprovalWall" >&times;</button>
              </div>

              <div class="modal-body " id="approvalWallModalBody_"""
            + element_id
            + """">
                <div class="d-flex justify-content-between align-items-center info-wrapper">
                  <div class="d-flex align-items-center justify-content-start created_by_info"></div>
                  <button class="btn btn-light approval_wall_btn view_requesters_details" style="margin-right: 5px;" data-toggle="modal" data-target="#requester_details">View Details <i class="fa-solid fa-circle-info"></i></button>
                  <div>
                    <button type="button" class="btn btn-alpha approval_wall_btn dropdown-toggle toggle-actions" data-toggle="dropdown" style="color:var(--font-hover-color); background-color:var(--primary-color);padding: 7px;display: flex;align-items: center;justify-content: center;width:100px;font-size:0.9rem;">
                      Actions <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu dropdown-menu-sm dropdown-menu-right approval-options-dropdown" style="transform: translate3d(912px, 90px, 0px) !important;">
                      <a class="dropdown-item" id="approval_wall_approve_"""
            + element_id
            + """"><i class="fas fa-check mr-2"></i> Approve</a>
                      <div class="dropdown-divider"></div>
                      <a class="dropdown-item" id="approval_wall_reject_"""
            + element_id
            + """"><i class="fas fa-times mr-2"></i> Reject</a>
                      <div class="dropdown-divider"></div>
                      <a class="dropdown-item" id="approval_sendtoprevious_"""
            + element_id
            + """"><i class="fas fa-undo mr-2"></i> Send to previous approver</a>
                      <div class="dropdown-divider"></div>
                      <a class="dropdown-item" id="approval_delegate_"""
            + element_id
            + """"><i class="fa fa-sitemap mr-2"></i> Delegate Approval</a>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-8 upper-container">
                    <div class="additional_accordion">
                      <div class="align-items-center justify-content-between additional_header">
                        <h5 class="text-dark" style="font-size: 1rem;font-weight: normal;margin-right: 22px;margin:0;">Additional Details</h5>
                        <div class="mobile_level_accordion_arrow" data-target="additional_approval_details"><i class="fas fa-chevron-down"></i></div>
                      </div>
                      <div class="additional_approval_details align-items-center justify-content-between">
                        <div class="additional_cards" id="approval_status_"""
            + element_id
            + """" >
                          <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;">Approval Status</h5>
                          <div class="">
                            <h6 class=" m-1 card-text text-left"></h6>
                          </div>
                        </div>

                        <div class="additional_cards" id="approver_type_"""
            + element_id
            + """" >
                          <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;">Approver Type</h5>
                          <div class="">
                            <h6 class=" m-1 card-text text-left additional_bg" style="width: fit-content;padding: 7px 10px;border-radius: 34px;font-size: 0.9rem;margin:0;border:1px solid lightgrey;"></h6>
                          </div>
                        </div>

                        <div class="additional_cards" id="type_of_approval_"""
            + element_id
            + """" >
                          <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;">Type of Approval</h5>
                          <div class="">
                            <h6 class=" m-1 card-text text-left additional_bg" style="width: fit-content;padding: 7px 10px;border-radius: 34px;font-size: 0.9rem;margin:0;border:1px solid lightgrey;"></h6>
                          </div>
                        </div>

                        <div class="additional_cards" id="approval_code_"""
            + element_id
            + """" >
                          <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;">Approval Code</h5>
                          <div class="">
                            <h6 class=" m-1 card-text text-left additional_bg" style="width: fit-content;padding: 7px 10px;border-radius: 34px;font-size: 0.9rem;margin:0;border:1px solid lightgrey;word-break:break-word;"></h6>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="mt-5 div_transaction">
                      <div class="d-flex align-items-center justify-content-between transaction_header">
                        <h5 class="text-dark" style="font-size: 1rem;font-weight: normal;margin-bottom:0;">Transaction Data</h5>
                        <button class="btn btn-primary mb-2" id="edit_transaction_data_"""
            + element_id
            + """" style="font-size: 0.9rem;width: 100px;color:white; background-color:var(--primary-color)"> Edit <i class="fa-regular fa-pen-to-square ml-2"></i></button>
                        <button class="btn btn-primary mb-2" id="save_transaction_data_"""
            + element_id
            + """" style="display:none;font-size: 0.9rem;color:white; width: 100px;background-color:var(--primary-color)"> Save <i class="fa-regular fa-floppy-disk ml-2"></i></button>
                        <div class="mobile_level_accordion_arrow" data-target="transaction_div"><i class="fas fa-chevron-down"></i></div>
                      </div>
                      <div class="transaction_div">
                        <div class="mobile_transaction_buttons align-items-center justify-content-end"></div>
                        <div class="mb-3 transaction_datatable">
                        </div>
                      </div>
                    </div>

                  <div class="conversation_container">
                    <div class="align-items-center justify-content-between conversation_header">
                        <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;margin-bottom:0;">Conversation</h5>
                        <div class="mobile_level_accordion_arrow" data-target="approval_timeline"><i class="fas fa-chevron-down"></i></div>
                      </div>
                    <div class="approval_timeline mr-4">
                      <div class="resolve_reopen_all_"""
            + element_id
            + """ ">
                        <button class="btn btn-primary mb-2" id="resolve_all_button_"""
            + element_id
            + """" style="display: none;font-size: 0.9rem;float:left;"> Mark All as Resolved </button>
                        <button class="btn btn-primary mb-2" id="reopen_all_button_"""
            + element_id
            + """" style="display: none;font-size: 0.9rem;margin-left:10px;float:left;"> Mark All as Reopened </button>
                        <h5 class="active_comment" id="comment_status"""
            + element_id
            + """" style="font-size: 1rem;font-weight: normal;float:right;">Status: <b>Active</b></h5>
                      </div>
                      <div class="approval_outer">
                      """
        )

        current_username = request.user.username
        current_first_name = request.user.first_name
        current_last_name = request.user.last_name
        if current_first_name and current_last_name:
            curr_initials = current_first_name[0] + current_last_name[0]
        elif current_first_name:
            curr_initials = current_first_name[0]
        elif current_last_name:
            curr_initials = current_last_name[0]
        else:
            curr_initials = current_username[0]

        html = (
            html
            + """


                      <div class="mt-5 mb-3 new_discussion_"""
            + element_id
            + """" style="padding: 10px;box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.132), 0 0.6px 1.8px 0 rgba(0,0,0,.108);display: flex;flex-direction: column;position: relative;margin: 0 0 20px 23px;border-radius: 8px;width:100%;background: white;">
                        <div class="d-flex align-items-center justify-content-between">
                          <h5 class="text-dark" style="font-size: 1rem;font-weight: normal;display: flex;align-items: center;"><span class="add_comment_span">"""
            + curr_initials
            + """</span>Start a New Discussion</h5>
                        </div>
                        <textarea class='approvalWallCommentText_"""
            + element_id
            + """ p-2' id='approvalWallCommentText_"""
            + element_id
            + """' name='approvalWallCommentText_"""
            + element_id
            + """'></textarea>
                        <div class="d-flex align-items-center justify-content-end" style="margin: 15px 0 5px 0;">
                          <button class="btn btn-primary mb-2" data-toggle="tooltip" title="Click this button or press Ctrl+Enter" disabled id='add_comment_"""
            + element_id
            + r"""' style="font-size:0.9rem;color:white; background-color:var(--primary-color)">Comment <i class="far fa-share-square ml-2"></i></button>
                        </div>
                        <script>
                          function convertToTimestamp(datetimeString) {
                            // Define the input and output formats
                            const inputFormat1 = "YYYY-MM-DD HH:mm:ss"; // Input format for "YYYY-MM-DD HH:mm:ss"
                            const inputFormat2 = "YYYY-MM-DDTHH:mm:ss.SSS"; // Input format for "YYYY-MM-DDTHH:mm:ss.SSS"
                            const outputFormat = "DD MMMM YY";

                            // for whole timestamp
                            const tooltipOutputFormat = {
                              day: "2-digit",
                              month: "long",
                              year: "numeric",
                              hour: "numeric",
                              minute: "numeric",
                              hour12: true,
                            };

                            // Parse the datetime string into a Date object
                            let datetimeObj;
                            if (datetimeString.includes('T')) {
                              datetimeObj = new Date(datetimeString);
                            } else {
                              datetimeObj = new Date(datetimeString.replace(/-/g, '/'));
                            }

                            // Extract the day and month information
                            const day = datetimeObj.getDate();
                            const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(datetimeObj);
                            const year = datetimeObj.getFullYear();

                            // Format the extracted day and month into the desired timestamp format
                            const timestamp = day.toString().padStart(2, '0') + ' ' + month.substring(0, 3) + ' ' +year.toString().substring(2, 4);

                            const tooltipTimestamp = datetimeObj.toLocaleString('en-US', tooltipOutputFormat);

                            return [timestamp,tooltipTimestamp];
                          }

                          var ReplyToComment = (i, j, key,approval_id, smtpConfigKey, app_code)=>{
                            reply_value = CKEDITOR.instances[`replycomment_${i}${j}`].getData()
                            var usernamesArray = []
                            var mentionPattern = /@(\w+)/g;
                            var matches = reply_value.match(mentionPattern);

                            if (matches) {
                              var uniqueUsernames = new Set();
                              matches.forEach(function(match) {
                                uniqueUsernames.add(match.substr(1));
                              });

                              // Convert Set to an array and display the mentioned usernames
                              usernamesArray = Array.from(uniqueUsernames);
                            }
                            $.ajax({
                              url: `/users/${urlPath}/approval_table/`,
                              data: {
                                'reply_order_i': i,
                                'reply_order_j': j,
                                'reply_order_key': key,
                                "approval_id": approval_id,
                                "smtpConfigKey": smtpConfigKey,
                                "app_code": app_code,
                                "reply_value":reply_value,
                                "mentioned_usernames":JSON.stringify(usernamesArray),
                                'operation': 'relpyToComment',
                              },
                              type: "POST",
                              dataType: "json",
                              success: function(reply_dict) {
                                CKEDITOR.instances[`replycomment_${i}${j}`].setData('');
                                var [reply_timestamp,reply_tooltipTimestamp] = convertToTimestamp(reply_dict["time"]);
                                var small_time = "at" + reply_tooltipTimestamp.split("at")[1]
                                reply_html = `
                                <div class="reply_comment_card approval_comment_card">
                                  <div class="approval_info">
                                    <h5 class="approval_title"><span>"""
            + curr_initials
            + """</span></h5>
                                    <p class="approval_text">${reply_dict["user"]}</p>
                                    <div>
                                      <h6 class="approval_timestamp" data-toggle="tooltip" title="${reply_tooltipTimestamp}">${reply_timestamp}</h6>
                                      <small>${small_time}</small>
                                    </div>
                                  </div>
                                  <div class="approval_comment_text"><p>${reply_dict["value"].replaceAll("\\t", "&nbsp;").replaceAll("\\n", "<br>")}</p></div>
                                </div>`
                                $(`#approval_comment_${i}${j}`).append(reply_html)
                              }
                            });
                          }

                          var resolveIndComments = (i, j, key,approval_id, smtpConfigKey, app_code)=>{

                            Swal.fire({
                              icon: 'question',
                              text: `Are you sure you want to resolve this comment thread?`,
                              showDenyButton: true,
                              showCancelButton: true,
                              confirmButtonText: 'Yes',
                              denyButtonText: `No`,
                            }).then((result)=>{
                              if(result.isConfirmed){

                                $.ajax({
                                  url: `/users/${urlPath}/approval_table/`,
                                  data: {
                                    'reply_order_i': i,
                                    'reply_order_j': j,
                                    'reply_order_key': key,
                                    "approval_id": approval_id,
                                    'required_function': 'resolve',
                                    'operation': 'resolveReopenIndComments',
                                  },
                                  type: "POST",
                                  dataType: "json",
                                  success: function(data) {

                                    resolved_ind_comments_list.push(`${i}${j}`)

                                    $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).attr("disabled",true)
                                    $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).css("display","none")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#comment_status_ind_${i}${j}`).html("Status: <b>Resolved</b>")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#comment_status_ind_${i}${j}`).attr("class","comment_status_ind resolved_comment")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).closest(`.approval_comment`).css('background', "#f8f8f8")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#replycomment_${i}${j}`).closest(`.reply-area`).css('display', "none")

                                    if(reopen_individual_comments){
                                      $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).css('display', "block")
                                      if(allowed_approval=="true" || allowed_edit == "true"){
                                        $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).attr("disabled",false)
                                      }
                                      else{
                                        $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${elementID}`).attr("disabled",true)
                                      }
                                    }
                                    else{
                                      $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).css('display', "none")
                                    }




                                  }
                                });
                              }
                            })

                          }

                          var reopenIndComments = (i, j, key,approval_id, smtpConfigKey, app_code)=>{

                            Swal.fire({
                              icon: 'question',
                              text: `Are you sure you want to reopen this comment thread?`,
                              showDenyButton: true,
                              showCancelButton: true,
                              confirmButtonText: 'Yes',
                              denyButtonText: `No`,
                            }).then((result)=>{
                              if(result.isConfirmed){

                                $.ajax({
                                  url: `/users/${urlPath}/approval_table/`,
                                  data: {
                                    'reply_order_i': i,
                                    'reply_order_j': j,
                                    'reply_order_key': key,
                                    "approval_id": approval_id,
                                    'required_function': 'reopen',
                                    'operation': 'resolveReopenIndComments',
                                  },
                                  type: "POST",
                                  dataType: "json",
                                  success: function(data) {


                                    value_index = resolved_ind_comments_list.indexOf(`${i}${j}`)
                                    resolved_ind_comments_list.splice(value_index,1)

                                    $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).attr("disabled",true)
                                    $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).css("display","none")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#comment_status_ind_${i}${j}`).html("Status: <b>Reopened</b>")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#comment_status_ind_${i}${j}`).attr("class","comment_status_ind reopened_comment")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#reopen_button_ind_${i}${j}`).closest(`.approval_comment`).css('background', "#ffffff")
                                    $(`#approvalWallModalBody_${elementID}`).find(`#replycomment_${i}${j}`).closest(`.reply-area`).css('display', "block")

                                    if(resolve_individual_comments){
                                      $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).css('display', "block")
                                      if(allowed_approval=="true" || allowed_edit == "true"){
                                        $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).attr("disabled",false)
                                      }
                                      else{
                                        $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${elementID}`).attr("disabled",true)
                                      }
                                    }
                                    else{
                                      $(`#approvalWallModalBody_${elementID}`).find(`#resolve_button_ind_${i}${j}`).css('display', "none")
                                    }




                                  }
                                });
                              }
                            })

                          }

                          $(`#edit_transaction_data_"""
            + element_id
            + """`).click(function(){
                            this.style.display="none"
                            $(`#save_transaction_data_"""
            + element_id
            + """`).css("display","block")

                            if(parsed_json_data){
                              const itemCode = window.location.pathname.split('/')[4];

                              $.ajax({
                                url: `/users/${urlPath}/${itemCode}/`,
                                data: { model_name: result_data.tablename,element_id:'"""
            + element_id
            + """', operation: 'get_listview_column' },
                                type: 'POST',
                                dataType: 'json',
                                success: function (data) {
                                  var info_data = data

                                  const rows = $(`#approvalWallModalBody_"""
            + element_id
            + """`).find(`#aprovalwallJsondata_"""
            + element_id
            + """ tbody tr`);
                                  rows.each(function() {
                                    const row = $(this);
                                    const columnCell = row.find('td:eq(0)');
                                    const valueCell = row.find('td:eq(1)');

                                    const currentColumn = columnCell.attr("data-columnname");
                                    const currentValue = valueCell.text();

                                    if(info_data.hasOwnProperty(currentColumn)){
                                      const inputType = info_data[currentColumn].internal_type

                                      if(String(inputType) != "UniqueIDField"){
                                        let settype;
                                        if (String(inputType) === 'ForeignKey'){
                                          settype = 'text'

                                          let inputString = `
                                          <select data-fname="${currentColumn}" form="columnform" class="table_json_data form-control select2 p-2 """
            + element_id
            + """_${currentColumn}" style="width:100%" >
                                            <option name="" selected disabled value="">Select Option</option>
                                          `

                                          const choice = info_data[currentColumn].Choices
                                          for (const [k, v] of Object.entries(choice)) {
                                            if(v == currentValue ){
                                              inputString = inputString + `<option name="${v}" selected value="${k}">${v}</option>`
                                            }
                                            else{
                                              inputString = inputString + `<option name="${v}" value="${k}">${v}</option>`
                                            }
                                          }

                                          inputString = inputString + `</select>`

                                          valueCell.html(inputString)
                                          valueCell.find("select").each(function(){
                                            parent = $(this).parent()
                                            $(this).select2({dropdownParent:parent})
                                          })

                                        }
                                        else {

                                          if ((String(inputType) === 'TextField' || String(inputType) === 'ConcatenationField' || String(inputType) === 'CardField' || String(inputType) === 'CardCvvField' || String(inputType) === 'CardTypeField' || String(inputType) === 'RTFField' || String(inputType) === 'MultiselectField')) {

                                            settype = 'text'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data textInput form-control p-2" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          } else if (String(inputType) === 'DateTimeField') {

                                            settype = 'datetime-local'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" step="1" class="table_json_data datetimepickerinput form-control datetimepickerinput p-2" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          } else if (String(inputType) === 'DateField') {

                                            settype = 'date'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" step="1" class="table_json_data datepickerinput form-control datetimepickerinput p-2" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          } else if (String(inputType) === 'TimeField') {

                                            settype = 'time'
                                            use_sec = info_data[currentColumn].use_seconds

                                            if(use_sec == "false"){
                                              let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data timepickerinput form-control timepickerinput p-2" data-dp-format="HH:mm" value="${currentValue}" >`
                                              valueCell.html(inputString)
                                            }else{
                                              let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data timepickerinput form-control timepickerinput p-2" data-dp-format="HH:mm:ss" value="${currentValue}" >`
                                              valueCell.html(inputString)
                                            }

                                          } else if (String(inputType) === 'EmailTypeField') {

                                            settype = 'email'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data textInput form-control p-2" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          } else if (String(inputType) === 'UniqueIDField') {

                                            settype = 'text'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data textInput form-control p-2" disabled value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          }
                                          else if (String(inputType) === 'BooleanField') {

                                            settype = "checkbox"

                                            if(currentValue == "1"){
                                              let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data form-control p-2" checked >`
                                              valueCell.html(inputString)
                                            }
                                            else{
                                              let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data form-control p-2" >`
                                              valueCell.html(inputString)
                                            }

                                          } else if (String(inputType) === 'CharField') {

                                            settype = 'text'
                                            choices = []

                                            if(info_data[currentColumn].hasOwnProperty("choices")){
                                              choices = info_data[currentColumn].choices
                                            }

                                            const temp = new Set()
                                            for(let i=0;i<choices.length;i++){
                                                for(let j=0;j<choices[i].length;j++){
                                                    temp.add(choices[i][j])
                                                }
                                            }
                                            const temp1 = [...temp];
                                            if(choices.length > 0){

                                              let inputString = `
                                              <select data-fname="${currentColumn}" form="columnform"  class="table_json_data form-control select2 p-2 """
            + element_id
            + """_${currentColumn}" style="width:100%">
                                                <option name="" selected disabled value="">Select Option</option>
                                              `

                                              for (let i=0;i<temp1.length;i++) {
                                                if(temp1[i] == currentValue ){
                                                  inputString = inputString + `<option name="${temp1[i]}" selected value="${temp1[i]}">${temp1[i]}</option>`
                                                }
                                                else{
                                                  inputString = inputString + `<option name="${temp1[i]}" value="${temp1[i]}">${temp1[i]}</option>`
                                                }
                                              }

                                              inputString = inputString + `</select>`

                                              valueCell.html(inputString)
                                              valueCell.find("select").each(function(){
                                                parent = $(this).parent()
                                                $(this).select2({dropdownParent:parent})
                                              })


                                            }else{

                                              let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data textInput form-control p-2" value="${currentValue}" >`
                                              valueCell.html(inputString)

                                            }

                                          } else if (String(inputType) === 'URLField') {
                                            settype = 'url'

                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data  textInput form-control p-2" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          }
                                          else if (String(inputType) === 'FileField') {
                                            settype = 'file'
                                            accept = "*"
                                            if (info_data[currentColumn].file_extension){
                                              if (info_data[currentColumn].file_extension == "Any"){
                                                accept = "*"
                                              }
                                              else if (info_data[currentColumn].file_extension == "Images"){
                                                accept = "image/*"
                                              }
                                              else if (info_data[currentColumn].file_extension == "Document"){
                                                accept=".doc,.docx,.rtf,.pdf,.csv,xlsx,.odt,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                              }
                                              else if (info_data[currentColumn].file_extension == "PDF"){
                                                accept=".pdf"
                                              }
                                            }


                                          let inputString = `<input data-fname="${currentColumn}"  accept=${accept} type="${settype}" class="table_json_data form-control p-2" data-existing-value="${currentValue}" multiple style="height: 2.5rem" >`
                                          valueCell.html(inputString)

                                          }
                                          else if (String(inputType) === 'UserField') {
                                            settype = 'text'

                                            choices = []

                                            let inputString = `
                                            <select data-fname="${currentColumn}"  form="columnform" class="table_json_data textInput form-control select2 p-2 """
            + element_id
            + """_${currentColumn}" style="width:100%">
                                              <option name="" selected disabled value="">Select Option</option>
                                            `

                                            if(info_data[currentColumn].hasOwnProperty("Choices")){
                                              choice = info_data[currentColumn].Choices
                                            }

                                            for (let i in choice) {
                                            if(choice[i] == currentValue ){
                                                inputString = inputString + `<option name="${choice[i]}" selected value="${choice[i]}">${choice[i]}</option>`
                                              }
                                              else{
                                                inputString = inputString + `<option name="${choice[i]}" value="${choice[i]}">${choice[i]}</option>`
                                              }
                                            }

                                            inputString = inputString + `</select>`

                                            valueCell.html(inputString)
                                            valueCell.find("select").each(function(){
                                              parent = $(this).parent()
                                              $(this).select2({dropdownParent:parent})
                                            })

                                          }
                                          else if (String(inputType) === 'FloatField') {
                                            settype = 'number'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data numberinput form-control p-2" step="0.0001" value="${currentValue}" >`
                                            valueCell.html(inputString)

                                          }
                                          else {
                                            settype = 'number'
                                            let inputString = `<input data-fname="${currentColumn}"  type="${settype}" class="table_json_data numberinput form-control p-2" step="1" value="${currentValue}" >`
                                            valueCell.html(inputString)
                                          }

                                        }
                                      }

                                    }
                                  })

                                  $(".table_json_data").change(function(){
                                    let new_value = $(this).val()
                                    let column_name = $(this).attr("data-fname")
                                    transaction_data_to_edit[column_name] = new_value

                                  })
                                }
                              })

                            }
                          })

                          $(`#save_transaction_data_"""
            + element_id
            + """`).click(function(){

                            this.style.display="none"
                            $(`#edit_transaction_data_"""
            + element_id
            + """`).css("display","block")

                            parsed_json_data = [JSON.parse(JSON.stringify(transaction_data_to_edit))]
                            approval_id = result_data.id

                            $.ajax({
                              url: `/users/${urlPath}/approval_table/`,
                              data: {
                                "approval_id": approval_id,
                                'edited_data':JSON.stringify(parsed_json_data),
                                'operation': 'save_edited_transaction_data',
                              },
                              type: "POST",
                              dataType: "json",
                              success: function (data) {
                                const rows = $(`#approvalWallModalBody_"""
            + element_id
            + """`).find(`#aprovalwallJsondata_"""
            + element_id
            + """ tbody tr`);

                                rows.each(function() {
                                  const row = $(this);
                                  const columnCell = row.find('td:eq(0)');
                                  const valueCell = row.find('td:eq(1)');

                                  const currentColumn = columnCell.attr("data-columnname");

                                  valueCell.text(parsed_json_data[0][currentColumn])

                                })

                              },
                              error: function () {
                                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                              }
                            })


                          })


                        </script>
                      </div>

                      <div class="approval_outer_"""
            + element_id
            + """">

                      </div>
                    </div>
                  </div>
                </div>
              </div>"""
        )

        html = (
            html
            + f"""
                  <div class="col-md-4 lower-container">
                    <div class="mt-3" id="approver_users_{element_id}" style="border-radius: 4px;box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.05), 0 0.6px 1.8px 0 rgba(0,0,0,.108);background: white;padding: 10px;border-radius: 8px;">
                      <div class="d-flex align-items-center justify-content-between">
                        <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;margin-bottom:0;">Approvers</h5>
                        <button class="btn btn-primary mb-2" id="edit_approvers_{element_id}" style="display:none;font-size: 0.9rem;width: 100px;"> Edit <i class="fa-regular fa-pen-to-square ml-2"></i></button>
                        <button class="btn btn-primary mb-2" id="save_approvers_{element_id}" style="display:none;font-size: 0.9rem;width: 100px;"> Save <i class="fa-regular fa-floppy-disk ml-2"></i></button>
                        <div class="mobile_level_accordion_arrow" data-target="approver_users_accordion_div"><i class="fas fa-chevron-down"></i></div>
                      </div>
                      <div class="approver_users_accordion_div">
                        <div class="mobile_approver_buttons align-items-center justify-content-end"></div>
                        <ul class="p-0 mt-3"></ul>
                      </div>
                    </div>

                    <div class="mt-3" id="level_config_{element_id}" style="display:none;border-radius: 4px;box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.05), 0 0.6px 1.8px 0 rgba(0,0,0,.108);background: white;padding: 10px;border-radius: 8px;">
                      <div class="d-flex align-items-center justify-content-between" id="header_div_{element_id}">
                        <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;margin-bottom:0;">Approval Levels</h5>
                        <div class="" id="add_levels_div_{element_id}" style="display:none;margin-left: 30px;">
                          <button class="btn btn-primary mb-2" id="add_approval_levels_{element_id}" style="font-size:0.9rem;background:var(--primary-color);color:var(--font-hover-color)" >Add Level <i class="fa-solid fa-plus ml-2"></i></button>
                        </div>
                        <button class="btn btn-primary mb-2" id="edit_approval_levels_{element_id}" style="font-size:0.9rem;color:white; background-color:var(--primary-color)"> Edit <i class="fa-regular fa-pen-to-square ml-2"></i></button>
                        <button class="btn btn-primary mb-2" id="save_approval_levels_{element_id}" style="display:none;font-size:0.9rem;color:white; background-color:var(--primary-color)"> Save <i class="fa-regular fa-floppy-disk ml-2"></i></button>
                        <div class="mobile_level_accordion_arrow" data-target="mobile_level_accordion_div"><i class="fas fa-chevron-down"></i></div>
                      </div>

                      <div class="mobile_level_accordion_div">
                        <div class="mobile_level_buttons align-items-center justify-content-end"></div>
                        <div class="col-md-12" id="view_at_all_levels_{element_id}">
                        </div>
                      </div>

                    </div>

                    <div class="mobile-additional-accordion">

                    </div>


                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="modal approvalCommentsModal" id="approvalCommentsModal_"""
            + element_id
            + """" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentsModal"""
            + element_id
            + """" style="display: none; backdrop-filter: brightness(0.4);" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="margin-right: auto;margin-left: auto;width: 100%;text-align: center;background: #fcfcfc;height: 100%;">
              <div class="modal-header"  style="background:#565a5e;text-align: center;">
                  <h6 class="text-primary modal-title">Approval Conversation</h6>
                  <button type="button" class="close closeCommentsModal" data-dismiss="modal" >&times;</button>
              </div>

              <div class="modal-body " id="approvalCommentsModalBody_"""
            + element_id
            + """">

                <div class="conversation_container">
                  <div class="align-items-center justify-content-between conversation_header">
                    <h5 class="text-dark text-left" style="font-size: 1rem;font-weight: normal;margin-bottom:0;">Conversation</h5>
                    <div class="mobile_level_accordion_arrow" data-target="approval_timeline"><i class="fas fa-chevron-down"></i></div>
                  </div>
                  <div class="approval_timeline mr-4">
                    <div class="approval_outer">
                    """
        )

        current_username = request.user.username
        current_first_name = request.user.first_name
        current_last_name = request.user.last_name
        if current_first_name and current_last_name:
            curr_initials = current_first_name[0] + current_last_name[0]
        elif current_first_name:
            curr_initials = current_first_name[0]
        elif current_last_name:
            curr_initials = current_last_name[0]
        else:
            curr_initials = current_username[0]

        html = (
            html
            + """


                      <div class="mt-5 mb-3" style="padding: 10px;box-shadow: 0 3.2px 7.2px 0 rgba(0,0,0,.132), 0 0.6px 1.8px 0 rgba(0,0,0,.108);display: flex;flex-direction: column;position: relative;margin: 0 0 20px 23px;border-radius: 8px;width:100%;background: white;">
                        <div class="d-flex align-items-center justify-content-between">
                          <h5 class="text-dark" style="font-size: 1rem;font-weight: normal;display: flex;align-items: center;"><span class="add_comment_span">"""
            + curr_initials
            + """</span>Start a New Discussion</h5>
                        </div>
                        <textarea class='approvalCommentText_"""
            + element_id
            + """ p-2' id='approvalCommentText_"""
            + element_id
            + """' name='approvalCommentText_"""
            + element_id
            + """'></textarea>
                        <div class="d-flex align-items-center justify-content-end" style="margin: 15px 0 5px 0;">
                          <button class="btn btn-alpha mb-2 approval_wall_btn" data-toggle="tooltip" title="Click this button or press Ctrl+Enter" disabled id='convo_add_comment_"""
            + element_id
            + r"""' style="font-size:0.9rem;color:white; background-color:var(--primary-color)">Comment <i class="far fa-share-square ml-2"></i></button>
                        </div>
                      </div>

                      <script>
                      function ReplyToConvoComment(i, j, key,approval_id, smtpConfigKey, app_code){
                        reply_value = CKEDITOR.instances[`convo_replycomment_${i}${j}`].getData()
                        var usernamesArray = []
                        var mentionPattern = /@(\w+)/g;
                        var matches = reply_value.match(mentionPattern);

                        if (matches) {
                          var uniqueUsernames = new Set();
                          matches.forEach(function(match) {
                            uniqueUsernames.add(match.substr(1));
                          });

                          // Convert Set to an array and display the mentioned usernames
                          usernamesArray = Array.from(uniqueUsernames);
                        }
                        $.ajax({
                          url: `/users/${urlPath}/approval_table/`,
                          data: {
                            'reply_order_i': i,
                            'reply_order_j': j,
                            'reply_order_key': key,
                            "approval_id": approval_id,
                            "smtpConfigKey": smtpConfigKey,
                            "app_code": app_code,
                            "reply_value":reply_value,
                            "mentioned_usernames":JSON.stringify(usernamesArray),
                            'operation': 'relpyToComment',
                          },
                          type: "POST",
                          dataType: "json",
                          success: function(reply_dict) {
                            CKEDITOR.instances[`convo_replycomment_${i}${j}`].setData('');
                            var [reply_timestamp,reply_tooltipTimestamp] = convertToTimestamp(reply_dict["time"]);
                            var small_time = "at" + reply_tooltipTimestamp.split("at")[1]
                            reply_html = `
                            <div class="reply_comment_card approval_comment_card">
                              <div class="approval_info">
                                <h5 class="approval_title"><span>"""
            + curr_initials
            + """</span></h5>
                                <p class="approval_text">${reply_dict["user"]}</p>
                                <div>
                                  <h6 class="approval_timestamp" data-toggle="tooltip" title="${reply_tooltipTimestamp}">${reply_timestamp}</h6>
                                  <small>${small_time}</small>
                                </div>
                              </div>
                              <div class="approval_comment_text"><p>${reply_dict["value"].replaceAll("\\t", "&nbsp;").replaceAll("\\n", "<br>")}</p></div>
                            </div>`
                            $(`#approvalCommentsModal_${elementID}`).find(`#approval_comment_${i}${j}`).append(reply_html)
                          }
                        });
                      }
                      </script>

                      <div class="approval_outer_"""
            + element_id
            + """">

                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        """
        )

        if template == "Multiple table":
            html += f"""
        <div style ="z-index:2000" class="modal fade" id="tableOrderModal{ele_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tabsMultiFunc" aria-hidden="true">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Table Ordering</h5>
                <button
                  type="button"
                  class="close"
                  data-dismiss="modal"
                  aria-label="Close"
                >
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>

              <div class="modal-body">
                <div class='card'>
                  <div class='card-body tabsMultiFuncBody'>
                    <table class="display" style="width:100%;overflow-x: scroll;overflow-y:scroll;">
                      <thead style="border-bottom:1px solid var(--primary-color)" >
                        <tr style="text-align:center">
                          <th>Table name</th>
                          <th>order</th>
                        </tr>
                      </thead>
                      <tbody id="tableOrderBodyTable{ele_id}" style="height: 80px;border-bottom:1px solid var(--primary-color);text-align:center;">
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
              <div class="modal-footer">
                <button onclick="tableOrderSaveBtn(this)" id="tableOrderSave{ele_id}" data-element-id="{ele_id}" type="button" class="btn btn-primary"aria-label="Close">Save</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal fade" id="addTableCard{ele_id}" style="backdrop-filter: brightness(0.4);" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-xm" role="document" style="margin-top: 5%">
              <div class="modal-content">
                <div class="modal-header" style='background:#565a5e; color:white;'>
                  <h5 class="modal-title" style="padding-left: auto;">Add table card</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <select class="form-control select2 saveTableBtnSelect">"""
            for j in tablesUserDefined:
                html += f"""<option value="{j}">{j}</option>"""
            html += (
                """
                    </select>
                  </div>
                  <div class="modal-footer">
                    <button  name="saveTableBtn"  type="button"
                      class="btn btn-primary saveTableBtn" onclick="saveTableBtn.call(this)" """
                + f"""  data-table_name="{t["model_name"] }" data-elementID="{element_id}" """
                + """>Save
                    </button>
                  </div>
              </div>
            </div>
          </div>\n """
            )
        else:
            pass

        list_view_embeded_computation = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("listViewEmbededComputation")
        if list_view_embeded_computation is not None:
            html = (
                html
                + f"""
        <!-- Full Output Embeded Computation Modal -->
                  <div class="modal" id="embededComputationlistView_{element_id}">
                  <div class="modal-dialog modal-xl modal-dialog-centered">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h6 class="modal-title" style="text-align:center;">Results</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body" id="embededComputationlistViewBody_{element_id}" style="max-height:38rem;overflow:auto;">

                      </div>
                      <div class="modal-footer">
                          <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                  </div>
              </div>
              <!-- New-->
        """
            )
        if template == "Multiple table":
            script = script + scriptGenerator("Multiple table", "Multiple table", ele_id, request, t, data1)
    html = (
        html
        + f"""
        {htmlBtn}
        <div class='{classes}' {style}>
          {htmlHeader}"""
    )
    if process_flow_design is not None:
        if ele_id in process_flow_design["prCodes"]:
            html = (
                html
                + f""" <div class="card-body bodyListview"><div id="processFlowDesignDiv{element_id}" class="displaynone processflowdiv" style="height: 10rem; width: 100%; border: 1px solid black; border-radius: 5px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">

                      </div>
                      <div class="text-center">
                      <i style="cursor: pointer;justify-content: center;display: flex;" class="fa-solid fa-angle-down text-center" onclick="processDesignDiv(this)" data-sub-process="{pr_code}" data-id="{ele_id}" data-process="{process_flow_design['process_code']}"  data-list='{json.dumps(process_flow_design)}'></i>
                      </div>"""
            )
        else:
            html = html + f"""<div class="card-body bodyListview">"""
    else:
        html = html + f"""<div class="card-body bodyListview">"""

    list_view_button_styling_model = json.loads(create_view_tab_body_content)["Category_attributes"][
        "Mandatory"
    ].get("listViewStylingValues")
    if list_view_button_styling_model is not None:
        list_view_button_styling = list_view_button_styling_model.get(model_name)
    else:
        list_view_button_styling = None
    if t["list_view_html_json"]:
        datatable_checker = t["list_view_html_json"][0]["Category_sub_element_attributes"]
        old_config_list = []
        html = html + f"""<div>"""
        quick_filters = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "quickFiltersOptions"
        )
        if quick_filters is not None:
            if quick_filters.get(model_name) is not None:
                quick_filters_model = quick_filters.get(model_name)
                html = (
                    html
                    + f"""
            <div class="float-right">
            <button class="btn btn-primary btn-md mx-2 rounded px-2 my-1" onclick="resetAllQuickFilters(this)" data-id="{element_id}">Reset all filters</button>
            </div>"""
                )
                html = (
                    html
                    + f""" <div class="row" id="quickFiltersDiv{element_id}" data-table="{model_name}">"""
                )
                count_1 = 0
                for k in quick_filters_model:
                    if quick_filters_model[k]["filter"] == "select_field":
                        if quick_filters_model[k]["multiSelect"] == True:
                            html = (
                                html
                                + f"""
                  <div class="col-2 text-center" data-div="multi_select" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <select class="form-control select2 quickFilters" data-filter="{quick_filters_model[k]['filter']}" data-column="{k}" multiple onchange="quickFiltersDatableTrigger('{element_id}',this)" data-val=""></select>
                  </div>
                  """
                            )
                        else:
                            html = (
                                html
                                + f"""
                  <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <select class="form-control select2 quickFilters" data-filter="{quick_filters_model[k]['filter']}" data-column="{k}"onchange="quickFiltersDatableTrigger('{element_id}',this)" data-val=""></select>
                  </div>
                  """
                            )
                    elif quick_filters_model[k]["filter"] == "DateField":
                        html = (
                            html
                            + f"""
                  <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <input type="text" value="" class="form-control p-2 dtrangepicker logindetails quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                  </div>
                """
                        )

                    elif quick_filters_model[k]["filter"] == "TimeField":
                        if quick_filters_model[k]["use_sec"] == "true":
                            html = (
                                html
                                + f"""
                    <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}" data-sec="{quick_filters_model[k]['use_sec']}">
                    <p style="font-weight: bold;">{verboseList[k]}</p>
                    <input type="text" value="" class="form-control p-2 ttrangepicker quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                    </div>
                  """
                            )
                        else:
                            html = (
                                html
                                + f"""
                    <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}" data-sec="{quick_filters_model[k]['use_sec']}">
                    <p style="font-weight: bold;">{verboseList[k]}</p>
                    <input type="text" value="" class="form-control p-2 ttrangepicker_sec quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                    </div>
                  """
                            )
                    elif quick_filters_model[k]["filter"] == "DateTimeRangeField":
                        html = (
                            html
                            + f"""
                  <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <input type="text" value="" class="form-control p-2 dttrangepicker quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                  </div>
                """
                        )
                    elif quick_filters_model[k]["filter"] == "DateRangeField":
                        html = (
                            html
                            + f"""
                  <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <input type="text" value="" class="form-control p-2 dtrangepicker quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                  </div>
                """
                        )
                    elif quick_filters_model[k]["filter"] == "DateTimeField":
                        if quick_filters_model[k]["use_sec"] == "true":
                            html = (
                                html
                                + f"""
                    <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}" data-sec="{quick_filters_model[k]['use_sec']}">
                    <p style="font-weight: bold;">{verboseList[k]}</p>
                    <input type="text" value="" class="form-control p-2 dttrangepicker quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                    </div>
                  """
                            )
                        else:
                            html = (
                                html
                                + f"""
                    <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}" data-sec="{quick_filters_model[k]['use_sec']}">
                    <p style="font-weight: bold;">{verboseList[k]}</p>
                    <input type="text" value="" class="form-control p-2 dttrangepicker_sec quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}"  data-val="">
                    </div>
                  """
                            )
                    elif quick_filters_model[k]["filter"] == "TimeRangeField":
                        html = (
                            html
                            + f"""
                  <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                  <p style="font-weight: bold;">{verboseList[k]}</p>
                  <input type="text" value="" class="form-control p-2 ttrangepicker quickFilters" data-filter="{quick_filters_model[k]['filter']}" style="border: 1px solid grey;border-radius: 0.3rem;" data-column="{k}" data-val="">
                  </div>
                """
                        )
                    elif quick_filters_model[k]["filter"] == "range_field":
                        html = (
                            html
                            + f"""
                <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                <p style="font-weight: bold;">{verboseList[k]}</p>
                <input type="text" class="js-range-slider quickFilters" data-filter="range_select" name="my_range" value=""
                  data-column="{k}"
                  data-skin="round"
                  data-type="double"
                  data-val=""
                  />
                </div>
                """
                        )
                    elif quick_filters_model[k]["filter"] == "booleanField":
                        html = (
                            html
                            + f"""
                <div class="col-2 text-center" data-div="{quick_filters_model[k]['filter']}" data-table="{model_name}">
                <p style="font-weight: bold;">{verboseList[k]}</p>
                <div class="radioGroup" data-column="{k}" data-val="" style="width:100% !important; height:100% !important;">
                  <input type="radio" class="yes_bool" id="yes_bool{element_id}{count_1}" data-id="{element_id}" name="boolean_quick_filter{count_1}" onchange="onChangeBoolQuickFilters(this,'yes_bool')" data-val="">
                  <label style="padding: 0.6rem 1rem;font-size:0.8rem" for="yes_bool{element_id}{count_1}">Yes</label>
                  <input type="radio" class="no_bool" id="no_bool{element_id}{count_1}" data-id="{element_id}" name="boolean_quick_filter{count_1}" onchange="onChangeBoolQuickFilters(this,'no_bool')" data-val="">
                  <label for="no_bool{element_id}{count_1}" style="padding: 0.6rem 1rem;font-size:0.8rem">No</label>
                  <span class="indicator" style="width:50% !important;"></span>
                </div>
                </div>
                """
                        )
                    count_1 += 1
                html = html + f""" </div> """
        listView_titleName = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "titleName"
        )
        if listView_titleName is not None:
            for i in listView_titleName:
                title = i
                titleIcon = listView_titleName[i]["icon"]
                titleIconColor = listView_titleName[i]["iconColor"]
            html = (
                html
                + f""" <div class="info-box pb-2" style="box-sizing:initial;box-shadow:initial;padding:0;margin:0;min-height:4rem;">
              <div class="info-box-icon" style="background-color:{titleIconColor};" >
                <i class="{titleIcon}" style="color:black"></i>
              </div>
              <div class="info-box-content" style="display: flex;justify-content: end;flex-direction: column;padding-bottom: 0px;">
                <span class="info-box-number" style="font-size:30px;">{title}</span>
              </div>
              </div>
              """
            )
        listView_titleName_Multiple = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("titleNameMultiple")
        if listView_titleName_Multiple is not None:
            if listView_titleName_Multiple.get(model_name) is not None:
                listView_titleName_Multiple_Model = listView_titleName_Multiple.get(model_name)
                html = (
                    html
                    + f""" <div class="info-box pb-2" style="box-sizing:initial;box-shadow:initial;padding:0;margin:0;min-height:4rem;">
              <div class="info-box-icon" style="background-color:{listView_titleName_Multiple_Model['iconColor']};" >
                <i class="{listView_titleName_Multiple_Model['icon']}" style="color:#FFFFFF"></i>
              </div>
              <div class="info-box-content" style="display: flex;justify-content: end;flex-direction: column;padding-bottom: 0px;">
                <span class="info-box-number" style="font-size:30px;">{listView_titleName_Multiple_Model['tableName']}</span>
              </div>
              </div>
              """
                )
        listView_titleName_mul = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("titleName_mul")
        if listView_titleName_mul is not None:
            for i in listView_titleName_mul:
                title = i
                titleIcon = listView_titleName_mul[i]["icon"]
                titleIconColor = listView_titleName_mul[i]["iconColor"]
            html = (
                html
                + f""" <div class="info-box pb-2" style="box-sizing:initial;box-shadow:initial;padding:0;margin:0;min-height:4rem;">
              <div class="info-box-icon" style="background-color:{titleIconColor};" >
                <i class="{titleIcon}" style="color:#FFFFFF"></i>
              </div>
              <div class="info-box-content" style="display: flex;justify-content: end;flex-direction: column;padding-bottom: 0px;">
                <span class="info-box-number" style="font-size:30px;">{title}</span>
              </div>
              </div>
              """
            )
        group_by_config = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "GroupByConfigs"
        )
        group_by_config_data = ""
        group_by_switch_user_configuration = False
        if group_by_config is not None:
            if template == "Multi Dropdown View":
                view_name1 = json.loads(create_view_tab_body_content).get("mulview_def")
                if group_by_config.get(model_name) is not None:
                    if group_by_config[model_name].get("group_by_switch_user_configuration") is not None:
                        group_by_switch_user_configuration = group_by_config[model_name][
                            "group_by_switch_user_configuration"
                        ]
                    if group_by_config.get(model_name)["group_by_switch"] == False:
                        group_by_config_data = "data-list-group-by"
                if group_by_config.get(view_name1) is not None:
                    if group_by_config[view_name1].get("group_by_switch_user_configuration") is not None:
                        group_by_switch_user_configuration = group_by_config[view_name1][
                            "group_by_switch_user_configuration"
                        ]
                    if group_by_config.get(view_name1)["group_by_switch"] == False:
                        group_by_config_data = "data-list-group-by"
            else:
                if group_by_config.get(model_name) is not None:
                    if group_by_config[model_name].get("group_by_switch_user_configuration") is not None:
                        group_by_switch_user_configuration = group_by_config[model_name][
                            "group_by_switch_user_configuration"
                        ]
                    if group_by_config.get(model_name)["group_by_switch"] == False:
                        group_by_config_data = "data-list-group-by"
        listView_title_row_formatting = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("titleRowFormatting")
        if listView_title_row_formatting is not None:
            if listView_title_row_formatting.get(model_name) is not None:
                listView_title_row_formatting_model = listView_title_row_formatting.get(model_name)
                new_dict = {}
                if listView_title_row_formatting_model.get("exception"):
                    for k, v in listView_title_row_formatting_model["exception"].items():
                        new_dict[verboseList_notitle[k]] = v
                    listView_title_row_formatting_model["exception"] = new_dict
                html = (
                    html
                    + f"""<button id="title_row_formatting_{element_id}" style="display:none;" data-list='{json.dumps(listView_title_row_formatting_model)}'>Title row</button>"""
                )
        drop_down_buttons = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "ButtonsGrouping"
        )
        if drop_down_buttons is not None:
            if drop_down_buttons.get(model_name) is not None:
                drop_down_buttons_model = drop_down_buttons.get(model_name)
                if len(drop_down_buttons_model["dropDown"]) > 0:
                    html = (
                        html
                        + f"""
              <div class="float-right">
              <a data-toggle="dropdown" aria-expanded="false" data-list=""><button id="drop_down_button_grouping{element_id}" data-list='{json.dumps(drop_down_buttons_model)}' class="btn btn-primary">{drop_down_buttons_model['dropDowntext']}</button></a>
              <div class="dropdown-menu dropdown-menu-lg dropdown-menu-left" style="height: fit-content; min-width: 12em; border-radius: 1rem; overflow-y: auto; margin: 0px !important; padding-top: 0px !important; position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(1410px, 43px, 0px);" x-placement="bottom-start">
                <div class="apps-dropdownItems">
                  <ul class="sortable-order col pt-2 text-center" style="list-style: none;line-height: 2.5em;">

                  </ul>
                </div>
              </div>
            </div>
              """
                    )
        listview_columns_hidden = json.loads(create_view_tab_body_content)["Category_attributes"][
            "Mandatory"
        ].get("columnHeadersHide")
        if listview_columns_hidden is not None:
            if listview_columns_hidden.get(model_name) is not None:
                listview_columns_hidden_model = listview_columns_hidden.get(model_name)
                if len(listview_columns_hidden_model) > 0:
                    new_list = []
                    for i in listview_columns_hidden_model:
                        if i in verboseList_notitle:
                            new_list.append(verboseList_notitle[i])
                        else:
                            new_list.append(i)
                    listview_columns_hidden_model = new_list
                    html = (
                        html
                        + f"""<button id="column_hidden_config_{element_id}" style="display:none;" data-list='{json.dumps(listview_columns_hidden_model)}'>Title row</button>"""
                    )
        for sub_element in t["list_view_html_json"]:
            if sub_element["Category_sub_element_name"] == "Data_table" and sub_element["Required"] == "Yes":
                if create_view_mode == "NO" or mtmap:
                    function_check = button_styling(list_view_button_styling, "listviewcreateviewplus")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="create_view__toggler_{element_id}" type="button" title="Create View" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="modal" data-target="#create_view_mode_{element_id}" data-elementID="{element_id}" name="Create View"> {function_check['iconAppend']} {function_check['changeText']} </button>"""
                        )
                    else:
                        html = (
                            html
                            + f"""<button id="create_view__toggler_{element_id}" type="button" title="Create View" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="modal" data-target="#create_view_mode_{element_id}" data-elementID="{element_id}" name="Create View"> <i class="fa fa-plus"></i> </button>"""
                        )
                html = html + f""" """
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    old_config_list.append(sub_element_attr["attr"])
                    if sub_element_attr["attr"] == "Upload" and sub_element_attr["value"] == "Yes":
                        if not comp_element_id:
                            function_check = button_styling(list_view_button_styling, "listviewupload")
                            if function_check is not None:
                                html = (
                                    html
                                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="uploadButton{element_id}" type="button" data-toggle="tooltip" title="Upload File"
                          class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="List_view__Data_table__Upload" """
                                )
                                html = html + f""">"""
                                html = (
                                    html
                                    + f"""{function_check['iconAppend']} {function_check['changeText']}
                            </button>"""
                                )
                            else:
                                html = (
                                    html
                                    + f"""<button id="uploadButton{element_id}" type="button" data-toggle="tooltip" title="Upload File"
                          class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="List_view__Data_table__Upload" """
                                )
                                html = html + f""">"""
                                html = (
                                    html
                                    + f"""<i class="fa fa-upload"></i>
                          </button>"""
                                )
                    elif sub_element_attr["attr"] == "Multi_edit":
                        multiedit_index = datatable_checker.index(sub_element_attr)
                        datatable_checker.pop(multiedit_index)
                    elif sub_element_attr["attr"] == "Save template" and sub_element_attr["value"] == "Yes":
                        if not comp_element_id:
                            function_check = button_styling(list_view_button_styling, "listviewsavetemplate")
                            if function_check is not None:
                                html = (
                                    html
                                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="saveTemplateButton{element_id}" type="button" data-toggle="tooltip" title="Save Template"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" """
                                )
                                html = (
                                    html
                                    + f""">
                        {function_check['iconAppend']} {function_check['changeText']}
                      </button>"""
                                )
                            else:
                                html = (
                                    html
                                    + f"""<button id="saveTemplateButton{element_id}" type="button" data-toggle="tooltip" title="Save Template"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1" """
                                )
                                html = (
                                    html
                                    + f""">
                      Save
                      template
                    </button>"""
                                )
                    elif sub_element_attr["attr"] == "Expand" and sub_element_attr["value"] == "Yes":
                        if not comp_element_id:
                            function_check = button_styling(list_view_button_styling, "listviewexpand")
                            if function_check is not None:
                                html = (
                                    html
                                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" value="Expand" onclick="fnShowHideListView('{element_id}')" data-elementID="{element_id}" data-toggle="tooltip" title="Expand/Contract" id="example1_expand{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" """
                                )
                                html = (
                                    html
                                    + f""">
                          {function_check['iconAppend']} {function_check['changeText']}
                        </button>"""
                                )
                            else:
                                html = (
                                    html
                                    + f"""<button type="button" value="Expand" onclick="fnShowHideListView('{element_id}')" data-elementID="{element_id}" data-toggle="tooltip" title="Expand/Contract" id="example1_expand{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" """
                                )
                                html = (
                                    html
                                    + f""">
                        Expand
                      </button>"""
                                )
            elif sub_element["Category_sub_element_name"] == "Plot_chart":
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    if sub_element_attr["attr"] == "Plot_chart" and sub_element_attr["value"] == "Yes":
                        plot = True
                        if not comp_element_id:
                            function_check = button_styling(list_view_button_styling, "listviewplotchart")
                            if function_check is not None:
                                html = (
                                    html
                                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" value="Plot" id="plotCharts{element_id}" data-elementID="{ele_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}"
                          data-toggle="modal" data-target="#PlotElements{ele_id}" """
                                )
                                html = (
                                    html
                                    + f""">
                          {function_check['iconAppend']} {function_check['changeText']}
                        </button>"""
                                )
                            else:
                                html = (
                                    html
                                    + f"""<button type="button" value="Plot" id="plotCharts{element_id}" data-elementID="{ele_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1"
                          data-toggle="modal" data-target="#PlotElements{ele_id}" """
                                )
                                html = (
                                    html
                                    + f""">
                        <i class="fas fa-chart-pie"></i>
                        &nbsp;&nbsp;Plot charts
                      </button>"""
                                )

            elif sub_element["Category_sub_element_name"] == "Set_alert":
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    if sub_element_attr["attr"] == "Set_alert" and sub_element_attr["value"] == "Yes":
                        if t["table_data"] == "empty":
                            if not comp_element_id:
                                function_check = button_styling(list_view_button_styling, "listviewsetalert")
                                if function_check is not None:
                                    html = (
                                        html
                                        + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="setAlertBtn{element_id}" type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="modal" data-target="#setalertmodal{element_id}" """
                                    )
                                    html = (
                                        html
                                        + f""">
                        {function_check['iconAppend']} {function_check['changeText']}
                        </button>"""
                                    )
                                else:
                                    html = (
                                        html
                                        + f"""<button id="setAlertBtn{element_id}" type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="modal" data-target="#setalertmodal{element_id}" """
                                    )
                                    html = (
                                        html
                                        + f""">
                      Set alert
                      </button>"""
                                    )
                        else:
                            if not comp_element_id:
                                function_check = button_styling(list_view_button_styling, "listviewsetalert")
                                if function_check is not None:
                                    html = (
                                        html
                                        + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" id="displayalert{element_id}"  data-elementid={element_id} class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" """
                                    )
                                    html = (
                                        html
                                        + f""">
                            {function_check['iconAppend']} {function_check['changeText']}
                            </button>"""
                                    )
                                else:
                                    html = (
                                        html
                                        + f"""<button type="button" id="displayalert{element_id}"  data-elementid={element_id} class="btn btn-primary btn-md mx-2 rounded px-2 my-1" """
                                    )
                                    html = (
                                        html
                                        + f""">
                          Set alert
                          </button>"""
                                    )

            elif sub_element["Category_sub_element_name"] == "Filter":
                custom_date_field = None
                custom_date_table = None
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    if (
                        sub_element_attr["attr"] == "Filter"
                        and sub_element_attr["value"] == "Yes"
                        and "date_range_field" in sub_element_attr
                    ):
                        if sub_element_attr["date_range_field"]:
                            custom_date_field = sub_element_attr["date_range_field"]
                            custom_date_table = sub_element_attr["date_range_table"]
                html = (
                    html
                    + f"""<div class="filtershow" id="filtershow{element_id}" style="display:none;" data-parent_group_no="g1">"""
                    + f""" \n
                  <div id="card1{element_id}" class="card">
                    <div class="card-body cardbody1">
                      <button type="button" class="btn btn-tool" id="close_filter_card_button{element_id}" data-elementID="{element_id}" style="float:right;"><i class="fas fa-remove"></i></button>
                      <div>
                          <div class="row">
                              <div class="col-1.5" style="margin-top:0.25rem;margin-left:0.5rem">
                                  <b >Date Range Filter: </b>
                              </div>
                              <div class="col-2">
                                  <select class="select2 fa fa-area-chart"  id="filter_date{element_id}" >
                                                <option>Latest</option>
                                                <option>Today</option>
                                                <option>Yesterday</option>
                                                <option>This Week</option>
                                                <option>This Month</option>
                                                <option>This Quarter</option>
                                                <option>This Year</option>
                                                <option>Previous Week</option>
                                                <option>Previous Month</option>
                                                <option>Previous Quarter</option>
                                                <option>Previous Year</option>
                                                <option>Custom</option>
                                  </select>
                                </div>
                                    <div  id ="startandenddate{element_id}" style="display:none" class="col-8">
                                <div class="row">
                                  <div class="col-4" style="align-items: center;display:flex;">
                                  <div style="display:flex;width: 100px;">
                                        <b>Start Date:</b>
                                        </div>
                                         <div class="input-group date" style="max-width:25em;"><input type="date" id="startdate{element_id}" placeholder="YYYY-MM-DD" class="datepickerinput form-control" required="" dp_config="{dp_config}"><div class="input-group-addon input-group-append" data-target="#datetimepicker1" data-toggle="datetimepickerv"></div></div>
                                  </div>

                                  <div class="col-4" style="align-items: center;display:flex;">
                                  <div style="display:flex;width: 100px;">
                                      <b>End Date:</b>
                                      </div>
                                        <div class="input-group date" style="max-width:25em;"><input type="date" id="enddate{element_id}" placeholder="YYYY-MM-DD" class="datepickerinput form-control" required="" dp_config="{dp_config}"><div class="input-group-addon input-group-append" data-target="#datetimepicker1" data-toggle="datetimepickerv"></div></div>
                                    </div>
                                </div>
                            </div>
                                  <button type="button" class="btn  btn-sm btn-primary" id="daterange_filter{element_id}" daterange_field="{custom_date_field}" daterange_table="{custom_date_table}" style="font-size:inherit;margin-left: auto;">
                                        {("Filter")}
                                        <i class="fa fa-calendar"></i>
                                      </button>
                              </div>
                              <br>
                              <hr style='background-color:var(--primary-color);'>
                              <br>
                          </div><form id="filter_form" class="form-search" method="get">"""
                )
                if not data1.get("no"):
                    html = html + """   {%csrf_token%} """

                html = (
                    html
                    + f"""   <div class="btn-group">
                          <button type="button" class="btn btn-default dropdown-toggle filter-button_listview" data-toggle="dropdown">
                            {("Add Filter")}
                            <span class="caret"></span>
                          </button>
                          <ul class="dropdown-menu" style="max-height: 15rem;">"""
                )
                for col, value in t["label_columns"].items():
                    html = (
                        html
                        + f""" <li class="dropdown-item">
                                <a href="javascript:void(0)" name={col} data-elementID="{element_id}" class="filter_btn{element_id}" style="display:block; width:100%">
                                  {value }
                                </a>
                              </li>"""
                    )
                html = (
                    html
                    + f"""  </ul>
                        </div>

                        <div class="row" id="items">
                          <table class="table filter-table{element_id}" data-elementID="{element_id}">
                          </table>
                        </div>

                        <button type="button" class="standard_button_click btn  btn-sm btn-primary btn_search{element_id}" data-elementID="{element_id}" style="font-size:inherit;">
                          {("Filter")}
                          <i class="fa fa-filter"></i>
                        </button>
                      </form>
                    </div>

                    <!-- /.card-footer -->
                    <div class="card-footer cardfooter1" style="display: none;">
                    </div>
                  </div>

                </div>"""
                )
                for sub_element_attr in sub_element["Category_sub_element_attributes"]:
                    if sub_element_attr["attr"] == "Filter" and sub_element_attr["value"] == "Yes":
                        if not comp_element_id:
                            function_check = button_styling(list_view_button_styling, "listviewfilter")
                            if function_check is not None:
                                html = (
                                    html
                                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="filter_button_list_view{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Filter"
                            class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" """
                                )
                                html = (
                                    html
                                    + f""">
                            {function_check['iconAppend']} {function_check['changeText']}
                          </button><button id="removeFilter{element_id}" type="button" title="Remove filter"
                          class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Remove filter" style="display:none">Remove filter</button>"""
                                )
                            else:
                                html = (
                                    html
                                    + f"""<button id="filter_button_list_view{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Filter"
                            class="btn btn-primary btn-md mx-2 rounded px-2 my-1" """
                                )
                                html = (
                                    html
                                    + f""">
                          Filter
                        </button><button id="removeFilter{element_id}" type="button" title="Remove filter"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Remove filter" style="display:none">Remove filter</button>"""
                                )
        html = html + f""" """
        if len(old_config_list) > 0:
            if any(option in ["Edit Mode", "Paste Tabular Data"] for option in old_config_list):
                if datatable_checker[6]["attr"] == "Edit Mode" and datatable_checker[6]["value"] == "Yes":
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listvieweditmode")
                        if function_check is not None:
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="editListView{element_id}" type="button" title="Edit Mode List View"
                      class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Editmode_listview" data-table-name="{t["model_name"] }"  data-edit-status='off' onclick="editModeListView(elementID='{element_id}')" >{function_check['iconAppend']} {function_check['changeText']}</button> """
                            )
                            html = html + f""" """
                        else:
                            html = (
                                html
                                + f"""<button id="editListView{element_id}" type="button" title="Edit Mode List View"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Editmode_listview" data-table-name="{t["model_name"] }"  data-edit-status='off' onclick="editModeListView(elementID='{element_id}')" >Edit Mode:OFF</button> """
                            )
                            html = html + f""" """
                        function_check = button_styling(list_view_button_styling, "listviewsaveediteddata")
                        if function_check is not None:
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="saveEditListView{element_id}" type="button" title="Save Edit Mode List View" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="save_editmode_listview" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = (
                                html
                                + f"""<button id="saveEditListView{element_id}" type="button" title="Save Edit Mode List View" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="save_editmode_listview" style="display:none">Save Edited Data</button>"""
                            )
                            html = html + f""" """
                if (
                    datatable_checker[5]["attr"] == "Paste Tabular Data"
                    and datatable_checker[5]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewpastetabulardata")
                        if function_check is not None:
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="tablegenerator_{element_id}" type="button" title="Paste tabular data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="modal"  data-target="#table_generator_modal_{element_id}" data-elementID="{element_id}" name="Paste tabular data" onclick="refreshTablegenerator(elementID='{element_id}')">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                        else:
                            html = (
                                html
                                + f"""<button id="tablegenerator_{element_id}" type="button" title="Paste tabular data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="modal"  data-target="#table_generator_modal_{element_id}" data-elementID="{element_id}" name="Paste tabular data" onclick="refreshTablegenerator(elementID='{element_id}')"> Paste tabular data </button>"""
                            )
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listvieweditmode")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="editListView{element_id}" type="button" title="Edit Mode List View"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Editmode_listview" data-table-name="{t["model_name"] }"  data-edit-status='off' onclick="editModeListView(elementID='{element_id}')" >{function_check['iconAppend']} {function_check['changeText']}</button> """
                        )
                        html = html + f""" """
                    else:
                        html = (
                            html
                            + f"""<button id="editListView{element_id}" type="button" title="Edit Mode List View"
                        class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Editmode_listview" data-table-name="{t["model_name"] }"  data-edit-status='off' onclick="editModeListView(elementID='{element_id}')" >Edit Mode:OFF</button> """
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewsaveediteddata")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="saveEditListView{element_id}" type="button" title="Save Edit Mode List View" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="save_editmode_listview" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = (
                            html
                            + f"""<button id="saveEditListView{element_id}" type="button" title="Save Edit Mode List View" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="save_editmode_listview" style='display:none'>Save Edited Data</button>"""
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewpastetabulardata")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="tablegenerator_{element_id}" type="button" title="Paste tabular data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="modal"  data-target="#table_generator_modal_{element_id}" data-elementID="{element_id}" name="Paste tabular data" onclick="refreshTablegenerator(elementID='{element_id}')">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                    else:
                        html = (
                            html
                            + f"""<button id="tablegenerator_{element_id}" type="button" title="Paste tabular data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="modal"  data-target="#table_generator_modal_{element_id}" data-elementID="{element_id}" name="Paste tabular data" onclick="refreshTablegenerator(elementID='{element_id}')"> Paste tabular data </button>"""
                        )

            if "Delete all data" in old_config_list:
                if (
                    datatable_checker[7]["attr"] == "Delete all data"
                    and datatable_checker[7]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewdeletealldata")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="listview_clearall_{element_id}" type="button" title="Delete all data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" model_name="{t["model_name"]}"   data-elementID="{element_id}" name="Delete all data" onclick="listviewClearall(elementID='{element_id}')">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button id="listview_clearall_{element_id}" type="button" title="Delete all data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" model_name="{t["model_name"]}"   data-elementID="{element_id}" name="Delete all data" onclick="listviewClearall(elementID='{element_id}')"> Delete all data</button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewdeletealldata")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="listview_clearall_{element_id}" type="button" title="Delete all data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" model_name="{t["model_name"]}" data-elementID="{element_id}" name="Delete all data" onclick="listviewClearall(elementID='{element_id}')">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button id="listview_clearall_{element_id}" type="button" title="Delete all data" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" model_name="{t["model_name"]}" data-elementID="{element_id}" name="Delete all data" onclick="listviewClearall(elementID='{element_id}')"> Delete all data</button>"""
                        )
                        html = html + f""" """

            if "Find and replace" in old_config_list:
                if (
                    datatable_checker[8]["attr"] == "Find and replace"
                    and datatable_checker[8]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewfindandreplace")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#find_replace_modal" data-table-name="{t["model_name"] }" id="find_replace_{element_id}" type="button" title="Find and replace" class="findreplace btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Find and replace" onclick="findReplaceButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#find_replace_modal" data-table-name="{t["model_name"] }" id="find_replace_{element_id}" type="button" title="Find and replace" class="findreplace btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Find and replace" onclick="findReplaceButton(this)" pr_code="{getPrCodeFromElementId(element_id, request)}"> Find and replace </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewfindandreplace")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#find_replace_modal" data-table-name="{t["model_name"] }" id="find_replace_{element_id}" type="button" title="Find and replace" class="findreplace btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Find and replace" onclick="findReplaceButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#find_replace_modal" data-table-name="{t["model_name"] }" id="find_replace_{element_id}" type="button" title="Find and replace" class="findreplace btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Find and replace" onclick="findReplaceButton(this)" pr_code="{getPrCodeFromElementId(element_id, request)}"> Find and replace </button>"""
                        )
                        html = html + f""" """

            if "Freeze Panes" in old_config_list:
                if datatable_checker[9]["attr"] == "Freeze Panes" and datatable_checker[9]["value"] == "Yes":
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewfreezepanes")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#freeze_pane_modal" data-table-name="{t["model_name"] }" id="freeze_pane_{element_id}" type="button" title="Freeze Panes" class="freezepane btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Freeze Panes" onclick="freezePaneButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#freeze_pane_modal" data-table-name="{t["model_name"] }" id="freeze_pane_{element_id}" type="button" title="Freeze Panes" class="freezepane btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Freeze Panes" onclick="freezePaneButton(this)"> Freeze Panes </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewfreezepanes")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#freeze_pane_modal" data-table-name="{t["model_name"] }" id="freeze_pane_{element_id}" type="button" title="Freeze Panes" class="freezepane btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Freeze Panes" onclick="freezePaneButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#freeze_pane_modal" data-table-name="{t["model_name"] }" id="freeze_pane_{element_id}" type="button" title="Freeze Panes" class="freezepane btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Freeze Panes" onclick="freezePaneButton(this)"> Freeze Panes </button>"""
                        )
                        html = html + f""" """

            if "Formatters" in old_config_list:
                if datatable_checker[10]["attr"] == "Formatters" and datatable_checker[10]["value"] == "Yes":
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewformatters")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#formatter_modal" data-table-name="{t["model_name"] }" id="formatter_{element_id}" type="button" title="Formatters" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Formatters" pr_code="{getPrCodeFromElementId(element_id,request)}" onclick="formatterButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#formatter_modal" data-table-name="{t["model_name"] }" id="formatter_{element_id}" type="button" title="Formatters" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Formatters" onclick="formatterButton(this)" pr_code="{getPrCodeFromElementId(element_id,request)}"> Formatters </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewformatters")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#formatter_modal" data-table-name="{t["model_name"] }" id="formatter_{element_id}" type="button" title="Formatters" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Formatters" onclick="formatterButton(this)" pr_code="{getPrCodeFromElementId(element_id,request)}">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#formatter_modal" data-table-name="{t["model_name"] }" id="formatter_{element_id}" type="button" title="Formatters" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Formatters" onclick="formatterButton(this)" pr_code="{getPrCodeFromElementId(element_id,request)}"> Formatters </button>"""
                        )
                        html = html + f""" """

            if "View Transactions Status" in old_config_list:
                if (
                    datatable_checker[11]["attr"] == "View Transactions Status"
                    and datatable_checker[11]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(
                            list_view_button_styling, "listviewviewtransactionstatus"
                        )
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button  name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >&nbsp;View Transaction Status</button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewviewtransactionstatus")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}  name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button  name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color)' >&nbsp;View Transaction Status</button>"""
                        )
                        html = html + f""" """

            if "Add Computed Fields" in old_config_list:
                if (
                    datatable_checker[12]["attr"] == "Add Computed Fields"
                    and datatable_checker[12]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewaddcomputedfields")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#add_comp_modal" data-table-name="{t["model_name"] }" id="addComp_field_{element_id}" type="button" title="Add Computed Fields" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Add Computed Fields" onclick="addCompButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#add_comp_modal" data-table-name="{t["model_name"] }" id="addComp_field_{element_id}" type="button" title="Add Computed Fields" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Add Computed Fields" onclick="addCompButton(this)"> Add Computed Fields </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewaddcomputedfields")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#add_comp_modal" data-table-name="{t["model_name"] }" id="addComp_field_{element_id}" type="button" title="Add Computed Fields" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Add Computed Fields" onclick="addCompButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#add_comp_modal" data-table-name="{t["model_name"] }" id="addComp_field_{element_id}" type="button" title="Add Computed Fields" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Add Computed Fields" onclick="addCompButton(this)"> Add Computed Fields </button>"""
                        )
                        html = html + f""" """

            if "Extract Data" in old_config_list:
                if (
                    datatable_checker[14]["attr"] == "Extract Data"
                    and datatable_checker[14]["value"] == "Yes"
                ):
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewextractdata")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#extract_data_modal" data-table-name="{t["model_name"] }" id="extract_data_{element_id}" type="button" title="Extract Data" class="extract_data btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Extract Data" onclick="ExtractDataButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#extract_data_modal" data-table-name="{t["model_name"] }" id="extract_data_{element_id}" type="button" title="Extract Data" class="extract_data btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Extract Data" onclick="ExtractDataButton(this)"> Extract Data </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewextractdata")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#extract_data_modal" data-table-name="{t["model_name"] }" id="extract_data_{element_id}" type="button" title="Extract Data" class="extract_data btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Extract Data" onclick="ExtractDataButton(this)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#extract_data_modal" data-table-name="{t["model_name"] }" id="extract_data_{element_id}" type="button" title="Extract Data" class="extract_data btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Extract Data" onclick="ExtractDataButton(this)"> Extract Data </button>"""
                        )
                        html = html + f""" """

            if "Bulk Update" in old_config_list:
                if datatable_checker[15]["attr"] == "Bulk Update" and datatable_checker[15]["value"] == "Yes":
                    if not comp_element_id:
                        function_check = button_styling(list_view_button_styling, "listviewbulkUpdate")
                        if function_check is not None:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#bulkupdate_data_modal_{element_id}" data-table-name="{t["model_name"] }" id="bulk_update_{element_id}" type="button" title="Bulk Update" class="bulk_update_data btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Bulk Update">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                            )
                            html = html + f""" """
                        else:
                            html = html + f""" """
                            html = (
                                html
                                + f"""<button data-toggle="modal" data-target="#bulkupdate_data_modal_{element_id}" data-table-name="{t["model_name"] }" id="bulk_update_{element_id}" type="button" title="Bulk Update" class="bulk_update_data btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Bulk Update"> Bulk Update </button>"""
                            )
                            html = html + f""" """
            else:
                if not comp_element_id:
                    function_check = button_styling(list_view_button_styling, "listviewbulkUpdate")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#bulkupdate_data_modal_{element_id}" data-table-name="{t["model_name"] }" id="bulk_update_{element_id}" type="button" title="Bulk Update" class="bulk_update_data btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Bulk Update">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#bulkupdate_data_modal_{element_id}" data-table-name="{t["model_name"] }" id="bulk_update_{element_id}" type="button" title="Bulk Update" class="bulk_update_data btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Bulk Update"> Bulk Update </button>"""
                        )
                        html = html + f""" """

            if "Conditional Delete" in old_config_list:
                if (
                    datatable_checker[16]["attr"] == "Conditional Delete"
                    and datatable_checker[16]["value"] == "Yes"
                ):
                    function_check = button_styling(list_view_button_styling, "listviewConditionalDelete")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#conditional_delete_modal_{element_id}" data-table-name="{t["model_name"] }" id="conditional_delete_{element_id}" type="button" title="Conditional Delete" class="conditional_delete btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Conditional Delete">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="#conditional_delete_modal_{element_id}" data-table-name="{t["model_name"] }" id="conditional_delete_{element_id}" type="button" title="Conditional Delete" class="conditional_delete btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Conditional Delete"> Conditional Delete </button>"""
                        )
                        html = html + f""" """
            else:
                function_check = button_styling(list_view_button_styling, "listviewConditionalDelete")
                if function_check is not None:
                    html = html + f""" """
                    html = (
                        html
                        + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="#conditional_delete_modal_{element_id}" data-table-name="{t["model_name"] }" id="conditional_delete_{element_id}" type="button" title="Conditional Delete" class="conditional_delete btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Conditional Delete">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                    )
                    html = html + f""" """
                else:
                    html = html + f""" """
                    html = (
                        html
                        + f"""<button data-toggle="modal" data-target="#conditional_delete_modal_{element_id}" data-table-name="{t["model_name"] }" id="conditional_delete_{element_id}" type="button" title="Conditional Delete" class="conditional_delete btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Conditional Delete"> Conditional Delete </button>"""
                    )
                    html = html + f""" """

            if "Delete Multiple(Permanent)" in old_config_list:
                if (
                    datatable_checker[17]["attr"] == "Delete Multiple(Permanent)"
                    and datatable_checker[17]["value"] == "Yes"
                ):
                    function_check = button_styling(list_view_button_styling, "listviewMultipleDeletePerm")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="" data-table-name="{t["model_name"] }" id="multiple_delete_perm_{element_id}" type="button" title="Delete Multiple(Permanent)" class="multiple_delete_perm btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Delete Multiple(Permanent)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="" data-table-name="{t["model_name"] }" id="multiple_delete_perm_{element_id}" type="button" title="Delete Multiple(Permanent)" class="multiple_delete_perm btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Delete Multiple(Permanent)"> Delete Multiple(Permanent): OFF </button>"""
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewMultipleDeletePerm2")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="multiple_delete_perm_final_{element_id}" type="button" title="Permanently Delete Selected Data" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Permanently Delete Selected Data" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = (
                            html
                            + f"""<button id="multiple_delete_perm_final_{element_id}" type="button" title="Permanently Delete Selected Data" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Permanently Delete Selected Data" style="display:none">Permanently Delete Selected Records</button>"""
                        )

            if "Delete Multiple(Temporary)" in old_config_list:
                if (
                    datatable_checker[18]["attr"] == "Delete Multiple(Temporary)"
                    and datatable_checker[18]["value"] == "Yes"
                ):
                    function_check = button_styling(list_view_button_styling, "listviewMultipleDeleteTemp")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-target="" data-table-name="{t["model_name"] }" id="multiple_delete_temp_{element_id}" type="button" title="Delete Multiple(Temporary)" class="multiple_delete_temp btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Delete Multiple(Temporary)">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-target="" data-table-name="{t["model_name"] }" id="multiple_delete_temp_{element_id}" type="button" title="Delete Multiple(Temporary)" class="multiple_delete_temp btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Delete Multiple(Temporary)"> Delete Multiple(Temporary): OFF </button>"""
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewMultipleDeleteTemp2")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="multiple_delete_temp_final_{element_id}" type="button" title="Temporarily Delete Selected Data" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Temporarily Delete Selected Data" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = (
                            html
                            + f"""<button id="multiple_delete_temp_final_{element_id}" type="button" title="Temporarily Delete Selected Data" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Temporarily Delete Selected Data" style="display:none">Temporarily Delete Selected Records</button>"""
                        )

            if "Approve all" in old_config_list:
                if datatable_checker[19]["attr"] == "Approve all" and datatable_checker[19]["value"] == "Yes":
                    function_check = button_styling(list_view_button_styling, "listviewApproveAll")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="approve_all_ApprovalTemplate_{element_id}" type="button" title="Approve all" class="approve_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Approve all">{function_check['iconAppend']} {function_check['changeText']}
                  </button>
                  <div class="modal fade" id="approvalCommentModal_approveAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_approveAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_approveAll_{element_id}">
                                  <textarea id='approvalCommentText_approveAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_approveAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>
"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-table-name="{t["model_name"] }" id="approve_all_ApprovalTemplate_{element_id}" type="button" title="Approve all" class="approve_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Approve all"> Approve all </button>
                  <div class="modal fade" id="approvalCommentModal_approveAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_approveAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_approveAll_{element_id}">
                                  <textarea id='approvalCommentText_approveAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_approveAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )
                        html = html + f""" """
            else:
                function_check = button_styling(list_view_button_styling, "listviewApproveAll")
                if function_check is not None:
                    html = html + f""" """
                    html = (
                        html
                        + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="approve_all_ApprovalTemplate_{element_id}" type="button" title="Approve all" class="approve_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Approve all">{function_check['iconAppend']} {function_check['changeText']}</button>
                  <div class="modal fade" id="approvalCommentModal_approveAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_approveAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_approveAll_{element_id}">
                                  <textarea id='approvalCommentText_approveAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_approveAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                    )
                    html = html + f""" """

            if "Reject all" in old_config_list:
                if datatable_checker[20]["attr"] == "Reject all" and datatable_checker[20]["value"] == "Yes":
                    function_check = button_styling(list_view_button_styling, "listviewRejectAll")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="reject_all_ApprovalTemplate_{element_id}" type="button" title="Reject all" class="reject_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Approve all">{function_check['iconAppend']} {function_check['changeText']}</button>
                          <div class="modal fade" id="approvalCommentModal_rejectAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_rejectAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Reject all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_rejectAll_{element_id}">
                                  <textarea id='approvalCommentText_rejectAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_rejectAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-table-name="{t["model_name"] }" id="reject_all_ApprovalTemplate_{element_id}" type="button" title="Reject all" class="reject_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Reject all"> Reject all </button>
                  <div class="modal fade" id="approvalCommentModal_rejectAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_rejectAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Reject all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_rejectAll_{element_id}">
                                  <textarea id='approvalCommentText_rejectAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_rejectAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )
                        html = html + f""" """
            else:
                function_check = button_styling(list_view_button_styling, "listviewRejectAll")
                if function_check is not None:
                    html = html + f""" """
                    html = (
                        html
                        + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="reject_all_ApprovalTemplate_{element_id}" type="button" title="Reject all" class="reject_all_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" name="Reject all">{function_check['iconAppend']} {function_check['changeText']}</button>
                  <div class="modal fade" id="approvalCommentModal_rejectAll_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_rejectAll_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Reject all Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_rejectAll_{element_id}">
                                  <textarea id='approvalCommentText_rejectAll_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_rejectAll_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                    )
                    html = html + f""" """

            if "Approve Multiple" in old_config_list:
                if (
                    datatable_checker[21]["attr"] == "Approve Multiple"
                    and datatable_checker[21]["value"] == "Yes"
                ):
                    function_check = button_styling(list_view_button_styling, "listviewMultipleApprove")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="approve_multiple_ApprovalTemplate_{element_id}" type="button" title="Approve Multiple" class="approve_multiple_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Approve Multiple">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-table-name="{t["model_name"] }" id="approve_multiple_ApprovalTemplate_{element_id}" type="button" title="Approve Multiple" class="approve_multiple_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Approve Multiple"> Approve Multiple: OFF </button>"""
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewMultipleApprove2")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="approve_multiple_ApprovalTemplate_final_{element_id}" type="button" title="Approve Selected Records" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Approve Selected Records" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>
                        <div class="modal fade" id="approvalCommentModal_approveMultiple_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_approveMultiple_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve Multiple Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_approveMultiple_{element_id}">
                                  <textarea id='approvalCommentText_approveMultiple_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_approveMultiple_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )
                        html = html + f""" """
                    else:
                        html = (
                            html
                            + f"""<button id="approve_multiple_ApprovalTemplate_final_{element_id}" type="button" title="Approve Selected Records" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Approve Selected Records" style="display:none">Approve Selected Records</button>
                  <div class="modal fade" id="approvalCommentModal_approveMultiple_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_approveMultiple_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Approve Multiple Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_approveMultiple_{element_id}">
                                  <textarea id='approvalCommentText_approveMultiple_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_approveMultiple_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>
                  """
                        )

            if "Reject Multiple" in old_config_list:
                if (
                    datatable_checker[22]["attr"] == "Reject Multiple"
                    and datatable_checker[22]["value"] == "Yes"
                ):
                    function_check = button_styling(list_view_button_styling, "listviewMultipleReject")
                    if function_check is not None:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} data-toggle="modal" data-table-name="{t["model_name"] }" id="reject_multiple_ApprovalTemplate_{element_id}" type="button" title="Reject Multiple" class="reject_multiple_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check["class"]}" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Reject Multiple">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                        )
                        html = html + f""" """
                    else:
                        html = html + f""" """
                        html = (
                            html
                            + f"""<button data-toggle="modal" data-table-name="{t["model_name"] }" id="reject_multiple_ApprovalTemplate_{element_id}" type="button" title="Reject Multiple" class="reject_multiple_ApprovalTemplate btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{t["model_name"] }" data-elementID="{element_id}" data-edit-status="off" name="Reject Multiple"> Reject Multiple: OFF </button>
                  """
                        )
                        html = html + f""" """
                    function_check = button_styling(list_view_button_styling, "listviewMultipleReject2")
                    if function_check is not None:
                        html = (
                            html
                            + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="reject_multiple_ApprovalTemplate_final_{element_id}" type="button" title="Reject Selected Records" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1 {function_check['class']}" data-elementID="{element_id}" name="Reject Selected Records" style="display:none">{function_check['iconAppend']} {function_check['changeText']}</button>
                  <div class="modal fade" id="approvalCommentModal_rejectMultiple_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_rejectMultiple_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Reject Multiple Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_rejectMultiple_{element_id}">
                                  <textarea id='approvalCommentText_rejectMultiple_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_rejectMultiple_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )
                    else:
                        html = (
                            html
                            + f"""<button id="reject_multiple_ApprovalTemplate_final_{element_id}" type="button" title="Reject Selected Records" data-list-type='{list_type_template}' data-table-name="{t["model_name"] }" data-element-id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Reject Selected Records" style="display:none">Reject Selected Records</button>
                  <div class="modal fade" id="approvalCommentModal_rejectMultiple_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="approvalCommentModal_rejectMultiple_{element_id}"  aria-modal="true" style="z-index:1052 !important;">
                            <div class="modal-dialog  modal-lg modal-dialog-centered"  role="document">
                                <div class="modal-content" style="margin-right: auto;margin-left: auto;max-width:1000px;max-height: 700px;text-align: center;font-size:small">
                                <div class="modal-header"  style="background:#565a5e;text-align: center;">
                                    <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Reject Multiple Comment</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body " style="overflow: scroll;overflow-x:hidden;" id="approvalCommentModalBody_rejectMultiple_{element_id}">
                                  <textarea id='approvalCommentText_rejectMultiple_{element_id}' placeholder="Attach a comment…" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
                                  <p  style="font-size:80%;">Note: Please leave blank if you do not wish to put in a comment.</p>
                                </div>

                                <div class="modal-footer" >
                                    <button type="button" id="approval_final_send_rejectMultiple_{element_id}" class="btn btn-primary btn-xs mx-2 rounded px-2" >Send</button>
                                </div>

                                </div>
                            </div>
                         </div>"""
                        )

        if group_by_switch_user_configuration:
            if template == "Multiple table":
                html = (
                    html
                    + f"""<button class="btn btn-primary btn-md mx-2 rounded px-2 my-1" id="group_by_switch_user_configuration_{element_id}" data-list='' data-id='{ele_id}' data-modal-id='{element_id}' data-multi-table onclick="group_by_switch_user_configuration(this)" data-template="{template}" data-table-name='{model_name}'"""
                )
                html = html + "data-user='{{user_name_"
                html = html + f"{ele_id}"
                html = html + "}}'"
                html = html + "data-list2='{{user_group_by_"
                html = html + f"{element_id}"
                html = html + "}}'"
                html = html + f""">Group By User Config</button>"""
            else:
                html = (
                    html
                    + f"""<button class="btn btn-primary btn-md mx-2 rounded px-2 my-1" id="group_by_switch_user_configuration_{element_id}" data-id='{element_id}' onclick="group_by_switch_user_configuration(this)" data-template="{template}" data-table-name='{model_name}'"""
                )
                html = html + "data-user='{{user_name_"
                html = html + f"{ele_id}"
                html = html + "}}'"
                html = html + "data-list2='{{user_group_by_"
                html = html + f"{ele_id}"
                html = html + "}}'"
                html = html + f""">Group By User Config</button>"""
        html += f"""
        <div style="display: inline !important;">
          <a data-toggle="dropdown" aria-expanded="false">
          """
        function_check = button_styling(list_view_button_styling, "listviewColumnVisibility")
        if function_check is not None:
            html += f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="listViewColumnVisibility{element_id}" class="btn btn-primary mx-2 px-2 my-1 {function_check['class']}">{function_check['iconAppend']} {function_check['changeText']}</button>"""
        else:
            html += f"""<button id="listViewColumnVisibility{element_id}" class="btn btn-primary mx-2 px-2 my-1">Column Visibility <i class="fa-solid fa-caret-down"></i></button>"""

        html += f"""   </a>
          <div id="listViewColumnVisibilityDropdown{element_id}" class="dropdown-menu dropdown-menu-lg dropdown-menu-left data-table-column-visibility-dropdown" style="max-height: 20rem; min-width: 10em; border-radius: 1rem; overflow-y: auto; margin: 0px !important; padding-top: 0px !important; position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(1410px, 43px, 0px);" x-placement="bottom-start">

          </div>
        </div>
        <div class="form-inline col-5" style="flex-flow:row !important">
          <label for="showEntries{element_id}" style="top:unset;margin-bottom:unset">Show</label>
          <select name="showEntries{element_id}" id="showEntries{element_id}" class="select2 form-control" data-elementid="{element_id}" style="height: 1.5rem !important;min-width:20%;max-width:50%;">
            <option value="" selected disabled></option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
            <option value="-1">All</option>
          </select>
          <label style="top:unset;margin-bottom:unset">entries</label>
        </div>
        <style>
        #showEntries{element_id} + .select2-container--default{{width:4rem !important; margin: 0 12px !important}}
        #showEntries{element_id} + .select2-container--default .select2-selection--single{{height:1.8rem !important;width:4rem !important;}}
        #showEntries{element_id} + .select2-container .select2-selection__rendered{{line-height:1.8rem !important;text-overflow:unset !important;padding-left: 8% !important; padding-right: 8% !important;}}
        #showEntries{element_id} + .select2-container--default .select2-selection--single .select2-selection__arrow{{height:1.8rem !important;padding-left: 1.5rem;}}
        </style>
        <script>$("#showEntries{element_id}").select2({{dropdownParent:$("#showEntries{element_id}").parent()}});</script>
        <div style="margin-left:1.5rem; margin-top:1rem; display:none;" id="multiple_select_checkbox_SelectAll_div{element_id}" name="multiple_select_checkbox_SelectAll_div">
          <input class="multiple_select_checkbox_SelectAll form-check-input" id="multiple_select_checkbox_SelectAll{element_id}" type="checkbox" value="" style="cursor: pointer; margin-block-start: auto" onchange="select_all_multiple(elementTabID='{element_id}', obj = this)">
          <h3 style="font-size: var(--font-size)!important; font-weight: 700; display: contents; margin-top: 3rem; font-family: var(--font-family);">Select All</h3>
        </div>
        <style>
            .multiple_select_checkbox_SelectAll {{
                position: relative;
                cursor: pointer;
                accent-color: var(--primary-color);
                transform: scale(1.05);
            }}
            .multiple_select_checkbox_SelectAll::before {{
                content: '';
                position: absolute;
                left: 1.47px;
                top: 1.47px;
                width: 9.9px;
                height: 9.7px;
                border: 0px solid #838383;
                border-radius: 0.8px;
                background-color: transparent;
            }}
            .multiple_select_checkbox_SelectAll:hover::before {{
                background-color: #f8f9fa;
            }}
            .multiple_select_checkbox_SelectAll:checked::before {{
                accent-color: var(--primary-color);
            }}
            .multiple_select_checkbox_SelectAll:checked:hover::before {{
                background-color: transparent;
            }}
        </style>
        """

    else:
        html = (
            html
            + f""" <div class="filtershow" id="filtershow{element_id}" style="display:none;">"""
            + f""" \n
                  <div id="card1{element_id}" class="card">
                    <div class="card-body cardbody1">
                      <button type="button" class="btn btn-tool" id="close_filter_card_button{element_id}" data-elementID="{element_id}" style="float:right;"><i class="fas fa-remove"></i></button>
                     <div>
                          <div class="row">
                              <div class="col-1.5" style="margin-top:0.25rem;margin-left:0.5rem">
                                  <b>Date Range Filter: </b>
                              </div>
                              <div class="col-2">
                                  <select class="select2 fa fa-area-chart"  id="filter_date{element_id}" >
                                                <option>Latest</option>
                                                <option>Today</option>
                                                <option>Yesterday</option>
                                                <option>This Week</option>
                                                <option>This Month</option>
                                                <option>This Quarter</option>
                                                <option>This Year</option>
                                                <option>Previous Week</option>
                                                <option>Previous Month</option>
                                                <option>Previous Quarter</option>
                                                <option>Previous Year</option>
                                                <option>Custom</option>
                                  </select>
                                </div>
                                    <div  id ="startandenddate{element_id}" style="display:none" class="col-8">
                                <div class="row">
                                  <div class="col-4" style="align-items: center;display:flex;">
                                  <div style="display:flex;width: 100px;">
                                        <b>Start Date:</b>
                                        </div>
                                         <div class="input-group date" style="max-width:25em;"><input type="date" id="startdate{element_id}" placeholder="YYYY-MM-DD" class="datepickerinput form-control" required="" dp_config="{dp_config}"><div class="input-group-addon input-group-append" data-target="#datetimepicker1" data-toggle="datetimepickerv"></div></div>
                                  </div>

                                  <div class="col-4" style="align-items: center;display:flex;">
                                  <div style="display:flex;width: 100px;">
                                      <b>End Date:</b>
                                      </div>
                                        <div class="input-group date" style="max-width:25em;"><input type="date" id="enddate{element_id}" placeholder="YYYY-MM-DD" class="datepickerinput form-control" required="" dp_config="{dp_config}"><div class="input-group-addon input-group-append" data-target="#datetimepicker1" data-toggle="datetimepickerv"></div></div>
                                    </div>
                                </div>
                            </div>

                                  <button type="button" class="btn  btn-sm btn-primary" id="daterange_filter{element_id}" style="font-size:inherit;margin-left: auto;">
                                        {("Filter")}
                                        <i class="fa fa-calendar"></i>
                                      </button>
                              </div>
                              <br>
                              <hr style='background-color:var(--primary-color);'>
                              <br>
                          </div>
                      <form id="filter_form" class="form-search" method="get">"""
        )
        if not data1.get("no"):
            html = html + """   {%csrf_token%} """
        html = (
            html
            + f"""
                        <div class="btn-group">
                          <button type="button" class="btn btn-default dropdown-toggle filter-button_listview" data-toggle="dropdown">
                            {("Add Filter")}
                            <span class="caret"></span>
                          </button>
                          <ul class="dropdown-menu" style="max-height: 15rem;">"""
        )
        for col, value in t["label_columns"].items():
            html = (
                html
                + f""" <li class="dropdown-item">
                        <a href="javascript:void(0)" name={col} data-elementID="{element_id}" class="filter_btn{element_id}" style="display:block; width:100%">
                          {value }
                        </a>
                      </li>"""
            )
        html = (
            html
            + f"""  </ul>
                        </div>

                        <div class="row" id="items">
                          <table class="table filter-table{element_id}" data-elementID="{element_id}">
                          </table>
                        </div>

                        <button type="button" class="standard_button_click btn  btn-sm btn-primary btn_search{element_id}" data-elementID="{element_id}" style="font-size:inherit;">
                          {("Filter")}
                          <i class="fa fa-filter"></i>
                        </button>
                      </form>
                    </div>

                    <!-- /.card-footer -->
                    <div class="card-footer cardfooter1" style="display: none;">
                    </div>
                  </div>

                </div>"""
        )
        html = (
            html
            + f"""</div>
          <div class="row">
          """
        )
        if perms["users"]["add_currencymaster"]:
            html = (
                html
                + f"""  <button type="button" data-toggle="tooltip" title="Add record" name="actions" value="create"
                        class="btn btn-primary btn-md mx-2 rounded px-2" id="addrecord">
                        <i class="fa fa-plus"></i>
                      </button>


                      <button id="uploadButton" type="button" data-toggle="tooltip" title="Upload File"
                        class="btn btn-primary btn-md mx-2 rounded px-2" name="List_view__Data_table__Upload">
                        <i class="fa fa-upload"></i>
                      </button>"""
            )

        html = (
            html
            + f"""<button id="saveTemplateButton" type="button" data-toggle="tooltip" title="Save Template"
                        class="btn btn-primary btn-md mx-2 rounded px-2 float-right"
                        style="height: 25px;padding-left:11px;padding-top:2px;">Save
                        Template
                      </button>

                      <button id="filter_button_list_view{element_id}" data-elementID="{element_id}" type="button" data-toggle="tooltip" title="Filter"
                        class="btn btn-primary btn-md mx-2 rounded px-2 float-right">
                        Filter
                      </button><button id="removeFilter{element_id}" type="button" title="Remove filter"
                      class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-elementID="{element_id}" name="Remove filter" style="display:none">Remove filter</button>



                      <button type="button" value="Expand" id="example1_expand" class="btn btn-primary btn-md mx-2 rounded px-2">
                        Expand
                      </button>

                      <button type="button" value="Plot" id="plotCharts" class="btn btn-primary btn-md mx-2 rounded px-2"
                        data-toggle="modal" data-target="#PlotElements">
                        <i class="fas fa-chart-pie"></i>
                        &nbsp;&nbsp;Plot Charts
                      </button>
                    </div>

                    <section><br></section>
                    <table id="example1" class="display compact" style="width:100%;">
                      <thead>
                        <tr>
                        </tr>
                      </thead>
                      <tbody>
                      </tbody>
                    </table>"""
        )
    card_view_template_class = ""
    if template == "Card View":
        card_view_template_class = "card-view-template"
    card_config_data = ""
    card_view_config = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
        "cardViewConfig"
    )
    if card_view_config is not None:
        card_config_data = card_view_config
    if list_type_template == "Approval Template":
      html += f"<div><button id='approval-sort-btn-{element_id}' class='btn btn-primary' style='float:right' data-sort='active'><i class='fa-solid fa-arrow-up-wide-short'></i></button></div>"
    else:
      pass
    html = (
        html
        + f"""
        <table id="example1{element_id}" data-list='{json.dumps(card_config_data)}' class="display compact stripe row-border order-column {card_view_template_class}" data-list_type_template='{list_type_template}' data-list-group-by='{group_by_config_data}'"""
    )
    html = html + "data-list-group-by1='{{data_list_group_by"
    html = html + f"{ele_id}"
    html = html + "}}'"
    html = (
        html
        + f"""style="width:100%; height:fit-content; background-color:white;" data-parent_group_no="g3" data-table-name="{model_name}">
                    <thead class="fontstylechange">
                      <tr>
                      </tr>
                    </thead>
                    <tfoot>
                      <tr>
                      </tr>
                  </tfoot>
                    <tbody>
                    </tbody>
                  </table>
        """
    )
    html = (
        html
        + f"""     </div>
        </div>
        </div>
        <div class="modal fade" id="popup{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-header" style='background:#565a5e; color:white;'>
                <h5 class="modal-title" style="padding-left: 43%;">Upload</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <form method="post" action="/users/{{{{current_app_code}}}}/{{{{current_access_mode}}}}/{pr_code}/" enctype="multipart/form-data" pr_code="{pr_code}" data-form-id='uploadfileform{element_id}'>"""
    )
    if not data1.get("no"):
        html = html + """   {%csrf_token%} """
    html = (
        html
        + f""" \n  <div class="modal-body">
                  <div class="form-group">
                     <div class="custom-file">
                    <input type="file" class="custom-file-input" id='uploadFile{element_id}'  data-file-id="{element_id}" style="border-bottom-color:white; width:230px" name="file" >
                    <label id="c" class="custom-file-label" >Choose file</label>
                    </div>
                    <input type="hidden" name="tableName" value="{t["table_name"]}">
                    <input type="hidden"  name="modelName" value="{t["model_name"]}">
                  </div>
              </div>
              <div class="modal-footer">
                  <button  name="ColumnMapper"  type="button"
                class="btn btn-primary columnMapperButton" data-toggle="modal" data-target="#columnMapperModal{element_id}"  data-table-name="{t["model_name"] }" data-elementID="{element_id}" disabled>Map Columns</button>

               <input id="downloadButton{element_id}" type="submit" data-toggle="tooltip" title="Please ensure that the file name is the same as the downloaded format file for a specific table when you upload your data"
                class="btn btn-primary" data-elementID="{element_id}" value="Download Format" data-dbTableName="{t["table_name"]}" data-modelName="{t["model_name"]}" >
                <input type="hidden" name="listOrDelete" value="downloadFormat">
                <input type="hidden" name="dbTableName" value="{t["table_name"] }">
                <input type="hidden" name="modelName" value="{ t["model_name"] }">"""
    )

    if template == "Multi Dropdown View":
        html = (
            html
            + f"""
        <input type="hidden" name="view_name" id="view_name" value="">
        <script>
          var view = $(`#tableTab{element_id}`).find("select").val();
          $('#view_name').val(view);
        </script>"""
        )
    html = (
        html
        + f"""
                <input type="hidden" name="eleId" value="{element_id}">
                <input type="hidden" name="pr_code" value="{pr_code}">
                <input type="hidden" name="tab" value="{t["createViewName"] }">
                <input type="hidden" name="columnmapperDict" id="columnmapperDict{element_id}" value="" data-save-config="" data-element_id="columnmapperDict{element_id}">
              <button id="uploadButton2{element_id}" name="listOrDelete" value="U" type="button"
                class="btn btn-primary button_standard_save" data-elementID="{element_id}" disabled>Submit</button>
                """
    )
    if (listviewcustAllow and listviewcustAllowBoth) or (listviewcustAllow):
        html = (
            html
            + f"""
            <input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">
            <button  name="customValidation"  type="button"
                                  class="btn btn-primary  customValidationButton"  data-table-name="{t["model_name"]}" data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" >&nbsp;Custom Validation
                                </button>
              </div>
              </form>
              </div>
            </div>
          </div>
        """
        )
    elif listviewcustAllowBoth is True and listviewcustAllow is False:
        html = (
            html
            + f"""
            <input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">
              </div>
              </form>
              </div>
            </div>
          </div>
        """
        )
    else:
        html = (
            html
            + f"""
              </div>
              </form>
              </div>
            </div>
          </div>
      """
        )
    html = (
        html
        + f"""    <!--UPLOAD POPUP CODE ENDS-->
        <div class="modal fade bd-example-modal-sm" id="validations_in_progress{element_id}" style="" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
          <div class="modal-dialog modal-lg-center modal-dialog-centered">
            <div class="modal-content" style="width:350px; padding-top:1.5rem; padding-bottom:1.5rem; margin:auto;">
              <div class="modal-body" style="display: flex; text-align: center; justify-content: center; flex-direction: column; align-items: center;">
                <div class="loader2" style="margin:auto;"></div>
                <h6 style="font-weight: 200;font-family: var(--font-family); text-align:center;margin-top:14px; margin-bottom:unset;">Validations in progress. Please wait...</h6>
                <style>
                  .loader2 {{
                    --c1:var(--primary-color,var(--primary));
                    --c2:var(--primary-color,var(--primary));
                    width: 25px;
                    height: 50px;
                    border-top: 4px solid var(--c1);
                    border-bottom: 4px solid var(--c1);
                    background: linear-gradient(90deg, var(--c1) 2px, var(--c2) 0 5px,var(--c1) 0) 50%/7px 8px no-repeat;
                    display: grid;
                    overflow: hidden;
                    animation: l5-0 2s infinite linear;
                  }}
                  .loader2::before,
                  .loader2::after {{
                    content: "";
                    grid-area: 1/1;
                    width: 75%;
                    height: calc(50% - 4px);
                    margin: 0 auto;
                    border: 2px solid var(--c1);
                    border-top: 0;
                    box-sizing: content-box;
                    border-radius: 0 0 40% 40%;
                    -webkit-mask:
                      linear-gradient(#000 0 0) bottom/4px 2px no-repeat,
                      linear-gradient(#000 0 0);
                    -webkit-mask-composite: destination-out;
                            mask-composite: exclude;
                    background:
                      linear-gradient(var(--d,0deg),var(--c2) 50%,#0000 0) bottom /100% 205%,
                      linear-gradient(var(--c2) 0 0) center/0 100%;
                    background-repeat: no-repeat;
                    animation: inherit;
                    animation-name: l5-1;
                  }}
                  .loader2::after {{
                    transform-origin: 50% calc(100% + 2px);
                    transform: scaleY(-1);
                    --s:3px;
                    --d:180deg;
                  }}
                  @keyframes l5-0 {{
                    80%  {{transform: rotate(0)}}
                    100% {{transform: rotate(0.5turn)}}
                  }}
                  @keyframes l5-1 {{
                    10%,70%  {{background-size:100% 205%,var(--s,0) 100%}}
                    70%,100% {{background-position: top,center}}
                  }}
                </style>
              </div>
            </div>
          </div>
        </div>
    """
    )
    if group_by_switch_user_configuration:
        html = (
            html
            + f"""
      <div class="modal" id="group_by_switch_user_configuration_modal_{element_id}">
        <div class="modal-dialog modal-xl modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h6 class="modal-title" style="text-align:center;">User Configuration Group By</h6>
              <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">"""
        )
        if template == "Approval Template":
            html = (
                html
                + f"""
            <div style="margin-left: 1rem;" class="custom-control custom-checkbox">
                  <input type="checkbox" name="group_by_action_checkbox_user_config_{element_id}" class="checkboxinput custom-control-input" id="group_by_action_checkbox_user_config_{element_id}" onchange="group_by_action_checkbox_onchange_user_config(this)" data-id="{element_id}">
                  <label for="group_by_action_checkbox_user_config_{element_id}" class="custom-control-label">
                    Not Required
                  </label>
                </div>
            <div class="row">
              <div class="col-12">
                <div class="float-right" style="margin-right: 6px;">
                  <button onclick="group_by_action_add_levels_user_config(this)" class="btn btn-primary add_level" type="button" data-id="{element_id}" data-table-name='{model_name}' data-template="{template}"><i class="fas fa-plus" name="false" style="margin-right: 4px;"><span style="color: var(--primary-color); font-size: 17.6px; font-family: Arial; font-weight: normal; margin-left: 3px;"></span></i>  Add Levels</button>
                  <button onclick="group_by_action_reset_user_config(this)" class="btn btn-primary" type="button" data-id="{element_id}">Reset</button>
                </div>
              </div>
            </div>
            <div class="group_by_approval_temp_div" style="margin:1rem;">
            <label for="group_by_approval_temp_json_table_{element_id}" class="acies_label">Select json data table</label>
            <select data-id="{element_id}" id="group_by_approval_temp_json_table_{element_id}" class="select2 form-control" name="group_by_approval_temp_json_table" data-template="{template}">
              <option value="" selected>No Table</option>

            </select>
          </div>
            <div class="group_by_action_levels" style="margin-left: 1rem">
              <hr style="height:2px;border-width:0;color:gray;background-color:gray">
            </div>

            <div class="group_by_action_columns" style="margin-left: 1rem;margin-top:1rem;">
              <p style="font-weight: bold;">Select columns:</p>
              <select class="select2 form-control " multiple onchange="group_by_action_columns_operation_user_config(this)" data-id="{element_id}"></select>
              <div class="operation_div">

              </div>
            </div>
            </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-id="{element_id}" onclick="group_by_action_save_user_config(this)"data-table-name='{model_name}' data-template='{template}'>Save</button>
              </div>

          """
            )
        else:
            html = (
                html
                + f"""
            <div style="margin-left: 1rem;" class="custom-control custom-checkbox">
                  <input type="checkbox" name="group_by_action_checkbox_user_config_{element_id}" class="checkboxinput custom-control-input" id="group_by_action_checkbox_user_config_{element_id}" onchange="group_by_action_checkbox_onchange_user_config(this)" data-id="{element_id}">
                  <label for="group_by_action_checkbox_user_config_{element_id}" class="custom-control-label">
                    Not Required
                  </label>
                </div>
            <div class="row">
              <div class="col-12">
                <div class="float-right" style="margin-right: 6px;">
                  <button onclick="group_by_action_add_levels_user_config(this)" class="btn btn-primary add_level" type="button" data-id="{element_id}" data-table-name='{model_name}'><i class="fas fa-plus" name="false" style="margin-right: 4px;"><span style="color: var(--primary-color); font-size: 17.6px; font-family: Arial; font-weight: normal; margin-left: 3px;"></span></i>  Add Levels</button>
                  <button onclick="group_by_action_reset_user_config(this)" class="btn btn-primary" type="button" data-id="{element_id}">Reset</button>
                </div>
              </div>
            </div>

            <div class="group_by_action_levels" style="margin-left: 1rem">
              <hr style="height:2px;border-width:0;color:gray;background-color:gray">
            </div>

            <div class="group_by_action_columns" style="margin-left: 1rem;margin-top:1rem;">
              <p style="font-weight: bold;">Select columns:</p>
              <select class="select2 form-control " multiple onchange="group_by_action_columns_operation_user_config(this)" data-id="{element_id}"></select>
              <div class="operation_div">

              </div>
            </div>
            </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-id="{element_id}" onclick="group_by_action_save_user_config(this)"data-table-name='{model_name}' data-template='{template}'>Save</button>
              </div>

          """
            )
        html = (
            html
            + f"""
          </div>
        </div>
    </div>
      """
        )
    list_view_embeded_computationMultiple = json.loads(create_view_tab_body_content)["Category_attributes"][
        "Mandatory"
    ].get("listViewEmbededComputationMultiple")
    if list_view_embeded_computationMultiple is not None:
        html = (
            html
            + f"""
      <!-- Full Output Embeded Computation Modal -->
                <div class="modal" id="embededComputationlistViewMultiple_{element_id}">
                <div class="modal-dialog modal-xl modal-dialog-centered">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h6 class="modal-title" style="text-align:center;">Results</h6>
                      <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body" id="embededComputationlistViewBodyMultiple_{element_id}" style="max-height:38rem;overflow:auto;">

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
            </div>
            <!-- New-->
      """
        )
    if template == "Multiple table" and not data1.get("no") and count == 1:
        script = script + scriptGenerator("Multiple table", "Multiple table", ele_id, request, t, data1)
    return html, script, plot


def html_generator_list_view(
    model_name,
    create_view_tab_body_content,
    element_id,
    ele_id,
    tab_type,
    header_name,
    request,
    data1,
    template,
    count=1,
    length=1,
    edit=False,
    plot=True,
    iden="",
):
    row_data = {}
    script = ""
    row_data["element_id"] = ele_id
    row_data["tab_header_name"] = header_name
    row_data["tab_type"] = tab_type
    row_data["tab_body_content"] = create_view_tab_body_content
    actual_model_name_bk = dynamic_model_create.get_model_class(model_name, request)
    verboseList_bku = {field.name: field.verbose_name for field in actual_model_name_bk.concrete_fields}
    restricted_for_edit_fields = json.loads(create_view_tab_body_content)["Category_attributes"][
        "Mandatory"
    ].get("RestrictFields", [])
    user_table_name = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
        "user_table_name"
    )
    if (
        json.loads(create_view_tab_body_content)
        .get("Category_attributes")
        .get("Mandatory")
        .get("approversDispFieldsListView")
    ):
        app_table_cols = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "approversDispFieldsListView"
        )
    else:
        app_table_cols = ["username", "first_name", "last_name"]

    if (
        json.loads(create_view_tab_body_content)
        .get("Category_attributes")
        .get("Mandatory")
        .get("approversDispFormatListView")
    ):
        app_table_sep = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
            "approversDispFormatListView"
        )
        if app_table_sep == "space_sep":
            app_table_sep = " "
        else:
            app_table_sep = ", "
    else:
        app_table_sep = " "

    page = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get("pagination")
    if page in [None]:
        page = ["1", "5", "10", "25", "50", "75", "100", "All"]
    mtmap = False
    create_view_element_id = None
    if "MultipleTableMapping" in json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"]:
        mconfig = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"][
            "MultipleTableMapping"
        ]
        mtmap = True
        if model_name in mconfig:
            create_view_element_id = mconfig[model_name]
        else:
            mtmap = False
    t = list_view_tab("", "", row_data, request)
    t["page"] = page
    t["plotlybuttons"] = [
        {"Category_name": "Image", "icon": "fa fa-picture-o"},
        {"Category_name": "Scatter", "icon": "fas fa-grip-vertical"},
        {"Category_name": "Bar", "icon": "fa fa-bar-chart"},
        {"Category_name": "Line", "icon": "fa fa-line-chart"},
        {"Category_name": "Pie", "icon": "fas fa-chart-pie"},
        {"Category_name": "Sunburst", "icon": "fas fa-chart-pie"},
        {"Category_name": "Area", "icon": "fa fa-area-chart"},
        {"Category_name": "Waterfall", "icon": "fas fa-water"},
        {"Category_name": "Treemap", "icon": "fas fa-th-large"},
        {"Category_name": "Funnel", "icon": "fa fa-filter"},
        {"Category_name": "Boxplot", "icon": "fas fa-boxes"},
        {"Category_name": "Bubble", "icon": "fas fa-circle"},
        {"Category_name": "Histogram", "icon": "fa fa-signal"},
        {"Category_name": "Violin", "icon": "fa fa-thermometer-0"},
        {"Category_name": "Heatmap", "icon": "fas fa-chess-board"},
        {"Category_name": "Gauge", "icon": "fa fa-tachometer"},
        {"Category_name": "Map", "icon": "fa fa-map-marker"},
        {"Category_name": "3D plots", "icon": "fa fa-cubes"},
        {"Category_name": "Aggregation", "icon": "fas fa-percentage"},
        {"Category_name": "Combo", "icon": "fas fa-shapes"},
        {"Category_name": "Table", "icon": "fa fa-table"},
    ]
    p = [{"TabID": 1}]
    # Create View Content on List View Modal
    create_view_mode = "YES"
    process_number = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "TabScreens",
                "Columns": ["related_item_code"],
            },
            "condition": [
                {
                    "column_name": "element_id",
                    "condition": "Equal to",
                    "input_value": ele_id,
                    "and_or": "and",
                },
                {
                    "column_name": "tab_type",
                    "condition": "Equal to",
                    "input_value": "list_view",
                    "and_or": "",
                },
            ],
        },
    )

    related_item_flowchart = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "Process_subprocess_flowchart",
                "Columns": ["flowchart_elements"],
            },
            "condition": [
                {
                    "column_name": "related_item_code",
                    "condition": "Equal to",
                    "input_value": process_number.values[0][0],
                    "and_or": "",
                }
            ],
        },
    )
    parent_element_id = "#"
    if not related_item_flowchart.empty:
        related_item_flowchart = related_item_flowchart.to_dict()
        flowchart_element = json.loads(related_item_flowchart["flowchart_elements"][0])
        data_create_html = ""

        # extracting parent element id
        for i in flowchart_element:
            if (i["shapeID"] == element_id) and (i["shape"] == "process"):
                for parent in i["parent"]:
                    if parent.startswith("whiteSpacewrap"):
                        parent_element_id = parent
            elif (i["shape"] == "process") and mtmap:
                for parent in i["parent"]:
                    if parent.startswith("whiteSpacewrap") and element_id in mconfig.values():
                        parent_element_id = element_id
                    else:
                        mtmap = False

        if create_view_element_id is not None:
            parent_element_id = create_view_element_id
        if parent_element_id != "#":
            createview_df = read_data_func(
                request,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_header_name", "table_name", "tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": parent_element_id,
                            "and_or": "and",
                        },
                        {
                            "column_name": "tab_type",
                            "condition": "Equal to",
                            "input_value": "create_view",
                            "and_or": "",
                        },
                    ],
                },
            )
            createview_content = createview_df.to_dict()
            create_view_modal_title = createview_content["tab_header_name"][0]
            model_name = json.loads(createview_content["table_name"][0])[0]
            createview_content = json.loads(createview_content["tab_body_content"][0])
            create_view_dict = json.loads(create_view_tab_body_content)
            if "create_view_selection_checker" not in create_view_dict.keys():
                create_view_dict["create_view_selection_checker"] = False
            if "create_view_selection_checker" in create_view_dict.keys():
                if (not create_view_dict["create_view_selection_checker"]) or mtmap:
                    create_view_mode = "NO"
                    data_create_html, scriptInd = html_generator(
                        model_name, createview_content, parent_element_id, request, edit=False
                    )
                    data_create_html = data_create_html

    if template == "Multiple table":
        style = "style='width:99%;'"
        htmlHeader = f"""
            <h6 class="card-title"><p class="{ele_id}_editable" onfocusout="edit1.call(this)" data-table={model_name} data-element_id={element_id} style="margin-bottom:0px;" contenteditable="true">{user_table_name[model_name]}</p></h6>

                <div class="card-tools">
                  <button id="saveChartConfigButton1{ele_id}" data-elementID="{ele_id}" type="button" class="btn btn-primary standard_button_click"> <i
                      class="fa fa-save"></i>&nbsp; Save</button>

                        <button type="button"  value="AddTab" class="btn btn-primary rounded px-2" data-toggle="tooltip" title="Add new tab" id='analysisAddTab{ele_id}' style="margin-left:10px;"><i class="fa fa-plus"></i>&nbsp;Tab</button>
                </div>
      """
    else:
        htmlHeader = f"""
                <div class="card-tools">
                  <button id="saveChartConfigButton1{element_id}" data-elementID="{element_id}" type="button" class="btn btn-primary standard_button_click"> <i
                      class="fa fa-save"></i>&nbsp; Save</button>

                        <button type="button"  value="AddTab" class="btn btn-primary rounded px-2" data-toggle="tooltip" title="Add new tab" id='analysisAddTab{element_id}' style="margin-left:10px;"><i class="fa fa-plus"></i>&nbsp;Tab</button>
                </div>
      """
    html = ""
    if iden:
        return html, script
    html = (
        html
        + f"""

      <div style="z-index:3000" class="modal fade" id="edit_list_preview_modal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="process01493148457537794_exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div id="edit_list_preview_header{element_id}" class="modal-header">
        <h5 class="modal-title"></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="edit_list_preview_body{element_id}">
      </div>
      <div class="modal-footer" id='edit_list_preview_footer{element_id}'>
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
              </div>
</div>

</div>
</div>

<div style="z-index:3000" class="modal" id="hyper_linking_modal{element_id}">
  <div class="modal-dialog modal-dialog-centered modal-xl">
    <div class="modal-content">
      <div id="hyper_linking_header{element_id}" class="modal-header">
        <h5 class="modal-title"></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="hyper_linking_body{element_id}">
      </div>
      <div class="modal-footer" id='hyper_linking_footer{element_id}'>
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
              </div>
</div>

</div>
</div>

        <!-- end modal-->"""
        + f"""<div class="modal fade" id="setconditionmodal{element_id}" role="dialog" data-focus="false">
        <div class="modal-dialog" style="max-width:700px">

          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <div class="text-primary"><h5>Set Condition</h5></div>
              <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
               <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                  <a class="nav-link active" id="home-tab2{element_id}" data-toggle="tab" href="#home2{element_id}" role="tab" aria-controls="home" aria-selected="true">Set Conditions</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="profile-tab2{element_id}" data-toggle="tab" href="#profile2{element_id}" role="tab" aria-controls="profile" aria-selected="false">Set Color</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="contact-tab2{element_id}" data-toggle="tab" href="#contact2{element_id}" role="tab" aria-controls="contact" aria-selected="false">Set Text</a>
                </li>
              </ul>
              <div class="tab-content" id="myTabContent{element_id}">
                <div class="tab-pane show active" id="home2{element_id}" role="tabpanel" aria-labelledby="home-tab2{element_id}">
                  <br>
                  <div id="setcolumnheadername{element_id}" style="display:none"></div>
                  <div id="setcolumnname1{element_id}" style="display:none"></div>
                  <div id="setrowname1{element_id}" style="display:none"></div>
                  <div class="row">
                    <div class="col-12"><br>
                      <div class="row">
                        <!-- <div class="col-4">Select Column on which you want to set condition :</div> -->
                        <div class="col-4">
                          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="width:13em;">
                            Condition Parameter:
                            <span class="caret"></span>
                          </button>
                          <ul class="dropdown-menu" style="font-size:small;padding-left:1em;"> """
    )
    for col, value in t["label_columns"].items():
        html = (
            html
            + f"""                    <li>
                              <a href="javascript:void(0)" name={col} class="filter_btn1{element_id}">
                                { value }
                              </a>
                            </li> """
        )
    html = (
        html
        + f"""                  </ul>
                        </div>
                      </div>
                      <br>
                      <div class="row">
                        <div class="setname" style="padding-left:2em;"></div>
                        <div class="row" id="items{element_id}">
                          <div class="alert-tableheader"></div>
                          <table class="table" id="alert-table{element_id}">
                          </table>
                        </div>
                      </div>

                    </div>
                    <!-- <div class="col-6"><br>
                      Limit : <input type="text" id="limit1">
                    </div> -->
                  </div>
                </div>
                <div class="tab-pane fade" id="profile2{element_id}" role="tabpanel" aria-labelledby="profile-tab2{element_id}">
                  <br><div class="row">
                    <div class="col-6"><br>
                      <div class="row">
                        <div class="col-6">Select Color :</div>
                        <div class="col-6">
                         <input type="color" id="colorset{element_id}" value="#aaaaaa">
                        </div>
                      </div>
                    </div>
                    </div>
                  </div>
                <div class="tab-pane fade" id="contact2{element_id}" role="tabpanel" aria-labelledby="contact-tab2{element_id}">
                  <br><div class="row">
                    <div class="col-6"><br>
                      <div class="row">
                        <div class="col-6">Select Conditional Text :</div>
                        <div class="col-6">
                         <input type="text" id="conditionaltexts{element_id}" val="">
                        </div>
                      </div>
                    </div>
                    </div>
                </div>

              </div>
            </div>
            <div class="modal-footer">
              <button type="button" id="conditionsave{element_id}" class="btn btn-default" data-elementid="{element_id}">Save</button>
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </div>

        </div>
        </div>


        <div class="container-fluid" style="display: none;" id="setalertcard{element_id}">
          <div class="row justify-content-center">
            <div class="card col-12">
              <div class="card-header">
                <h6 class="card-title">Alert details</h6>
                <div class="card-tools">
                  <button type="button" value="Move to Alert" onclick=alertAgg();  class=" btn btn-primary alertAgg btn-md" title="Move to Alert"><i class='fas fa-arrow-alt-circle-right' style='font-size:1rem'></i></button>
                </div>
              </div>
              <div class="card-body" style="display:block;">
              <div class="row" style="margin-bottom:1em;">
                <button id="irow{element_id}" class="btn-md btn-primary" style="padding: .2em .5em;margin-left:0.5em;" data-toggle="modal" data-target="#setalertmodal1{element_id}"><i class="fa fa-plus"></i> Alert</button>
                <button id="icol{element_id}" class="btn-md btn-primary" style="padding: .2em .5em;margin-left:1em;"><i class="fa fa-plus"></i> Limit</button>
                <input id="col{element_id}" style="text-align:center;display:none;margin-left:0.5em;" placeholder="Enter Column Name"/>
                  <!-- <button id="irow" class="btn-md" style="padding: .2em .5em;">Insert Row</button> -->
              </div>

              <div id="col-12">
                <table id="example111{element_id}" class="display nowrap" data-elementid="{element_id}" style="width:100%">
                <thead>
                  <tr>
                  <th>Actions</th>"""
    )
    for alertItem in t["headers"]:
        if alertItem == "alert_id":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        elif alertItem == "id":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        elif alertItem == "name":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        elif alertItem == "tag":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        elif alertItem == "description":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        elif alertItem == "model_name":
            html = html + f"""        <th style="text-align:center;">{alertItem}</th> """
        else:
            html = (
                html
                + f"""      <th style="text-align:center;">{alertItem}<i class="fa fa-times" title="Delete column" style="margin-left:1em" onclick="deletecol(&quot; {alertItem} &quot;)"></i></th> """
            )

    html = (
        html
        + f"""            </tr>
              </thead>
                <tbody>"""
    )
    for alertItemcontent in t["alertdata"]:
        html = (
            html
            + f"""        <tr id={alertItemcontent.get("alert_id")}>
                <td class= "tbldelete" data-element_id="{element_id}" title="Delete record" id="{alertItemcontent.get("alert_id")}"><i class="far fa-trash-alt ihover javaSC thin-icontrash text-primary" style="font-size:15px;"></td>"""
        )
        for key, val in alertItemcontent.items():
            if key == "alert_id":
                html = (
                    html
                    + f"""<td><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                )
            elif key == "id":
                html = (
                    html
                    + f"""<td><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                )
            elif key == "name":
                html = (
                    html
                    + f"""<td><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                )
            elif key == "tag":
                html = html + f"""<td id="{alertItemcontent["alert_id"]}-{key}">{val}</td>"""
            elif key == "description":
                html = (
                    html
                    + f"""<td><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                )
            elif key == "model_name":
                html = (
                    html
                    + f"""<td><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                )
            else:
                if val.status == "breached":
                    html = (
                        html
                        + f"""<td data-element_id="{element_id}" style="background-color:{val.color}"><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value= {val.data}></td>"""
                    )
                else:
                    html = (
                        html
                        + f"""<td data-element_id="{elementid}"><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;"></td>"""
                    )

                html = (
                    html
                    + f"""<!-- <td style="background-color:{color}"><input type="text" id="{alertItemcontent["alert_id"]}-{key}" style="border:0px;text-align:center;" value={data}></td> -->"""
                )

        html = html + f""" </tr>"""
    html = (
        html
        + f"""      </tbody>
              </table>

          </div>
            <br/><br/>

              </div>
              </div>
              </div>
              </div>"""
    )
    if (count == 1 and not data1.get("no")) or (
        count == 1 and template == "Multi Dropdown View" and plot in [True]
    ):
        html = (
            html
            + f"""

        <div class="container-fluid" style="display: none; " id="plotSection{ele_id}">
          <style>
            /* Dropdown Button */


            /* .modal-dialog {{
                max-width: 1300px;
                margin: 0.75rem auto;
            }} */

            .analysisDashboardmove {{
                background-color: white;
            }}

            .tabulator .tabulator-header .tabulator-col {{
                background-color: var(--primary-color);
                color: white;
                text-align: center;

            }}


            .dropbtn {{
                background-color: white;
                color: black;
                padding: 1px;
                font-size: 30px;
                border: none;
            }}

            .xaxislayer-above {{
                /* cursor: pointer; */
                pointer-events: all;
            }}

            .yaxislayer-above {{
                /* cursor: pointer; */
                pointer-events: all;
            }}

            /* The container <div> - needed to position the dropdown content */
            .dropdown {{
                position: relative;
                display: inline-block;
            }}

            /* Dropdown Content (Hidden by Default) */
            .dropdown-content:not(.notification-dropdown) {{
                display: none;
                position: absolute;
                background-color: white;
                min-width: 110px;
                box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
                z-index: 1000;
            }}

            .dropdown2-tab {{
                position: relative;
                display: inline-block;
            }}

            /* Dropdown Content (Hidden by Default) */
            .dropdown2-content-tab {{
                display: none;
                position: absolute;
                background-color: white;
                min-width: 110px;
                box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
                z-index: 1000;
            }}

            /* Links inside the dropdown */
            .dropdown-content:not(.notification-dropdown) div {{
                color: black;
                padding: 2px 1px;
                text-decoration: none;
                display: block;
            }}

            /* Change color of dropdown links on hover */
            .dropdown-content:not(.notification-dropdown) a:hover {{
                background-color: #ddd;
            }}

            /* Show the dropdown menu on hover */
            .dropdown:hover .dropdown-content:not(.notification-dropdown) {{
                display: block;
            }}

            .dropdown2-content-tab div {{
                color: black;
                padding: 2px 1px;
                text-decoration: none;
                display: block;
            }}

            /* Change color of dropdown links on hover */
            .dropdown2-content-tab a:hover {{
                background-color: #ddd;
            }}

            .analysisWraptext td{{
              white-space: break-spaces;
            }}
            .arrow-tab {{
              border-style: dashed;
              border-color: transparent;
              border-width: 0.45em;
              display: -moz-inline-box;
              display: inline-block;
              font-size: 130px;
              height: 0;
              line-height: 0;
              position: relative;
              vertical-align: middle;
              width: 0;
              background-color: #fff;
              left: -14px;
              top: 0px;
              border: 0.45em dashed transparent;
              border-left: 66px dashed var(--primary-color);
            }}


            .index-no-col{{
              display: flex;
              align-items: center;
              justify-content: center;
              border-top-right-radius: 40px;
              border-bottom-right-radius: 40px;
              background:  var(--primary-color);
              height: 6rem;
            }}

            .editTabIcon{{
              display: none;
              position: absolute;
              right: 0;
              z-index: 1;
              background: #f7f7f7;
              padding: 7px;
              border-radius: 50%;
              box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
              cursor: pointer;
            }}

            .tab-icons, .tab-header-name, .colored-text{{
              color: #fff;
            }}
            .TabIcons{{
              margin:1rem;
              height:4rem;
              font-size:2rem;
            }}
            .index-rows-temp2{{
        border-bottom: 8px solid var(--primary-color);
      }}
      .index-column-temp2{{
        border: 5px solid  var(--primary-color);
      }}

            .dropIndex{{
              border-radius: 25px 25px 0px 25px !important;
              height: 4rem;
              width: 4rem;
              z-index: 1;
              margin-top: -70px;
              margin-left: 30px;
              margin-right: -25px;
              display: flex;
              justify-content: center;
              align-items: center;
              background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);
            }}

            .boxIndex{{
              border-radius: 25px !important;
              height: 7rem;
              z-index: 1;
              margin-left: 30px;
              margin-right: -25px;
              display: flex;
              justify-content: center;
              align-items: center;
              background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);
              box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
            }}

            .defaultTabTheme{{
              background-color:  var(--primary-color);
            }}

            .linkCard {{
              width: 95%;
              height: 4rem;
              border-radius: 1.2rem;
              margin: 1rem;
              display: flex;
              flex-direction: row;
              justify-content: center;
              align-items: center;
              transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
              cursor: pointer;
            }}
            .linkCard a{{
              color:var(--font-hover-color);
              }}
            .linkCard:hover {{
              transform: scale(1.05);
            }}
            .linkCard:active {{
              transform: scale(1.0);
            }}
            .scroll-link {{
              min-width : 17rem;
            }}
            .scroll-nav {{
              flex-wrap: nowrap !important;
              overflow-x: scroll !important;
              overflow-y: hidden !important;
            }}
            #tabLinks{{
              overflow-x:hidden;
            }}
            .chartDivSection label{{
              width: fit-content;
            }}

          </style>
          <div class="row justify-content-center" style="display:block; width:100%">
            <div class='card col-12'>
              <div class="card-header">
                <!--<h6 class="card-title">Visual Plot</h6>-->
                {htmlHeader}
              </div>
              <div class="card-body" style="display:block;">
                <div class="row justify-content-left" style="background: white;display:block; width:100%;">
                  <div class="form-inline" style="margin-left:0.5rem; display:block;">

                  <ul class="nav nav-tabs nav-fill analysis-nav" id="analysisTab{ele_id}" role="tablist" style="display:'';">
                          <li class="nav-item navtab scroll-link">
                            <a class="nav-link active" id="indexTab{ele_id}" href="#indexTabContent{ele_id}" role="tab" data-toggle="tab" aria-controls="#indexTab" aria-selected="true" config_background-color="#fb7474">
                              <div class="row">
                                <div class="col-md-11" style="padding-right: 0.1rem">
                                  <span class="tabname1" id="indexTab{ele_id}" data-tab="indexTab{ele_id}" data-tab_ct="indexTab{ele_id}">
                                    Index
                                  </span>
                                </div>
                              </div>
                            </a>
                          </li></ul>
                  """
        )
        html = (
            html
            + f"""
    <div class="tab-content" id="analysisTabContent{ele_id}">
      <div class="tab-pane fade" id="indexTabContent{ele_id}" role="tabpanel" aria-labelledby="indexTab{ele_id}">
        <div id="tabLinks{ele_id}" class="tabLinksclass" style="max-width: 800px; margin: auto; border: 0.1px solid black;  min-height: 715px; max-height: 715px;overflow:auto;">
        </div>
      </div>
    </div>
    """
        )
        html = (
            html
            + f"""
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

"""
        )
        t["Layout"] = "Landscape"
        y = t.copy()
        y["element_id"] = ele_id
        script = script + scriptGenerator("analysis", "analysisList", ele_id, request, y, {}, tab_pane=True)
        script = script + scriptGenerator("analysis", "analysisSlicer", ele_id, request, y, {}, tab_pane=True)
    edit_list_view_modal_header = json.loads(create_view_tab_body_content)["Category_attributes"][
        "Mandatory"
    ].get("editListviewModalConfigs")
    extract_data_filename = json.loads(create_view_tab_body_content)["Category_attributes"]["Mandatory"].get(
        "extract_data_filename"
    )
    if not extract_data_filename:
        extract_data_filename = "Revolutio"
    if edit_list_view_modal_header is not None:
        if edit_list_view_modal_header.get(model_name):
            edit_list_view_modal_header = edit_list_view_modal_header[model_name]["header_text"]
        else:
            edit_list_view_modal_header = "Update"
    else:
        edit_list_view_modal_header = "Update"
    html = (
        html
        + f"""

<!--Modal to edit single row datatable in list view tab-->
<div class="modal fade" id="list_view_edit_modal_{element_id}" tabindex="-1" data-focus="false" role="dialog" aria-labelledby="{element_id}_exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">{edit_list_view_modal_header}</h5>
        <button type="button" class="close" id="closeModal{element_id}" data-dismiss="modal" aria-label="Close" onclick="emptyListViewModal.call(this)" data-element_id = "{element_id}">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="modalBody{element_id}">
  </div>
</div>

</div>
</div>

<div class="modal fade" id="list_view_edit_json_modal_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="{element_id}_exampleModalCenterTitle_json" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit json details</h5>
        <button type="button" class="close" id="closeModal{element_id}json" data-dismiss="modal" aria-label="Close" data-element_id = "{element_id}">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="modalBody{element_id}json">
        <div class="card-body">
          <div class="table-responsive tbl_json_table_input">
            <table id="tables_edit_json_{element_id}"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll">
              <thead>
                <tr class="editjson_tblef_tableHeader"  style="border-top: 1px solid var(--primary-color);border-bottom:1px solid var(--primary-color);display: flex;justify-content: space-around ;align-items: center;" >
                </tr>
              </thead>

              <tbody style="max-height: 4rem;overflow: scroll;">
                <br>
                <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" id="save_editjson_field_{element_id}">Save</button>
        </div>
  </div>
</div>

</div>
</div>

<div class="modal fade" id="list_view_edit_approver_data_modal_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="{element_id}_exampleModalCenterTitle_approver" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Details</h5>
        <button type="button" class="close" id="closeModal{element_id}_approver" data-dismiss="modal" aria-label="Close" data-element_id = "{element_id}">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="modalBody{element_id}_approver">
        <div class="card-body">
        <div class="form-group row">
          <div class="col-sm-7">
            <label class="acies_label col-form-label">Select Group:</label>
            <select id="select_edit_group_{element_id}" data-elementID="{element_id}" class="form-control select2" multiple>
          """
    )
    groupname = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "auth_group",
                "Columns": ["name"],
            },
            "condition": [],
        },
    ).name.to_list()
    for gname in groupname:
        html = html + f"""<option value="{gname}">{gname}</option>"""

    html = (
        html
        + f"""
          </select>
          </div>

          <div class="col-sm-7">
            <label class="acies_label col-form-label">Select User:</label>
            <select id="select_edit_user_{element_id}" data-elementID="{element_id}" class="form-control select2" multiple>"""
    )
    if "username" not in app_table_cols:
        app_table_cols.append("username")
    approver_list = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "User",
                "Columns": app_table_cols,
            },
            "condition": [],
        },
    )
    app_table_cols2 = app_table_cols.copy()
    if "username" in app_table_cols2:
        app_table_cols2.remove("username")
    approver_list["temp_name"] = approver_list[app_table_cols2].apply(
        lambda row: app_table_sep.join(row.values.astype(str)), axis=1
    )
    approver_list["full_name"] = approver_list["username"] + " ( " + approver_list["temp_name"] + " )"
    approver_list = approver_list.set_index("username")["full_name"].to_dict()
    for uname, ufname in approver_list.items():
        html = html + f"""<option value="{uname}">{ufname}</option>"""
    html = (
        html
        + f"""
            </select>
          </div>


          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" id="save_editapprover_data_field_{element_id}">Save</button>
        </div>
  </div>
</div>

</div>
</div>


<div class="modal fade" id="list_view_edit_applevel_modal_{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="{element_id}_exampleModalCenterTitle_applevel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit details</h5>
        <button type="button" class="close" id="closeModal{element_id}_applevel" data-dismiss="modal" aria-label="Close" data-element_id = "{element_id}">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="modalBody{element_id}_applevel">
        <div class="card-body" style="overflow:auto;">
            <div class="form-group row">
                <div class="col-sm-11">
                  <label class="acies_label col-form-label" id="edit_app_level_current_level{element_id}">Current level:</label>
                </div>
                <div class="acies-float-right">
                  <button id="addRow_app_level{element_id}" title="Add Level" class="btn btn-primary btn-xl rounded" type="button" name="post">Add Level</button>
                </div>
            </div>

            <div class="form-group row">
              <div class="col-1"><label class="acies_label col-form-label" style="text-align:center;">Level</label></div>
              <div class="col-2"><label class="acies_label col-form-label" style="text-align:center;">Approval Type</label></div>
              <div class="col-2"><label class="acies_label col-form-label" style="text-align:center;">Approver Group</label></div>
              <div class="col-2"><label class="acies_label col-form-label" style="text-align:center;">Approver User</label></div>
              <div class="col-3"><label class="acies_label col-form-label" style="text-align:center;">Approver Type</label></div>
            </div>

          <div id="approval-lists">
            <ul class="disabled_lists col pt-2 text-center" style="list-style: none;">
            </ul>
            <div id="approval-reorder-div">
              <ul class="sortable-order approval-list col pt-2" style="list-style: none;">
              </ul>
            </div>
          </div>

        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" id="save_editapp_level_field_{element_id}">Save</button>
        </div>
  </div>
</div>

</div>
</div>

<div class="modal fade" id="view_details_modal_{element_id}" role="dialog" data-focus="false" style="z-index: 1099;">
    <div class="modal-dialog" style="max-width:800px;">
      <!-- Modal content-->
      <div class="modal-content">
        <!-- Modal header-->
        <div class="modal-header">
          <h6 class="modal-title">View Details</h6>
          <button type="button" class="close" onclick="closeviewdetails('{element_id}')">&times;</button>
        </div>
        <!-- Modal body-->
        <div class="modal-body" id="view_details_modal_{element_id}_wrapper">

      </div>
    </div>
    </div>
  </div>

<!--Modal For Find and replace-->
  <div class="modal fade" id="find_replace_modal_{element_id}" role="dialog" data-focus="false" style="overflow-y:auto;">
    <div class="modal-dialog" style="max-width:1000px;">
      <!-- Modal content-->
      <div class="modal-content">
        <!-- Modal header-->
        <div class="modal-header">
          <h6 class="modal-title">Find and replace</h6>
          <button type="button" class="close" data-dismiss="modal">&times;</button>
        </div>
        <!-- Modal body-->
        <div class="modal-body">
            <div class="form-group row">
                    <label class="acies_label col-sm-2 col-form-label">Select Column</label>
                    <div class="col-sm-10">
                        <select id="selectcolumn{element_id}" data-elementID="{element_id}" form="columnform" class="form-control select2 selectcolumnclass" onchange="findreplacechange(this)">
                          <option value="" disabled selected></option>
                        </select>
                    </div>
                  </div>
            <div class="form-group row">
                    <label class="acies_label col-sm-2 col-form-label">Match Case</label>
                    <div class="col-sm-10">
                        <select data-elementID="{element_id}" id="selectcase{element_id}" form="columnform" class="form-control select2" onchange="selectcasechange(this)">
                          <option value="Equal to" selected>Equal to</option>
                          <option value="Not Equal to">Not Equal to</option>
                          <option value="Entire Column">Replace entire Column with static value</option>
                          <option value="Greater than">Greater than</option>
                          <option value="Greater than equal to">Greater than equal to</option>
                          <option value="Smaller than">Smaller than</option>
                          <option value="Smaller than equal to">Smaller than equal to</option>
                          <option value="Starts with">Starts with</option>
                          <option value="Ends with">Ends with</option>
                          <option value="Not Starts with">Not Starts with</option>
                          <option value="Not Ends with">Not Ends with</option>
                          <option value="Contains">Contains</option>
                          <option value="Not Contains">Not Contains</option>
                        </select>
                    </div>
                  </div>
            <div class="form-group row">
                    <label class="acies_label col-sm-2 col-form-label">Replace Column</label>
                    <div class="col-sm-10">
                        <select id="selectreplacecolumn{element_id}" data-elementID="{element_id}" form="columnform" class="form-control select2 selectcolumnclass" onchange="replacechange(this)">
                          <option value="" disabled selected></option>
                        </select>
                    </div>
                  </div>
            <div class="form-group row">
                <label class="acies_label col-sm-2 col-form-label" id="findlabel{element_id}">Find what</label>
                <div class="col-sm-10" id="findlistL3{element_id}">
                </div>
              </div>
              <div class="form-group row show_textinput_div_{element_id}" style="display:none;">
                <label class="acies_label col-sm-2 col-form-label" id="show_textinput{element_id}">Find what</label>
                <div class="col-sm-10" id="show_textinputL3{element_id}">
                 <input type="text" step="1" class="form-control" id="show_textinputfind{element_id}">
                </div>
              </div>
              <div class="custom-control custom-checkbox form-group row text_based_div{element_id}">
                    <input type="checkbox" id="text_basedip_{element_id}" data-elementID="{element_id}" name="text_basedip_{element_id}"  class="checkboxinput custom-control-input" checked onchange="showtextinput(this)">
                    <label for="text_basedip_{element_id}" class="custom-control-label">Field type specific input</label><br>
              </div>
                <div class="form-group row">
                <label class="acies_label col-sm-2 col-form-label" id="replacelabel{element_id}">Replace with</label>
                <div class="col-sm-10" id="replacelistL3{element_id}">
                </div>
              </div>
              <label id="findtext{element_id}" class="mb-4"></label>
            </div>
        <!-- Modal footer-->
        <div class="modal-footer">
          <button data-elementID="{element_id}" data-table-name="{t["model_name"] }" type="button" class="btn btn-primary btn-md float-right" is_find="True" onclick="findreplacesave(this)" pr_code="{getPrCodeFromElementId(element_id, request)}" template="{template}">Find</button>
          <button data-elementID="{element_id}" data-table-name="{t["model_name"] }" type="button" class="btn btn-primary btn-md float-right findreplacesave" id="findreplacesave_{element_id}" onclick="findreplacesave(this)" pr_code="{getPrCodeFromElementId(element_id, request)}" template="{template}">Update</button>
        </div>
      </div>
    </div>
  </div><script>$(`#selectcolumn{element_id}`).select2()
  $(`#selectreplacecolumn{element_id}`).select2()
    </script>

<!--Modal For Tablefield in Listview -->
<div class="modal fade" id="tablefield_modal_{element_id}_list" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tablefield_modal_{element_id}" aria-hidden="true" style= "height: 100vh;" >
                            <div class="modal-dialog modal-xl modal-dialog-centered" role="document" style="height:70%">
                              <div class="modal-content" style='height:80%;'>
                                <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
                                  <h5 class="modal-title" id="tablem{element_id}_list" style="width:100%;text-align: center;height:auto;">Add Records</h5>
                                  <button type="button" class="close" onclick="$('#tablefield_modal_{element_id}_list').modal('hide');" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                  </button>
                                </div>
                                <div class="modal-body" style= "height: 20vh;">
                                  <div class="card-body pt-0">
                                    <span>
                                      <button class="btn btn-primary btn-md add_newtblf_{element_id}_list  mb-2" style="color: var(--font-hover-color);margin: 2px 0px;float: right;display: flex;align-items: center;font-size: 15px;">Add new record <i class="fa fa-plus ml-2"></i></button>
                                    </span>
                                    <div class="table-responsive tbl_table_input" style="overflow-x:unset">
                                        <table id="tables_f{element_id}_list"  class=" table-sm" style="max-height:4rem;min-width: 100%;max-width: 100%;overflow: scroll;table-layout:fixed">
                                          <thead>
                                            <tr class="constraint_tblef_tableHeader" >
                                            </tr>
                                          </thead>

                                          <tbody style="max-height: 4rem;overflow: scroll;">
                                            <br>
                                            <tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                                            </tr>
                                          </tbody>
                                        </table>
                                    </div>
                                  </div>
                                </div>

                                  <div class="modal-footer">
                                  <button type="button" class="btn btn-secondary" id="save_table_field_{element_id}_list">Save</button>
                                  </div>
                                </div>
                              </div>
                            </div>

<!--Modal For Freeze Panes-->
  <div class="modal fade" id="freeze_pane_modal_{element_id}" role="dialog" data-focus="false">
    <div class="modal-dialog modal-dialog-center" >
<div class="modal-content" style="width:20rem">
<div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
<span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Freeze Panes</span>
<button type="button" class="close" data-dismiss="modal" id="freeze_pane_close_{element_id}" aria-label="Close">
<span aria-hidden="true">&times;</span>
</button>
</div>
<div class="modal-body" id="freeze_pane_body_{element_id}" style="max-height:26rem;overflow:auto">

<label style="text-align: center;">Choose from which side :</label>
<div style="display: flex;flex-direction: row;align-content: space-between;justify-content: space-around;align-items: center;margin-top: 33px;">
<div class="custom-control custom-checkbox">
      <input type="checkbox" id="freeze_left_{element_id}" data-elementID="{element_id}" name="left_{element_id}"  class="freezeCheckbox checkboxinput custom-control-input" value="left">
      <label for="freeze_left_{element_id}" class="custom-control-label"> Left </label><br>
</div>
<div class="custom-control custom-checkbox">
      <input type="checkbox" id="freeze_right_{element_id}" data-elementID="{element_id}" name="right_{element_id}" class="freezeCheckbox checkboxinput custom-control-input" value="right">
      <label for="freeze_right_{element_id}" class="custom-control-label"> Right </label><br>
</div>
</div>

</div>
<div class="modal-footer">
    <button data-elementID="{element_id}" data-table-name="{t["model_name"] }" type="button" id="unfreezepanesave_{element_id}" onclick="unfreezepanesave(this)" class="btn btn-primary btn-md rounded px-2 unfreezepanesave">Unfreeze</button>
    <button data-elementID="{element_id}" data-table-name="{t["model_name"] }" type="button" id="freezepanesave_{element_id}" onclick="freezepanesave(this)" class="btn btn-primary btn-md rounded px-2 freezepanesave">Freeze</button>
</div>
</div>
</div>
  </div><script>$(`#selectcolumn{element_id}`).select2()
    </script>

<!-- Formatter Main Modal -->
<div class="modal" id="fmodal1_{element_id}">
      <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
        <div class="modal-content" style="width: 75%;text-align: center;justify-content: center;" >

          <div class="modal-header" style="background:#565a5e;color:white;">
            <h6 class="modal-title" style="flex: auto;">Formatters</h6>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>

          <div class="modal-body" style="height: 25rem;overflow: auto;">

		  <div class="form-group" style="display:none;" id="showformatTable1_{element_id}">
        <div class="form-group col-12" id='formatTableDisp1_{element_id}'>
          <label class="acies_label col-md-12">Select Tables</label>
          <select id="formatTab1_{element_id}" class="select2 form-control" name="template" multiple>
          </select>
        </div>
        </div>

        <div class="form-group">
          <div class="form-group col-12" id='formatColumnDisp1_{element_id}'>
            <label class="acies_label col-md-12">Select columns</label>
            <select id="formatColumn1_{element_id}" class="select2 form-control" name="template" onchange="formatterColChange(this)" multiple>
            </select>
          </div>
          </div>

          <div class="row">
            <table class="table table-bordered table-hover fformatTable1_{element_id}" style="overflow: auto;">
              <thead class="thead-dark">
                <tr>
                  <th scope="col" style="text-align: center;">Table name</th>
                  <th scope="col" style="text-align: center;">Column name</th>
                  <th scope="col" style="text-align: center;">Action</th>
                </tr>
              </thead>
              <tbody id="formatterTable1_{element_id}">

              </tbody>
            </table>
          </div>

        <input type="hidden" id="configFormat1_{element_id}" value="" data-config_formatter1_{element_id}="">

          </div>

          <div class="modal-footer">
            <button type="button" id="btn_formatSaveMain_{element_id}" onclick="saveFormatconfig.call(this)" pr_code="{getPrCodeFromElementId(element_id,request)}" element_id="{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
            <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
          </div>

        </div>
      </div>
    </div><script>
    $(`#formatTab1_{element_id}`).select2()
    $(`#formatColumn1_{element_id}`).select2()
    $(`#formatTab1_{element_id}`).select2()
    </script>

<!-- Extract Data Modal -->
<style>
  .extract_data{{
    margin: 5px !important
  }}
  #extract_data_modal_{element_id} .modal-content{{
    width: 60%;
    text-align: center;
    justify-content: center;
  }}
  #addCompFields_{element_id} .modal-content{{
    width: 75%;
    text-align: center;
    justify-content: center;
  }}
  .select2 .select2-selection__rendered{{
    text-align: left;
  }}

  @media screen and (max-width: 376px) {{
    .extract-button i {{
      margin-right: 0.3rem !important;
    }}
    .extract-button {{
      margin: 2px !important;
      padding: 6px !important;
    }}
  }}

  @media screen and (max-width: 768px) {{
    #extract_data_modal_{element_id} .modal-content, #addCompFields_{element_id} .modal-content{{
      width: 100%;
    }}
    .extract-button {{
      font-size: 13px !important;
    }}
  }}

</style>
<div class="modal" id="extract_data_modal_{element_id}">
      <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
        <div class="modal-content">

          <div class="modal-header" style="background:#565a5e;color:white;">
            <h6 class="modal-title" style="flex: auto;">Extract Data</h6>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>

          <div class="modal-body">
          <form method="post" enctype="multipart/form-data">
          """
    )
    html = (
        html
        + """{% csrf_token %} """
        + f"""
        <div class="form-group">
          <div class="form-group col-12" id='exDataColumnDisp_{element_id}'>
            <label class="acies_label col-md-12">Select columns</label>
            <select id="exDataColumn1_{element_id}" class="select2 form-control" name="exDatacols" multiple>
            </select>
          </div>
          </div>
          </form>
          </div>

          <div class="modal-footer">
            <button type="submit" class="btn btn-primary extract-button" id="btn_exDataDownload_{element_id}" name="uploadbuttonUS" onclick="downloadexdData.call(this)" value="ExtdownloadData" data-dismiss="modal" data-filename="{extract_data_filename}">
            <i class="fa-solid fa-file-csv mr-2"></i> CSV
            </button>
            <button class="btn btn-primary buttons-excel extract-button buttons-html5" data-dismiss="modal" type="button">
            <i class="fa-solid fa-file-excel mr-2"></i> Excel
            </button>
            <button class="btn btn-primary buttons-pdf extract-button buttons-html5" data-dismiss="modal" type="button">
            <i class="fa-solid fa-file-pdf mr-2"></i> PDF
            </button>
            <button class="btn btn-primary buttons-copy extract-button buttons-html5" data-dismiss="modal" type="button">
            <i class="fa-solid fa-copy mr-2"></i> Data
            </button>
          </div>

        </div>
      </div>
    </div><script>
    $(`#exDataColumn1_{element_id}`).select2()
    </script>
    """
        + f"""

    <!-- Bulk Update Modal -->
        <div class="modal fade" id="bulkupdate_data_modal_{element_id}" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-header" style='background:#565a5e; color:white;'>
                <h5 class="modal-title" style="padding-left: 43%;">Bulk Update</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <form method="post" action="/users/{{{{current_app_code}}}}/{{{{current_access_mode}}}}/{getPrCodeFromElementId(element_id, request)}/" enctype="multipart/form-data" pr_code="{getPrCodeFromElementId(element_id, request)}" data-form-id='uploadfileform123{element_id}'>"""
    )

    html = html + """   {%csrf_token%} """
    html = (
        html
        + f""" \n  <div class="modal-body">
                  <div class="form-group">
                     <div class="custom-file">
                    <input type="file" class="custom-file-input" id='uploadFileBulkUpdate{element_id}' accept=".csv" data-file-id-bk="{element_id}" style="border-bottom-color:white;" name="file" >
                    <label id="c" class="custom-file-label" >Choose file</label>
                    </div>
                    <br><br>
                    <div class="form-group">
                      <label class="acies_label col-md-6">Select identifier columns</label>
                      <select id="bulkupdate_iden_{element_id}" class="select2 form-control" multiple> """
    )
    for keybk, valuebk in verboseList_bku.items():
        html = html + f"""<option value={keybk}>{valuebk}</option>"""
    html = (
        html
        + f"""
                      </select>
                    </div>
                    <div class="form-group">
                      <label class="acies_label col-md-6">Select columns to update</label>
                      <select id="bulkupdate_cols_{element_id}" class="select2 form-control" multiple> """
    )
    for keybk, valuebk in verboseList_bku.items():
        if keybk not in restricted_for_edit_fields:
            html = html + f"""<option value={keybk}>{valuebk}</option>"""
        else:
            continue
    html = (
        html
        + f"""
                      </select>
                    </div>
                    <input type="hidden" name="tableName" value="{t["table_name"]}">
                    <input type="hidden"  name="modelName" value="{t["model_name"]}">
                  </div>
              </div>
              <div class="modal-footer">
                  <button  name="ColumnMapper"  type="button"
                class="btn btn-primary columnMapperButtonBulkUpdate" data-toggle="modal" data-target="#columnMapperModalBU{element_id}"  data-table-name="{t["model_name"] }" data-elementID="{element_id}" >Map Columns</button>
                <input type="hidden" name="dbTableName" value="{t["table_name"] }">
                <input type="hidden" name="modelName" value="{ t["model_name"] }">
                <input type="hidden" name="eleId" value="{element_id}">
                <input type="hidden" name="pr_code" value="{getPrCodeFromElementId(element_id, request)}">
                <input type="hidden" name="tab" value="{t["createViewName"] }">
                <input type="hidden" name="columnmapperDict" id="columnmapperDictBU{element_id}" value="" data-save-config="" data-element_id="columnmapperDictBU{element_id}">
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" id="update_else_insert_BU{element_id}" name="update_else_insert_BU" class="checkboxinput custom-control-input">
                  <label for="update_else_insert_BU{element_id}" class="custom-control-label">Insert if not present</label>
                </div>

              <button id="uploadButtonBU{element_id}" name="listOrDelete" value="BU" type="button"
                class="btn btn-primary" data-elementID="{element_id}">Submit</button>

                </div>
              </form>
              </div>
            </div>
          </div>
                """
    )
    html = (
        html
        + f"""
<!-- Formatter Modal -->
<div class="modal" id="fmodal2_{element_id}">
      <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
        <div class="modal-content" style="width: 70%;text-align: center;justify-content: center;" >

          <div class="modal-header" style="background:#565a5e;color:white;">
            <h6 class="modal-title" style="flex: auto;">Apply Formatters</h6>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>

          <div class="modal-body" style="height: 12rem;overflow: auto;">

            <div class="form-group">
              <select class="select2 form-control" name="formatoptions" id="formatOption1_{element_id}" onchange="formatOptionChange.call(this)">
                <option value="" disabled selected> Choose formatter </option>
                <option value='number' id="numberFormat1_{element_id}">Number</option>
                <option value='currency' id="currencyFormat1_{element_id}">Currency</option>
                <option value='date' id="dateFormat1_{element_id}">Date</option>
                <option value='time' id='timeFormat1_{element_id}'>Time</option>
                <option value='percentage' id='percentageFormat1_{element_id}'>Percentage</option>
                <option value='scientific' id='scientificFormat1_{element_id}'>Scientific</option>
              </select>
            </div>

            <div class="row">
            <div class="form-group col-6" style="display:none;" id="Dformat1_{element_id}">
              <label for="decimalFormat1_{element_id}">Decimal places: </label>
              <input type="number" name="decimalFormat1_{element_id}" id="decimalFormat1_{element_id}" class="textinput textInput form-control" min="0">
            </div>
            <br>
            <div class="form-group custom-control custom-checkbox" style="display:none;margin-top: 2rem;margin-left: 3rem" id="SFormat1_{element_id}">
                <input type="checkbox" name="sepFormatter1_{element_id}" class="checkboxinput custom-control-input notRequired" id="sepFormat1_{element_id}" value="sepFormatter1_{element_id}">
                <label for="sepFormat1_{element_id}" class="custom-control-label">Use 1000 Separator</label>
            </div>
            <br>
            <div class="form-group col-6" style="display:none;" id="syFormat1_{element_id}">
              <label for="symbolFormat1_{element_id}">Symbol</label>
              <select class="select2 form-control" name="symbolFormat1_{element_id}" id="symbolFormat1_{element_id}">
                <option value="" disabled selected> None </option>
              </select>
            </div>
            <br>
            <div class="form-group col-6" style="display:none;" id="DTFormat1_{element_id}">
              <label for="formatdate1_{element_id}">Select Date Format: </label>
              <select class="select2 form-control" name="formatdate1_{element_id}" id="formatDate1_{element_id}">
                <option value="" disabled selected> None </option>
                <option value='%Y-%m-%d' id="dformat1">YYYY-MM-DD</option>
                <option value='%d-%m-%Y' id="dformat2">DD-MM-YYYY</option>
                <option value='%m-%d-%Y' id="dformat3">MM-DD-YYYY</option>
                <option value='%d %B %Y' id='dformat4'>14 March 2020</option>
              </select>
            </div>
            <br>
            <div class="form-group col-6" style="display:none;" id="TimefFormat1_{element_id}">
              <label for="formattime1_{element_id}">Select Time Format: </label>
              <select class="select2 form-control" name="formattime1_{element_id}" id="formatTime1_{element_id}">
                <option value="" disabled selected> None </option>
                <option value='%H:%M' id="tformat1">24 hrs</option>
                <option value='%I:%M %p' id="tformat2">12 hrs</option>
                <option value='%H:%M:%S' id="tformat3">24 hrs with seconds</option>
                <option value='%I:%M:%S %p' id='tformat4'>12 hrs with seconds</option>
              </select>
            </div>
          </div>

          </div>

          <div class="modal-footer">
            <button type="button" id="btn_formatSave1_{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
            <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
          </div>

        </div>
      </div>
    </div><script>
    $(`#formatOption1_{element_id}`).select2()
    $(`#symbolFormat1_{element_id}`).select2()
    $(`#formatDate1_{element_id}`).select2()
    $(`#formatTime1_{element_id}`).select2()
    </script>

<!-- Computed Field Modal -->
<div class="modal" id="addCompFields_{element_id}">
      <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
        <div class="modal-content" >

          <div class="modal-header" style="background:#565a5e;color:white;">
            <h6 class="modal-title" style="flex: auto;">Add Computed Fields</h6>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>

          <div class="modal-body" style="height: 25rem;overflow: auto;">


		  <div style="display: flex;flex-direction: row;align-content: space-between;justify-content: space-around;align-items: center;">
			<div class="custom-control custom-checkbox">
				<input type="checkbox" id="existingComp_{element_id}" data-elementID="{element_id}" name="existing_{element_id}"  class="removeCompCheckbox checkboxinput custom-control-input" value="existing">
				<label for="existingComp_{element_id}" class="custom-control-label"> Existing Field </label><br>
			</div>
			<div class="custom-control custom-checkbox">
				<input type="checkbox" id="newComp_{element_id}" data-elementID="{element_id}" name="newComp_{element_id}" class="removeCompCheckbox checkboxinput custom-control-input" value="new">
				<label for="newComp_{element_id}" class="custom-control-label"> New Field </label><br>
			</div>
			</div>


      <div class="form-group" id="dropdown_{element_id}" style="display:none;padding:0 1em;">
          <label for="compcol">Select Column: </label>
          <select class="select2 form-control" name="compcol" id="dropdown1_{element_id}" required>
              <option value="" disabled selected> Select Column</option>
          </select>
      </div>
		  <hr/>


			<div class="row justify-content-start">
            <div class="fields" style="padding:1.4em">
              <div class="row">
              <div class="col-6 form-group text_left">
                <label class="acies_label">Field name</label>
                <input type="text" name="Field Name" id="fieldmdl_{element_id}" textarea class="form-control textInput" placeholder="Field Name" />
              </div>
                <div class="col-6 form-group text_left">
                  <label class="acies_label">Field name alias (verbose name)</label>
                  <input type="text" name="Field Verbose Name" class="form-control textInput" id="compField_verbose_name_{element_id}"
                    placeholder="Verbose Name" />
                </div>
                <div class="col-6 form-group text_left">
                  <label class="acies_label">Field data type</label>
                  <select class="select2 datatype2 form-control" id="compfield_datatype_{element_id}" name="Field DataType">
                    <option value="" disabled selected>Select data type</option>
                    <option value="IntegerField">IntegerField (Integer numbers)</option>
                    <option value="BigIntegerField">BigIntegerField (Big Integer numbers)</option>
                    <option value="FloatField">FloatField (Integer or decimal numbers)</option>
                  </select>
                </div>
                <div class="col-6 form-group text_left">
                  <label class="acies_label">Can take null values?</label>
                  <select class="select2 nullField form-control" id="comp_null_field_edit_{element_id}" name="null_field">
                    <option value="" disabled selected>Select option</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select>
                </div>
                <div class="col-3 form-group text_left">
                <label class="acies_label col-md-12">Computed Field</label>
                <input type="text" name="Computed Field" id="comp_Comp_Field_{element_id}" textarea class="form-control textInput" readonly />
              </div>
                <div class="col-3 form-group">
                  <span class="equationBuilder2" style="margin-top: 46px;">
                    <a data-toggle="tooltip" title="Equation Builder" value="eq" id="comp_EBDisplayButtonID_{element_id}"><i name="actions1" value="eq" class="fas fa-square-root-alt ihover javaSC thin-icontrash" style="font-size: 18px;margin-top: 30px;"></i></a>
                  </span>
                </div>
                <div class="col-6 form-group text_left">
                  <label class="acies_label">Unique</label>
                  <select class="select2 nullField form-control" id="comp_unique_{element_id}" name="unique">
                    <option value="" disabled selected>Select option</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select>
                </div>

              </div>
            </div>
          </div>


          </div>

          <div class="modal-footer">
            <button type="button" id="btn_removeCompField_{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2">Remove Computed Field</button>
            <button type="button" id="btn_formatCompField_{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
          </div>

        </div>
      </div>
    </div><script>
    $(`#compfield_datatype_{element_id}`).select2()
    $(`#comp_null_field_edit_{element_id}`).select2()
    $(`#comp_unique_{element_id}`).select2()
    </script>

<!-- Custom Validation Modal -->
      <div class="modal fade" id="customValidation{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="customValidation{element_id}" aria-hidden="true" style= "height: 100vh;" >
        <div class="modal-dialog modal-xl" role="document" >
          <div class="modal-content" style='height:600px;'>
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="customValidation{element_id}" style="width:100%;text-align: center;height:auto;">Configure Custom Validation</h5>
              <button type="button" class="close" data-dismiss="modal"  data-target='#customValidation{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div id="carouselCustomValidation{element_id}" class="carousel slide" data-interval="false" >
                <div class="card">
                  <div class="card-body">

                    <div class="carousel-inner">

                        <!-- Existing  Configuration -->
                        <div class="carousel-item active" name='existing_config'>
                          <div class='card'>
                            <div class='card-header' style="font-size: medium; font-weight: bold;">Configure Custom Validation</div>
                            <div class='card-body' style='overflow:auto'>
                              <div class="row" style="width: 100%;display: flex;justify-content: flex-end; align-items: center;">

                              </div>
                              <div>
                                <table class="table" id="reload_custom_table">
                                  <thead style="text-align:center">
                                    <tr>
                                      <th>Sr.no</th>
                                      <th>Table Name</th>
                                      <th>Actions</th>
                                    </tr>
                                  </thead>
                                  <tbody style="text-align:center" id="configuration_val_row_{element_id}">

                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>

                          <!-- Setting Condition  -->
                            <div class="carousel-item" name='setting_config'>
                              <div class='card'>
                                <div class='card-header' style="font-size: medium; font-weight: bold;"> Custom Condition Set:</div>
                                <div class='card-body' style='overflow:auto'>

                                  <div class="row">
                                    <div class="col-4">
                                      <select id="custommValidationSelection_{element_id}" class="select2 form-control" name="table" onchange="conditionalTable(elementID='{element_id}')">
                                        <option value="" disabled selected>Select Table name</option>
                                      </select>
                                    </div>
                                  </div>

                                  <div style="margin-top:2em;">
                                    <div class="btn-group">
                                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                      Add Condition
                                        <span class="caret"></span>
                                      </button>
                                      <ul class="dropdown-menu" id="condition_dropdown{element_id}" style="max-height:12rem;">
                                      </ul>
                                    </div>
                                    <div class="btn-group">
                                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                      Add Master Based Condition
                                        <span class="caret"></span>
                                      </button>
                                      <ul class="dropdown-menu" id="condition_dropdown1{element_id}" style="max-height:12rem;">
                                      </ul>
                                    </div>
                                    <div class="row" id="items">
                                      <table class="table " id= 'custom_validation_table_{element_id}'>
                                      </table>
                                    </div>
                                  </div>

                                  <button type="button" style="float:right"
                                    class="btn btn-md btn-primary save_custom_validation" data-elementID="{element_id}"  onclick="saveCustomValidation(elementID='{element_id}')" data-slide="next">Save Validation</button>

                                </div>
                              </div>
                            </div>
                    </div>
                    <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselCustomValidation{element_id}"
                      role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                    <span class="sr-only">Previous</span>

                    <span class="carousel-control-next-icon carousel-control-next" href="#carouselCustomValidation{element_id}"
                      role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                    <span class="sr-only">Next</span>
                  </div>
                </div>
              </div>
              </div>
              <div class="modal-footer">
                 <button type="button" class="btn btn-primary submitcustomvalidation"   data-elementID="{element_id}" >Set Custom Validation</button>
                 <button type="button" class="btn btn-primary removecustomvalidation"   data-elementID="{element_id}" >Remove Custom Validation</button>
               <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close" data-target='#customValidation{element_id}'>Close</button>
               </div>
            </div>
          </div>
        </div>
    <!-- End Custom Validation -->

<!-- Modal for conditional delete -->
<div class="modal" id="conditional_delete_modal_{element_id}" tabindex="-1" data-focus="false" role="dialog" aria-labelledby="formModalLabel" aria-hidden="true" style="backdrop-filter:blur(6px);">
  <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document" style="width: 100%;">
    <div class="modal-content" style="margin-top: 14rem;">
      <div class="modal-header" style='background:#565a5e; color:white; display: flex;justify-content: center;'>
        <h6 class="modal-title" style="flex: auto;">Conditional Delete</h6>
        <button type="button" class="close" data-dismiss="modal">×</button>
      </div>
      <style>
        .dropdown-menu.show:not(.main-header .dropdown-menu):not(.approval-options-dropdown) {{
          transform: translate3d(0px, 33px, 0px) !important;
        }}
      </style>
      <div class="modal-body" style="height: 200px;">
        <form id="conditional_delete_form" class="form-search" method="get">"""
    )
    if not data1.get("no"):
        html = html + """   {%csrf_token%} """

    html = (
        html
        + f"""   <div class="btn-group">
              <button type="button" class="btn btn-default dropdown-toggle conditional_delete_button_listview" data-toggle="dropdown">
                {("Add Condition")}
                <span class="caret"></span>
              </button>
              <ul class="dropdown-menu" style="max-height: 9rem; transform: translate3d(0px, 33px, 0px) !important; ">"""
    )
    for col, value in t["label_columns"].items():
        html = (
            html
            + f""" <li class="dropdown-item">
                    <a href="javascript:void(0)" name={col} data-elementID="{element_id}" class="conditional_delete{element_id}" style="display:block; width:100%">
                      {value }
                    </a>
                  </li>"""
        )
    html = (
        html
        + f"""  </ul>
            </div>

            <div class="row" id="items_conditional_delete">
              <table class="table conditional-delete-table{element_id}" data-elementID="{element_id}">
              </table>
            </div>
</form>
      </div>
      <div class="modal-footer justify-content-center">
        <button type="button" id="temp_conditional_delete_{element_id}" class="conditional_temp_delete_button btn  btn-sm btn-primary conditional_delete_search{element_id}" data-elementID="{element_id}" style="font-size:inherit; background-color:rgb(86, 90, 94); border-color:rgb(86, 90, 94);"> Delete Temporarily </button>
        <button type="button" id="perm_conditional_delete_{element_id}" class="conditional_temp_delete_button btn  btn-sm btn-primary conditional_delete_search{element_id}" data-elementID="{element_id}" style="font-size:inherit; background-color:rgb(86, 90, 94); border-color:rgb(86, 90, 94);"> Delete Permanently </button>
      </div>
      <style>
        .conditional_temp_delete_button:hover {{
            background-color: var(--primary-color) !important;
            border-color: var(--primary-color) !important;
        }}
      </style>
    </div>
  </div>
</div>

<!-- End conditional delete -->

<!--Modal For Table Generator-->
<div class="modal fade" id="table_generator_modal_{element_id}" data-element-id="{element_id}" class='tablegenerator modal' tabindex="-1" role="dialog" data-focus="false" aria-labelledby="table_generator_modal_{element_id}" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
        <h5 class="modal-title" style="width:100%;text-align: center;">Configure Tabular data</h5>
        <button type="button" class="close" data-dismiss="modal" data-target='#table_generator_modal_{element_id}' aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="modalBodyTableGenerator{element_id}">
      <textarea name='excel_data_table_generator2' data-element-id="{element_id}" style="border-radius: 5px;height: 200px;width: 100%;"></textarea>
      <br><hr><br>
      <div id='result_table_generated_{element_id}' style='display:none'>
        <table id="save_generated_table_{element_id}" class="row-border display" style="display: none;">
          <thead class="table_generator_header">
            <th>No Data Found</th>
          </thead>
          <tbody id='save_generated_table_body_{element_id}'>

          </tbody>
        </table>
      </div>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-primary" id='savetablegenerator_{element_id}'  data-current-table='{model_name}'  data-elementID="{element_id}" onclick="savegeneratorData(elementID='{element_id}','{getPrCodeFromElementId(element_id,request)}')" disabled> Upload Data </button>
   <button type="button" class="btn btn-primary tablecreator"   data-elementID="{element_id}" onclick="generateTable(elementID='{element_id}')">Generate Table</button>
 </div>
</div>

</div>
</div>
 <!-- Upload Map Columns Modal -->
      <div class="modal fade" id="columnMapperModal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="columnMapperModal{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="columnMapperModal{element_id}" style="width:100%;text-align: center;height:auto">Configure Column Mapper</h5>
              <button type="button" class="close" data-dismiss="modal" data-target='#columnMapperModal{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class='card'>
                <div class='card-header' style="font-size: medium; font-weight: bold;">Column Mapper</div>
                <div class='card-body' style="max-height: 15rem; overflow-y: scroll;">
                  <div class="row">
                    <div class="form-group col-10">
                      <select id="Columnmapper{element_id}" class="select2 form-control" name="Columnmapper"  data-placeholder="Column Mapper">
                        <option value="value" selected disabled>Select Option Name</option>
                      </select>

                    </div>
                    <div class="form-group col-2" style="float: right;">
                      <button type="button" class="btn btn-primary columnconfiguremapper"   data-elementID="{element_id}"><i class="fa fa-upload"></i></button>
                      </div>
                  </div>
                  <table id="columnmapperdone{element_id}" class="table table-bordered table-sm table-hover" >
                    <thead id="modal-table-head-done{element_id}">
                      <th>Table Name</th>
                      <th>Reconfigure</th>
                      <th>Apply</th>
                    </thead>
                    <tbody id="modal-table-body-columnmapperdone{element_id}">

                    </tbody>
                  </table>
                  <table id="columnmapper{element_id}" class="table table-bordered table-sm table-hover">
                    <thead id="modal-table-head{element_id}">

                    </thead>
                    <tbody id="modal-table-body-columnmapper{element_id}">

                    </tbody>
                  </table>
                  <br>
                  <div id="samecolumnwarning{element_id}" style="color:red">
                  </div>
                  <br>
                </div>
              </div>
            </div>
              <div class="modal-footer">
                 <button type="button" class="btn btn-primary submitconfigmapper"  style="display: none;" data-elementID="{element_id}" >Save and Submit</button>
                <button type="button" class="btn btn-primary savecolumnconfiguremapper"  style="display: none;" data-elementID="{element_id}" >Save</button>
                <button type="button" class="btn btn-primary saveConfigMapper" data-elementID="{element_id}">Save Configuration</button>
                <button type="button" class="btn btn-primary loadConfigMapper"  data-elementID="{element_id}">Load Configuration</button>
              </div>

          </div>
        </div>
      </div>
      <!-- Upload Map Columns Modal End -->

 <!-- Bulk Update Map Columns Modal -->
      <div class="modal fade" id="columnMapperModalBU{element_id}" role="dialog" data-focus="false" aria-labelledby="columnMapperModalBU{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="columnMapperModalBU{element_id}" style="width:100%;text-align: center;height:auto">Configure Column Mapper</h5>
              <button type="button" class="close" data-dismiss="modal" data-target='#columnMapperModalBU{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class='card'>
                <div class='card-header' style="font-size: medium; font-weight: bold;">Column Mapper</div>
                <div class='card-body' style="max-height: 15rem; overflow-y: scroll;">
                  <div class="row">
                    <div class="form-group col-10">
                      <select id="ColumnmapperBU{element_id}" class="select2 form-control" name="Columnmapper"  data-placeholder="Column Mapper">
                        <option value="value" selected disabled>Select table</option>
                      </select>

                    </div>
                    <div class="form-group col-2" style="float: right;">
                      <button type="button" class="btn btn-primary columnconfiguremapperBU"  data-elementID="{element_id}"><i class="fa fa-upload"></i></button>
                      </div>
                  </div>
                  <table id="columnmapperdoneBU{element_id}" class="table table-bordered table-sm table-hover" >
                    <thead id="modal-table-head-doneBU{element_id}">
                      <th>Table Name</th>
                      <th>Reconfigure</th>
                      <th>Apply</th>
                    </thead>
                    <tbody id="modal-table-body-columnmapperdoneBU{element_id}">

                    </tbody>
                  </table>
                  <table id="columnmapperBU{element_id}" class="table table-bordered table-sm table-hover">
                    <thead id="modal-table-headBU{element_id}">

                    </thead>
                    <tbody id="modal-table-body-columnmapperBU{element_id}">

                    </tbody>
                  </table>
                  <br>
                  <div id="samecolumnwarningBU{element_id}" style="color:red">
                  </div>
                  <br>
                </div>
              </div>
            </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary savecolumnconfiguremapperBU" data-elementID="{element_id}" >Save</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close">Close</button>
              </div>

          </div>
        </div>
      </div>
      <!-- Bulk Update Map Columns Modal End -->


<!---- Delete Row data ------>
<div class="modal" id="deleteMessageChecker{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="deleteMessageChecker" aria-hidden="true" >
  <div class="modal-dialog modal-md modal-dialog-centered" style="justify-content: center;">
    <div class="modal-content" style="width: 100%;text-align: center;justify-content: center;" >

      <div class="modal-header" style="width:100%;background:#565a5e;text-align: center;justify-content: center;">
        <h6 class="modal-title" style="color:white;margin:auto;font-weight:bold;">Delete Record</h6>

      </div>

      <div class="modal-body">

      </div>

      <div class="modal-footer">
        <button type="button" id="btn_delete_operation{element_id}" class="btn btn-primary rounded px-2"  style="color:white;background:black;" data-element-id={element_id} onmouseover="this.style.background='#cb504d'" onmouseout="this.style.background='#565a5e'">Delete</button>
        <button type="button" class="btn btn-primary  rounded px-2 close_delete_modal" data-dismiss="modal" data-element-id={element_id}>Close</button>
      </div>

    </div>
  </div>
</div>

"""
    )
    if parent_element_id != "#" and ((create_view_mode == "NO") or mtmap):
        html = (
            html
            + f"""
            <!--Modal for create view  tab-->
            <div class="modal fade" id="create_view_mode_{element_id}"  role="dialog" data-focus="false" aria-labelledby="{element_id}_create_view_mode_ModalCenterTitle" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content" style="height:87vh">
                <div class="modal-header" style="background:#565a5e;text-align: center;">
                    <h6 class="modal-title" style="width:100%;color:white;margin:auto;font-weight:bold;">{create_view_modal_title}</h6>
                    <button type="button"  class="close" id="closeModalCreateTab{element_id}" data-dismiss='modal' data-target='#create_view_mode_{element_id}'  aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body" id="modalBody_createview_{element_id}" style="max-height:80vh;overflow:auto;overflow-y:scroll">
                  {data_create_html}
              </div>"""
        )
        script = script + scriptGenerator("", "createViewOnModal", element_id, request, parent_element_id, {})
        html = (
            html
            + """
            </div>

            </div>
            </div>
            """
        )
    if t.get("templateMultiSelect"):
        for cou in range(len(t["columnNameMultisVerb"])):
            html = (
                html
                + f"""<div class="modal" id="formModalListL{element_id}_{t["masterColName"][cou]}" style="backdrop-filter:brightness(0.4)" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="formModalLabelLL" aria-hidden="false">
        <div class="modal-dialog modal-lg " role="document">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="formModalLabelLL" style="margin-left: 36%;">Configure create view elements</h5>
              <button type="button" data-col='{t["masterColName"][cou]}' class="close closeL" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="overflow-y: scroll ;max-height: 40rem;">
              <div class='card'>
                <!--<div class='card-header' style="font-size: medium; font-weight: bold;">Table</div>-->
                <div class='card-body'>
                  <table id="masterListTablei{element_id}_{t["masterColName"][cou]}" class="row-border">
                    <thead>
                     <tr>
                       <th>Check Box</th>"""
            )
            for a in t["columnNameMultisVerb"][cou]:
                if "id" in a:
                    html = html + f"""            <th>{a}</th> """
                else:
                    html = html + f"""            <th>{a}</th>"""

            html = (
                html
                + f"""</tr>

                        </thead>

                        <tbody>"""
            )

            html = (
                html
                + f"""</tbody>

                  </table>
                </div>
            </div>
          </div>
              <div class="modal-footer">
                <button type="button" data-col='{t["masterColName"][cou]}' value="save"
                  class=" btn mb-2 btn-primary savebuttonL"
                  data-toggle="modal">
                  <i class="{{butn.icon}}"></i>Save
                </button>
              </div>
            </div>
        </div>
      </div>"""
            )
        html = (
            html
            + f"""

      <div class="modal" id="showDetailList{element_id}" style="backdrop-filter:brightness(0.4);width:100%;" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="formModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header">
              <h5 class="modal-title" id="formModalLabelLI" style="margin-left: 40%;">View Details</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="max-height:40rem;overflow:auto;">
              <div class='card'>
                <!--<div class='card-header' style="font-size: medium; font-weight: bold;">Table</div>-->
                <div class='card-body'>
                  <table id="listDetailTable{element_id}"  class="row-border display compact">
                    <thead>
                    </thead>

                    <tbody>

                    </tbody>

                  </table>
                </div>
            </div>
          </div>
          </div>
        </div>
      </div>
      <div class="modal" id="showDetailListflow{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="formModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="showDetailListflow" style="margin-left: 40%;">View Details</h5>
              <button type="button" class="closeDetailflow close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="overflow-y: scroll ;max-height: 30rem;">
              <div class='card'>
                <div class='card-body'>
                  <table id="showDetailListflowtable{element_id}"  class="row-border">
                    <thead>
                    </thead>

                    <tbody>

                    </tbody>

                  </table>
                </div>
            </div>
          </div>
          </div>
        </div>
    </div>"""
        )
    html = (
        html
        + f"""
    <div class="modal fade" id="setalertmodal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Set Alert</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-4">
                <div class="form-group">
                  <label  class=" requiredField">
                    Alert Name<span class="asteriskField">*</span>
                  </label>
                  <div class=""> <input type="text" id="alertname{element_id}" required="">
                  </div>
                </div>
              </div>
              <div class="col-4">
                <div class="form-group">
                  <label>
                    Alert tag multiple
                  </label>
                  <div class="">
                    <select class="form-control js-example-basic-multiple select2" id="select2multiple{element_id}" multiple="multiple">
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-4">
                <div class="form-group">
                  <label>
                    Alert Description
                  </label>
                  <div class=""> <input type="text" id="alertdescription{element_id}">
                  </div>
                </div>
              </div>

            </div>
          </div>
          <div class="modal-footer">
            <!-- <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button> -->
            <button type="button" class="btn btn-primary button_standard_save" data-dismiss="modal" id="setalertfunction{element_id}" data-elementid="{element_id}">Save</button>
          </div>
        </div>
        </div>
        </div>

<div class="modal fade" id="conditionmodal" role="dialog" data-focus="false">
  <div class="modal-dialog" style="max-width:700px">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <div class="text-primary">Set Condition</div>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
         Set Condition For : <input type="text" style="border-bottom:0px;" disabled><br><br>

         <ul class="nav nav-tabs" id="myTab" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="home-tab1" data-toggle="tab" href="#home1" role="tab" aria-controls="home" aria-selected="true">Set Conditions</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Set Color</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Set Text</a>
          </li>
        </ul>
        <div class="tab-content" id="myTabContent">
          <div class="tab-pane show active" id="home1" role="tabpanel" aria-labelledby="home-tab1">
            <br><div class="row">
              <div class="col-6"><br>
                <div class="row">
                  <div class="col-5">Select Conditions :</div>
                  <div class="col-6">
                    <select class="select2">
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <br><button type="button" class="btn btn-primary btn-md">Save</button>
          </div>
          <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
            <br><div class="row">
              <div class="col-6"><br>
                <div class="row">
                  <div class="col-6">Select Color :</div>
                  <div class="col-6">
                   <input type="color">
                  </div>
                </div>
              </div>
              </div>

                      <br><button type="button" class="btn btn-primary btn-md">Save</button>
            </div>
          <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
            <br><div class="row">
              <div class="col-6"><br>
                <div class="row">
                  <div class="col-6">Select Conditional Text :</div>
                  <div class="col-6">
                   <input type="text" value="">
                  </div>
                </div>
              </div>
              </div>
                      <br><button type="button" class="btn btn-primary btn-md" onclick="conditionset()">Save</button>
          </div>

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>
<div class="modal fade" id="setconditionmodal{element_id}" role="dialog" data-focus="false">
  <div class="modal-dialog" style="max-width:700px">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <div class="text-primary"><h5>Set Condition</h5></div>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
         <ul class="nav nav-tabs" id="myTab" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="home-tab2{element_id}" data-toggle="tab" href="#home2{element_id}" role="tab" aria-controls="home" aria-selected="true">Set Conditions</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="profile-tab2{element_id}" data-toggle="tab" href="#profile2{element_id}" role="tab" aria-controls="profile" aria-selected="false">Set Color</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="contact-tab2{element_id}" data-toggle="tab" href="#contact2{element_id}" role="tab" aria-controls="contact" aria-selected="false">Set Text</a>
          </li>
        </ul>
        <div class="tab-content" id="myTabContent{element_id}">
          <div class="tab-pane show active" id="home2{element_id}" role="tabpanel" aria-labelledby="home-tab2{element_id}">
            <br>
            <div id="setcolumnheadername{element_id}" style="display:none"></div>
            <div id="setcolumnname1{element_id}" style="display:none"></div>
            <div id="setrowname1{element_id}" style="display:none"></div>
            <div class="row">
              <div class="col-12"><br>
                <div class="row">
                  <!-- <div class="col-4">Select Column on which you want to set condition :</div> -->
                  <div class="col-4">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="width:13em;">
                      Condition Parameter:
                      <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" style="font-size:small;padding-left:1em;">"""
    )
    for col, value in t["label_columns"].items():
        html = (
            html
            + f"""   <li>
                        <a href="javascript:void(0)" name={col} class="filter_btn1{element_id}" >
                          { value }
                        </a>"""
        )
    html = (
        html
        + f"""                  </li>
                    </ul>
                  </div>
                </div>
                <br>
                <div class="row">
                  <div class="setname" style="padding-left:2em;"></div>
                  <div class="row" id="items{element_id}">
                    <div class="alert-tableheader"></div>
                    <table class="table" id="alert-table{element_id}">
                    </table>
                  </div>
                </div>

              </div>
              <!-- <div class="col-6"><br>
                Limit : <input type="text" id="limit1">
              </div> -->
            </div>
          </div>
          <div class="tab-pane fade" id="profile2{element_id}" role="tabpanel" aria-labelledby="profile-tab2{element_id}">
            <br><div class="row">
              <div class="col-6"><br>
                <div class="row">
                  <div class="col-6">Select Color :</div>
                  <div class="col-6">
                   <input type="color" id="colorset{element_id}" value="#aaaaaa">
                  </div>
                </div>
              </div>
              </div>
            </div>
          <div class="tab-pane fade" id="contact2{element_id}" role="tabpanel" aria-labelledby="contact-tab2{element_id}">
            <br><div class="row">
              <div class="col-6"><br>
                <div class="row">
                  <div class="col-6">Select Conditional Text :</div>
                  <div class="col-6">
                   <input type="text" id="conditionaltext{element_id}" val="">
                  </div>
                </div>
              </div>
              </div>
          </div>

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" id="conditionsave{element_id}" class="btn btn-default" data-elementid="{element_id}">Save</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>
<div class="modal fade" style="display:none" id="setalertmodal1{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Set Alert</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="row">
                <div class="col-4">
                  <div class="form-group">
                    <label  class=" requiredField">
                      Alert Name<span class="asteriskField">*</span>
                    </label>
                    <div class=""> <input type="text" id="alertname1{element_id}" required="">
                    </div>
                  </div>
                </div>
                <div class="col-4">
                  <div class="form-group">
                    <label>
                      Alert tag multiple
                    </label>
                    <div class="">
                      <select class="form-control js-example-basic-multiple" id="select2multiple1{element_id}" multiple="multiple">
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-4">
                  <div class="form-group">
                    <label>
                      Alert Description
                    </label>
                    <div class=""> <input type="text" id="alertdescription1{element_id}">
                    </div>
                  </div>
                </div>

              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" id="rowadd{element_id}" class="btn btn-primary" data-elementid="{element_id}" data-dismiss="modal">Save</button>
            </div>
          </div>
        </div>
        </div>"""
    )
    if (count == 1 and not data1.get("no")) or (count == 1 and template == "Multi Dropdown View"):
        html = (
            html
            + f"""  <div class="modal fade plotlyModal" id="PlotElements{ele_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;padding-left: 11.8rem;">
              <h5 class="modal-title" id="exampleModalLongTitle{ele_id}">Insert Chart</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="max-height:45em;overflow-x:scroll;">
              <div class="row">
                <div class="form-group col-12">
                  <label class="acies_label col-md-12">Select Table:</label>
                  <select id="selectTable{ele_id}" class="select2 form-control" name="selectTable">
                    <option value="" disabled selected>--------------------</option>
                  </select>
              </div>
            </div>
            <!--<div id="plotTypes">-->"""
        )
        html = (
            html
            + f"""  <div class="row">
          <div class="col-4">
            <form id="plotlyForm{ele_id}" method="post">"""
            + """
              {% csrf_token %}"""
            + f"""
              <div class="row">
                <div class="form-group col-12" style="height:35em;overflow-x:scroll;">
                  <!--<label class="acies_label col-md-12">Plot Category:</label>-->
                  <table>
                    <tr>
                      <th>
                        <center>Chart Category</center>
                      </th>
                    </tr>
                    <tr>
                      <td><br></td>
                    </tr>
                    <tbody id="myTable{ele_id}">"""
        )
        for butn in t["plotlybuttons"]:
            html = (
                html
                + f"""  <tr>
                        <td>
                          <button type="button" value="{butn['Category_name']}"
                            class=" btn mb-2 btn-primary plotlyCategory{ele_id}" data-elementID="{ele_id}"
                            style="height: 25px;width:7rem;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;"
                            data-toggle="modal">
                            <i class="{butn['icon']}"></i>&nbsp;&nbsp;{butn['Category_name']}
                          </button>
                          <br>
                        </td>
                      </tr>"""
            )
        html = (
            html
            + f"""  </tbody>
                  </table>
                </div>
              </div>
            </form>
          </div>
          <div class="col-8" style="border-left:solid;">
            """
            + f"""
              <div class="row">
                <div class="form-group col-12">
                  <label class="acies_label col-md-12">Select Chart Type:</label>
                  <select id="selectPlotly{ele_id}" class="select2 plotlyType{ele_id} form-control" data-elementID="{ele_id}" name="sel">
                    <option value="" disabled selected>--------------------</option>
                  </select>
                </div>
              </div>
      <div class="font-weight-light">
        <div class="card col-12" id="chartTypes{ele_id}" style="display: none">

          <div class="card-body" style="display:block;">
            <div id="inputs{ele_id}">
            <!-- XY-AXIS -->
            <div id="XY_AXIS{ele_id}" style="display:none">
              <!--Scatter, Scatter with straight lines and markers,2D histogram contour-->
              <div class=" form-row">
                <div class="col-12" id="XYlabel{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select X Axis:</label>
                    <select id="selectX{ele_id}" class="select2 plotAjax form-control" name="sel"
                      required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="selectYX{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Y Axis:</label>
                    <select id="selectY{ele_id}" class="select2 plotAjax form-control" name="sel"
                      required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="Ybarlabelscatter{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Filters:</label>
                    <select id="selectfilter6{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                      required multiple>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="XYTab{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Tab:</label>
                    <select id="selectXYTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <!-- XY-AXIS END -->
                  <!-- XYZ-AXIS -->
                  <div id="XYZ_AXIS{ele_id}" style="display:none">
                  <!--3D Scatter Plots,3D Mesh Plots-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_X1{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="select_Y11{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Z Axis:</label>
                        <select id="select_Z1{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_3d{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter14{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYZTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYZTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYZ-AXIS END -->
                  <!-- XYOP-AXIS -->
                  <div id="XYOP_AXIS{ele_id}" style="display:none">
                  <!--Horizontal Dot Plot ,Vertical Box,Horizontal Box,Violin Plot,Horizontal Violin Plot,-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectXaxis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="selectYaxis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter7{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYOP-AXIS END -->
                  <!-- Value-AXIS -->
                  <div id="Value_AXIS{ele_id}" style="display:none">
                  <!--Histogram,Cumulative Histogram,Horizontal Histogram-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Value:</label>
                        <select id="select_histovalue{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YbarlabelHisto{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter2{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                      <div class="col-12" id="ValueTab{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectValueTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                    </div>
                  </div>
                </div>
                <!-- Value-AXIS END -->
                  <!-- ValueOp-AXIS -->
                  <div id="ValueOp_AXIS{ele_id}" style="display:none">
                  <!--Bubble Map,Chloropath Map-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Value:</label>
                        <select id="select_valueop{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operation:</label>
                        <select id="select_operation{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_map{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter13{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="ValueOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectValueOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- ValueOp-AXIS END -->
                  <!-- XX-AXIS -->
                  <div id="XX_AXIS{ele_id}" style="display:none">
                    <!--Stacked Histogram-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_xxaxis{ele_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYlabel{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X1 Axis:</label>
                          <select id="select_xx1axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YbarlabelStackHisto{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter3{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XXTab{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXXTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>

                    </div>
                  </div>
                  <!-- XX-AXIS END -->
                  <!-- XYYOP-AXIS -->
                  <div id="XYYOP_AXIS{ele_id}" style="display:none">
                  <!--Vertical Grouped Box,Grouped Violin Plot-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectX_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="selectY_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1 Axis:</label>
                        <select id="selectY1_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_grouped{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter10{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YYOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectYYOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYYOP-AXIS END -->
                <div id="XYYHOP_AXIS{ele_id}" style="display:none">
                  <!--Horizontal Grouped Box,Horizontal Grouped Violin Plot-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectXH_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X1 Axis:</label>
                        <select id="selectX1H_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="selectYH_axis{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_grpoud{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter12{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YYOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXXHOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                  <!-- XYfloatOP-AXIS -->
                  <div id="XYfloatOP_AXIS{ele_id}" style="display:none">
                  <!--Vertical Bar,Line,Stepped Line Graph,Vertical Area Chart,Vertical Waterfall-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectXH{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="selectYfloat{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="selectoperations{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYOPETab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYOPETab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYfloatOP-AXIS END -->
                <!-- PIVOT -->
                <div id="Pivot_AXIS{ele_id}" style="display:none">
                  <!--Pivot charts-->
                  <div class=" form-row">
                    <div class="col-12" id="pivot_row_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Columns:</label>
                        <select id="select_pivot_rows{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required multiple>
                          <option value="" disabled>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="pivot_op_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_pivot_operations{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="pivot_filter_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="select_pivot_filter{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Pivot_Tab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="select_pivot_Tab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- PIVOT -->
                  <!-- MultipleLine-AXIS -->
                  <div id="MultipleLine_AXIS{ele_id}" style="display:none">
                  <!--MultipleLine-->
                  <div class=" form-row">
                    <div class="col-12" id="Multiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectX_multiple{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="multiple_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select N:</label>
                          <input id="select_multiple_y{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="YHbar_multiple_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1 Axis:</label>
                        <select id="selectY1_multiplefloat{ele_id}" class="multiple_line_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_line_chart_yaxis{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="Multiple_operations{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_multiple_operations{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybar_multiple_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter23{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYOPETab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYOPE_multipleTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- MultipleLine-AXIS END -->
                  <!-- XfloatYOP-AXIS -->
                  <div id="XfloatYOP_AXIS{ele_id}" style="display:none">
                  <!--Horizontal Bar,Horizontal Area,Horizontal Waterfall,Funnel Chart,Funnel Area Chart-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="selectXfloat{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="selectYH{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="opt{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter1{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XFloatTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXFloatTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XfloatYOP-AXIS END -->
                <!-- XYfloatYfloatOP-AXIS -->
                <div id="XYfloatYfloatOP_AXIS{ele_id}" style="display:none">
                  <!--Vertical Line Stacked,Vertical Area Stacked,Vertical Waterfall Grouped-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_X{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="select_Y{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1 Axis:</label>
                        <select id="select_Y1{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_OP{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""  <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_stacked{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter8{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYY1OPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYY1OPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYfloatYfloatOP-AXIS END-->
                <!-- XYMultipleOP-AXIS -->
                <div id="XYMultipleOP_AXIS{ele_id}" style="display:none">
                  <!--Vertical Bar Stacked,Vertical Bar Grouped-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_Xm{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="multiple_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select number of Y Axes:</label>
                          <input id="select_YMultiple_no{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="YHbarMultiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1:</label>
                        <select id="select_Y1Multiple{ele_id}" class="YMultiple_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_yaxis{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_YMultipleOP{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""  <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_stacked{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter26{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYY1OPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYMultipleOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYMultipleOP-AXIS -->
                <div id="XYfloatYComboOP_AXIS{ele_id}" style="display:none">
                  <!--Vertical Bar Grouped Combo with Line and Vertical Bar Stacked Combo with Line-->
                  <div class=" form-row">
                    <div class="col-12" id="XYCombolabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_XmultipleCombo{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="multiple_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select number of Y Axes:</label>
                          <input id="select_YmultipleCombo_no{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="YHbarComboMultiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1:</label>
                        <select id="select_Y1multipleCombo{ele_id}" class="YmultipleCombo_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_yaxis_combo{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="YHbarCombolabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Line:</label>
                        <select id="select_LineCombo{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YbarlabelCombo{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operation for Y Axis:</label>
                        <select id="select_OPCombo{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="LinebarlabelCombo{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operation for Line:</label>
                        <select id="select_OPCombo_2{ele_id}" class="select2 plotAjax form-control" name="sel">
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Combo_label{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter17{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel" required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYY1OPComboTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYY1OPComboTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XYfloatYComboOP_AXIS END -->
                  <!-- MultipleLine_Combo_AXIS  -->
                <div id="MultipleLine_Combo_AXIS{ele_id}" style="display:none">
                  <!--Bar stacked with MultipleLine-->
                  <div class=" form-row">
                    <div class="col-12" id="MultipleLinelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_XmultipleLineCombo{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="multiple_line_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select number of Y Axes:</label>
                          <input id="select_YmultipleLineCombo_no{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="YHbarComboMultipleLinelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y1:</label>
                        <select id="select_Y1multipleLineCombo{ele_id}" class="YmultipleLineCombo_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_yaxis_line_combo{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="multiple_combo_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select number of Lines:</label>
                          <input id="select_multiple_combo_line{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="YHbarComboMultiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Line 1:</label>
                        <select id="select_L1multipleCombo{ele_id}" class="combo_multiple_line_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_line_combo_chart_line{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="YHbarComboMultiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations for Y Axis:</label>
                        <select id="select_multipleCombo{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Multiple_combo_operations{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations for Line:</label>
                        <select id="select_multipleCombo_line{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybar_multiple_combo{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter25{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XYOPETab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXYOPE_multipleComboTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- MultipleLine_Combo_AXIS  end-->

                <!-- XfloatXfloatYOP-AXIS -->
                <div id="XfloatXfloatYOP_AXIS{ele_id}" style="display:none">
                  <!--Horizontal Area Stacked,Horizontal Waterfall Grouped,Funnel Stacked-->
                  <div class=" form-row">
                    <div class="col-12" id="XYlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X Axis:</label>
                        <select id="select_xf{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X1 Axis:</label>
                        <select id="select_xf1{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="select_yn{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f""" <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_xxy{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_grouped{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter11{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XX1YOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXX1OPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XfloatXfloatYOP-AXIS END -->
                <!-- XMultipleYOP-AXIS -->
                <div id="XMultipleYOP_AXIS{ele_id}" style="display:none">
                  <!--Horizontal Bar Stacked, Horizontal Bar Grouped-->
                  <div class=" form-row">
                    <div class="col-12" id="multiple_x_value{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select number of X Axes:</label>
                          <input id="select_XMultiple_no{ele_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                        </div>
                    </div>
                    <div class="col-12" id="XHbarMultiplelabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select X1:</label>
                        <select id="select_X1Multiple{ele_id}" class="XMultiple_dropbox select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12 multiple_xaxis{ele_id}" style="padding:0;margin:0;">
                    </div>
                    <div class="col-12" id="YHbarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Y Axis:</label>
                        <select id="select_Ym{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f""" <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabel{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Operations:</label>
                        <select id="select_XMultipleOP{ele_id}" class="select2 plotAjax form-control" name="sel"
                          required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="Ybarlabelvertical_grouped{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Filters:</label>
                        <select id="selectfilter29{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                          required multiple>
                        </select>
                      </div>
                    </div>
                    <div class="col-12" id="XX1YOPTab{ele_id}">
                      <div class="form-group">
                        <label class="acies_label col-md-12">Select Tab:</label>
                        <select id="selectXMultipleYOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                          <option value="" disabled selected>--------------------</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- XMultipleYOP-AXIS END -->
                  <!-- Image-AXIS -->
                  <div id="Image_{ele_id}" style="display:none">
                    <!--Image-->
                    <div class=" form-row">
                      <div class="col-12" id="Imagelabel{ele_id}">
                        <form method="post" class="uploadimage" enctype="multipart/form-data">
                          <div class="custom-file" style="margin-bottom:1em">
                            <input type="file" class="custom-file-input" class="upload_image_class" id="image_{ele_id}" style="border-bottom-color:white;" name="upload_image" accept="image/*">
                            <label class="custom-file-label">Choose file</label>
                          </div>
                        </form>


                      </div>
                      <br>

                      <div class="col-12" id="ImageTab{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="image_Tab{ele_id}" class="select2 plotAjax tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- Image END -->

                  <!-- CVfloatO-AXIS -->
                  <div id="CVfloatO_AXIS{ele_id}" style="display:none">
                    <!--Pie chart,Donut Chart,Treemap-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Category:</label>
                          <select id="select_category{ele_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Value:</label>
                          <select id="select_value{ele_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_options{ele_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelpiechart{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter5{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="CVOPTab{ele_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectCVOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- CVfloatO-AXIS END -->
                  <!-- Aggregation card  min max -->
                  <div id="aggcard_{ele_id}" style="display:none">
                        <!--Aggregation(max,min)-->
                        <div class=" form-row">

                          <div class="col-12" id="  Aggbarlabel_min_max{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Value:</label>
                              <select id="select_agg_val{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                              <input type="checkbox" id="agg_header{ele_id}" class="checkboxinput custom-control-input">
                              <label for="agg_header{ele_id}" class="custom-control-label">Title</label>
                          </div>
                          <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value{ele_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                          <div class="col-12" id="Agglabel_val{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter21{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="AggIcon{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Choose icon image:</label>
                              <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon{ele_id}">
                              <option value="" disabled selected>--------------------</option>
                              <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                              <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                              <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                              <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                              <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                              <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                              <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                              <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                              <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                              <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                              <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                              <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                              <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                              <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                              <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                              <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                              <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                              <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                              <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                              <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                              <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                              <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                              <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                              <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                              <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                              <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                              <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                              <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                              <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                              <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                              <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                              <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                              <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                              <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                              <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                              <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                              <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                              <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                              <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                              <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                              <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                              <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                              <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                              <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                              <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                              <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                              <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                              <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                              </select>
                            </div>
                          </div>
                           <div class="col-12" id="AggTab_{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectAggTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- Aggregation card min max  end -->
                    <!-- Aggregation card  top bottom -->
                  <div id="aggcard_n{ele_id}" style="display:none">
                        <!--Aggregation(top,bottom)-->
                        <div class=" form-row">
                          <div class="col-12" id="  Aggbarlabel_top_bottom_value{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select N:</label>
                              <input id="computed_number{ele_id}" type="number" value="0" min="0" style="width:19em;height:2.2em;">
                            </div>
                          </div>
                          <div class="col-12" id="  Aggbarlabel_top_bottom{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Value:</label>
                              <select id="selectval_n{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                              <input type="checkbox" id="agg_header_sum{ele_id}" class="checkboxinput custom-control-input">
                              <label for="agg_header_sum{ele_id}" class="custom-control-label">Title</label>
                          </div>
                          <br>
                          <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_sum{ele_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                          <div class="col-12" id="  Aggbarlabel_operation{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Operation:</label>
                              <select id="selectop_n{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                                <option value="Sum">Sum</option>
                                <option value="Maximum">Maximum</option>
                                <option value="Minimum">Minimum</option>
                                <option value="Count">Count</option>
                                <option value="Count Distinct">Count Distinct</option>
                                <option value="Average">Average</option>
                                <option value="Median">Median</option>
                                <option value="Variance">Variance</option>
                                <option value="Skewness">Skewness</option>
                                <option value="Kurtosis">Kurtosis</option>
                                <option value="Standard Deviation">Standard Deviation</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" style="padding-bottom:1em;" id="Aggbarlabel_distinct{ele_id}">
                            <div id="div_id_active" class="custom-control custom-checkbox">
                              <input type="checkbox" id="agg_distinct{ele_id}" class="checkboxinput custom-control-input">
                              <label for="agg_distinct{ele_id}" class="custom-control-label">Distinct</label>
                            </div>
                          </div>
                          <div class="col-12" id="Agglabel_n{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter22{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="AggIcon_n{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Choose icon image:</label>
                              <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon_n{ele_id}" style="font-size:1.1rem">
                              <option value="" disabled selected>--------------------</option>
                              <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                              <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                              <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                              <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                              <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                              <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                              <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                              <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                              <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                              <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                              <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                              <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                              <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                              <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                              <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                              <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                              <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                              <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                              <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                              <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                              <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                              <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                              <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                              <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                              <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                              <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                              <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                              <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                              <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                              <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                              <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                              <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                              <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                              <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                              <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                              <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                              <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                              <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                              <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                              <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                              <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                              <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                              <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                              <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                              <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                              <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                              <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                              <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="AggTab_n{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectAggTabn{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- Aggregation card top bottom  end -->
                  <!-- Aggregation card count count distinct -->
                  <div id="agg_card_AXIS{ele_id}" style="display:none">
                        <!--Aggregation(Sum,max,min,average,count,count distinct,skewness,kurtosis)-->
                        <div class=" form-row">

                          <div class="col-12" id="  Aggbarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Value:</label>
                              <select id="select_allval{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                              <input type="checkbox" id="agg_header_count{ele_id}" class="checkboxinput custom-control-input">
                              <label for="agg_header_count{ele_id}" class="custom-control-label">Title</label>
                          </div>
                          <br>
                          <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_count{ele_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                          <div class="col-12" id="Agglabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter20{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="AggIcon_axis{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Choose icon image:</label>
                              <select class="select2 plotAjax form-control" name="sel"id="selectAggIcon_axis{ele_id}" style="font-size:1.1rem">
                              <option value="" disabled selected>--------------------</option>
                              <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                              <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                              <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                              <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                              <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                              <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                              <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                              <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                              <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                              <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                              <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                              <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                              <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                              <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                              <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                              <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                              <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                              <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                              <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                              <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                              <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                              <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                              <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                              <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                              <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                              <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                              <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                              <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                              <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                              <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                              <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                              <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                              <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                              <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                              <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                              <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                              <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                              <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                              <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                              <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                              <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                              <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                              <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                              <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                              <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                              <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                              <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                              <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="CSV_AggTab{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectAggCSVTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- Aggregation card count count distinct end -->
                      <!-- CSVfloat-AXIS -->
                      <div id="CSVfloat_AXIS{ele_id}" style="display:none">
                        <!--Aggregation(Sum,max,min,average,skewness,kurtosis)-->
                        <div class=" form-row">

                          <div class="col-12" id="Ybarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Value:</label>
                              <select id="selectval{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                              <input type="checkbox" id="agg_header_max{ele_id}" class="checkboxinput custom-control-input">
                              <label for="agg_header_max{ele_id}" class="custom-control-label">Title</label>
                          </div>
                          <br>
                          <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_max{ele_id}" style="display:none;margin-left:0.5em;margin-bottom:1em">
                          <div class="col-12" id="Agglabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter16{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="AggIcon_float{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Choose icon image:</label>
                              <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon_float{ele_id}" style="font-size:1.1rem">
                              <option value="" disabled selected>--------------------</option>
                              <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                              <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                              <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                              <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                              <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                              <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                              <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                              <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                              <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                              <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                              <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                              <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                              <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                              <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                              <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                              <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                              <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                              <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                              <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                              <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                              <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                              <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                              <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                              <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                              <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                              <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                              <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                              <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                              <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                              <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                              <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                              <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                              <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                              <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                              <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                              <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                              <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                              <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                              <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                              <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                              <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                              <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                              <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                              <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                              <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                              <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                              <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                              <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                              <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                              <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="CSVTab{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectCSVTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- CSVfloat-AXIS END -->
                      <!-- CSVfloatO-AXIS -->
                      <div id="CSVfloatO_AXIS{ele_id}" style="display:none">
                        <!--Sunburst Chart,Angular Guage,Bullet Guage-->
                        <div class=" form-row">
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Category:</label>
                              <select id="select_cat{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="YHbarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Sub-Category:</label>
                              <select id="select_subcat{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="Ybarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Value:</label>
                              <select id="select_val{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="Ybarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Operation:</label>
                              <select id="select_op{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="Ybarlabelsunburst{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter4{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-6" id="threshold_{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Threshold Value:</label>
                              <input class="plotAjax form-control" type="number" id="threshold{ele_id}">
                            </div>
                          </div>
                          <div class="col-6" id="threshold_color{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Threshold Color:</label>
                              <input class="plotAjax form-control" type="color" id="thresholdColor{ele_id}">
                            </div>
                          </div>
                          <div class="col-12" id="delta_{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Delta:</label>
                              <input class="plotAjax form-control" type="number" id="delta{ele_id}">
                            </div>
                          </div>
                          <div class="col-6" id="threshold_color{ele_id}">
                            <button class="btn btn-primary btn-xs rounded px-2" id="condition{ele_id}" data-modal_id="conditionModal{ele_id}" onclick="gaugeModal.call(this)">Conditional formatting</button>
                          </div>
                          <div class="col-6" id="threshold_color{ele_id}">
                            <button class="btn btn-primary btn-xs rounded px-2" id="conditionRange{ele_id}" data-modal_id="conditionModalRange{ele_id}" onclick="gaugeModalRange.call(this)">Range based formatting</button>
                          </div>
                          <div class="col-12" id="CSVOPTab{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectCSVOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- CLfloatO-AXIS END -->
                      <div id="CLfloatO_AXIS{ele_id}" style="display:none">
                        <!--Nested Table-->
                        <div class=" form-row">
                          <div class="card col-12">
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Level 1:</label>
                              <select id="select_categories_level1{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Level 2:</label>
                              <select id="select_categories_level2{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Level 3:</label>
                              <select id="select_categories_level3{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Level 4:</label>
                              <select id="select_categories_level4{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="XYlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Level 5:</label>
                              <select id="select_categories_level5{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                          <div class="col-12" id="YHbarlabel{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Columns:</label>
                              <select id="select_columns{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required multiple>

                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="OPerationlabel{ele_id}">

                          </div>
                          <div class="col-12" id="nested_table{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter15{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="table{ele_id}">
                            <div class="form-group">
                            <button class="btn btn-primary" id="nested_conditional_table{ele_id}" data-toggle="modal" data-target="#nestedconditionalModal{ele_id}">Set Conditional-formatting</button>
                            </div>
                          </div>
                          <div class="col-12" id="CVOPTab{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="selectCLOPTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- CLfloatO-AXIS END -->
                      <div id="Table_AXIS{ele_id}" style="display:none">
                        <!--Table-->
                      <div class=" form-row">
                          <div class="col-12" id="Table_label{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Columns:</label>
                              <select id="select_table_columns{ele_id}" class="select2 plotAjax form-control" name="sel"
                                required multiple>

                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="table{ele_id}">
                            <div class="custom-control custom-checkbox">
                              <input type="checkbox" checked="checked" name="defaultValueColorConfig" id="fk_value{ele_id}" class="checkboxinput custom-control-input">
                              <label for="fk_value{ele_id}" class="custom-control-label">
                              Show ForeignKey Field as value
                              </label>
                          </div>
                        </div><br><br>
                          <div class="col-12" id="table{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Filters:</label>
                              <select id="selectfilter24{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                                required multiple>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="Table_Tab{ele_id}">
                            <div class="form-group">
                              <label class="acies_label col-md-12">Select Tab:</label>
                              <select id="table_Tab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                <option value="" disabled selected>--------------------</option>
                              </select>
                            </div>
                          </div>
                          <div class="col-12" id="table{ele_id}">
                            <div class="form-group">
                            <button class="btn btn-primary" id="conditional_table{ele_id}" data-toggle="modal" data-target="#conditionalModal{ele_id}">Set Conditional-formatting</button>
                            </div>
                          </div>
                      </div>
                      </div>
                      <!-- Table END -->
                      <!-- Bubble-AXIS -->
            <div id="BubbleXYZ_AXIS{ele_id}" style="display:none">
              <!--Bubble graph-->
              <div class=" form-row">
                <div class="col-12" id="BubbleXlabel{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select X Axis:</label>
                    <select id="selectBubble_X{ele_id}" class="select2 plotAjax form-control" name="sel"
                      required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="selectBubble_Ylabel{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Y Axis:</label>
                    <select id="selectBubble_Y{ele_id}" class="select2 plotAjax form-control" name="sel"
                      required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="selectBubble_Zlabel{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Z Axis:</label>
                    <select id="selectBubble_Z{ele_id}" class="select2 plotAjax form-control" name="sel"
                      required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="Bubblelabels{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Filters:</label>
                    <select id="selectfilter18{ele_id}" class="select2 plotAjax form-control filter_condition{ele_id}" name="sel"
                      required multiple>
                    </select>
                  </div>
                </div>
                <div class="col-12" id="XYTablabel{ele_id}">
                  <div class="form-group">
                    <label class="acies_label col-md-12">Select Tab:</label>
                    <select id="selectBubbleXYTab{ele_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>

            <!-- BubbleMap ended -->
                        <div class="card filter_plot_card">
                          <div class="card-header filter_card_header{ele_id}" data-elementid = "{ele_id}">
                            <a class="collapsed card-link text-primary" data-toggle="collapse" href="#collapseTwo">
                            Configure Filter
                          </a>
                          </div>
                          <div id="collapseTwo" class="collapse">
                            <div class="card-body filter_card_body{ele_id}">

                            </div>
                          </div>
                        </div>

                      <div class="row buttonalign" id="plotlyButtonDiv{ele_id}" style="display:none">
                        <button id="plotlyButton{ele_id}" type="button" name="plotForm" value="f1"
                          class=" btn btn-primary">
                          <i class="fa fa-area-chart"></i>&nbsp;Plot
                        </button>
                      </div>
      </div>
      </div>
    </div>
  </div>


          </div>
        </div>"""
        )

        html = (
            html
            + f"""    </div>

      </div>

    </div>
  </div>"""
        )

    html = (
        html
        + """
        <div class="modal" id='showDetailListflow"""
        + f"""{element_id}"""
        + """' tabindex="-1" role="dialog" data-focus="false" aria-labelledby="formModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header">
              <h5 class="modal-title" id="showDetailListflow" style="margin-left: 40%;">View Details</h5>
              <button type="button" class="closeDetailflow close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="overflow-y: scroll ;max-height: 30rem;">
              <div class='card'>
                <div class='card-body'>
                  <table id='showDetailListflowtable"""
        + f"""{element_id}"""
        + """' class="row-border">
                    <thead>
                    </thead>

                    <tbody>

                    </tbody>

                  </table>
                </div>
            </div>
          </div>
            </div>
        </div>
    """
    )
    html = html + "</div>"
    script = script + scriptGenerator("", "list view", element_id, request, t, data1)
    if not data1.get("no"):
        html = (
            html
            + """
            """
        )
    return html, script


def html_generator_analysis(
    model_name,
    create_view_tab_body_content,
    element_id,
    tab_type,
    header_name,
    request,
    data1,
    path,
    edit=False,
    tab_pane=True,
    iden2="",
):
    row = {}
    analysis_button_styling = create_view_tab_body_content.get("analysisButtonStyling")
    row["element_id"] = element_id
    row["tab_header_name"] = header_name
    row["tab_type"] = tab_type
    row["tab_body_content"] = create_view_tab_body_content
    tabConfig = row["tab_body_content"]
    data_analysis = {}
    data_analysis["PlotCharts"] = tabConfig["PlotCharts"]
    if "tabConfigs" in tabConfig:
        data_analysis["tabConfigs"] = tabConfig["tabConfigs"]
    else:
        tabConfig["tabConfigs"] = "No"
        data_analysis["tabConfigs"] = "No"
    data_analysis["AddTabs"] = tabConfig["AddTabs"]
    data_analysis["PDF"] = tabConfig["PDF"]
    data_analysis["share_with_group"] = tabConfig["share_with_group"]
    if "global_settings" in tabConfig:
        data_analysis["global_settings"] = tabConfig["global_settings"]
    else:
        tabConfig["global_settings"] = "No"
        data_analysis["global_settings"] = "No"
    data_analysis["SaveButton"] = tabConfig["SaveButton"]
    if tabConfig.get("Layout"):
        data_analysis["Layout"] = tabConfig.get("Layout")
    else:
        data_analysis["Layout"] = "No layout"

    tabs_list = tabConfig["TabList"]
    for index, tab in enumerate(tabs_list):
        tab["slicer_parameter_values"] = []
        if tab.get("slicerTable"):
            if len(tab.get("slicerTable")) > 0 and tab.get("slicerTable")[0] != "":
                for ind in range(len(tab.get("slicerTable"))):
                    if tab.get("slicerTable"):
                        actual_model_name = dynamic_model_create.get_model_class(
                            tab["slicerTable"][ind], request
                        )
                        datecols = [
                            field.name
                            for field in actual_model_name.concrete_fields
                            if field.get_internal_type() == "DateField"
                        ]
                        datetimecols = [
                            field.name
                            for field in actual_model_name.concrete_fields
                            if field.get_internal_type() == "DateTimeField"
                        ]
                        if tab.get("slicerParameter"):
                            parameter_original_name = [
                                field.name
                                for field in actual_model_name.concrete_fields
                                if field.verbose_name.title() == tab["slicerParameter"][ind]
                            ][0]
                            i = parameter_original_name

                            slicer_parameter_values = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": tab["slicerTable"][ind],
                                        "Columns": [parameter_original_name],
                                    },
                                    "condition": [],
                                },
                            )
                            if parameter_original_name in datecols:
                                slicer_parameter_values[parameter_original_name] = slicer_parameter_values[
                                    parameter_original_name
                                ].dt.strftime("%Y-%m-%d")
                            if parameter_original_name in datetimecols:
                                slicer_parameter_values[parameter_original_name] = slicer_parameter_values[
                                    parameter_original_name
                                ].dt.strftime("%Y-%m-%d  %H:%M:%S")
                            tab["slicer_parameter_values"].append(
                                slicer_parameter_values[parameter_original_name].unique().tolist()
                            )
                            dummy = []
                            for k in range(len(tab["slicer_parameter_values"][ind])):
                                if (
                                    tab["slicer_parameter_values"][ind][k] is None
                                    or tab["slicer_parameter_values"][ind][k] == "nan"
                                    or tab["slicer_parameter_values"][ind][k] == "NULL"
                                ):
                                    pass
                                else:
                                    dummy.append(tab["slicer_parameter_values"][ind][k])
                            tab["slicer_parameter_values"][ind] = []
                            tab["slicer_parameter_values"][ind] = dummy
                            tab["analysis_additional_config"] = "slicer_config"
                        else:
                            tab["slicerParameter"] = ""
                            tab["slicer_parameter_values"] = []
                            tab["analysis_additional_config"] = "improper_config"
                            tab["ind"] = []
                    else:
                        tab["analysis_additional_config"] = "no_config"
                        tab["slicerTable"] = ""
                        tab["slicerParameter"] = ""
                        tab["slicer_parameter_values"] = []
                        tab["ind"] = []
            else:
                tab["analysis_additional_config"] = "no_config"
                tab["slicerTable"] = ""
                tab["slicerParameter"] = ""
                tab["slicer_parameter_values"] = []
                tab["ind"] = []
        else:
            tab["analysis_additional_config"] = "no_config"
            tab["slicerTable"] = ""
            tab["slicerParameter"] = ""
            tab["slicer_parameter_values"] = []
            tab["ind"] = []
        tabs_list[index] = tab
    data_analysis["tabList"] = tabs_list
    data_analysis["analysis_package"] = tabConfig["Analysis_Package"]
    data_analysis["element_id"] = row["element_id"]
    data_analysis["tab_type"] = row["tab_type"]
    data_analysis["tab_header_name"] = row["tab_header_name"]
    if tabConfig.get("dashboardIndex") in [None]:
        data_analysis["dashboardIndex"] = "Required"
    else:
        data_analysis["dashboardIndex"] = tabConfig["dashboardIndex"]

    if tabConfig.get("publishDashboardIndex") in [None]:
        data_analysis["publishDashboardIndex"] = "Required"
    else:
        data_analysis["publishDashboardIndex"] = tabConfig["publishDashboardIndex"]

    if tabConfig.get("dashboardIndexTemplate"):
        data_analysis["dashboardIndexTemplate"] = tabConfig.get("dashboardIndexTemplate")
    else:
        data_analysis["dashboardIndexTemplate"] = "Template1"
    tables = (
        read_data_func(
            request,
            {
                "inputs": {"Data_source": "Database", "Table": "Tables", "Columns": ["tablename"]},
                "condition": [],
            },
        )
    ).tablename.tolist()
    url_string = request.path
    f_occ = url_string.find("/", url_string.find("/") + 1)
    s_occ = url_string.find("/", url_string.find("/") + f_occ + 1)
    app_code = url_string[f_occ + 1 : s_occ]

    if app_code:
        tables = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "Application",
                    "Columns": ["table_names"],
                },
                "condition": [
                    {
                        "column_name": "application_code",
                        "condition": "Equal to",
                        "input_value": app_code,
                        "and_or": "",
                    }
                ],
            },
        ).table_names.iloc[0]

    tableList = tables
    if not isinstance(tableList, list):
        try:
            tableList = json.loads(tableList)
        except Exception as e:
            logging.warning(f"Following exception occured - {e}")
    data_analysis["tableList"] = tableList
    data_analysis["plotlybuttons"] = [
        {"Category_name": "Pivot Report", "icon": "fa-regular fa-table-pivot"},
        {"Category_name": "Image", "icon": "fa fa-picture-o"},
        {"Category_name": "Scatter", "icon": "fas fa-grip-vertical"},
        {"Category_name": "Bar", "icon": "fa fa-bar-chart"},
        {"Category_name": "Line", "icon": "fa fa-line-chart"},
        {"Category_name": "Pie", "icon": "fas fa-chart-pie"},
        {"Category_name": "Sunburst", "icon": "fas fa-chart-pie"},
        {"Category_name": "Area", "icon": "fa fa-area-chart"},
        {"Category_name": "Waterfall", "icon": "fas fa-water"},
        {"Category_name": "Treemap", "icon": "fas fa-th-large"},
        {"Category_name": "Funnel", "icon": "fa fa-filter"},
        {"Category_name": "Boxplot", "icon": "fas fa-boxes"},
        {"Category_name": "Bubble", "icon": "fas fa-circle"},
        {"Category_name": "Histogram", "icon": "fa fa-signal"},
        {"Category_name": "Violin", "icon": "fa fa-thermometer-0"},
        {"Category_name": "Heatmap", "icon": "fas fa-chess-board"},
        {"Category_name": "Gauge", "icon": "fa fa-tachometer"},
        {"Category_name": "Map", "icon": "fa fa-map-marker"},
        {"Category_name": "3D plots", "icon": "fa fa-cubes"},
        {"Category_name": "Aggregation", "icon": "fas fa-percentage"},
        {"Category_name": "Combo", "icon": "fas fa-shapes"},
        {"Category_name": "Table", "icon": "fa fa-table"},
    ]
    data_analysis["analysisButtonStyling"] = analysis_button_styling
    t = data_analysis
    html = ""
    script = ""
    if tab_pane:
        tab_pane_class = "tab-pane fade"
        style = ""
    else:
        tab_pane_class = "cells"
        style = ""
        html = html + "<div>"
    html = (
        html
        + """
       <style>

       .analysisWraptext td{
         white-space: break-spaces;
       }
       .arrow-tab {
        border-style: dashed;
        border-color: transparent;
        border-width: 0.45em;
        display: -moz-inline-box;
        display: inline-block;
        font-size: 130px;
        height: 0;
        line-height: 0;
        position: relative;
        vertical-align: middle;
        width: 0;
        background-color: #fff;
        left: -14px;
        top: 0px;
        border: 0.45em dashed transparent;
        border-left: 66px dashed var(--primary-color);
      }



       .index-no-column{
          display: flex;
          align-items: center;
          justify-content: center;
          border-top-right-radius: 40px;
          border-bottom-right-radius: 40px;
          background:  var(--primary-color);
          height: 4rem;
          color:var(--font-hover-color);
        }
        .editTabIcon{
          display: none;
          position: absolute;
          right: 0;
          z-index: 1;
          background: #f7f7f7;
          padding: 7px;
          border-radius: 50%;
          box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
          cursor: pointer;
        }
        .tab-icons, .tab-header-name, .colored-text{
              color: #fff;
            }
            .TabIcons{
              margin:1rem;
              height:4rem;
              font-size:2rem;
            }
          .index-rows-temp2{
        border-bottom: 8px solid var(--primary-color);
      }
      .index-column-temp2{
        border: 5px solid  var(--primary-color);
      }
        .dropIndex{
          border-radius: 25px 25px 0px 25px !important;
          height: 4rem;
          width: 4rem;
          z-index: 1;
          margin-top: -70px;
          margin-left: 30px;
          margin-right: -25px;
          display: flex;
          justify-content: center;
          align-items: center;
          background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);
        }
        .boxIndex{
              border-radius: 25px !important;
              height: 7rem;
              z-index: 1;
              margin-left: 30px;
              margin-right: -25px;
              display: flex;
              justify-content: center;
              align-items: center;
              background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);
              box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
            }

        .defaultTabTheme{
              background-color:  var(--primary-color);
            }

      .linkCard {
        width: 95%;
        height: 4rem;
        border-radius: 1.2rem;
        margin: 1rem;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
        cursor: pointer;
      }
      .linkCard a{
        color:var(--font-hover-color);
        }
      .linkCard:hover {
        transform: scale(1.05);
      }
      .linkCard:active {
        transform: scale(1.0);
      }
      .scroll-link {
        min-width : 17rem;
      }
      .scroll-nav {
        flex-wrap: nowrap !important;
        overflow-x: scroll !important;
        overflow-y: hidden !important;
      }
      #tabLinks{
        overflow-x:hidden;
      }

    </style>
    """
        + f"""

    <div class="{tab_pane_class}" {style} id="{element_id}_tab_content" data-header_name="{header_name}" role="tabpanel" aria-labelledby="{element_id}-tab">
    <div class="analysisClass">

        <div class="container-fluid">
          <div class="font-weight-light">

            <div class="card ">
              <div class="card-header">

                <div>"""
    )
    if t["share_with_group"] == "Yes":
        html = (
            html
            + f"""      <div class="pt-1 pr-1" style="display:inline-block;"> <span class="text-primary">Last Updated Time :</span> <span id="last_updated_time{element_id}">00-00-0000 00:00</span></div>"""
        )

    html = html + f"""  <div style="display:inline-flex;float:right">"""
    if t["share_with_group"] == "Yes":
        html = (
            html
            + f"""          <span class="pt-1 pr-1 text-primary">Group dashboards:</span>
                  <div class="">
                  <select id="selectConfig{element_id}" class="select2">
                    <option value="" selected>---------------</option>

                  </select>
                  </div>
                  """
        )
        function_check = button_styling(analysis_button_styling, "analysispreviousversions")
        if function_check is not None:
            html = (
                html
                + f"""          <button id="previousVersion{element_id}" style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" class=" btn btn-primary btn-md rounded px-2 ml-2 mr-2 {function_check['class']}" value="versions" data-toggle="modal" data-target="#select_version_modal">{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""          <button type="button" id="previousVersion{element_id}" class=" btn btn-primary btn-md rounded px-2 ml-2 mr-2" value="versions" data-toggle="modal" data-target="#select_version_modal">Previous versions</button>"""
            )
        function_check = button_styling(analysis_button_styling, "analysisshare")

        custom_messages_analysis = tabConfig.get("custom_messages_anlaysis")
        custom_messages_analysis_publish = ""
        custom_messages_analysis_share = ""
        if custom_messages_analysis is not None:
            if custom_messages_analysis.get("published_message") is not None:
                custom_messages_analysis_publish = json.dumps(
                    custom_messages_analysis.get("published_message")
                )
            if custom_messages_analysis.get("share_dashboard_message") is not None:
                custom_messages_analysis_share = json.dumps(
                    custom_messages_analysis.get("share_dashboard_message")
                )
        html = (
            html
            + f"""          <button type="button" data-custom-message='{custom_messages_analysis_publish}' id="publishDashboard{element_id}" class=" btn btn-primary btn-xs rounded px-2 ml-2 mr-2" value="versions" data-toggle="modal" data-target="#publishDashboard">Publish</button>"""
        )

        html = (
            html
            + f"""          <button type="button" id="importDashboard{element_id}" class=" btn btn-primary btn-xs rounded px-2 ml-2 mr-2" value="versions" data-toggle="modal" data-target="#importDashboard"><i class="fa fa-plus"></i>Import</button>"""
        )
        if function_check is not None:
            html = (
                html
                + f"""            <button data-custom-message='{custom_messages_analysis_share}' id="saveShare{element_id}" style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" value="share" title="Save and share with groups" data-toggle="modal" data-target="#share_with_groups" class=" btn btn-primary btn-md rounded px-2 {function_check['class']}" data-elementID='{element_id}'>{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""            <button data-custom-message='{custom_messages_analysis_share}' id="saveShare{element_id}" type="button" value="share" title="Save and share with groups" data-toggle="modal" data-target="#share_with_groups" class=" btn btn-primary btn-md rounded px-2" data-elementID='{element_id}'>&nbsp;<i class="fa fa-share-square"></i></button>"""
            )

        html = (
            html
            + f"""
              <div id="publishDashboard" class="modal fade" role="dialog" data-focus="false">
                <div class="modal-dialog">
                  <!-- Modal content-->
                  <div class="modal-content">
                    <div class="modal-header">
                      <h6 class="modal-title">Share with groups</h6>
                      <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                      <div class="row">

                      <div class="col-6">
                        <label>Publish type</label>
                        <select class="select2 form-control" onchange="publishDashboardSelect.call(this,'{element_id}')" id="publishDashboardSelect{element_id}">
                          <option value="Entire dashboard">Entire Dashboard</option>
                          <option value="Tabs">Tabs</option>
                          <option value="Plots">Plots</option>
                        </select>
                      </div>
                      <div class="col-6" style="display:none;">
                        <label>Select tabs</label>
                        <select class="select2 form-control" onchange="publishDashboardTabs.call(this,'{element_id}')"  id="publishDashboardTabs{element_id}">
                        </select>
                      </div>
                      <div class="col-6" style="display:none;">
                        <label>Select plots</label>
                        <select class="select2 form-control" id="publishDashboardPlots{element_id}" multiple="multiple">
                        </select>
                      </div>
                      <div class="col-6">
                        <label>Share with</label>
                        <select id="publishDashboardShare{element_id}" onchange="publishDashboardShare.call(this,'{element_id}')" class="select2 form-control">
                          <option value="Myself">Myself</option>
                          <option value="Everyone">Everyone</option>
                          <option value="Groups">Groups</option>
                        </select>
                      </div>
                      <div class="col-6">
                        <label>Edit dashboard</label>
                        <select id="publishDashboardEdit{element_id}" class="select2 form-control">
                          <option value="Enable">Enable</option>
                          <option value="Disable">Disable</option>
                        </select>
                      </div>
                      <div class="col-6" style="display:none">
                        <label>Groups</label>
                        <select id="publishDashboardGroup{element_id}" class="select2 form-control" multiple>
                        </select>
                      </div>
                      </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" value="share" id='publishDashboard0{element_id}' onclick="saveDashboard.call(this,'{element_id}')" class="btn btn-primary btn-xs rounded px-2 button_standard_save" data-elementID='{element_id}' style="margin-left: auto;">&nbsp;<i class="fas fa-publish"></i>&nbsp;Publish</button>
                      <button type="button" class="btn btn-primary btn-xs rounded px-2" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
              </div>
              <div id="importDashboard" class="modal fade" role="dialog" data-focus="false">
                <div class="modal-dialog modal-lg">
                  <!-- Modal content-->
                  <div class="modal-content">
                    <div class="modal-header">
                      <h6 class="modal-title">Shared with me</h6>
                      <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                      <div class="row">
                        <div class="col-6">
                          <label>Shared type</label>
                          <select class="select2 form-control" onchange="importDashboardSelect.call(this,'{element_id}')" id="importDashboardSelect{element_id}">
                            <option value="">---</option>
                            <option value="Shared with me">Shared with me</option>
                            <option value="Shared by me">Shared by me</option>
                          </select>
                        </div>
                        <div class="col-6">
                          <label>Select application</label>
                          <select class="select2 form-control" onchange="importDashboardApp.call(this,'{element_id}')" id="importDashboardApp{element_id}">
                          </select>
                        </div>
                        <div class="col-6">
                          <label>Select subprocess</label>
                          <select class="select2 form-control" onchange="importDashboardSubprocess.call(this,'{element_id}')" id="importDashboardSubprocess{element_id}">
                          </select>
                        </div>
                        <div class="col-6">
                          <label>Dashboard type</label>
                          <select class="select2 form-control" onchange="importDashboardType.call(this,'{element_id}')" id="importDashboardType{element_id}">
                            <option value="">---</option>
                            <option value="Entire dashboard">Dashboard</option>
                            <option value="Tabs">Tabs</option>
                            <option value="Plots">Plots</option>
                          </select>
                        </div>
                        <div class="col-6" style="display:none">
                          <label>Select dashboard</label>
                          <select class="select2 form-control"  id="importDashboardDashboard{element_id}">
                          </select>
                        </div>
                        <div class="col-6">
                          <label>Select tabs</label>
                          <select class="select2 form-control" onchange="importDashboardTab.call(this,'{element_id}')" id="importDashboardTab{element_id}">
                          </select>
                        </div>
                        <div class="col-6" style="display:none">
                          <label>Select plots</label>
                          <select class="select2 form-control" id="importDashboardPlot{element_id}">
                          </select>
                        </div>
                        <div class="col-6" style="display:none">
                          <label>Select tab</label>
                          <select class="select2 form-control" id="importDashboardPlotTab{element_id}">
                          </select>
                        </div>
                      </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" value="share" id='publishDashboard1{element_id}' onclick="importDashboard.call(this,'{element_id}')" class="btn btn-primary btn-xs rounded px-2 button_standard_save" data-elementID='{element_id}' style="margin-left: auto;">&nbsp;<i class="fas fa-publish"></i>&nbsp;Import</button>
                      <button type="button" class="btn btn-primary btn-xs rounded px-2" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
              </div>
              <div id="share_with_groups" class="modal fade" role="dialog" data-focus="false">
                  <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                      <div class="modal-header">
                        <h6 class="modal-title">Share with groups</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body">
                        <div class="col-6">
                          <label for="select2multiple_group{element_id}">Select Groups to share:</label>

                          <select class="select2 form-control js-example-basic-multiple" id="select2multiple_group{element_id}" multiple="multiple">

                          </select>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" value="share" id='analysisshare{element_id}' class=" btn btn-primary btn-md rounded px-2 button_standard_save" data-elementID='{element_id}'>&nbsp;<i class="fas fa-share"></i>&nbsp;Share</button>
                        <button type="button" class="btn btn-primary btn-md rounded px-2" data-dismiss="modal">Close</button>
                      </div>
                    </div>

                  </div>
                </div>
                <div id="select_version_modal" class="modal fade" role="dialog" data-focus="false">
                  <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                      <div class="modal-header">
                        <h6 class="modal-title">View versions</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body">
                        <div class="row">
                        <label class="pl-1" for="selectversion{element_id}">Select Version:</label>
                        <div class="col-6">
                          <select id="selectversion{element_id}" class="select2">
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>

                  </div>
                </div>"""
        )

    if t["global_settings"] == "Yes":
        function_check = button_styling(analysis_button_styling, "analysisglobalsettings")
        if function_check is not None:
            html = (
                html
                + f"""      <button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" id="globalButton{element_id}" style="margin-right:0px !important;" value="versions" data-toggle="modal" data-target="#select_global_settings">{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""      <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" id="globalButton{element_id}" style="margin-right:0px !important;" value="versions" data-toggle="modal" data-target="#select_global_settings">Global Settings</button>"""
            )

        html = (
            html
            + f"""        <div id="select_global_settings" class="modal fade" role="dialog" data-focus="false">
                      <div class="modal-dialog modal-lg">

                        <!-- Modal content-->
                        <div class="modal-content">

                          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                            <h5 class="modal-title" style="margin-left:auto;" >Pick canvas and plot colors</h5>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                          </div>
                          <div class="modal-body" style="overflow:auto;max-height:36.25rem;">
                            <div>
                              <div>
                                <div class="row" style="margin-bottom:-0.5em">
                                <div class="col-6">
                                <div id="accordion">
                              <div class="card" id="collapseExample">
                              <div class="card-header" style="padding:0.5em;font-size:1rem;font-weight:700">
                                    Select Themes
                                    <a class="card-link card_global" data-toggle="collapse" href="#collapseThemes">
                                    <i class="fas fa-minus float-right" style="padding-top:0.2em;color: #adb5bd;"></i>
                                  </a>
                            </div>
                          <div id="collapseThemes" class="collapse show" data-parent="#accordion">
                          <div class="card-body" style="margin-bottom:1.2em;">
                          <div class="row">
                          <div class="col-6">
                            <b style="font-weight:700">Select Background:</b></p>
                             <select id="global_bg{element_id}" class="select2 global_bg_selection" name="border_style" style="font-size:1.1rem" >
                              <option value="background_color">Background Color</option>
                              <option value="background_image">Background Image</option>
                             </select>
                          </div>
                          <div class="col-6 global_bg_image" style="display:none;">
                          <p>
                          <b style="font-weight:700">Background Image </b></p>
                              <form method="post" class="uploadbgimage" enctype="multipart/form-data">
                                <div class="custom-file" style="margin-bottom:1em">
                                  <input type="file" class="custom-file-input" class="upload_bg_image_class" id="bg_image_{element_id}" style="border-bottom-color:white;" name="upload_bg_image" accept="image/*">
                                  <label class="custom-file-label">Choose file</label>
                                </div>
                              </form>
                          </div>
                          <div class="bg_image_url" id="bg_image_url{element_id}" value="" style="display:none;"></div>
                          <div class="bg_image_name" id="bg_image_name{element_id}" value="" style="display:none;"></div>
                          <div class="col-6 global_bg_color" style="display:block">
                            <div>
                            <p>
                          <b style="font-weight:700">Canvas Background </b></p>
                          <input type="color" id="myColor{element_id}" class="myColor" name="favcolor" value="#ffffff"><br><br>
                          </div>
                        </div>
                        </div>
                          <div class="row">
                          <div class="col-6">
                          <p> <b style="font-weight:700">Plot Background</b></p>
                          <input type="color" id="themeColor{element_id}" class="themeColor" name="favcolor" value="#ffffff"><br><br>
                          </div>
                          <div class="col-6">
                          <p> <b style="font-weight:700">Plot Color </b></p>
                          <input type="color" id="themeColor1{element_id}" class="themeColor1" name="favcolor" value="var(--primary-color)"><br><br>
                          </div>
                          </div>
                          <br>

                          <div class="row">
                          <div class="col-6">
                          <p> <b style="font-weight:700;background-color:white">Index-Card Background</b></p>
                          <input type="color" id="indextabBG{element_id}" class="indextabBG" name="favcolor" value="var(--primary-color)" ><br><br>
                          </div>
                          <script>
                            var r = document.querySelector(':root');
                            var rs = getComputedStyle(r);
                            app_primary_color = rs.getPropertyValue('--primary-color');
                            if(app_primary_color){{
                              $("#themeColor1{element_id}").val(app_primary_color.trim())
                              $("#indextabBG{element_id}").val(app_primary_color.trim())
                            }}
                          </script>
                          <div class="col-6">
                          <p> <b style="font-weight:700">Index-Card Font Color </b></p>
                          <input type="color" id="indextabFC{element_id}" class="indextabFC" value="#ffffff" name="favcolor" ><br><br>
                          </div>
                          </div>
                          <br>

                        <div class="row">
                        <div class="col-6">
                          <div class="custom-control custom-checkbox">
                                  <input type="checkbox" checked="checked" name="defaultValueColorConfig" id="global_gradient_color{element_id}" class="global_gradient_color checkboxinput custom-control-input">
                                  <label for="global_gradient_color{element_id}" class="custom-control-label">
                                  Gradient Color
                                  </label>
                              </div>
                              </div>

                              </div>
                        </div>

                        </div>

                        </div>
                          </div>
                        </div>
                        <div class="col-6">
                        <div id="accordion_header">

                            <div class="card" id="collapse_header">
                            <div class="card-header" style="padding:0.5em;font-size:1rem;font-weight:700" >
                                    Select Header Settings
                                    <a class="card-link card_global" data-toggle="collapse" href="#collapseHeader">
                                    <i class="fas fa-minus float-right" style="padding-top:0.2em;color: #adb5bd;"></i>
                                  </a>
                            </div>
                          <div id="collapseHeader" class="collapse show" data-parent="#accordion_header">
                          <div class="card card-body" style="box-shadow:none;">
                          <div class="row">
                          <div class="col-6">
                          <label>Color:</label>
                              <input type="color" name="favcolor" id="global_header_color{element_id}" class="global_header_color" value="#000000"><br>
                          </div>
                          <div class="col-6">
                          <label>Background Color:</label>
                              <input type="color" name="favcolor1" id="global_header_bgcolor{element_id}" class="global_header_bgcolor" value="#ffffff"><br>
                              </div>
                          </div>
                            <br>
                              <div class="row">
                              <div class="col-6">
                              <label>Font size:</label>
                              <input type="number" placeholder="Font size" id="global_header_fontsize{element_id}" class="global_header_fontsize" style="width:10em;height:2em;" value="16" size="7" ><br>
                              </div>
                              <div class="col-6">
                              <label>Font weight:</label>
                              <select class="select2 global_header_fontweight"  id="global_header_fontweight{element_id}" name="border_style" style="font-size:1.1rem" >
                              <option value="100">100</option>
                              <option value="200">200</option>
                              <option value="300">300</option>
                              <option value="400">400</option>
                              <option value="500">500</option>
                              <option value="600">600</option>
                              <option value="700">700</option>
                              <option value="800">800</option>
                              <option value="900">900</option>
                              <option value="bold">Bold</option>
                              <option value="bolder">Bolder</option>
                              <option value="inherit">Inherit</option>
                              <option value="lighter">Lighter</option>
                              <option value="Normal">Normal</option>
                              </select></div>
                              </div>

                              <br>
                              <div class="row">
                              <div class="col-6">
                              <label>Font style:</label>
                                <select class="select2 global_header_fontstyle" id="global_header_fontstyle{element_id}" name="border_style" style="font-size:1.1rem" >
                              <option value="">----------</option>
                              <option value="Arial">Arial</option>
                              <option value="Times New Roman">Times New Roman</option>
                              <option value="Helvetica">Helvetica</option>
                              <option value="Lucida Console">Lucida Console</option>
                              <option value="Courier New">Courier New</option>
                              <option value="Verdana">Verdana</option>
                              <option value="Trebuchet MS">Trebuchet MS</option>
                              <option value="auto">auto</option>
                              <option value="emoji">emoji</option>
                              <option value="cursive">cursive</option>
                              <option value="inherit">inherit</option>
                              <option value="initial">initial</option>
                              <option value="none">none</option>
                              <option value="math">math</option>
                              <option value="monospace">monospace</option>
                              <option value="serif">serif</option>
                              <option value="fangsong">fangsong</option>
                              <option value="fantasy">fantasy</option>
                              <option value="revert">revert</option>
                              <option value="FontAwesome">FontAwesome</option>
                              <option value="system-ui">system-ui</option>
                              <option value="ui-monospace">ui-monospace</option>
                              <option value="-webkit-pictograph">-webkit-pictograph</option>
                              <option value="-webkit-body">-webkit-body</option>
                              <option value="Trebuchet MS">Trebuchet MS</option>
                              <option value="Courier New">Courier New</option>
                              <option value="Andale Mono">Andale Mono</option>
                              <option value="Trebuchet MS">Trebuchet MS</option>
                              <option value="Comic Sans MS">Comic Sans MS</option>
                              </select>
                              </div>
                              <div class="col-6">
                              <label>Alignment:</label>
                              <select class="select2 global_header_alignment" id="global_header_alignment{element_id}" name="border_style" style="font-size:1.1rem" >
                              <option value="left">Left</option>
                              <option value="center">Center</option>
                              <option value="right">Right</option>
                              </select>
                              </div>
                              </div>

                          </div>
                          </div>
                        </div>
                          </div>
                          </div>
                        </div>
                        <div class="row" style="margin-bottom:-0.5em;">
                          <div class="col-6">
                            <div id="accordion_border">
                              <div class="card">
                                <div class="card-header" style="padding:0.5em;font-size:1rem;font-weight:700">
                                    Border Settings
                                    <a class="card-link collapsed card_global" data-toggle="collapse" href="#collapseOne">
                                    <i class="fas fa-plus float-right" style="padding-top:0.2em;color: #adb5bd;"></i>
                                  </a>
                                </div>
                                <div id="collapseOne" class="collapse" data-parent="#accordion_border">
                                  <div class="card-body" style="margin-bottom:5em;">
                                  <div class="row">
                                  <div class="col-6">
                                  <label>Box Border</label>
                                  <label class="switch"><input type="checkbox" class="global_border" id="global_border{element_id}" value="false"><span class="slider round" style="border-radius: 30px"></span></label>
                                  </div>
                                  <div class="col-6">
                                  <label>Choose the border color:</label>
                                  <input  type="color" name="favcolor3" value="#000000" id="global_border_color{element_id}" class="global_border_color"></div>
                                  </div>
                                  <br>
                                   <div class="row">
                                  <div class="col-6">
                                  <label>Set border thickness</label>
                                  <input type="number" class="global_border_thickness" id="global_border_thickness{element_id}" placeholder="Thickness" size="7" value= "2" min = "1"></div>
                                  <div class="col-6">
                                 <label>Choose border style:</label>
<select class="select2 global_border_style" id="global_border_style{element_id}" name="border_style" style="font-size:1.1rem" >
<option value="solid">Solid</option>
<option value="dotted">Dotted</option>
<option value="double">Double</option>
<option value="dashed">Dashed</option>
</select>
                                  </div>
                                  </div>
                                </div>
                              </div>
                              </div>
                          </div>
                          </div>
                          <div class="col-6">
                             <div id="accordion_shadow">
                              <div class="card">
                                <div class="card-header" style="padding:0.5em;font-size:1rem;font-weight:700">
                                    Shadow Settings
                                    <a class="card-link collapsed card_global" data-toggle="collapse" href="#collapseTwo_global">
                                    <i class="fas fa-plus float-right" style="padding-top:0.2em;color: #adb5bd;"></i>
                                  </a>
                                </div>
                                <div id="collapseTwo_global" class="collapse" data-parent="#accordion_shadow">
                                  <div class="card-body">
                                    <div class="row">
                                    <div class="col-6">
                                    <label>Box Shadow</label>
                                    <label class="switch"><input type="checkbox" value="false" class="global_shadow" id="global_shadow{element_id}"><span class="slider round" style="border-radius: 30px"></span></label>
                                    </div>
                                    <div class="col-6">
                                    <label>Shadow Color:</label>
                                    <input type="color" value="#7A7575"  id="global_shadow_color{element_id}" class="global_shadow_color" name="favcolor3" ></div>
                                    </div>
                                    <br>
                                    <div class="row">
                                    <div class="col-6">
                                    <label>Set Shadow X-Offset:</label>
                                    <input type="number" placeholder="X-Offset" class="global_shadow_x" id="global_shadow_x{element_id}" value="2" size="7" >
                                    </div>
                                    <div class="col-6">
                                    <label>Set Shadow Y-Offset:</label>
                                    <input type="number" placeholder="Y-Offset" class="global_shadow_y"  id="global_shadow_y{element_id}" value= "1" size="7" ></div>
                                    </div>
                                    <br>
                                    <div class="row">
                                    <div class="col-6">
                                    <label>Set Shadow Blur Radius:</label>
                                    <input type="number" placeholder="Radius value" class="global_shadow_blur" id="global_shadow_blur{element_id}" value= "10" size="7" min = "0" ></div>
                                    <div class="col-6">
                                    <label>Set Shadow Thickness:</label>
                                    <input type="number" placeholder="Thickness value" class="global_shadow_thickness" value= "6" id="global_shadow_thickness{element_id}" size="7" ></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              </div>
                          </div>
                        </div>
                        <div class="card" id="collapse_header_prev">
                            <div class="card-header" style="padding:0.5em;font-size:1rem;font-weight:700" >
                              Preview
                            </div>
                          <div class="card card-body" style="box-shadow:none;margin-bottom:0;">
                          <div class="col-12">
                        <div class="mainDiv" id="main_theme{element_id}" style="background-color: rgb(0,0,0);">
                          <div class="myDiv" id="theme1{element_id}" style="background-color: rgb(255,255,255);">
                            <div class="inner-div_header" style= "background-color: white;">
                            <div class="inner-div_title" style= "color: black;text-align: left;font-size:16px;font-weight:100;padding-right:1em;padding-left:1em;">
                            Chart Header
                            </div>
                            </div>
                            <div class="inner-div" id="themegrad{element_id}" style= "background-color: rgb(255,255,255) !important;"><i class="fa-solid fa-chart-column globalConfigPreviewChart" id="globalConfigPreviewChart{element_id}" style="font-size: 12em"></i></div>
                          </div></div><br>
                          </div>
                          </div>
                        </div>

                      </div>

                          </div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" id="applyButton" data_elementid={element_id} class="global_applyButton btn btn-primary btn-md rounded px-2" data-dismiss="modal">Apply</button>

                        </div>
                        </div></div></div> """
        )

    if t["PlotCharts"] == "Yes":
        function_check = button_styling(analysis_button_styling, "analysisplotcharts")
        if function_check is not None:
            html = (
                html
                + f"""   <button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" value="Plot" id="plotCharts{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}"
                          data-toggle="modal" data-target="#PlotElements{element_id}" data-elementID="{element_id}">
                          {function_check['iconAppend']} {function_check['changeText']}
                        </button>"""
            )
        else:
            html = (
                html
                + f"""   <button type="button" value="Plot" id="plotCharts{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2"
                          data-toggle="modal" data-target="#PlotElements{element_id}" data-elementID="{element_id}">
                          <i class="fas fa-chart-pie"></i>
                          &nbsp;&nbsp;Plot charts
                        </button>"""
            )
    if t["tabConfigs"] == "Yes":
        html = (
            html
            + f"""   <button type="button" value="TabSettings" id="TabSettings{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" onclick="$('.editTabIcon').css('display','block')"
                           data-elementID="{element_id}">
                          <i class="fas fa-list-ul"></i>
                          &nbsp;&nbsp;Tab Configs
                        </button>"""
        )

        html = (
            html
            + f"""

        <div class="modal" role="dialog" data-focus="false" id="tabConfigModal">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Tab Configurations</h5>
                <button type="button" class="close" data-dismiss="modal">×</button>
              </div>
              <div class="modal-body" style="padding: 1rem 2rem;">
                <div class="form-group row">
            <label for="editTabName" class="col-12 col-form-label">Enter Tab Name</label>
            <div class="col-12">
              <input type="text" class="form-control textInput" id="editTabName" placeholder="Click to add title">
            </div>
          </div>
          <div class="form-group row">
            <label for="editTabDesc" class="col-12 col-form-label">Enter Tab Description</label>
            <div class="col-12">
              <input type="text" class="form-control textInput" id="editTabDesc" placeholder="Click to add description">
            </div>
          </div>
          <div class="form-group row">
            <label for="inputPassword" class="col-12 col-form-label">Choose Icon</label>
            <div class="col-6">
              <div class="listoficon">
              </div>
            </div>
          </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="tabUpdateSave" onclick="UpdateTabConfig(this)">Save changes</button>
                <button type="button" class="btn btn-primary btn-md rounded px-2" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>

      <script>
      var string = `<div class="row" white-space="nowrap">`
      var list = ["fas fa-compass", "fas fa-address-card", "fas fa-clipboard", "fas fa-wallet", "fas fa-dollar-sign", "fas fa-table", "fas fa-atom", "fas fa-tasks", "fas fa-th", "fas fa-business-time", "fas fa-chart-area", "fas fa-chart-line", "fas fa-chart-bar", 'fas fa-chart-pie', "fas fa-sitemap", "fas fa-highlighter", "fas fa-th-large", "fas fa-globe", "fas fa-paperclip", "fas fa-project-diagram", "fas fa-print", "fas fa-i-cursor", "fas fa-indent", "fas fa-list-alt", "fas fa-list-ul", "fas fa-outdent", "far fa-building", "fas fa-bullseye", "fas fa-calendar", "far fa-compass"]
      for (i = 0; i < list.length; i++) {{
        string += `<div class="col-2 icons"><a href="#" ><i class="${{list[i]}} listoficons" style="font-size:1rem;color: black;font-size: 1rem;background: #fff;padding: 5px;border-radius: 5px;" ></i>&nbsp&nbsp</a></div>`
      }}
      string += `</div>`
      $('.listoficon').append(string)

      $('.listoficons').on("click", function () {{
        $('.listoficons').each(function () {{
          $(this).css("color", "black");
          $(this).css("background", "#fff");
        }});
        $(this).attr("id", "selected")
        $(this).css("color", "white");
        $(this).css("background", "var(--primary-color)");
        window.selectedIcon = "fas " + $(this).attr("class").split(" ")[1]
      }});

      function UpdateTabConfig(element){{
        var tabId = $(element).attr("data-id")
        $(`#${{tabId}} .tab-title`).text($('#editTabName').val())
        $(`#${{tabId}} .tab-desc`).text($('#editTabDesc').val())
        $(`#${{tabId}} .tab-icons i`).attr("class",window.selectedIcon)
        $(`#${{tabId}} .colored-icons i`).attr("class",window.selectedIcon)

        const editables = document.getElementsByClassName('contentEditable tabname');
        var tabId = tabId.replace('index', '')
            Array.from(editables).forEach(ele => {{
              element_id = ele.id.replace('Header','')
              if(element_id == tabId){{
                ele.innerText = $('#editTabName').val()
              }}
            }});

        $("#tabConfigModal").modal("hide");
      }}
      </script>

      """
        )

    if t["AddTabs"] == "Yes":
        function_check = button_styling(analysis_button_styling, "analysistab")
        if function_check is not None:
            html = (
                html
                + f"""          <button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button"  value="AddTab" class="btn btn-primary rounded px-2 {function_check['class']}" data-toggle="tooltip" title="Add new tab" id='analysisAddTab{element_id}' style="margin-left:10px;">{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""          <button type="button"  value="AddTab" class="btn btn-primary rounded px-2" data-toggle="tooltip" title="Add new tab" id='analysisAddTab{element_id}' style="margin-left:10px;"><i class="fa fa-plus"></i>&nbsp;Tab</button>"""
            )

    if t["PDF"] == "Yes":
        function_check = button_styling(analysis_button_styling, "analysispdf")
        if function_check is not None:
            html = (
                html
                + f"""   <button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} type="button" value="PDF" class="btn btn-primary btn-md rounded px-2 mx-2 {function_check['class']}" id='analysisPDF{element_id}'>{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""   <button type="button" value="PDF" class="btn btn-primary btn-md rounded px-2 mx-2" id='analysisPDF{element_id}'><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
            )

    if t["SaveButton"] == "Yes":
        function_check = button_styling(analysis_button_styling, "analysissave")
        if function_check is not None:
            html = (
                html
                + f"""  <button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="saveChartConfigButton{element_id}" title="Save" type="button" class="btn btn-primary btn-md rounded px-2 standard_button_click {function_check['class']}" data-elementID="{element_id}" data-mainL3Div="{t['tab_type']}tab_content" data-mainL3AnchorID="{element_id}-tab">{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""  <button id="saveChartConfigButton{element_id}" title="Save" type="button" class="btn btn-primary btn-md rounded px-2 standard_button_click" data-elementID="{element_id}" data-mainL3Div="{t['tab_type']}tab_content" data-mainL3AnchorID="{element_id}-tab"> <i
                      class="fa fa-save"></i></button>"""
            )
    html = (
        html
        + f"""</div>
                </div>
              </div>
              <div class="card-body bodyAnalysis" style="overflow:auto" id='analysisDashboard{element_id}'>
                <ul class="nav nav-tabs nav-fill analysis-nav" id="analysisTab{element_id}" role="tablist">"""
    )
    if t.get("Layout") == "Landscape":
        index_style_width = "100%"
        index_aspect_ratio = 16 / 9
    else:
        index_style_width = "1080px"
        index_aspect_ratio = 9 / 16

    if t.get("dashboardIndex") != "Not required":
        html = (
            html
            + f"""
        <li class="nav-item navtab scroll-link">
          <a class="nav-link" id="indexTab{element_id}" href="#indexTabContent{element_id}" role="tab" data-toggle="tab" aria-controls="#indexTab{element_id}" aria-selected="true">
            <div class="row  flex-nowrap">
              <div class="col-md-11" style="padding-right: 0.1rem">
                <span class="tabname1" id="indexTab{element_id}" data-tab="indexTab{element_id}" data-tab_ct="indexTab{element_id}">
                  Index
                </span>
              </div>
            </div>
          </a>
        </li>
      """
        )
    for i in t["tabList"]:

        html = (
            html
            + f"""  <li class="nav-item navtab"><a class="nav-link" id="analysistab{element_id}{i['TabID']}" href="#tab{element_id}{i['TabID']}" role="tab" data-toggle="tab" aria-controls="#tab{element_id}{i['TabID']}" aria-selected="false">
                    <div class="row">
                    <div class="col-md-10" style="padding-right: 0.1rem">
                    <span class="contentEditable tabname yoyo" id="tabHeader{element_id}{i['TabID']}" data-tab="analysisrow{element_id}{i['TabID']}" onblur="editNameIndex.call(this)" data-tab_ct="analysisrow{element_id}{i['TabID']}">Tab{i['TabID']}</span>
                    </div>
                    <div class="col-md-2" style="padding-top: 0px;">
                    <button type="button" id="removeTab{element_id}{i['TabID']}" data-tabAnchorID="analysistab{element_id}{i['TabID']}" data-tabContainerDivID="tab{element_id}{i['TabID']}" style="border-width:0px;padding: 1px 1px;background-color: white;"><i class="fa fa-times" style="font-size:0.9rem;"></i></button>
                    </div>
                    </div>
                    </a></li>"""
        )
        script = script + scriptGenerator(
            "analysisTab", "analysisTab", element_id, request, i, data1, tab_pane=tab_pane
        )

    html = (
        html
        + f"""
                </ul>
                <script>
                  function openModal(id){{
                    $('#editTabName').val($(`#${{id}} .tab-title`).text())
                    $('#editTabDesc').val($(`#${{id}} .tab-desc`).text())
                    $("#tabUpdateSave").attr("data-id",id)
                    $("#tabConfigModal").modal('show');
                  }}
                </script>
                <div class="tab-content" id="analysisTabContent{element_id}">"""
    )

    if t.get("dashboardIndex") != "Not required":
        html = (
            html
            + f"""
        <div class="tab-pane fade" id="indexTabContent{element_id}" role="tabpanel" aria-labelledby="indexTab{element_id}">
          <div id="tabLinks{element_id}" class="tabLinksclass" style="max-width: {index_style_width}; margin: auto; border: 0.1px solid black; aspect-ratio: {index_aspect_ratio}; overflow:auto;">"""
        )

        if t.get("dashboardIndexTemplate") == "Template1":
            # Template 1
            for i in t["tabList"]:
                html = (
                    html
                    + f"""
            <div class="row index-rows" style="box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;border-radius: 5px;margin: 20px 20px;align-items: center;display: flex;">
              <div id="" class="col-2 index-no-column">
                <p style="font-size: 1.2rem; margin:0;">{t['tabList'].index(i) + 1} </p>
              </div>
              <div class="col-10" style="">
                <i class="fa fa-pen editTabIcon" onclick=openModal("indextab{element_id}{i['TabID']}") style="right: -8px;top:-8px;"></i>
                <div id="indextab{element_id}{i['TabID']}" class="linkCard defaultTabTheme">
                  <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                    <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="tab{element_id}{i['TabID']}"> Tab{t['tabList'].index(i) + 1} </a>
                    <p class="tab-desc colored-text" data-name="indextab{element_id}{i['TabID']}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center">
                    <i class="" data-name="indextab{element_id}{i['TabID']}"></i>
                  </div>
                </div>
              </div>
            </div>
          """
                )

        elif t.get("dashboardIndexTemplate") == "Template2":

            # Template 2
            for i in t["tabList"]:
                html = (
                    html
                    + f"""
            <div class="row index-rows" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;border-bottom: 8px solid var(--primary-color);">
              <div id="" class="col-2 index-no-column index-temp2" style="background-color:var(--primary-color);border: 5px solid var(--primary-color);border-top-right-radius: 0px;border-bottom-right-radius: 0px;height: 6rem;color:var(--font-color);">
                <p style="font-size: 1.2rem; margin:0;">{t['tabList'].index(i) + 1} </p>
              </div>
              <div class="col-10" style="">
                <i class="fa fa-pen editTabIcon" onclick=openModal("indextab{element_id}{i['TabID']}") style="right: -8px;top:-8px;"></i>
                <div id="indextab{element_id}{i['TabID']}" class="linkCard" style="background-color:transparent !important">
                  <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                    <a class="tab-title" style="color:black !important;font-size: 1.2rem;" href="tab{element_id}{i['TabID']}"> Tab{t['tabList'].index(i) + 1} </a>
                    <p class="tab-desc" data-name="indextab{element_id}{i['TabID']}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 d-flex colored-icons TabIcons align-items-center justify-content-center">
                    <i class="" data-name="indextab{element_id}{i['TabID']}"></i>
                  </div>
                </div>
              </div>
            </div>
          """
                )

        elif t.get("dashboardIndexTemplate") == "Template3":

            # Template 3
            for i in t["tabList"]:
                html = (
                    html
                    + f"""
            <div class="row index-rows defaultTabTheme" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;border-radius: 0px 40px !important;">
              <div id="" class="col-2 d-flex align-items-center justify-content-center" style="background-color:white;border-radius: 0px 40px !important;height: 6rem;">
                <p style="font-size: 1.2rem; margin:0;">{t['tabList'].index(i) + 1} </p>
              </div>
              <div class="col-10" style="">
                <i class="fa fa-pen editTabIcon" onclick=openModal("indextab{element_id}{i['TabID']}")></i>
                <div id="indextab{element_id}{i['TabID']}" class="linkCard" style="border-top-right-radius: 40px;">
                  <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                    <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="tab{element_id}{i['TabID']}"> Tab{t['tabList'].index(i) + 1} </a>
                    <p class="tab-desc colored-text" data-name="indextab{element_id}{i['TabID']}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center">
                    <i class="" data-name="indextab{element_id}{i['TabID']}"></i>
                  </div>
                </div>
              </div>
            </div>
          """
                )

        elif t.get("dashboardIndexTemplate") == "Template4":

            # Template 4
            for i in t["tabList"]:
                html = (
                    html
                    + f"""
            <div class="row index-rows" style="margin: 40px 50px 40px 0px;align-items: center;display: flex;justify-content: center;">
              <div id="" class="col-1 dropIndex">
                <p style="font-size: 1.2rem; margin:0;">{t['tabList'].index(i) + 1} </p>
              </div>
              <div class="col-10" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius:10px;">
                <i class="fa fa-pen editTabIcon" onclick=openModal("indextab{element_id}{i['TabID']}") style="right: -8px;top:-8px;"></i>
                <div id="indextab{element_id}{i['TabID']}" class="linkCard">
                  <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                    <a class="tab-title" style="color:black !important;font-size: 1.2rem;" href="tab{element_id}{i['TabID']}"> Tab{t['tabList'].index(i) + 1} </a>
                    <p class="tab-desc" data-name="indextab{element_id}{i['TabID']}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 d-flex colored-icons TabIcons justify-content-center align-items-center">
                    <i class="" data-name="indextab{element_id}{i['TabID']}"></i>
                  </div>
                </div>
              </div>
            </div>
          """
                )

        elif t.get("dashboardIndexTemplate") == "Template5":

            # Template 5
            for i in t["tabList"]:
                html = (
                    html
                    + f"""
            <div class="row index-rows" style="margin: 40px 0px;align-items: center;display: flex;justify-content: center;">
              <div id="" class="col-2 boxIndex">
                <p style="font-size: 1.2rem; margin:0;">{t['tabList'].index(i) + 1} </p>
              </div>
              <div class="col-8 defaultTabTheme" style="border-radius:10px;">
                <i class="fa fa-pen editTabIcon" onclick=openModal("indextab{element_id}{i['TabID']}") style="right: -23px;top:-7px;"></i>
                <div id="indextab{element_id}{i['TabID']}" class="linkCard">
                  <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                    <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="tab{element_id}{i['TabID']}"> Tab{t['tabList'].index(i) + 1} </a>
                    <p class="tab-desc colored-text" data-name="indextab{element_id}{i['TabID']}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 d-flex tab-icons TabIcons justify-content-center align-items-center">
                    <i class="" data-name="indextab{element_id}{i['TabID']}"></i>
                  </div>
                </div>
              </div>
              <div class="col-1"><span class="arrow-tab"></span></div>
            </div>
          """
                )

        html = (
            html
            + f"""
          </div>
        </div>
      """
        )
    for i in t["tabList"]:
        html = (
            html
            + f"""  <div class="tab-pane fade" id="tab{element_id}{i['TabID']}" role="tabpanel" aria-labelledby="analysistab{element_id}{i['TabID']}">
                    <div class="d-flex justify-content-between" style="padding-top:1%">
                    <div class="card-tools tabCardTools row col-12" style="background:whitesmoke; padding-bottom: 2px;margin:auto">"""
        )
        function_check = button_styling(analysis_button_styling, "analysisaddcomment")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f""" <button type="button" value="AddComment" class="btn btn-primary commentButton btn-md {function_check['class']}" id="AddComment{element_id}{i['TabID']}"  data-toggle="tooltip" title="Add comment" style="{styling_to_put}border-radius:5px;margin-top:10px; margin-bottom:10px" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>&nbsp;"""
            )
        else:
            html = (
                html
                + f""" <button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment{element_id}{i['TabID']}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
            )

        function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f""" <button type="button" value="PDF" class=" btn btn-primary {function_check['class']}" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='analysisPDF{element_id}{i['TabID']}' style="{styling_to_put}border-radius:5px;margin-right:5px;margin-top:10px; margin-bottom:10px" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f""" <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='analysisPDF{element_id}{i['TabID']}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
            )

        function_check = button_styling(analysis_button_styling, "analysisslicer")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f""" <button type="button" value="slicerConfig" class="btn btn-primary {function_check['class']}" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='slicerConfig{element_id}{i['TabID']}' data-toggle="modal" data-target="#slicerConfigModal{element_id}{i['TabID']}" style="{styling_to_put}border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>
        """
            )
        else:
            html = (
                html
                + f""" <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='slicerConfig{element_id}{i['TabID']}' data-toggle="modal" data-target="#slicerConfigModal{element_id}{i['TabID']}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>
      """
            )
        if t.get("Layout") != "No layout":
            function_check = button_styling(analysis_button_styling, "analysisgridlines")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f""" <button type="button" value="gridLines" class="btn btn-primary {function_check['class']}" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='gridLines{element_id}{i['TabID']}' style="{styling_to_put}border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} >{function_check['iconAppend']} {function_check['changeText']}</button>
          """
                )
            else:
                html = (
                    html
                    + f""" <button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader{element_id}{i['TabID']}" id='gridLines{element_id}{i['TabID']}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>
          """
                )
        html = (
            html
            + f"""   </div>
                    </div>

                    <div class="col-lg-12 row chartDivSection" data-layout="{t.get('Layout')}" id="analysisrow{element_id}{i['TabID']}" ondblclick="resetCrossFilter.call(this)"></div></div>

                    """
            + """{%csrf_token%}"""
            + f"""
                    <div class="modal" id="slicerConfigModal{element_id}{i['TabID']}">
                      <div class="modal-dialog modal-md modal-dialog-centered">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h6 class="modal-title" style="text-align:center;">Configure slicer</h6>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                          </div>
                          <div class="modal-body">
                            <div class="card">
                              <div class="card-body">
                                <div class="card-tools text-primary" style="display:flex; flex-direction:row; align-items:center; justify-content:space-between">
                                  <label for="">Add slicer</label>
                                  <button type="button" class="btn addOptionBtn" onclick="addSlicers('{element_id}', '{i['TabID']}')"><i class="fas fa-plus text-primary" ></i></button>
                                </div>
                                <div id="slicerConfigCard{element_id}{i['TabID']}" style="max-height: 15.25rem; overflow-y: scroll; overflow-x: hidden;">
                                  <div class="card" data-slicer_class="selectSlicerConfig_{element_id}{i['TabID']}">
                                    <div class="card-body">
                                      <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                        <label for="analysisSlicerTable" class="justify-content-start" style="width:100%">Source table:
                                        </label>
                                        <select class="select2 form-control analysisSlicerTable" style="width:100%" name="analysisSlicerTable">
                                          <option value="">Select source table</option>"""
        )
        for j in t["tableList"]:
            html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""                 </select>
                                      </div>
                                      <div class="form-group" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                                        <label for="analysisSlicerParameter" class="justify-content-start" style="width:100%">Slicer parameter:
                                        </label>
                                        <select  class="select2 form-control analysisSlicerParameter" style="width:100%" name="analysisSlicerParameter">
                                          <option value="">Select slicer parameter</option>
                                        </select>
                                      </div>
                                      <div class = "form-group" style="margin-bottom:5px;text-align:left;">
                                        <label for="analysisSlicerBoolean">
                                        <input type="checkbox" class="analysisSlicerBoolean" name="analysisSlicerBoolean" value="True" style="margin-right:10px">
                                        Add default option for all values</label>
                                      </div>
                                      <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                        <label>
                                        <input class="mulcheckbox" type="checkbox" style="margin-right:10px">
                                        Multiselect Slicer</label>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="modal-footer">
                              <button type="button" id="saveTabSlicerConfig{element_id}{i['TabID']}" data-analysis_id="{element_id}" data-tab_id="{i['TabID']}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
                          </div>
                        </div>
                      </div>
                    </div>"""
        )
        script = script + scriptGenerator(
            "analysisSlicer", "analysisSlicer", element_id, request, t, i, tab_pane=tab_pane
        )

        if t.get("Layout") == "No layout":
            script = script + scriptGenerator(
                "analysisNoLayout", "analysisNoLayout", element_id, request, t, i, tab_pane=tab_pane
            )
        script = script + scriptGenerator(
            "analysisPdfComment", "analysisPdfComment", element_id, request, t, i, tab_pane=tab_pane
        )
    html = (
        html
        + """  </div>
            </div>
             <!-- Modal data-target="#PlotElements" -->"""
    )
    if t["PlotCharts"] == "Yes":
        html = (
            html
            + f"""  <div class="modal fade plotlyModal" id="PlotElements{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;padding-left: 11.8rem;">
              <h5 class="modal-title" id="exampleModalLongTitle{element_id}">Insert Chart</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body" style="max-height:45em;overflow-x:scroll;">
              <div class="row">
                <div class="form-group col-12">
                  <label class="acies_label col-md-12">Select Table:</label>
                  <select id="selectTable{element_id}" class="select2 form-control" name="selectTable">
                    <option value="" disabled selected>--------------------</option>"""
        )
        for j in t["tableList"]:
            html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""   </select>
                </div>
              </div>
              <!--<div id="plotTypes">-->"""
        )

        html = (
            html
            + f"""  <div class="row">
            <div class="col-4">
              <form id="plotlyForm{element_id}" method="post">"""
            + """
                {% csrf_token %}"""
            + f"""
                <div class="row">
                  <div class="form-group col-12" style="height:35em;overflow-x:scroll;">
                    <!--<label class="acies_label col-md-12">Plot Category:</label>-->
                    <table>
                      <tr>
                        <th>
                          <center>Chart Category</center>
                        </th>
                      </tr>
                      <tr>
                        <td><br></td>
                      </tr>
                      <tbody id="myTable{element_id}">"""
        )
        for butn in t["plotlybuttons"]:
            html = (
                html
                + f"""  <tr>
                          <td>
                            <button type="button" value="{butn['Category_name']}"
                              class=" btn mb-2 btn-primary plotlyCategory{element_id}" data-elementID="{element_id}"
                              style="height: 25px;width:7rem;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;"
                              data-toggle="modal">
                              <i class="{butn['icon']}"></i>&nbsp;&nbsp;{butn['Category_name']}
                            </button>
                            <br>
                          </td>
                        </tr>"""
            )
        html = (
            html
            + f"""  </tbody>
                    </table>
                  </div>
                </div>
              </form>
            </div>
            <div class="col-8" style="border-left:solid;">
              """
            + f"""
                <div class="row">
                  <div class="form-group col-12">
                    <label class="acies_label col-md-12">Select Chart Type:</label>
                    <select id="selectPlotly{element_id}" class="select2 plotlyType{element_id} form-control" data-elementID="{element_id}" name="sel">
                      <option value="" disabled selected>--------------------</option>
                    </select>
                  </div>
                </div>
        <div class="font-weight-light">
          <div class="card col-12" id="chartTypes{element_id}" style="display: none">

            <div class="card-body" style="display:block;">
              <div id="inputs{element_id}">
              <!-- XY-AXIS -->
              <div id="XY_AXIS{element_id}" style="display:none">
                <!--Scatter, Scatter with straight lines and markers,2D histogram contour-->
                <div class=" form-row">
                  <div class="col-12" id="XYlabel{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select X Axis:</label>
                      <select id="selectX{element_id}" class="select2 plotAjax form-control" name="sel"
                        required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="selectYX{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Y Axis:</label>
                      <select id="selectY{element_id}" class="select2 plotAjax form-control" name="sel"
                        required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="Ybarlabelscatter{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Filters:</label>
                      <select id="selectfilter6{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                        required multiple>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="XYTab{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Tab:</label>
                      <select id="selectXYTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              <!-- XY-AXIS END -->
                    <!-- XYZ-AXIS -->
                    <div id="XYZ_AXIS{element_id}" style="display:none">
                    <!--3D Scatter Plots,3D Mesh Plots-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_X1{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="select_Y11{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Z Axis:</label>
                          <select id="select_Z1{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_3d{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter14{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYZTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYZTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYZ-AXIS END -->
                    <!-- XYOP-AXIS -->
                    <div id="XYOP_AXIS{element_id}" style="display:none">
                    <!--Horizontal Dot Plot ,Vertical Box,Horizontal Box,Violin Plot,Horizontal Violin Plot,-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectXaxis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="selectYaxis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter7{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYOP-AXIS END -->
                    <!-- Value-AXIS -->
                    <div id="Value_AXIS{element_id}" style="display:none">
                    <!--Histogram,Cumulative Histogram,Horizontal Histogram-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Value:</label>
                          <select id="select_histovalue{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YbarlabelHisto{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter2{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                        <div class="col-12" id="ValueTab{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Tab:</label>
                            <select id="selectValueTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                      </div>
                    </div>
                  </div>
                  <!-- Value-AXIS END -->
                    <!-- ValueOp-AXIS -->
                    <div id="ValueOp_AXIS{element_id}" style="display:none">
                    <!--Bubble Map,Chloropath Map-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Value:</label>
                          <select id="select_valueop{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operation:</label>
                          <select id="select_operation{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_map{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter13{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="ValueOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectValueOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- ValueOp-AXIS END -->
                    <!-- XX-AXIS -->
                    <div id="XX_AXIS{element_id}" style="display:none">
                      <!--Stacked Histogram-->
                      <div class=" form-row">
                        <div class="col-12" id="XYlabel{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select X Axis:</label>
                            <select id="select_xxaxis{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="XYlabel{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select X1 Axis:</label>
                            <select id="select_xx1axis{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="YbarlabelStackHisto{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Filters:</label>
                            <select id="selectfilter3{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                              required multiple>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="XXTab{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Tab:</label>
                            <select id="selectXXTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>

                      </div>
                    </div>
                    <!-- XX-AXIS END -->
                    <!-- XYYOP-AXIS -->
                    <div id="XYYOP_AXIS{element_id}" style="display:none">
                    <!--Vertical Grouped Box,Grouped Violin Plot-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectX_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="selectY_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1 Axis:</label>
                          <select id="selectY1_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_grouped{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter10{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YYOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectYYOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYYOP-AXIS END -->
                  <div id="XYYHOP_AXIS{element_id}" style="display:none">
                    <!--Horizontal Grouped Box,Horizontal Grouped Violin Plot-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectXH_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X1 Axis:</label>
                          <select id="selectX1H_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="selectYH_axis{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_grpoud{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter12{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YYOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXXHOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                    <!-- XYfloatOP-AXIS -->
                    <div id="XYfloatOP_AXIS{element_id}" style="display:none">
                    <!--Vertical Bar,Line,Stepped Line Graph,Vertical Area Chart,Vertical Waterfall-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectXH{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="selectYfloat{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="selectoperations{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYOPETab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYOPETab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYfloatOP-AXIS END -->
                  <!-- PIVOT -->
                    <div id="Pivot_AXIS{element_id}" style="display:none">
                      <!--Pivot charts-->
                      <div class=" form-row">
                        <div class="col-12" id="pivot_row_label{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Columns:</label>
                            <select id="select_pivot_rows{element_id}" class="select2 plotAjax form-control" name="sel"
                              required multiple>
                              <option value="" disabled>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="pivot_op_label{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Operations:</label>
                            <select id="select_pivot_operations{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="pivot_filter_label{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Filters:</label>
                            <select id="select_pivot_filter{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                              required multiple>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="Pivot_Tab{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Tab:</label>
                            <select id="select_pivot_Tab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    </div>
                  <!-- PIVOT -->
                    <!-- MultipleLine-AXIS -->
                    <div id="MultipleLine_AXIS{element_id}" style="display:none">
                    <!--MultipleLine-->
                    <div class=" form-row">
                      <div class="col-12" id="Multiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectX_multiple{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="multiple_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select N:</label>
                            <input id="select_multiple_y{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="YHbar_multiple_label{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1 Axis:</label>
                          <select id="selectY1_multiplefloat{element_id}" class="multiple_line_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_line_chart_yaxis{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="Multiple_operations{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_multiple_operations{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybar_multiple_label{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter23{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYOPETab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYOPE_multipleTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- MultipleLine-AXIS END -->
                    <!-- XfloatYOP-AXIS -->
                    <div id="XfloatYOP_AXIS{element_id}" style="display:none">
                    <!--Horizontal Bar,Horizontal Area,Horizontal Waterfall,Funnel Chart,Funnel Area Chart-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="selectXfloat{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="selectYH{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="opt{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter1{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XFloatTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXFloatTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XfloatYOP-AXIS END -->
                  <!-- XYfloatYfloatOP-AXIS -->
                  <div id="XYfloatYfloatOP_AXIS{element_id}" style="display:none">
                    <!--Vertical Line Stacked,Vertical Area Stacked,Vertical Waterfall Grouped-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_X{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="select_Y{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1 Axis:</label>
                          <select id="select_Y1{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_OP{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""  <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_stacked{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter8{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYY1OPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYY1OPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYfloatYfloatOP-AXIS END-->
                  <!-- XYMultipleOP-AXIS -->
                  <div id="XYMultipleOP_AXIS{element_id}" style="display:none">
                    <!--Vertical Bar Stacked,Vertical Bar Grouped-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_Xm{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="multiple_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select number of Y Axes:</label>
                            <input id="select_YMultiple_no{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="YHbarMultiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1:</label>
                          <select id="select_Y1Multiple{element_id}" class="YMultiple_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_yaxis{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_YMultipleOP{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""  <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_stacked{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter26{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYY1OPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYMultipleOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYMultipleOP-AXIS -->
                  <div id="XYfloatYComboOP_AXIS{element_id}" style="display:none">
                    <!--Vertical Bar Grouped Combo with Line and Vertical Bar Stacked Combo with Line-->
                    <div class=" form-row">
                      <div class="col-12" id="XYCombolabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_XmultipleCombo{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="multiple_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select number of Y Axes:</label>
                            <input id="select_YmultipleCombo_no{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="YHbarComboMultiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1:</label>
                          <select id="select_Y1multipleCombo{element_id}" class="YmultipleCombo_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_yaxis_combo{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="YHbarCombolabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Line:</label>
                          <select id="select_LineCombo{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YbarlabelCombo{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operation for Y Axis:</label>
                          <select id="select_OPCombo{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="LinebarlabelCombo{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operation for Line:</label>
                          <select id="select_OPCombo_2{element_id}" class="select2 plotAjax form-control" name="sel">
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Combo_label{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter17{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel" required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYY1OPComboTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYY1OPComboTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XYfloatYComboOP_AXIS END -->
                    <!-- MultipleLine_Combo_AXIS  -->
                  <div id="MultipleLine_Combo_AXIS{element_id}" style="display:none">
                    <!--Bar stacked with MultipleLine-->
                    <div class=" form-row">
                      <div class="col-12" id="MultipleLinelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_XmultipleLineCombo{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="multiple_line_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select number of Y Axes:</label>
                            <input id="select_YmultipleLineCombo_no{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="YHbarComboMultipleLinelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y1:</label>
                          <select id="select_Y1multipleLineCombo{element_id}" class="YmultipleLineCombo_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_yaxis_line_combo{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="multiple_combo_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select number of Lines:</label>
                            <input id="select_multiple_combo_line{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="YHbarComboMultiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Line 1:</label>
                          <select id="select_L1multipleCombo{element_id}" class="combo_multiple_line_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_line_combo_chart_line{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="YHbarComboMultiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations for Y Axis:</label>
                          <select id="select_multipleCombo{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f"""   <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Multiple_combo_operations{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations for Line:</label>
                          <select id="select_multipleCombo_line{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybar_multiple_combo{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter25{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XYOPETab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXYOPE_multipleComboTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- MultipleLine_Combo_AXIS  end-->

                  <!-- XfloatXfloatYOP-AXIS -->
                  <div id="XfloatXfloatYOP_AXIS{element_id}" style="display:none">
                    <!--Horizontal Area Stacked,Horizontal Waterfall Grouped,Funnel Stacked-->
                    <div class=" form-row">
                      <div class="col-12" id="XYlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X Axis:</label>
                          <select id="select_xf{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X1 Axis:</label>
                          <select id="select_xf1{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="select_yn{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f""" <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_xxy{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_grouped{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter11{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XX1YOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXX1OPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XfloatXfloatYOP-AXIS END -->
                  <!-- XMultipleYOP-AXIS -->
                  <div id="XMultipleYOP_AXIS{element_id}" style="display:none">
                    <!--Horizontal Bar Stacked, Horizontal Bar Grouped-->
                    <div class=" form-row">
                      <div class="col-12" id="multiple_x_value{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select number of X Axes:</label>
                            <input id="select_XMultiple_no{element_id}" type="number" value="1" min="1" style="width:19em;height:2.2em;">
                          </div>
                      </div>
                      <div class="col-12" id="XHbarMultiplelabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select X1:</label>
                          <select id="select_X1Multiple{element_id}" class="XMultiple_dropbox select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12 multiple_xaxis{element_id}" style="padding:0;margin:0;">
                      </div>
                      <div class="col-12" id="YHbarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Y Axis:</label>
                          <select id="select_Ym{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>"""
        )
        if t.get("xPieLabels"):
            for j in t["xPieLabels"]:
                html = html + f""" <option value="{j}">{j}</option>"""
        html = (
            html
            + f"""  </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabel{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Operations:</label>
                          <select id="select_XMultipleOP{element_id}" class="select2 plotAjax form-control" name="sel"
                            required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="Ybarlabelvertical_grouped{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Filters:</label>
                          <select id="selectfilter29{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                            required multiple>
                          </select>
                        </div>
                      </div>
                      <div class="col-12" id="XX1YOPTab{element_id}">
                        <div class="form-group">
                          <label class="acies_label col-md-12">Select Tab:</label>
                          <select id="selectXMultipleYOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                            <option value="" disabled selected>--------------------</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- XMultipleYOP-AXIS END -->
                    <!-- Image-AXIS -->
                    <div id="Image_{element_id}" style="display:none">
                      <!--Image-->
                      <div class=" form-row">
                        <div class="col-12" id="Imagelabel{element_id}">
                          <form method="post" class="uploadimage" enctype="multipart/form-data">
                            <div class="custom-file" style="margin-bottom:1em">
                              <input type="file" class="custom-file-input" class="upload_image_class" id="image_{element_id}" style="border-bottom-color:white;" name="upload_image" accept="image/*">
                              <label class="custom-file-label">Choose file</label>
                            </div>
                          </form>


                        </div>
                        <br>

                        <div class="col-12" id="ImageTab{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Tab:</label>
                            <select id="image_Tab{element_id}" class="select2 plotAjax tabTypes" name="sel" required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    </div>
                    <!-- Image END -->

                    <!-- CVfloatO-AXIS -->
                    <div id="CVfloatO_AXIS{element_id}" style="display:none">
                      <!--Pie chart,Donut Chart,Treemap-->
                      <div class=" form-row">
                        <div class="col-12" id="XYlabel{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Category:</label>
                            <select id="select_category{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="YHbarlabel{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Value:</label>
                            <select id="select_value{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="Ybarlabel{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Operations:</label>
                            <select id="select_options{element_id}" class="select2 plotAjax form-control" name="sel"
                              required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="Ybarlabelpiechart{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Filters:</label>
                            <select id="selectfilter5{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                              required multiple>
                            </select>
                          </div>
                        </div>
                        <div class="col-12" id="CVOPTab{element_id}">
                          <div class="form-group">
                            <label class="acies_label col-md-12">Select Tab:</label>
                            <select id="selectCVOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                              <option value="" disabled selected>--------------------</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    </div>
                    <!-- CVfloatO-AXIS END -->
                    <!-- Aggregation card  min max -->
                    <div id="aggcard_{element_id}" style="display:none">
                          <!--Aggregation(max,min)-->
                          <div class=" form-row">

                            <div class="col-12" id="  Aggbarlabel_min_max{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Value:</label>
                                <select id="select_agg_val{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                                <input type="checkbox" id="agg_header{element_id}" class="checkboxinput custom-control-input">
                                <label for="agg_header{element_id}" class="custom-control-label">Title</label>
                            </div>
                            <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value{element_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                            <div class="col-12" id="Agglabel_val{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter21{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggIcon{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Choose icon image:</label>
                                <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon{element_id}">
                                <option value="" disabled selected>--------------------</option>
                                <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                                <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                                <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                                <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                                <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                                <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                                <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                                <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                                <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                                <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                                <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                                <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                                <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                                <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                                <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                                <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                                <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                                <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                                <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                                <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                                <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                                <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                                <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                                <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                                <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                                <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                                <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                                <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                                <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                                <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                                <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                                <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                                <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                                <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                                <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                                <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                                <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                                <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                                <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                                <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                                <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                                <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                                <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                                <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                                <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                                <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                                <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                                <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggTab_{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectAggTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- Aggregation card min max  end -->
                      <!-- Aggregation card  top bottom -->
                    <div id="aggcard_n{element_id}" style="display:none">
                          <!--Aggregation(top,bottom)-->
                          <div class=" form-row">
                            <div class="col-12" id="  Aggbarlabel_top_bottom_value{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select N:</label>
                                <input id="computed_number{element_id}" type="number" value="0" min="0" style="width:19em;height:2.2em;">
                              </div>
                            </div>
                            <div class="col-12" id="  Aggbarlabel_top_bottom{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Value:</label>
                                <select id="selectval_n{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                                <input type="checkbox" id="agg_header_sum{element_id}" class="checkboxinput custom-control-input">
                                <label for="agg_header_sum{element_id}" class="custom-control-label">Title</label>
                            </div>
                            <br>
                            <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_sum{element_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                            <div class="col-12" id="  Aggbarlabel_operation{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Operation:</label>
                                <select id="selectop_n{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                  <option value="Sum">Sum</option>
                                  <option value="Maximum">Maximum</option>
                                  <option value="Minimum">Minimum</option>
                                  <option value="Count">Count</option>
                                  <option value="Count Distinct">Count Distinct</option>
                                  <option value="Average">Average</option>
                                  <option value="Median">Median</option>
                                  <option value="Variance">Variance</option>
                                  <option value="Skewness">Skewness</option>
                                  <option value="Kurtosis">Kurtosis</option>
                                  <option value="Standard Deviation">Standard Deviation</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" style="padding-bottom:1em;" id="Aggbarlabel_distinct{element_id}">
                              <div id="div_id_active" class="custom-control custom-checkbox">
                                <input type="checkbox" id="agg_distinct{element_id}" class="checkboxinput custom-control-input">
                                <label for="agg_distinct{element_id}" class="custom-control-label">Distinct</label>
                              </div>
                            </div>
                            <div class="col-12" id="Agglabel_n{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter22{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggIcon_n{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Choose icon image:</label>
                                <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon_n{element_id}" style="font-size:1.1rem">
                                <option value="" disabled selected>--------------------</option>
                                <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                                <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                                <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                                <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                                <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                                <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                                <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                                <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                                <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                                <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                                <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                                <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                                <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                                <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                                <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                                <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                                <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                                <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                                <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                                <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                                <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                                <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                                <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                                <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                                <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                                <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                                <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                                <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                                <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                                <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                                <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                                <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                                <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                                <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                                <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                                <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                                <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                                <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                                <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                                <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                                <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                                <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                                <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                                <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                                <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                                <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                                <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                                <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggTab_n{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectAggTabn{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- Aggregation card top bottom  end -->
                    <!-- Aggregation card count count distinct -->
                    <div id="agg_card_AXIS{element_id}" style="display:none">
                          <!--Aggregation(Sum,max,min,average,count,count distinct,skewness,kurtosis)-->
                          <div class=" form-row">

                            <div class="col-12" id="  Aggbarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Value:</label>
                                <select id="select_allval{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                                <input type="checkbox" id="agg_header_count{element_id}" class="checkboxinput custom-control-input">
                                <label for="agg_header_count{element_id}" class="custom-control-label">Title</label>
                            </div>
                            <br>
                            <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_count{element_id}" style="display:none;margin-left:0.5em;margin-bottom:1em;">
                            <div class="col-12" id="Agglabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter20{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggIcon_axis{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Choose icon image:</label>
                                <select class="select2 plotAjax form-control" name="sel"id="selectAggIcon_axis{element_id}" style="font-size:1.1rem">
                                <option value="" disabled selected>--------------------</option>
                                <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                                <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                                <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                                <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                                <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                                <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                                <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                                <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                                <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                                <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                                <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                                <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                                <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                                <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                                <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                                <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                                <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                                <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                                <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                                <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                                <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                                <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                                <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                                <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                                <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                                <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                                <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                                <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                                <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                                <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                                <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                                <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                                <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                                <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                                <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                                <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                                <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                                <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                                <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                                <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                                <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                                <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                                <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                                <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                                <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                                <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                                <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                                <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="CSV_AggTab{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectAggCSVTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- Aggregation card count count distinct end -->
                        <!-- CSVfloat-AXIS -->
                        <div id="CSVfloat_AXIS{element_id}" style="display:none">
                          <!--Aggregation(Sum,max,min,average,skewness,kurtosis)-->
                          <div class=" form-row">

                            <div class="col-12" id="Ybarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Value:</label>
                                <select id="selectval{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div id="div_id_header" class="custom-control custom-checkbox" style="padding-bottom:1em;padding-left:2.5em;">
                                <input type="checkbox" id="agg_header_max{element_id}" class="checkboxinput custom-control-input">
                                <label for="agg_header_max{element_id}" class="custom-control-label">Title</label>
                            </div>
                            <br>
                            <input type="text" placeholder="Title" class="textInput textinput form-control" id="agg_header_value_max{element_id}" style="display:none;margin-left:0.5em;margin-bottom:1em">
                            <div class="col-12" id="Agglabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter16{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="AggIcon_float{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Choose icon image:</label>
                                <select class="select2 plotAjax form-control" name="sel" id="selectAggIcon_float{element_id}" style="font-size:1.1rem">
                                <option value="" disabled selected>--------------------</option>
                                <option value="{{% static 'images/Base_theme/barchart.png' %}}" selected>Bar Chart</option>
                                <option value="{{% static 'images/Base_theme/piechart.png' %}}">Pie Chart</option>
                                <option value="{{% static 'images/Base_theme/linechart.png' %}}">Line Chart</option>
                                <option value="{{% static 'images/Base_theme/histogram.png' %}}">Histogram</option>
                                <option value="{{% static 'images/Base_theme/doughnutchart.png' %}}">Doughnut Chart</option>
                                <option value="{{% static 'images/Base_theme/scatterplot.png' %}}">Scatter Plot</option>
                                <option value="{{% static 'images/Base_theme/radarplot.png' %}}">Radar Plot</option>
                                <option value="{{% static 'images/Base_theme/ganttchart.png' %}}">Gantt Chart Plot</option>
                                <option value="{{% static 'images/Base_theme/flowchart.png' %}}">Flow Chart</option>
                                <option value="{{% static 'images/Base_theme/combochart.png' %}}">Combo Chart</option>
                                <option value="{{% static 'images/Base_theme/hierarchy.png' %}}">Hierarchy</option>
                                <option value="{{% static 'images/Base_theme/normaldistribution.png' %}}">Normal Distribution</option>
                                <option value="{{% static 'images/Base_theme/sum.png' %}}">Sum</option>
                                <option value="{{% static 'images/Base_theme/average.png' %}}">Average</option>
                                <option value="{{% static 'images/Base_theme/counter.png' %}}">Counter</option>
                                <option value="{{% static 'images/Base_theme/alphabeticalsorting.png' %}}">Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversealphabeticalsorting.png' %}}">Reverse Alphabetical Sorting</option>
                                <option value="{{% static 'images/Base_theme/numericalsorting.png' %}}">Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/reversednumericalsorting.png' %}}">Reverse Numerical Sorting</option>
                                <option value="{{% static 'images/Base_theme/increasing.png' %}}">Increasing</option>
                                <option value="{{% static 'images/Base_theme/decreasing.png' %}}">Decreasing</option>
                                <option value="{{% static 'images/Base_theme/updownarrow.png' %}}">Up and Down Arrow</option>
                                <option value="{{% static 'images/Base_theme/venndiagram.png' %}}">Venn Diagram</option>
                                <option value="{{% static 'images/Base_theme/schedule.png' %}}">Schedule</option>
                                <option value="{{% static 'images/Base_theme/unavailable.png' %}}">Unavailable</option>
                                <option value="{{% static 'images/Base_theme/clock.png' %}}">Waitng</option>
                                <option value="{{% static 'images/Base_theme/approved_2.png' %}}">Approved</option>
                                <option value="{{% static 'images/Base_theme/disapproved.png' %}}">Disapproved</option>
                                <option value="{{% static 'images/Base_theme/expired.png' %}}">Expired</option>
                                <option value="{{% static 'images/Base_theme/highpriority.png' %}}">High Priority</option>
                                <option value="{{% static 'images/Base_theme/notification.png' %}}">Notification</option>
                                <option value="{{% static 'images/Base_theme/idea.png' %}}">Idea</option>
                                <option value="{{% static 'images/Base_theme/filter.png' %}}">Filter</option>
                                <option value="{{% static 'images/Base_theme/privacy.png' %}}">Privacy</option>
                                <option value="{{% static 'images/Base_theme/questionmark.png' %}}">Question Mark</option>
                                <option value="{{% static 'images/Base_theme/conflict.png' %}}">Conflict</option>
                                <option value="{{% static 'images/Base_theme/feedback.png' %}}">Feedback</option>
                                <option value="{{% static 'images/Base_theme/settings.png' %}}">Setting</option>
                                <option value="{{% static 'images/Base_theme/menu.png' %}}">Menu</option>
                                <option value="{{% static 'images/Base_theme/bookmark.png' %}}">Bookmark</option>
                                <option value="{{% static 'images/Base_theme/synchronize.png' %}}">Synchronize</option>
                                <option value="{{% static 'images/Base_theme/share.png' %}}">Share</option>
                                <option value="{{% static 'images/Base_theme/search.png' %}}">Search</option>
                                <option value="{{% static 'images/Base_theme/users.png' %}}">Users</option>
                                <option value="{{% static 'images/Base_theme/process.png' %}}">Process Flow</option>
                                <option value="{{% static 'images/Base_theme/slider.png' %}}">Slider</option>
                                <option value="{{% static 'images/Base_theme/document.png' %}}">Document</option>
                                <option value="{{% static 'images/Base_theme/file.png' %}}">File</option>
                                <option value="{{% static 'images/Base_theme/folder.png' %}}">Folder</option>
                                <option value="{{% static 'images/Base_theme/broadcasting.png' %}}">Broadcasting</option>
                                <option value="{{% static 'images/Base_theme/blockchain.png' %}}">Blockchain</option>
                                <option value="{{% static 'images/Base_theme/datasheet.png' %}}">Datasheet</option>

                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="CSVTab{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectCSVTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- CSVfloat-AXIS END -->
                        <!-- CSVfloatO-AXIS -->
                        <div id="CSVfloatO_AXIS{element_id}" style="display:none">
                          <!--Sunburst Chart,Angular Guage,Bullet Guage-->
                          <div class=" form-row">
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Category:</label>
                                <select id="select_cat{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="YHbarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Sub-Category:</label>
                                <select id="select_subcat{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="Ybarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Value:</label>
                                <select id="select_val{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="Ybarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Operation:</label>
                                <select id="select_op{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="Ybarlabelsunburst{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter4{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-6" id="threshold_{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Threshold Value:</label>
                                <input class="plotAjax form-control" type="number" id="threshold{element_id}">
                              </div>
                            </div>
                            <div class="col-6" id="threshold_color{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Threshold Color:</label>
                                <input class="plotAjax form-control" type="color" id="thresholdColor{element_id}">
                              </div>
                            </div>
                            <div class="col-12" id="delta_{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Delta:</label>
                                <input class="plotAjax form-control" type="number" id="delta{element_id}">
                              </div>
                            </div>
                            <div class="col-6" id="threshold_color{element_id}">
                              <button class="btn btn-primary btn-md rounded px-2" id="condition{element_id}" data-modal_id="conditionModal{element_id}" onclick="gaugeModal.call(this)">Conditional formatting</button>
                            </div>
                            <div class="col-6" id="threshold_color{element_id}">
                              <button class="btn btn-primary btn-md rounded px-2" id="conditionRange{element_id}" data-modal_id="conditionModalRange{element_id}" onclick="gaugeModalRange.call(this)">Range based formatting</button>
                            </div>
                            <div class="col-12" id="CSVOPTab{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectCSVOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- CLfloatO-AXIS END -->
                        <div id="CLfloatO_AXIS{element_id}" style="display:none">
                          <!--Nested Table-->
                          <div class=" form-row">
                            <div class="card col-12">
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Level 1:</label>
                                <select id="select_categories_level1{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Level 2:</label>
                                <select id="select_categories_level2{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Level 3:</label>
                                <select id="select_categories_level3{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Level 4:</label>
                                <select id="select_categories_level4{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="XYlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Level 5:</label>
                                <select id="select_categories_level5{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                            <div class="col-12" id="YHbarlabel{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Columns:</label>
                                <select id="select_columns{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class='fieldColOrder card col-12' id="YHbarlabel{element_id}">
                              <div class='card-header form-group' style="color:var(--primary-color); font-weight: 700;">Column re-ordering
                                <input type="checkbox" id="nestedtablecol_reorder" class="float-right checkboxinput custom-checkbox" stype ="margin-top:7x;">
                              </div>
                              <div id="nestedTableColumnReorder" class = "form-group" style ="display:none">
                                <ul class="sortable-order  nestedtable_columns_re-order plotAjax pt-1 col" style="list-style: none; max-height:150px;overflow:auto;margin-bottom:-10px;">
                                </ul>
                              </div>
                          </div>
                            <div class="col-12" id="OPerationlabel{element_id}">

                            </div>
                            <div class="col-12" id="nested_table{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter15{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="table{element_id}">
                              <div class="form-group">
                              <button class="btn btn-primary" id="nested_conditional_table{element_id}" data-toggle="modal" data-target="#nestedconditionalModal{element_id}">Set Conditional-formatting</button>
                              </div>
                            </div>
                            <div class="col-12" id="CVOPTab{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="selectCLOPTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- CLfloatO-AXIS END -->
                        <div id="Table_AXIS{element_id}" style="display:none">
                          <!--Table-->
                        <div class=" form-row">
                            <div class="col-12" id="Table_label{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Columns:</label>
                                <select id="select_table_columns{element_id}" class="select2 plotAjax form-control" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="table{element_id}">
                              <div class="custom-control custom-checkbox">
                                <input type="checkbox" checked="checked" name="defaultValueColorConfig" id="fk_value{element_id}" class="checkboxinput custom-control-input">
                                <label for="fk_value{element_id}" class="custom-control-label">
                                Show ForeignKey Field as value
                                </label>
                            </div>
                          </div><br><br>

                          <div class='fieldColOrder card col-12' id="Table_label{element_id}">
                              <div class='card-header form-group' style="color:var(--primary-color); font-weight: 700;">Column re-ordering
                                <input type="checkbox" id="tablecol_reorder" class="float-right checkboxinput custom-checkbox" stype ="margin-top:7x;">
                              </div>
                              <div id="tableColumnReorder" class = "form-group" style ="display:none">
                                <ul class="sortable-order  table_columns_re-order plotAjax pt-1 col" style="list-style: none; max-height:150px;overflow:auto;margin-bottom:-10px;">
                                </ul>
                              </div>
                          </div>

                            <div class="col-12" id="table{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Filters:</label>
                                <select id="selectfilter24{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                                  required multiple>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="Table_Tab{element_id}">
                              <div class="form-group">
                                <label class="acies_label col-md-12">Select Tab:</label>
                                <select id="table_Tab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                                  <option value="" disabled selected>--------------------</option>
                                </select>
                              </div>
                            </div>
                            <div class="col-12" id="table{element_id}">
                              <div class="form-group">
                              <button class="btn btn-primary" id="conditional_table{element_id}" data-toggle="modal" data-target="#conditionalModal{element_id}">Set Conditional-formatting</button>
                              </div>
                            </div>
                            <div class="col-12" id="tableColumnAlignment{element_id}">
                              <div class="form-group">
                              <button class="btn btn-primary columnAlignmentButtonTable" id="columnAlignmentButtonTable{element_id}" data-toggle="modal" data-target="#columnAlignmentButtonModal{element_id}">Configure Column Alignment</button>
                              </div>
                            </div>
                        </div>
                        </div>
                        <!-- Table END -->
                        <!-- Bubble-AXIS -->
              <div id="BubbleXYZ_AXIS{element_id}" style="display:none">
                <!--Bubble graph-->
                <div class=" form-row">
                  <div class="col-12" id="BubbleXlabel{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select X Axis:</label>
                      <select id="selectBubble_X{element_id}" class="select2 plotAjax form-control" name="sel"
                        required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="selectBubble_Ylabel{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Y Axis:</label>
                      <select id="selectBubble_Y{element_id}" class="select2 plotAjax form-control" name="sel"
                        required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="selectBubble_Zlabel{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Z Axis:</label>
                      <select id="selectBubble_Z{element_id}" class="select2 plotAjax form-control" name="sel"
                        required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="Bubblelabels{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Filters:</label>
                      <select id="selectfilter18{element_id}" class="select2 plotAjax form-control filter_condition{element_id}" name="sel"
                        required multiple>
                      </select>
                    </div>
                  </div>
                  <div class="col-12" id="XYTablabel{element_id}">
                    <div class="form-group">
                      <label class="acies_label col-md-12">Select Tab:</label>
                      <select id="selectBubbleXYTab{element_id}" class="select2 plotAjax form-control tabTypes" name="sel" required>
                        <option value="" disabled selected>--------------------</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>

              <!-- BubbleMap ended -->
                          <div class="card filter_plot_card">
                            <div class="card-header filter_card_header{element_id}" data-elementid = "{element_id}"s>
                              <a class="collapsed card-link text-primary" data-toggle="collapse" href="#collapseTwo">
                              Configure Filter
                            </a>
                            </div>
                            <div id="collapseTwo" class="collapse">
                              <div class="card-body filter_card_body{element_id}">

                              </div>
                            </div>
                          </div>

                        <div class="row buttonalign" id="plotlyButtonDiv{element_id}" style="display:none">
                          <button id="plotlyButton{element_id}" type="button" name="plotForm" value="f1"
                            class=" btn btn-primary" style="    height: 27px;
  width: 80px;
  border-radius: 5px;
  color: var(--primary-color);
  border-color: none;
  color: white;
  padding-left: 9px;
  padding-top: 2px;
">
                            <i class="fa fa-area-chart"></i>&nbsp;Plot
                          </button>
                        </div>
        </div>
        </div>
      </div>
    </div>


            </div>
          </div>"""
        )

        html = (
            html
            + f"""    </div>

          </div>

        </div>
      </div>"""
        )
    html = (
        html
        + f"""  <!-- end modal-->
          <!-- Conditional modal -->
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="conditionModal{element_id}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Conditional Formatting</span>
          <button type="button" class="close" data-modal_id="conditionModal{element_id}" data-dismiss="modal" onclick="closeGaugeModal.call(this)" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body conditional_data_body_edit text-primary"  style="max-height:26rem;">
              <i class="fa fa-plus-square fa-2x" data-toggle="tooltip" data-modal_id="conditionModal{element_id}" title="" onclick="addIndCondition.call(this)" style="margin-left:97%;width:100%;cursor: pointer;" data-tooltip="Add condition"></i>
          </div>
          <div class="modal-footer">
              <button type="button" id="conditionModal{element_id}SaveButton" class="btn btn-primary btn-md rounded px-2">Apply</button>
          </div>
          </div>
          </div>
          <div class="modal-dialog modal-lg modalgraphs modal-full-height modal-right" id="conditionModalRange{element_id}" role="document" style="display:none;float:right;  position: absolute;
          right: 0 ;top : 10px;z-index: 1050">
          <div class="modal-content" style="width:42rem">
          <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
          <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Range Based Formatting</span>
          <button type="button" class="close" data-modal_id="conditionModalRange{element_id}" data-dismiss="modal" onclick="closeGaugeModal.call(this)" aria-label="Close">
          <span aria-hidden="true">&times;</span>
          </button>
          </div>
          <div class="modal-body conditional_data_body_edit"  style="max-height:26rem;">
              <i class="fa fa-plus-square fa-2x text-primary" data-toggle="tooltip" data-modal_id="conditionModalRange{element_id}" title="" onclick="addIndConditionRange.call(this)" style="margin-left:97%;width:100%;cursor: pointer;" data-tooltip="Add condition"></i>
          </div>
          <div class="modal-footer">
              <button type="button" id="conditionModalRange{element_id}SaveButton" class="btn btn-primary btn-md rounded px-2">Apply</button>
          </div>
          </div>
          </div>
          <div id="conditionalModal{element_id}" class="modal fade" role="dialog" data-focus="false">
                  <div class="modal-dialog modal-lg">

                    <!-- Modal content-->
                    <div class="modal-content">
                      <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                        <h6 class="modal-title" style="margin-left:auto;">Configure Conditional Formatting</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body conditional_data_body" style="max-height: 30em;overflow-y: scroll;">
                        <div class="input_columns_value_dict" style="display:none"></div>
                        <div class="table_type" style="display:none"></div>
                        <div class="conditional_body" style="width: 100%; display:flex">
                          <div class="col-3">
                            <p style="font-weight: bold;">Select column:</p>
                            <select class="select2 form-control conditional_column_name" id="conditional_column_name{element_id}">
                              <option value="" selected disabled>------------</option>
                            </select>
                          </div>
                          <div class="col-3">
                            <p style="font-weight: bold;">Select condition:</p>
                            <select class="select2 form-control conditional_condition">
                              <option value="" disabled selected>------------------</option>
                              <option value="Greater then">Greater than</option>
                              <option value="Smaller then">Smaller than</option>
                              <option value="Equal to">Equal to</option>
                              <option value="In">In</option>
                            </select>
                          </div>
                          <div class="col-3 conditional_input_value">
                            <p style="font-weight: bold;">Select value:</p>
                            <div class="conditional_format_value_input">
                            <select class="select2 form-control" required>
                            </select>
                            </div>
                          </div>
                          <div class="col-2">
                            <p style="font-weight: bold;">Select field color:</p>
                            <input type="color" class="form-control conditional_color_input" data-css="background-color" value="#ffffff" >
                          </div>
                          <div class="col-1">
                            <i class="fas fa-plus add_conditional_parameter" data-toggle="tooltip" title="Add condition" style="cursor:pointer;padding-top:3.4em;"></i> </i>
                          </div>

                        </div>

                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-md rounded px-2" data-dismiss="modal">Close</button>
                      </div>
                    </div>

                  </div>
                </div>

                <div id="columnAlignmentButtonModal{element_id}" class="modal fade columnAlignmentButtonModal" role="dialog" data-focus="false">
                  <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                      <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                        <h6 class="modal-title" style="margin-left:auto;">Configure Column Alignment</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body" style="overflow: scroll;">
                        <div class="accordion" id="accordionColumnAlignmentCreateView">
                          <div class="card">
                            <div class="card-body">
                              <div class="row">
                                <div class="col-6">
                                  <label>Global Header Alignment:</label>
                                  <select class="select2 form-control selectGlobalHeaderColumnAlignment" id="selectGlobalHeaderColumnAlignment${element_id}">
                                    <option value="left">Left</option>
                                    <option value="center" selected>Center</option>
                                    <option value="right">Right</option>
                                  </select>
                                </div>
                                <div class="col-6">
                                  <label>Global Content Alignment:</label>
                                  <select class="select2 form-control selectGlobalContentColumnAlignment" id="selectGlobalContentColumnAlignment${element_id}">
                                    <option value="left">Left</option>
                                    <option value="center" selected>Center</option>
                                    <option value="right">Right</option>
                                  </select>
                                </div>
                              </div>
                              <hr>
                              <br>
                              <div class="row">
                                <div class="col-6">
                                  <label>Select Column:</label>
                                  <select class="select2 form-control selectColumnAlignment" id="selectColumnAlignment${element_id}">
                                    <option value="">Select Column</option>
                                  </select>
                                </div>
                              </div>
                              <hr>
                              <br>
                              <div class="row">
                                <div class="col-4"><strong>Field</strong></div>
                                <div class="col-4"><strong>Header Alignment</strong></div>
                                <div class="col-4"><strong>Content Alignment</strong></div>
                              </div>
                              <br>
                              <div class="row" id="ColumnAlignmentContainer" style="max-height: 10rem;
                              overflow: auto;">

                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button class="btn btn-primary" type="button" id="saveColumnAlignmentButton">Save</button>
                        <button type="button" class="btn btn-primary btn-md rounded px-2" data-dismiss="modal">Close</button>
                      </div>
                    </div>

                  </div>
                </div>


                 <div id="nestedconditionalModal{element_id}" class="modal fade" role="dialog" data-focus="false">
                  <div class="modal-dialog modal-lg">

                    <!-- Modal content-->
                    <div class="modal-content">
                      <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                        <h6 class="modal-title" style="margin-left:auto;">Configure Conditional Formatting</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <div class="modal-body nested_conditional_data_body" style="max-height: 30em;overflow-y: scroll;">
                        <div class="nested_input_columns_value_dict" style="display:none"></div>
                        <div class="nested_table_type" style="display:none"></div>
                        <div class="nested_conditional_body" style="width: 100%; display:flex">
                        <div class="col-2">
                            <p style="font-weight: bold;">Select Type:</p>
                            <select class="select2 form-control nested_column">
                              <option value="Category">Category</option>
                              <option value="Value">Value</option>
                            </select>
                          </div>
                          <div class="col-3">
                            <p style="font-weight: bold;">Select column:</p>
                            <select class="select2 form-control nested_conditional_column_name" id="nested_conditional_column_name{element_id}">
                              <option value="" selected disabled>------------</option>
                            </select>
                          </div>
                          <div class="col-2">
                            <p style="font-weight: bold;">Select condition:</p>
                            <select class="select2 form-control nested_conditional_condition">
                              <option value="" disabled selected>------------------</option>
                              <option value="Greater then">Greater than</option>
                              <option value="Smaller then">Smaller than</option>
                              <option value="Equal to">Equal to</option>
                              <option value="In">In</option>
                            </select>
                          </div>
                          <div class="col-2 nested_conditional_input_value">
                            <p style="font-weight: bold;">Select value:</p>
                            <div class="nested_conditional_format_value_input">
                            <select class="select2 form-control" required>
                            </select>
                            </div>
                          </div>
                          <div class="col-2">
                            <p style="font-weight: bold;">Select field color:</p>
                            <input type="color" class="form-control nested_conditional_color_input" data-css="background-color" value="#ffffff" >
                          </div>
                          <div class="col-1">
                            <i class="fas fa-plus nested_add_conditional_parameter" data-toggle="tooltip" title="Add condition" style="cursor:pointer;padding-top:3.4em;"></i> </i>
                          </div>

                        </div>

                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-md rounded px-2" data-dismiss="modal">Close</button>
                      </div>
                    </div>

                  </div>
                </div>





          <!-- Drill down modal -->
          <div class="modal fade" id="drilldownmodal" role="dialog" data-focus="false" aria-labelledby="drilldownmodalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header" style='background:#565a5e; color:white;'>
                  <h5 class="modal-title" id="reportModalLabel" style="margin-left: 40%;">Drill down</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body" style="overflow-y: scroll ;max-height: 35rem;">
                  <ul class="nav nav-tabs nav-justified md-tabs indigo" id="myTabJust" role="tablist">
                    <li class="nav-item active">
                        <a class="nav-link active show tip-container1 tip-container2" data-myAttr="tip-container1"
                            data-trigger="manual" data-content="Configuration for Collateral Data at a Counterparty Level"
                            data-placement="top" id="table-tab-just" data-toggle="tab" href="#table-just" role="tab"
                            aria-controls="table-just" aria-selected="true">Drill-down Table</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link tip-container2 tip-container1" data-myAttr="tip-container2" data-trigger="manual"
                            data-content="Configuration for Collateral Data at an Instrument Level" data-placement="top"
                            id="plot-tab-just" data-toggle="tab" href="#plot-just" role="tab" aria-controls="plot-just"
                            aria-selected="false">Drill-down Plot</a>
                    </li>

                </ul>
                <div class="tab-content card pt-2" id="myTabContentJust">
                    <div class="tab-pane fade show active" id="table-just" role="tabpanel" aria-labelledby="home-tab-just">
                    <div id="drilldowncontainer">
                    </div>
          </div>
              <div class="tab-pane fade " id="plot-just" role="tabpanel" aria-labelledby="home-tab-just">

                <div id="drilldownplot">
                  <div id="drildown_select_category"></div>
                  <div class="row" style="height:1rem;"></div>
                  <div id="drildown_plot"></div>
                </div>
            </div>
          </div>
          <button type="button" data-toggle="tooltip" title="Export Drill-down Table" class="btn btn-primary btn-md mx-2 rounded px-2 export_drilldown"><i class="fa fa-download" style="padding-right:0.5em"></i>Export</button>
            </div>
              </div>
            </div>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>
    """
    )
    if tab_pane:
        pass
    else:
        html = html + "</div>"
    html = (
        html
        + """
    <script>

      </script>
    """
    )
    script = script + scriptGenerator(
        "analysis", "analysis", element_id, request, t, data1, tab_pane=tab_pane
    )
    return html, script


def html_generator_pivot_report(create_view_tab_body_content, element_id, tab_type, header_name, request=""):
    html = ""
    script = ""

    tab_body_content = json.loads(create_view_tab_body_content)
    if tab_type == "PivotReport":
        html = (
            html
            + f"""
        <div class="tab-pane fade" id="{element_id}_tab_content" role="tabpanel" aria-labelledby="{element_id}-tab">

            <div class="card" style='background-color:whitesmoke;'>
             <div class="card-header " style='background:white;'>
                <h6 class="card-title"> {tab_body_content['report_name']}</h6>
             </div>
             <div class='card-body' style='background: white;'>

                  <div class="container-fluid p-0">
                    <div class="d-flex justify-content-between align-items-center py-3 nav">

            <div class="d-flex justify-content-between align-items-center">
          <label class="ml-3 m-0 p-0">Select Table Name: </label>&nbsp;&nbsp;
          <select id='report_db_name_{element_id}'class="dbselect select2 form-control">
            <option value="" selected disabled>Select Table Name</option>
            </select>
            </div>
                      <div class="mr-3">
                        <button id= 'save_reportbtn_{element_id}' class="btn btn-md rounded btn-primary " role="button">
                          Save Report
                        </button>

                      </div>
                    </div>

                    <div class="container-fluid mt-2">

                      <div id="report_output_{element_id}" style='max-height:20rem;overflow:auto;background: whitesmoke;'></div>
                    </div>

                  </div>

             </div>
             </div>

            </div>"""
        )

        script = script + scriptGenerator(
            "PivotReport", "PivotReport", element_id, request, tab_body_content, {}
        )
    return html, script


def html_generator_ocr(
    model_name,
    create_view_tab_body_content,
    element_id,
    tab_type,
    header_name,
    request="",
    uploadTable="",
    tab_pane=True,
    iden2="",
):
    html = ""
    script = ""
    if tab_type == "data_connector":
        pr_code = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "TabScreens",
                    "Columns": ["related_item_code"],
                },
                "condition": [
                    {
                        "column_name": "element_id",
                        "condition": "Equal to",
                        "input_value": element_id,
                        "and_or": "",
                    },
                ],
            },
        ).iloc[0]["related_item_code"]
        process_flow_design = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "NavigationSideBar",
                    "Columns": ["process_flow_design"],
                },
                "condition": [
                    {
                        "column_name": "item_code",
                        "condition": "Equal to",
                        "input_value": pr_code,
                        "and_or": "",
                    },
                ],
            },
        ).iloc[0]["process_flow_design"]
        if process_flow_design is not None:
            process_flow_design = json.loads(process_flow_design)
        process_flow_design_type = None
        if process_flow_design is not None:
            if element_id in process_flow_design["prCodes"]:
                process_flow_design_type = process_flow_design
        data = {}
        data["element_id"] = element_id
        data["tab_type"] = tab_type
        data["tab_header_name"] = header_name
        data["tab_body_content"] = create_view_tab_body_content
        upload_button_styling = create_view_tab_body_content["Category_attributes"].get("uploadButtonStyling")
        t = data_connector(create_view_tab_body_content, request, data)
        pr_code = getPrCodeFromElementId(element_id, request)
        tableUS = uploadTable
        t["tableUS"] = tableUS
        t["tab_header_name"] = t["tab_header_name"]
        upload_preview = "No"
        advance_setting_check = ""
        downloadDataBtn = ""
        uploadHistoryBtn = ""
        lastUploadErrorsBtn = ""
        detailedErrorLogBtn = ""
        downloadFormatBtn = ""
        applyDatestamp = ""
        lastUpload = ""
        tableShow = ""
        if t.get("Apply Datestamp on Uploaded Records") == "Yes":
            applyDatestamp = "Yes"
        if t.get("Last upload date") == "Yes":
            lastUpload = "Yes"
        for attr_dict in create_view_tab_body_content["Category_sub_elements"][1][
            "Category_sub_element_attributes"
        ]:
            if attr_dict["attr"] == "advance_setting_check":
                advance_setting_check = attr_dict["value"]
            if attr_dict["attr"] == "downloadDataBtn":
                downloadDataBtn = attr_dict["value"]
            if attr_dict["attr"] == "uploadHistoryBtn":
                uploadHistoryBtn = attr_dict["value"]
            if attr_dict["attr"] == "lastUploadErrorsBtn":
                lastUploadErrorsBtn = attr_dict["value"]
            if attr_dict["attr"] == "detailedErrorLogBtn":
                detailedErrorLogBtn = attr_dict["value"]
            if attr_dict["attr"] == "downloadFormatBtn":
                downloadFormatBtn = attr_dict["value"]
            if attr_dict["attr"] == "tableShow":
                tableShow = attr_dict["value"]
        if t.get("ignore_ne") == "Yes":
            ignore_ne = "true"
        else:
            ignore_ne = "false"
        if t.get("Preview with data confirmation"):
            upload_preview = t["Preview with data confirmation"]
        t = {x.translate({32: None}): y for x, y in t.items()}
        if "uploadCustomVal" in create_view_tab_body_content["Category_attributes"]["Mandatory"]:
            upload_cust_config = create_view_tab_body_content["Category_attributes"]["Mandatory"][
                "uploadCustomVal"
            ]
        else:
            pass
        if "allow_upload_custV" in create_view_tab_body_content["Category_attributes"]["Mandatory"]:
            if create_view_tab_body_content["Category_attributes"]["Mandatory"]["allow_upload_custV"]:
                uploadcustAllow = True
            else:
                uploadcustAllow = False
        else:
            uploadcustAllow = False
        if "allow_map_column" in create_view_tab_body_content["Category_attributes"]["Mandatory"]:
            if create_view_tab_body_content["Category_attributes"]["Mandatory"]["allow_map_column"]:
                allow_map_column = True
            else:
                allow_map_column = False
        else:
            allow_map_column = False
        if "allow_comp_logic" in create_view_tab_body_content["Category_attributes"]["Mandatory"]:
            if create_view_tab_body_content["Category_attributes"]["Mandatory"]["allow_comp_logic"]:
                allow_comp_logic = True
            else:
                allow_comp_logic = False
        else:
            allow_comp_logic = False
        if "allow_stfp_upload" in create_view_tab_body_content["Category_attributes"]["Mandatory"]:
            if create_view_tab_body_content["Category_attributes"]["Mandatory"]["allow_stfp_upload"]:
                allow_stfp_upload = True
            else:
                allow_stfp_upload = False
        else:
            allow_stfp_upload = False
        if tab_pane:
            tab_pane_class = "tab-pane fade"
            style = ""
        else:
            tab_pane_class = "c"
            style = "style='display:grid;'"
            html = html + "<div>"
        if iden2 == "yes":
            html = (
                html
                + f"""
          <div class="{tab_pane_class}" id="{element_id}_tab_content" aria-labelledby="{element_id}-tab">"""
            )
        else:
            html = (
                html
                + f"""
        <div class="{tab_pane_class}" id="{element_id}_tab_content" role="tabpanel" aria-labelledby="{element_id}-tab">"""
            )
        html = (
            html
            + f"""
        <div class="container-fluid">
          <div class="font-weight-light">
            <div class="card">
             <div class="card-header ">
                <h6 class="card-title">Upload Data </h6>
             </div>"""
        )
        if process_flow_design_type is not None:
            html = (
                html
                + f"""<div class="modal-body">
                <div class="col-12">
        <div id="processFlowDesignDiv{element_id}" class="displaynone processflowdiv" style="height: 10rem; width: 100%; border: 1px solid black; border-radius: 5px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">

                    </div>
                <div class="text-center">
        <i style="cursor: pointer;" class="fa-solid fa-angle-down" onclick="processDesignDiv_upload(this)" data-sub-process="{pr_code}" data-id="{element_id}" data-process="{process_flow_design_type['process_code']}"  data-list='{json.dumps(process_flow_design_type)}'></i>
        </div>
        </div>
              <form method="post" enctype="multipart/form-data" data-form-id='uploadfileform{element_id}'>"""
            )
        else:
            html = (
                html
                + f"""<div class="modal-body">
              <form method="post" enctype="multipart/form-data" data-form-id='uploadfileform{element_id}'>"""
            )
        html = (
            html
            + f"""
                      """
            + """{% csrf_token %}"""
        )

        html = (
            html
            + f"""<div class="col" id="uploadFileUS">
                          <div class="form-group ">
                            <div class="custom-file custom-upload-file" style="width:230px;">

                              <input type="file"  id='uploadFile{element_id}' name="file" class="custom-file-input"   onclick="this.value=null;"  data-file-id="{element_id}" style="border-bottom-color:white; width:230px" >
                              <label id="c2" class="custom-file-label" >Choose file</label>
                            </div>
                            <input type="hidden" class ="upload_tables_US" name="upload_tables_US" value="" data-doc-id="{element_id}">
                            <input type="hidden" id='SkipSheetInfo{element_id}' value="" >
                            <input type="hidden"  name="document_element_id" value="{element_id}" >
                            <input type="hidden" id="nameoffile" name="filename" value="{t['filename']}">
                            <input type="hidden" name="pr_code" value="{getPrCodeFromElementId(element_id,request)}">
                            <input type="hidden" name="columnmapperDict" id="columnmapperDict{element_id}" value=""  data-save-config="" data-element_id="columnmapperDict{element_id}">
                            <input type="hidden"  name="customValidationList" id="customValidationList1{element_id}" value=""  data-save-config="" data-element_id="customValidationList{element_id}">"""
        )

        html = (
            html
            + f"""<form method="post" class="form-inline" enctype="multipart/form-data" >
                                  """
            + """{%csrf_token%}"""
        )
        for tableUSlist in t["tableUS"]:
            html = (
                html + f"""   <input type="hidden" name="table_name" value= "{tableUSlist['tableName']}" >"""
            )
        html += """
        <style>
          @media screen and (min-width: 427px){
            .cancel_upload_div{
              display: inline-block;
            }
            .btn_name{
              display: none
            }
            .cancel_upload_div button{
              height: 37px !important;
            }
          }
          @media screen and (max-width: 426px){
            .cancel_upload_div{
              display: flex;
              justify-content: space-between;
              margin-top: 1.5rem;
              gap: 15px;
            }
            .cancel_upload_div button{
              width: 50% !important;
              margin: 0 !important;
            }
            .btn_name{
              display: inline-block;
              margin-left: 0.5rem;
            }
            .custom-upload-file{
              width: 100% !important;
            }
            .custom-file-label {
              font-size: 11px;
            }
            .custom-file-label::after {
              font-size: 12.8px;
            }
          }
        </style>
        <div class='cancel_upload_div'>
        
        """
        if upload_preview == "Yes":
            function_check = button_styling(upload_button_styling, "uploadupload")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f""" <button id="uploadButton3{element_id}" type="button" data-elementID="{element_id}" data-preview-mode='on'  data-toggle="tooltip" title="Upload File" class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" name="uploadbuttonUS" value="US" disabled style="{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>"""
                )
            else:
                html = (
                    html
                    + f""" <button id="uploadButton3{element_id}" type="button" data-elementID="{element_id}" data-preview-mode='on'  data-toggle="tooltip" title="Upload File" class="btn btn-primary btn-md mx-2 rounded px-2" name="uploadbuttonUS" value="US" disabled style=""><i class="fa fa-upload"></i><span class='btn_name'>Upload</span></button>"""
                )
        else:
            function_check = button_styling(upload_button_styling, "uploadupload")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""<button id="uploadButton3{element_id}" type="button" data-elementID="{element_id}"  data-toggle="tooltip" title="Upload File"class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" name="uploadbuttonUS" value="US" disabled style="{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>"""
                )
            else:
                html = (
                    html
                    + f"""<button id="uploadButton3{element_id}" type="button" data-elementID="{element_id}"  data-toggle="tooltip" title="Upload File"class="btn btn-primary btn-md mx-2 rounded px-2" name="uploadbuttonUS" value="US" disabled style=""><i class="fa fa-upload"></i><span class='btn_name'>Upload</span></button>"""
                )

        function_check = button_styling(upload_button_styling, "uploadcancel")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f"""<button type="button" value="Cancel" class=" btn btn-primary {function_check['class']}" id='cancel{element_id}' onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}
                                  style="{styling_to_put}height: 33px; width: 100px;border-radius:5px;border-color:none;color:white;padding-left:9px;"
                                  disabled>{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f""" <button type="button" value="Cancel" class=" btn btn-primary " id='cancel{element_id}'
                                  style="height: 33px; width: 100px;border-radius:5px;border-color:none;color:white;padding-left:9px;"
                                  disabled><i class="fa fa-arrow-alt-from-bottom"></i>&nbsp;Cancel</button>"""
            )
        html += "</div>"
        html = (
            html
            + f"""
                              <input type="hidden" name="uploadbuttonUS" value="US">
                              """
        )
        html = (
            html
            + f"""
              <div class="modal fade bd-example-modal-sm" id="bulk_upload_in_progress_{element_id}" style="" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-lg-center modal-dialog-centered" style="">
                  <div class="modal-content" style="width:350px; padding-top:1.5rem; padding-bottom:1.5rem; margin:auto;">
                    <div class="modal-body" style="display: flex; text-align: center; justify-content: center; flex-direction: column; align-items: center;">
                      <div class="loader2" style="margin:auto;"></div>
                      <h6 style="font-weight: 200;font-family: var(--font-family); text-align:center;margin-top:14px; margin-bottom:unset;">Validations in progress. Please wait...</h6>
                      <style>
                        .loader2 {{
                          --c1:var(--primary-color,var(--primary));
                          --c2:var(--primary-color,var(--primary));
                          width: 25px;
                          height: 50px;
                          border-top: 4px solid var(--c1);
                          border-bottom: 4px solid var(--c1);
                          background: linear-gradient(90deg, var(--c1) 2px, var(--c2) 0 5px,var(--c1) 0) 50%/7px 8px no-repeat;
                          display: grid;
                          overflow: hidden;
                          animation: l5-0 2s infinite linear;
                        }}
                        .loader2::before,
                        .loader2::after {{
                          content: "";
                          grid-area: 1/1;
                          width: 75%;
                          height: calc(50% - 4px);
                          margin: 0 auto;
                          border: 2px solid var(--c1);
                          border-top: 0;
                          box-sizing: content-box;
                          border-radius: 0 0 40% 40%;
                          -webkit-mask:
                            linear-gradient(#000 0 0) bottom/4px 2px no-repeat,
                            linear-gradient(#000 0 0);
                          -webkit-mask-composite: destination-out;
                                  mask-composite: exclude;
                          background:
                            linear-gradient(var(--d,0deg),var(--c2) 50%,#0000 0) bottom /100% 205%,
                            linear-gradient(var(--c2) 0 0) center/0 100%;
                          background-repeat: no-repeat;
                          animation: inherit;
                          animation-name: l5-1;
                        }}
                        .loader2::after {{
                          transform-origin: 50% calc(100% + 2px);
                          transform: scaleY(-1);
                          --s:3px;
                          --d:180deg;
                        }}
                        @keyframes l5-0 {{
                          80%  {{transform: rotate(0)}}
                          100% {{transform: rotate(0.5turn)}}
                        }}
                        @keyframes l5-1 {{
                          10%,70%  {{background-size:100% 205%,var(--s,0) 100%}}
                          70%,100% {{background-position: top,center}}
                        }}
                      </style>
                    </div>
                  </div>
                </div>
              </div>"""
        )
        html = (
            html
            + f"""    </div>
                          <div class="note mb-3 mt-2"><span class="font-italic text-xs">Note: Please ensure that the file name is the same as the downloaded format file for a specific table when you upload your data</span></div>
                        </div>
                        <!-- div for upload component including cancel btn and upload btn ends -->
                        <div class="form-group ml-3">
                        <div class="row">
                        <div class="col-3.5">"""
        )
        if applyDatestamp == "Yes":
            html = (
                html
                + f"""    <div class="custom-control custom-checkbox" id="date_extraction_checker_div{element_id}">
                                <input type="checkbox" name="date_extraction_checker" class="checkboxinput custom-control-input" id="date_extraction_checker{element_id}">
                                <label for="date_extraction_checker{element_id}" class="custom-control-label">
                                  Apply Datestamp on Uploaded Records
                                </label>
                              </div>
                              <div class="form-group ml-2 " style="width: 250px;">
                               {t['form_US']}
                              </div>"""
            )
        if allow_map_column:
            function_check = button_styling(upload_button_styling, "uploadmapcolumns")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                <button  name="ColumnMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 columnMapperButton {function_check['class']}" id="columnMapperButton{element_id}" data-table-name="" data-toggle="modal" data-target="#columnMapperModal{element_id}" data-elementID="{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}
                                    </button>
                                    """
                )
            else:
                html = (
                    html
                    + f"""
                                <button  name="ColumnMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 columnMapperButton" id="columnMapperButton{element_id}" data-table-name="" data-toggle="modal" data-target="#columnMapperModal{element_id}" data-elementID="{element_id}" style="margin-bottom:10px;">&nbsp;Map Columns
                                    </button>
                                    """
                )
        if uploadcustAllow:
            function_check = button_styling(upload_button_styling, "uploadcustomvalidation")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                <button  name="customValidation"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 customValidationButton {function_check['class']}" id="customValidationButton{element_id}" data-table-name="" data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}
                                    </button>
                        """
                )
            else:
                html = (
                    html
                    + f"""
                                <button  name="customValidation"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 customValidationButton" id="customValidationButton{element_id}" data-table-name="" data-toggle="modal" data-target="#customValidation{element_id}" data-elementID="{element_id}" style="margin-bottom:10px;">&nbsp;Custom Validation
                                    </button>
                        """
                )
        if allow_comp_logic:
            function_check = button_styling(upload_button_styling, "uploadaddcomputationlogic")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                    <button  name="computedFieldMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 computedFieldMapperButton {function_check['class']}" id="computedFieldMapperButton{element_id}" data-table-name="" data-toggle="modal" data-target="#computedFieldMapper{element_id}" onclick="CompMapper(this)" data-elementID="{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}
                                    </button>
                                    """
                )
            else:
                html = (
                    html
                    + f"""
                                    <button  name="computedFieldMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 computedFieldMapperButton" id="computedFieldMapperButton{element_id}" data-table-name="" data-toggle="modal" data-target="#computedFieldMapper{element_id}" onclick="CompMapper(this)" data-elementID="{element_id}" style="margin-bottom:10px;">&nbsp;Add Computation Logic
                                    </button>
                                    """
                )
        if allow_stfp_upload:
            function_check = button_styling(upload_button_styling, "uploadsftpupload")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                    <button  name="sftpUploadMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 sftpUploadButton {function_check['class']}" id="sftpUploadButton{element_id}" data-table-name="" data-tab_name = "{t['tab_header_name']}" data-toggle="modal" data-target="#sftpUploadMapper{element_id}" onclick="sftpUpload.call(this)" data-elementID="{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}
                                    </button>
                                    """
                )
            else:
                html = (
                    html
                    + f"""
                                    <button  name="sftpUploadMapper"  type="button"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 sftpUploadButton" id="sftpUploadButton{element_id}" data-table-name="" data-toggle="modal" data-tab_name = "{t['tab_header_name']}" data-target="#sftpUploadMapper{element_id}" onclick="sftpUpload.call(this)" data-elementID="{element_id}" style="margin-bottom:10px;">&nbsp;SFTP connectors
                                    </button>
                                    """
                )

        if downloadDataBtn == "Yes":
            function_check = button_styling(upload_button_styling, "uploaddownloaddata")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""      </form>
                                  <input type="hidden" name="tabheader" value="{t['tab_header_name'] }">
                                  <button id="downloadData{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download Data"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" data-toggle="modal" data-target="#downloadDataModal{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>
                                    {function_check['iconAppend']} {function_check['changeText']}
                                  </button>"""
                )
            else:
                html = (
                    html
                    + f"""      </form>
                                  <input type="hidden" name="tabheader" value="{t['tab_header_name'] }">
                                  <button id="downloadData{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download Data"
                                    class="btn btn-primary btn-md mx-2 rounded px-2" data-toggle="modal" data-target="#downloadDataModal{element_id}" style="margin-bottom:10px;">
                                    <i class="fa fa-download"></i>&nbsp;Download data
                                  </button>"""
                )
        else:
            html = (
                html
                + f"""</form>
                            <input type="hidden" name="tabheader" value="{t['tab_header_name'] }">"""
            )

        if uploadHistoryBtn == "Yes":
            function_check = button_styling(upload_button_styling, "uploaduploadhistory")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""      <button id="downloadHistory{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download history"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" data-toggle="modal" data-target="#downloadHistoryModal{element_id}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>
                                    {function_check['iconAppend']} {function_check['changeText']}
                                  </button>"""
                )
            else:
                html = (
                    html
                    + f"""      <button id="downloadHistory{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download history"
                                    class="btn btn-primary btn-md mx-2 rounded px-2" data-toggle="modal" data-target="#downloadHistoryModal{element_id}" style="margin-bottom:10px;">
                                    <i class="fa fa-download"></i>&nbsp;Upload history
                                  </button>"""
                )
        for tableUSlist in t["tableUS"]:
            html = (
                html + f"""   <input type="hidden" name="table_name" value= "{tableUSlist['tableName']}" >"""
            )

        if lastUploadErrorsBtn == "Yes":
            function_check = button_styling(upload_button_styling, "uploadlastuploaderrors")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""      <input type="hidden" name="uploadbuttonUS" value="lastUploadErrors">
                                    <button id="downloadLastUploadErrors{element_id}" type="submit" data-elementID="{element_id}" data-toggle="tooltip" title="Last upload errors"
                                      class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>
                                    {function_check['iconAppend']} {function_check['changeText']}
                                  </button>"""
                )
            else:
                html = (
                    html
                    + f"""      <input type="hidden" name="uploadbuttonUS" value="lastUploadErrors">
                                    <button id="downloadLastUploadErrors{element_id}" type="submit" data-elementID="{element_id}" data-toggle="tooltip" title="Last upload errors"
                                      class="btn btn-primary btn-md mx-2 rounded px-2" style="margin-bottom:10px;">
                                    <i class="fa fa-download"></i>&nbsp;Last upload errors
                                  </button>"""
                )

        if detailedErrorLogBtn == "Yes":
            function_check = button_styling(upload_button_styling, "uploaddetailederrorlog")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                  <button id="downloadErrorLog{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download error log"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" data-toggle="modal" data-target="#downloadErrorLogModal{element_id}" style="margin-bottom:10px;{styling_to_put}"onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>
                                    {function_check['iconAppend']} {function_check['changeText']}
                                  </button>"""
                )
            else:
                html = (
                    html
                    + f"""
                                  <button id="downloadErrorLog{element_id}" type="button" data-elementID="{element_id}" data-toggle="tooltip" title="Download error log"
                                    class="btn btn-primary btn-md mx-2 rounded px-2" data-toggle="modal" data-target="#downloadErrorLogModal{element_id}" style="margin-bottom:10px;">
                                    <i class="fa fa-download"></i>&nbsp;Detailed error log
                                  </button>"""
                )

        if t.get("Viewtransactionsstatus") == "Yes":
            function_check = button_styling(upload_button_styling, "uploadviewtransactionstatus")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""<button  name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color,var(--primary,darkgoldenrod))' style="margin-bottom:10px;{styling_to_put}" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>{function_check['iconAppend']} {function_check['changeText']}</button>
          """
                )
            else:
                html = (
                    html
                    + f"""<button  name="viewTransaction"  type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-toggle="tooltip" title="Click to view transactions" data-elementID="{element_id}" onclick="showTransactions.call(this,'{element_id}')" id="showTransactions{element_id}" data-color='var(--primary-color,var(--primary,darkgoldenrod))' style="margin-bottom:10px;">&nbsp;View Transaction Status</button>
          """
                )
        if advance_setting_check == "Yes":
            function_check = button_styling(upload_button_styling, "advancesettings")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + f"""
                                <button id="advance_pandas_settings_upload{element_id}" data-target="#csvImportEngineConfigModalUpload{element_id}" data-toggle="tooltip" title="Last upload errors"
                                    class="btn btn-primary btn-md mx-2 rounded px-2 {function_check['class']}" style="margin-bottom:10px;{styling_to_put};display:none;" onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}>
                                  {function_check['iconAppend']} {function_check['changeText']}
                                </button>"""
                )
            else:
                html = (
                    html
                    + f"""
                                  <button id="advance_pandas_settings_upload{element_id}" data-target="#csvImportEngineConfigModalUpload{element_id}" data-toggle="tooltip" title="Advance settings upload"
                                    class="btn btn-primary btn-md mx-2 rounded px-2" style="margin-bottom:10px;display:none;">
                                  Advance Settings
                                </button>"""
                )
            html = (
                html
                + f"""
    <div class="modal" id="csvImportEngineConfigModalUpload{element_id}">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title p-0">Advance settings Configuration</h6>
                    <i class="fa-solid fa-database iconsize"></i>
                </div>
                <div class="modal-body">
                    <div class="accordion" id="accordionImportEngineConfigUpload{element_id}">
                        <div class="card">
                            <div class="card-header" id="headingImportEngineTwoUpload{element_id}">
                                <h2 class="mb-0">
                                    <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseImportEngineTwoUpload{element_id}" aria-expanded="true" aria-controls="collapseImportEngineTwoUpload{element_id}">
                                    Advance settings Parameters &nbsp;
                                    <i class="fas fa-plus" style="float:inline-end;"></i>
                                    </button>
                                </h2>
                            </div>
                            <div id="collapseImportEngineTwoUpload{element_id}" class="collapse" aria-labelledby="headingImportEngineTwoUpload{element_id}" data-parent="#accordionImportEngineConfigUpload{element_id}">
                                <div class="card-body">
                                    <div class="row" id="importCSVEngineConfigContainerUpload{element_id}" style="max-height:30rem; overflow-y:auto;">
                                      <div class="form-group col-3">
                                          <label for="blocksize">Block Size</label>
                                          <input type="number" class="form-control textInput textinput" placeholder="200000" min="1" max="64000000"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="delimiter">Delimiter</label>
                                          <input type="text" class="form-control textInput textinput" value="," maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="index_col">Use First Column as Index</label>
                                          <select name="index_col" class="form-control select2 select-tags">
                                              <option value="no" selected>No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="engine">Engine</label>
                                          <select name="engine" class="form-control select2">
                                              <option value="" selected>Default</option>
                                              <option value="pyarrow">Pyarrow</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="true_values">Strings Denoting True</label>
                                          <select name="true_values" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="false_values">Strings Denoting False</label>
                                          <select name="false_values" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="skiprows">Skip Rows</label>
                                          <select name="skiprows" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="skipfooter">Skip Footer</label>
                                          <select name="skipfooter" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="nrows">Number of Rows to Read</label>
                                          <input type="number" class="form-control numberInput numberinput" min="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="na_values">Strings Denoting Null</label>
                                          <select name="na_values" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="keep_default_na">Keep Library Default NA Characters</label>
                                          <select name="keep_default_na" class="form-control select2">
                                              <option value="yes" selected>Yes</option>
                                              <option value="no">No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="na_filter">Detect Missing Value Markers</label>
                                          <select name="na_filter" class="form-control select2">
                                              <option value="yes" selected>Yes</option>
                                              <option value="no">No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="skip_blank_lines">Skip Blank Lines</label>
                                          <select name="skip_blank_lines" class="form-control select2">
                                              <option value="yes" selected>Yes</option>
                                              <option value="no">No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="parse_dates">Columns to be Parsed as Date</label>
                                          <select name="parse_dates" class="form-control select2 select-tags" multiple data-select2-tags="true">
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="infer_datetime_format">Infer Datetime Format</label>
                                          <select name="infer_datetime_format" class="form-control select2">
                                              <option value="yes" selected>Yes</option>
                                              <option value="no">No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="dayfirst">DD/MM format dates</label>
                                          <select name="dayfirst" class="form-control select2">
                                              <option value="yes">Yes</option>
                                              <option value="no" selected>No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="cache_dates">Cache dates while Parsing</label>
                                          <select name="cache_dates" class="form-control select2">
                                              <option value="yes" selected>Yes</option>
                                              <option value="no">No</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="thousands">Thousands Separator</label>
                                          <input type="text" class="form-control textInput textinput" value="," maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="decimal">Decimal Separator</label>
                                          <input type="text" class="form-control textInput textinput" value="." maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="delimiter">Delimiter</label>
                                          <input type="text" class="form-control textInput textinput" value="," maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="escapechar">Escape Character</label>
                                          <input type="text" class="form-control textInput textinput" maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="comment">Character to Identify Commented Line</label>
                                          <input type="text" class="form-control textInput textinput" placeholder="#" maxlength="1"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="encoding">File Encoding</label>
                                          <input type="text" class="form-control textInput textinput" value="utf-8"></input>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="encoding_errors">How to Treat Encoding Errors?</label>
                                          <select name="encoding_errors" class="form-control select2">
                                              <option value="strict" selected>Strict (Raise Error)</option>
                                              <option value="ignore">Ignore</option>
                                              <option value="replace">Replace with Replacement Character</option>
                                              <option value="backslashreplace">Replace with backslashed escape sequences</option>
                                              <option value="surrogateescape">Replace byte with individual surrogate code</option>
                                          </select>
                                      </div>
                                      <div class="form-group col-3">
                                          <label for="on_bad_lines">How to Treat Bad Line?</label>
                                          <select name="on_bad_lines" class="form-control select2">
                                              <option value="error" selected>Error</option>
                                              <option value="warn">Warn</option>
                                              <option value="skip">Skip</option>
                                          </select>
                                      </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header" id="headingImportEngineOneUpload{element_id}">
                                <h2 class="mb-0">
                                    <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseImportEngineOneUpload{element_id}" aria-expanded="true" aria-controls="collapseImportEngineOneUpload{element_id}">
                                    Column Data Type
                                    <i class="fas fa-plus" style="float:inline-end;"></i>
                                    </button>
                                </h2>
                            </div>
                            <div id="collapseImportEngineOneUpload{element_id}" class="collapse" aria-labelledby="headingImportEngineOneUpload{element_id}" data-parent="#accordionImportEngineConfigUpload{element_id}">
                                <div class="card-body">
                                      <button class="btn btn-primary" type="button" id="csvImportFetchColumnDetailsUpload{element_id}">
                                          Fetch Details
                                      </button>
                                    <div class="row" id="importCSVFieldTypeContainerUpload{element_id}" style="max-height:30rem; overflow-y:auto; margin-top:12px;">

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="saveImportEngineConfigUpload{element_id}" class="btn btn-primary buttonfooter">Save</button>
                    <button type="button" class="btn btn-primary buttonfooter" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
      """
            )

        html = (
            html
            + f"""</div>
                        </div>
                        </div>

                    </form>"""
        )

        if tableShow == "Yes":
            html = (
                html
                + f"""<div>
                        <table id="documenttableUS" class="display compact " data-element-id="{element_id}" style="width:100%" >
                          <thead >
                            <tr >
                            <th >Table Name</th>"""
            )
            if lastUpload == "Yes":
                html = html + f"""<th >Last upload date</th>"""

            if downloadFormatBtn == "Yes":
                html = html + f"""  <th >Download Format</th>"""
            html = (
                html
                + f""" </tr>
                          </thead>
                          <tbody>"""
            )
            for tableUSlist in t["tableUS"]:
                function_check = button_styling(upload_button_styling, "uploaddownloadformat")
                if function_check is not None:
                    html = (
                        html
                        + f"""
                              <tr>


                              <td><input type="text" id="tableUS{element_id}" disabled value= "{tableUSlist['tableName']}" ></td>"""
                    )

                    if lastUpload == "Yes":
                        html = (
                            html
                            + f"""<td><input type="text" id="tableUSLUD{element_id}{tableUSlist['DBtableName'] }" disabled value=""></td>"""
                        )

                    if downloadFormatBtn == "Yes":
                        html = (
                            html
                            + f"""<td>
                                <form method="post" enctype="multipart/form-data">
                                """
                            + """ {% csrf_token %}"""
                            + f"""
                                <button id="downloadButton{element_id}" type="submit" data-toggle="tooltip" title="Please ensure that the file name is the same as the downloaded format file for a specific table when you upload your data"
                                class="btn btn-primary  {function_check['class']}" data-elementID="{element_id}"  data-dbTableName="{tableUSlist['DBtableName'] }" data-modelName="{tableUSlist['tableName']}" style={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} >{function_check['iconAppend']} {function_check['changeText']}</button>
                                <input type="hidden" name="listOrDelete" value="downloadFormat">
                                <input type="hidden" name="dbTableName" value="{ tableUSlist['DBtableName'] }">
                                <input type="hidden" name="modelName" value="{tableUSlist['tableName'] }">
                                <input type="hidden" name="element_id" value="{element_id}">

                                </form>
                              </td>"""
                        )
                    html = html + f"""</tr>"""
                else:
                    html = (
                        html
                        + f"""
                              <tr>


                              <td><input type="text" id="tableUS{element_id}" disabled value= "{tableUSlist['tableName']}" ></td>"""
                    )

                    if lastUpload == "Yes":
                        html = (
                            html
                            + f"""<td><input type="text" id="tableUSLUD{element_id}{tableUSlist['DBtableName'] }" disabled value=""></td>"""
                        )
                    if downloadFormatBtn == "Yes":
                        html = (
                            html
                            + f"""<td>
                                <form method="post" enctype="multipart/form-data">
                                """
                            + """ {% csrf_token %}"""
                            + f"""
                                <button id="downloadButton{element_id}" type="submit" data-toggle="tooltip" title="Please ensure that the file name is the same as the downloaded format file for a specific table when you upload your data"
                                class="btn btn-primary" data-elementID="{element_id}"  data-dbTableName="{tableUSlist['DBtableName'] }" data-modelName="{tableUSlist['tableName']}" ><i class="fa fa-download"></i></button>
                                <input type="hidden" name="listOrDelete" value="downloadFormat">
                                <input type="hidden" name="dbTableName" value="{ tableUSlist['DBtableName'] }">
                                <input type="hidden" name="modelName" value="{tableUSlist['tableName'] }">
                                <input type="hidden" name="element_id" value="{element_id}">

                                </form>
                              </td>"""
                        )
                    html = html + f"""</tr>"""
            html = (
                html
                + f""" </tbody>

                        </table>
                      </div>"""
            )

        html = html + f"""</div>"""
        html = (
            html
            + f"""

        <!-- Upload preview Modal -->
   <div class="modal fade" id="previewUploadModal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="previewUploadModal"  aria-modal="true" style="z-index:1052 !important;">
                <div class="modal-dialog  modal-xl modal-dialog-centered"  role="document">
                    <div class="modal-content" style="margin-right: auto;margin-left: auto;text-align: center;font-size:small">


                    <div class="modal-header"  style="background:#565a5e;text-align: center;">
                        <h6 class="modal-title"  style="width:100%;color:white;margin:auto;font-weight:bold;">Upload Preview</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body " style="overflow-y: scroll;height:500px;" id="previewUploadBody{element_id}">

                    </div>

                    <div class="modal-footer" id='previewUpload_footer{element_id}'>
                        <button id='uploadButton3_preview{element_id}' ignore_ne={ignore_ne} type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-toggle="tooltip" title="Upload File"  name="uploadbuttonUS" value="US" >Submit</button>
                        <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                    </div>

                    </div>
                </div>
            </div>
  <!--Preview Ends Here-->

  <!--Computed Field Starts Here-->
  <div class="modal fade" id="computedFieldMapper{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="computedFieldMapper{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="computedFieldMapper_{element_id}" style="width:100%;text-align: center;height:auto;">Configure Computation Logic</h5>
              <button type="button" class="close" data-dismiss="modal"  data-target='#computedFieldMapper{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class='card'>
                <div class='card-header' style="font-size: medium; font-weight: bold;">Configure Fields</div>
                <div class='card-body' style="max-height: 15rem; overflow-y: scroll;">
                  <div class="row">
                    <div class="form-group col-10">
                      <select id="computedFieldMapper_table_{element_id}" class="select2 form-control" name="computedFieldMapper_table"  data-placeholder="Column Mapper">
                        <option value="value" selected disabled>Select Table</option>
                      </select>
                    </div>
                    <div class="form-group col-2">
                      <span class="equationBuilder2" style="margin-top: 46px;">
                        <a data-toggle="tooltip" title="Equation Builder" value="eq" id="FieldMapper_EBDisplayButtonID_{element_id}"><i name="actions1" value="eq" class="fas fa-square-root-alt ihover javaSC thin-icontrash" style="font-size: 18px;margin-top: 5px;margin-left: 25px;"></i></a>
                      </span>
					          </div>
                  </div>

                  <table id="computedFieldMapper_main_table_{element_id}" class="table table-bordered table-sm table-hover" >
                    <thead id="modal-table-head-done{element_id}">
                      <th style="text-align:center;">Table Name</th>
                      <th style="text-align:center;">Reconfigure</th>
                      <th style="text-align:center;">Apply on every upload</th>
                    </thead>
                    <tbody id="modal-table-body-computedFieldMapper_main_table_{element_id}">

                    </tbody>
                  </table>

                </div>
              </div>
            </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="savecomputedFieldMapper_button_{element_id}" data-elementID="{element_id}" >Save</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" id="close">Close</button>
              </div>

          </div>
        </div>
      </div>
 <!-- Computed Field Modal Ends Here -->

 <!--SFTP Here-->
  <div class="modal fade" id="sftpUploadMapper{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="sftpUploadMapper{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="sftpUploadMapper_{element_id}" style="width:100%;text-align: center;height:auto;">Configure SFTP connector</h5>
              <button type="button" class="close" data-dismiss="modal"  data-target='#sftpUploadMapper{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class="form-group">
                    <label for="datasource">Data Source</label>
                    <select class="select2 form-control" name="datasource" id="dropdown1{element_id}" required>
                        <option value="" disabled selected> Select DataSource</option>
                        <option value='SFTP' id='SFTP'>SFTP</option>
                        <option value='FTP' id='FTP'>FTP</option>
                        <option value='AWS_S3' id='AWS_S3'>AWS S3</option>
                        <option value='AZURE' id='AZURE'>AZURE</option>
                    </select>
                </div>
              <div class="form-group" id="remote_connection_div{element_id}" style="display: none;">
                  <label for="remote_connection_div">Select Connection Type:</label>
                  <select id="remote_connection_list{element_id}" class="select2 form-control" name="remote_connection_list">
                      <option value="" disabled selected>Select Connection</option>
                      <option value='new_connection' id="new_connection">Create a new connection</option>
                      <option value='defined_connection' id="defined_connection">Use pre-defined connection</option>
                  </select>
              </div>
              <div class="form-group" id="remote_connectionpre_div{element_id}" style="display: none;">
                  <label for="remote_connectionpre_div">Connection:</label>
                  <select id="remote_connectionpre_list{element_id}" class="select2 form-control" name="remote_connectionpre_list">
                      <option value="" disabled selected>Select Connection</option>
                  </select>
              </div>
              <div class="form-group" id="remote_conn_filepath_div{element_id}" style="display: none;">
                  <label for="remote_filepath">File path:</label>
                  <input class= "form-control textInput remote_fetchlist" type="text" id="remote_filepath{element_id}" name="remote_filepath">
              </div>
              <div class="form-group" id="remote_conn_filetype_div{element_id}" style="display: none;">
                  <label for="remote_filetype">File type:</label>
                  <select class="select2 form-control remote_fetchlist" id="remote_filetype{element_id}" name="remote_filetype">
                      <option disabled selected value="">Choose file type</option>
                      <option value="csv">Csv</option>
                      <option value="xlsx">Excel</option>
                  </select>
              </div>
              <div class="form-group" id="remote_conn_localpath_div{element_id}" style="display: none;">
                  <label for="">Select Files:</label>
                  <form id="import_data_csv_remote{element_id}">
                      <div class="custom-file">
                        <input type="file" class="custom-file-input" id="customFileLocal{element_id}" accept=".csv" name="customFileLocal" multiple>
                        <label id="cc{element_id}" class="custom-file-label" for="customFileLocal">Choose file</label>
                      </div>
                  </form>
              </div>
              <div class="form-group" id="remote_conn_fileregex_div{element_id}" style="display: none;">
                  <label for="remote_fileregex">Regex to find files:</label>
                  <input class= "form-control textInput remote_fetchlist" type="text" id="remote_fileregex{element_id}" name="remote_fileregex">
              </div>
              <div class="form-group" id="remote_connectionfile_div{element_id}" style="display: none;">
                  <form id="import_data_sftp{element_id}"></form>
                  <label for="remote_connectionfile_div">Select files:</label>
                  <select id="remote_connectionfile_list{element_id}" class="select2 form-control" name="remote_connectionfile_list" multiple>
                  </select>
              </div>
              <div class="form-group" id="remote_connection_name_div{element_id}" style="display:none;">
                  <label for="remote_connection_name">Connection name:</label>
                  <input class= "form-control textInput" type="text" id="remote_connection_name{element_id}">
              </div>
              <div class="form-group" id="configure_remote_connection{element_id}" style="display:none;">
                  <button type="button" id="remoteConnectionButtonID{element_id}" class="btn btn-primary btn-xs rounded">Configure Connection</button>
              </div>
              <div class="btn-group dropdown remoteConnectiondropdown{element_id}" style="display:none;">
                  <label>Map files:</label>
                  <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                  Select file
                  <span class="caret"></span>
                  </button>
                  <ul class="dropdown-menu dropdown-menu-sm dropdown-menu-left" id="renameRemoteColumnDropdown{element_id}" style="height:fit-content; max-height:10rem; min-width:13rem; max-width:13rem; width:13rem;overflow-x:scroll;">
                  </ul>
              </div>
              <br>
              <br>
              <div class="card remoteConnectionRenameCard{element_id}" style="display:none;">
                  <div class="card-body" id="renameRemoteColumnContainer{element_id}" style="max-height:15rem;overflow:scroll;overflow-x:hidden;">

                  </div>
              </div>

            </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="savesftpUpload_button_{element_id}" data-elementID="{element_id}" >Upload File</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" id="close">Close</button>
              </div>

          </div>
        </div>
      </div>
 <!-- SFTP Ends Here -->


     <div class="modal" id="remoteConnectionModal{element_id}">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body ml-1">
                    <div class="row" id="remote_connection_inputs{element_id}">

                        <div class="form-group col-4">
                            <label for="remote_hostname">Hostname</label>
                            <input class= "form-control textInput" type="text" id="remote_hostname{element_id}" name="remote_hostname">
                        </div>
                        <div class="form-group col-4">
                            <label for="remote_username">Username</label>
                            <input class= "form-control textInput" type="text" id="remote_username{element_id}" name="remote_username">
                        </div>
                        <div class="form-group col-4">
                            <label for="remote_password">Password</label>
                            <input class= "form-control textInput" type="password" id="remote_password{element_id}" name="remote_password">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="validate_remote_connection{element_id}" class="btn buttonfooter" >Validate</button>
                    <button class="btn btn-primary btn-xs mx-2 rounded px-2 buttonload"  id = "validate_remote_load{element_id}" style="display:none">
                        <i class="fa fa-circle-notch fa-spin"></i>&nbsp;&nbsp;Loading...
                    </button>
                    <button type="button" class="btn buttonfooter" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

 <!-- Upload Map Columns Modal -->
      <div class="modal fade" id="columnMapperModal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="columnMapperModal{element_id}" aria-hidden="true" style= "height: 70vh;" >
        <div class="modal-dialog modal-lg" role="document" >
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="columnMapperModal{element_id}" style="width:100%;text-align: center;height:auto;">Configure Column Mapper</h5>
              <button type="button" class="close" data-dismiss="modal"  data-target='#columnMapperModal{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div class='card'>
                <div class='card-header' style="font-size: medium; font-weight: bold;">Column Mapper</div>
                <div class='card-body' style="max-height: 15rem; overflow-y: scroll;">
                  <div class="row">
                    <div class="form-group col-10">
                      <select id="Columnmapper{element_id}" class="select2 form-control" name="Columnmapper"  data-placeholder="Column Mapper">
                        <option value="value" selected disabled>Select Option Name</option>
                      </select>

                    </div>
                    <div class="form-group col-2" style="float: right;">
                      <button type="button" class="btn btn-primary columnconfiguremapper"   data-elementID="{element_id}"><i class="fa fa-upload"></i></button>
                      </div>
                  </div>
                  <table id="columnmapperdone{element_id}" class="table table-bordered table-sm table-hover" >
                    <thead id="modal-table-head-done{element_id}">
                      <th>Table Name</th>
                      <th>Reconfigure</th>
                      <th>Apply</th>
                    </thead>
                    <tbody id="modal-table-body-columnmapperdone{element_id}">

                    </tbody>
                  </table>
                  <table id="columnmapper{element_id}" class="table table-bordered table-sm table-hover">
                    <thead id="modal-table-head{element_id}">

                    </thead>
                    <tbody id="modal-table-body-columnmapper{element_id}">

                    </tbody>
                  </table>
                  <br>
                  <div id="samecolumnwarning{element_id}" style="color:red">
                  </div>
                  <br>
                </div>
              </div>
            </div>
              <div class="modal-footer">
               <button type="button" class="btn btn-primary submitconfigmapper"  style="display: none;" data-elementID="{element_id}" >Save and Submit</button>
                <button type="button" class="btn btn-primary savecolumnconfiguremapper"  style="display: none;" data-elementID="{element_id}" >Save</button>
                <button type="button" class="btn btn-primary saveConfigMapper" data-elementID="{element_id}">Save Configuration</button>
                <button type="button" class="btn btn-primary loadConfigMapper"  data-elementID="{element_id}">Load Configuration</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close">Close</button>
              </div>

          </div>
        </div>
      </div>
      <!-- Upload Map Columns Modal End -->

<!-- SheetChange Name Modal -->
<div class="modal fade" id="sheetNameChangeModal{element_id}" style="z-index:1061 !important;" role="dialog" data-focus="false" data-backdrop="static" aria-labelledby="sheetNameChangeModal{element_id}" aria-hidden="true" >
  <div class="modal-dialog modal-md" role="document" >
    <div class="modal-content" >
      <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
        <h5 class="modal-title" id="sheetNameChangeModalHeader{element_id}" style="width:100%;text-align: center;">Assign Sheet </h5>
        <button type="button" class="close" data-dismiss="modal"  data-target='#sheetNameChangeModal{element_id}' aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
       <div class="modal-body" id='sheetNameChange_main_body{element_id}' >

        <table id="sheetNameChange_datatable" class="row-border display" style="width: 100%;text-align: center;">
          <thead style="border-top: 1px solid var(--primary-color);">
            <th scope="col" style="padding:10px;">Sheet name</th>
            <th scope="col">Assign Table</th>
          </thead>
          <tbody id="sheetNameChange_content{element_id}">
            <tr style="
            line-height: 3;
            border-top: 1px solid var(--primary-color);
            border-bottom: 0.5px solid black;
            background: #d0d7df;
        ">
              <td style="font-weight: bold;" >No Data</td>
              <td><select class=" select2 "  id='configure_sheet{element_id}'  data-element-id='{element_id}'  aria-hidden="true"></select></td>
            </tr>
          </tbody>
        </table>

        </div>
        <div class="modal-footer">
           <button type="button" class="btn btn-primary" id='setsheetChange_{element_id}'  data-dismiss="modal" data-target='#sheetNameChangeModal{element_id}' data-elementID="{element_id}" onclick="setSheetName(elementID='{element_id}')" >Set Sheet Name</button>

   <button type="button" class="btn btn-primary" id='setSkipsheetChange_{element_id}'  data-dismiss="modal" data-target='#sheetNameChangeModal{element_id}' data-elementID="{element_id}" onclick="setSkipSheetName(elementID='{element_id}')" >Skip Current Sheet</button>

         </div>
      </div>
    </div>
  </div>

<!-- Custom Validation Modal -->
      <div class="modal fade" id="customValidation{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="customValidation{element_id}" aria-hidden="true" style= "height: 100vh;" >
        <div class="modal-dialog modal-xl" role="document" >
          <div class="modal-content" style='height:600px;'>
            <div class="modal-header" style='background:#565a5e; color:white;text-align: center;'>
              <h5 class="modal-title" id="customValidation{element_id}" style="width:100%;text-align: center;height:auto;">Configure Custom Validation</h5>
              <button type="button" class="close" data-dismiss="modal"  data-target='#customValidation{element_id}' aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
             <div class="modal-body" style= "height: 40vh;overflow-y: auto">
              <div id="carouselCustomValidation{element_id}" class="carousel slide" data-interval="false" >
                <div class="card">
                  <div class="card-body">

                    <div class="carousel-inner">

                        <!-- Existing  Configuration -->
                        <div class="carousel-item active" name='existing_config'>
                          <div class='card'>
                            <div class='card-header' style="font-size: medium; font-weight: bold;">Configure Custom Validation</div>
                            <div class='card-body' style='overflow:auto'>
                              <div class="row" style="width: 100%;display: flex;justify-content: flex-end; align-items: center;">

                              </div>
                              <div>
                                <table class="table" id="reload_custom_table">
                                  <thead style="text-align:center">
                                    <tr>
                                      <th>Sr.no</th>
                                      <th>Table Name</th>
                                      <th>Actions</th>
                                    </tr>
                                  </thead>
                                  <tbody style="text-align:center" id="configuration_val_row_{element_id}">

                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>

                          <!-- Setting Condition  -->
                            <div class="carousel-item" name='setting_config'>
                              <div class='card'>
                                <div class='card-header' style="font-size: medium; font-weight: bold;"> Custom Condition Set:</div>
                                <div class='card-body' style='overflow:auto'>

                                  <div class="row">
                                    <div class="col-4">
                                      <select id="custommValidationSelection_{element_id}" class="select2 form-control" name="table" onchange="conditionalTable(elementID='{element_id}')">
                                        <option value="" disabled selected>Select Table name</option>
                                      </select>
                                    </div>
                                  </div>

                                  <div style="margin-top:2em;">
                                    <div class="btn-group">
                                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                      Add Condition
                                        <span class="caret"></span>
                                      </button>
                                      <ul class="dropdown-menu" id="condition_dropdown{element_id}" style="max-height:12rem;">
                                      </ul>
                                    </div>
                                    <div class="btn-group">
                                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                      Add Master Based Condition
                                        <span class="caret"></span>
                                      </button>
                                      <ul class="dropdown-menu" id="condition_dropdown1{element_id}" style="max-height:12rem;">
                                      </ul>
                                    </div>
                                    <div class="row" id="items">
                                      <table class="table " id= 'custom_validation_table_{element_id}'>
                                      </table>
                                    </div>
                                  </div>

                                  <button type="button" style="float:right"
                                    class="btn btn-md btn-primary save_custom_validation" data-elementID="{element_id}"  onclick="saveCustomValidation(elementID='{element_id}')" data-slide="next">Save Validation</button>

                                </div>
                              </div>
                            </div>
                    </div>
                    <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselCustomValidation{element_id}"
                      role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                    <span class="sr-only">Previous</span>

                    <span class="carousel-control-next-icon carousel-control-next" href="#carouselCustomValidation{element_id}"
                      role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                    <span class="sr-only">Next</span>
                  </div>
                </div>
              </div>
              </div>
              <div class="modal-footer">
                 <button type="button" class="btn btn-primary submitcustomvalidation"   data-elementID="{element_id}" >Set Custom Validation</button>
                 <button type="button" class="btn btn-primary removecustomvalidation"   data-elementID="{element_id}" >Remove Custom Validation</button>
               <button type="button" class="btn btn-secondary" data-dismiss="modal" id="close" data-target='#customValidation{element_id}'>Close</button>
               </div>
            </div>
          </div>
        </div>
    <!-- End Custom Validation -->
<!-- Upload Edit Modal -->
      <div class="modal" id="edit_upload_modal{element_id}">
        <div class="modal-dialog modal-xl modal-dialog-centered" style="justify-content: center;height:40vh;max-width: 100% !important;" >
          <div class="modal-content uploadContent" style="width: 80%;text-align: center;justify-content: center;">

            <div class="modal-header" style="background-color: #565a5e;">
              <h6 class="modal-title" style="margin: auto;color: white;font-weight: bold;">Configure  Upload </h6>
            </div>

            <div class="modal-body" id="edit_upload_modal_main_body{element_id} "style=overflow:auto;">





              <ul class="nav nav-tabs nav-fill" id="EditModalTab{element_id}" role="tablist" style="padding:0px;">
                <li class="nav-item active" ><a class="nav-link l3items active"  href="#upload_error_tab{element_id}" data-toggle="tab" role="tab" aria-controls="upload_error_tab" aria-selected="true"><span>Status Log</span></a></li>
                <li class="nav-item "  ><a class="nav-link l3items "  href="#edit_data_tab{element_id}" data-toggle="tab"  role="tab" aria-controls="edit_data_tab" aria-selected="true"><span>Edit Upload File Data</span></a></li>

              </ul>

              <div class="modal fade" id="find_replace_modal_{element_id}" role="dialog" data-focus="false">
              <div class="modal-dialog" style="max-width:1000px;">
                <!-- Modal content-->
                <div class="modal-content">
                  <!-- Modal header-->
                  <div class="modal-header">
                    <h6 class="modal-title">Find and replace</h6>
                    <button type="button" class="close" onclick="$('#find_replace_modal_{element_id}').modal('hide')">&times;</button>
                  </div>
                  <!-- Modal body-->
                  <div class="modal-body">
                      <div class="form-group row">
                              <label class="acies_label col-sm-2 col-form-label">Select Column</label>
                              <div class="col-sm-10">
                                  <select id="selectcolumn{element_id}" data-elementID="{element_id}" form="columnform" class="form-control select2 selectcolumnclass text-left" onchange="findreplacechange(this)">
                                    <option value="" disabled selected></option>
                                  </select>
                              </div>
                            </div>
                      <div class="form-group row">
                              <label class="acies_label col-sm-2 col-form-label">Match Case</label>
                              <div class="col-sm-10">
                                  <select data-elementID="{element_id}" id="selectcase{element_id}" form="columnform" class="form-control select2 text-left" onchange="selectcasechange(this)">
                                    <option value="Equal to" selected>Equal to</option>
                                    <option value="Not Equal to">Not Equal to</option>
                                    <option value="Entire Column">Replace entire Column with static value</option>
                                    <option value="Greater than">Greater than</option>
                                    <option value="Greater than equal to">Greater than equal to</option>
                                    <option value="Smaller than">Smaller than</option>
                                    <option value="Smaller than equal to">Smaller than equal to</option>
                                    <option value="Starts with">Starts with</option>
                                    <option value="Ends with">Ends with</option>
                                    <option value="Not Starts with">Not Starts with</option>
                                    <option value="Not Ends with">Not Ends with</option>
                                    <option value="Contains">Contains</option>
                                    <option value="Not Contains">Not Contains</option>
                                  </select>
                              </div>
                            </div>
                      <div class="form-group row">
                              <label class="acies_label col-sm-2 col-form-label">Replace Column</label>
                              <div class="col-sm-10">
                                  <select id="selectreplacecolumn{element_id}" data-elementID="{element_id}" form="columnform" class="form-control select2 selectcolumnclass text-left" onchange="replacechange(this)">
                                    <option value="" disabled selected></option>
                                  </select>
                              </div>
                            </div>
                      <div class="form-group row">
                          <label class="acies_label col-sm-2 col-form-label" id="findlabel{element_id}">Find what</label>
                          <div class="col-sm-10" id="findlistL3{element_id}">
                          </div>
                        </div>
                      <div class="form-group row show_textinput_div_{element_id}" style="display:none;">
                        <label class="acies_label col-sm-2 col-form-label" id="show_textinput{element_id}">Find what</label>
                        <div class="col-sm-10" id="show_textinputL3{element_id}">
                        <input type="text" class="form-control" id="show_textinputfind{element_id}">
                        </div>
                      </div>
                      <div class="custom-control custom-checkbox form-group row text_based_div{element_id}" style="display: flex;flex-direction: row;justify-content: space-around;align-items: center;align-content: center;left: -16%;">
                            <input type="checkbox" id="text_basedip_{element_id}" data-elementID="{element_id}" name="text_basedip_{element_id}"  class="checkboxinput custom-control-input" checked onchange="showtextinput(this)">
                            <label for="text_basedip_{element_id}" class="custom-control-label">Field type specific input</label><br>
                      </div>
                          <div class="form-group row">
                          <label class="acies_label col-sm-2 col-form-label" id="replacelabel{element_id}">Replace with</label>
                          <div class="col-sm-10" id="replacelistL3{element_id}">
                          </div>
                        </div>
                        <div id="findtext{element_id}" class="mb-4"></div>
                      </div>
                  <!-- Modal footer-->
                  <div class="modal-footer">
                    <button data-elementID="{element_id}" data-table-name="{tableUSlist['tableName']}" type="button" class="btn btn-primary btn-md float-right" is_find="True" onclick="findreplaceUS(this)">Find</button>
                    <button data-elementID="{element_id}" data-table-name="{tableUSlist['tableName']}" type="button" class="btn btn-primary btn-md float-right findreplacesave" id="findreplacesave_{element_id}" onclick="findreplaceUS(this)" pr_code="{getPrCodeFromElementId(element_id, request)}">Update</button>
                  </div>
                </div>
              </div>
            </div><script>$(`#selectcolumn{element_id}`).select2()
              </script>

              <div class="tab-content">
                  <div class="tab-pane " id="edit_data_tab{element_id}">
                  <div class="float-left m-1">
                    <button data-final-index="" data-toggle="modal" data-target="#find_replace_modal_{element_id}" data-table-name="{tableUSlist['tableName']}" id="find_replace_{element_id}" type="button" title="Find and replace" class="findreplace btn btn-primary btn-md mx-2 rounded px-2 my-1" data-table-name="{tableUSlist['tableName']}" data-elementID="{element_id}" name="Find and replace" onclick="findReplaceButton(this)"> Find and replace </button>
                  </div>

                    <table id="edit_upload_modal_datatable{element_id}" class="row-border display" style="width: 100%;">
                        <thead class="edit_upload_header">
                          <th>No Data Found</th>
                        </thead>
                        <tbody id="edit_upload_content">
                        </tbody>
                </table>
                  </div>

                  <div class="tab-pane active" id="upload_error_tab{element_id}">


                    <!-- Validation Status  -->
                      <div class="card error_validation_upload_card_content card-default " style="margin-top:10px;">
                        <div class="card-header" style='background:#565a5e;'>
                          <h6 class="card-title" style='color:white;'>Validation Status Table</h6>

                        </div>
                        <div class="card-body error_validation_upload_content" style="overflow-y:auto;">
                          <table id="error_upload_modal_datatable{element_id}" class="row-border display table" style="width: 100%;">
                                <thead class="error_upload_header">
                                <th>No Data Found</th>
                                </thead>
                                <tbody id="error_upload_content"  style="overflow-x: scroll;max-width: 200px;">
                                </tbody>
                          </table>

                          <table id="error_validation_count_modal_datatable{element_id}" class="row-border display table" style="width: 100%;">

                          <thead class="error_validation_count_header" >
                            <th>No Data Found</th>
                          </thead>
                          <tbody id="error_validation_count_content"  style="overflow-x: scroll;max-width: 200px;">
                          </tbody>
                          </table>
                        </div>
                      </div>

                  </div>

              </div>

            </div>

            <div class="modal-footer">
              <button type="button" id="edit_upload_save{element_id}" data-current-table =""  class="btn btn-primary  mx-2 rounded px-2" >Upload File</button>
              <button type="button" class="btn btn-primary mx-2 rounded px-2" data-dismiss="modal">Close</button>
            </div>


          </div>
        </div>
      </div>


<!-- End Upload Edit Modal -->"""
        )
        html = (
            html
            + """      </div>
           </div>
          </div>
        </div>

        """
            + f"""<div class="modal fade" id='downloadDataModal"""
            + f"""{element_id}"""
            + """' tabindex="-1" role="dialog" data-focus="false" aria-labelledby="DownloadData" aria-hidden="false">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" style="margin-left:35%;">Download data</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>

              <div class="modal-body">
                <form method="post" """
            + """enctype="multipart/form-data">
                  {% csrf_token %}
                <div class='card'>
                  <div class='card-body'>
                   <label for="">Select Table: </label>
                     <div class="ExistingFiles">
                       <select class="select2 form-control" name="Table_Name" id='selectTable"""
            + f"""{element_id}"""
            + """' required>
                         <option value="" disabled selected>Select Table</option>"""
        )
        for tableUSlist in t["tableUS"]:
            html = (
                html + f""" <option value="{tableUSlist['tableName']}">{tableUSlist['tableName']}</option>"""
            )
        html = (
            html
            + f"""
                       </select>
                    </div>

                    <div id ='daterangeStart"""
            + f"""{element_id}"""
            + """' class="col-12 mt-4">
                      <div class ="row">
                        <label for="">Select Date Range: </label>
                      </div>
                      <div class="row" style="margin-left:-1.2em;">
                         <div class="col-6">
                              <b style="margin-right:1em;font-weight:500;">Start Date:</b><input type="date" id='from"""
            + f"""{element_id}"""
            + """' name="Start_Date"  style="padding:1px;" placeholder="DD/MM/YYYY" required>
                         </div>
                         <div class="col-6">
                            <b style="margin-right:1em;font-weight:500;">End Date:</b><input type="date" id='to"""
            + f"""{element_id}"""
            + """' name="End_Date" placeholder="DD/MM/YYYY"  style="padding:1px;" required>
                          </div>
                       </div>
                   </div>
                   <br>
                   <div class="row">
                   <button id='download"""
            + f"""{element_id}"""
            + """' type="submit" name="uploadbuttonUS" value="downloadData" class="btn btn-primary btn-md mx-2 rounded px-2" style="float: right;"><i class="fa fa-download"></i>&nbsp;Download</button>
                  </div>
                  </div>
                </div>
              </form>
              </div>


            </div>

           </div>
          </div>
          <div class="modal fade" id='downloadHistoryModal"""
            + f"""{element_id}"""
            + """' tabindex="-1" role="dialog" data-focus="false" aria-labelledby="DownloadHistory" aria-hidden="false">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" style="margin-left:35%;">Upload History</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>

                <div class="modal-body">
                  <form method="post" """
            + """ enctype="multipart/form-data">
                    {% csrf_token %}
                  <div class='card'>
                    <div class='card-body'>
                     <label for="">Select Table: </label>
                       <div class="ExistingFiles">
                         <select class="select2 form-control" name="Table_Name" id='selectTableHistory"""
            + f"""{element_id}"""
            + """' required>
                           <option value="" disabled selected>Select Table</option>"""
        )
        for tableUSlist in t["tableUS"]:
            html = (
                html + f"""  <option value="{tableUSlist['tableName']}">{tableUSlist['tableName']}</option>"""
            )
        html = (
            html
            + f""" </select>
                      </div>

                      <div id ='daterangeHistoryStart"""
            + f"""{element_id}"""
            + """' class="col-12 mt-4">
                        <div class ="row">
                          <label for="">Select Date Range: </label>
                        </div>
                        <div class="row" style="margin-left:-1.2em;">
                           <div class="col-6">
                                <b style="margin-right:1em;font-weight:500;">Start Date:</b><input type="date" id='fromHistory"""
            + f"""{element_id}"""
            + """' name="Start_Date" style="padding:1px;" placeholder="DD/MM/YYYY" required>
                           </div>
                           <div class="col-6">
                              <b style="margin-right:1em;font-weight:500;">End Date:</b><input type="date" id='toHistory"""
            + f"""{element_id}"""
            + """' name="End_Date" placeholder="DD/MM/YYYY"  style="padding:1px;" required>
                            </div>
                         </div>
                     </div>
                     <br>
                     <div class="row">
                     <button id='downloadHistoryButton"""
            + f"""{element_id}"""
            + """' type="submit" name="uploadbuttonUS" value="uploadHistory" class="btn btn-primary btn-md mx-2 rounded px-2" style="float: right;"><i class="fa fa-download"></i>&nbsp;Download</button>
                    </div>
                    </div>
                  </div>
                </form>
                </div>
              </div>
             </div>
            </div>
            <div class="modal fade" id='downloadErrorLogModal"""
            + f"""{element_id}"""
            + """' tabindex="-1" role="dialog" data-focus="false" aria-labelledby="DownloadErrorLog" aria-hidden="false">
              <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" style="margin-left:40%">Error Log</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body">
                    <form method="post" """
            + """ enctype="multipart/form-data">
                      {% csrf_token %}
                    <div class='card'>
                      <div class='card-body'>
                       <label for="">Select Table: </label>
                         <div class="ExistingFiles">
                           <select class="select2 form-control" name="Table_Name" id='selectTableErrorLog"""
            + f"""{element_id}"""
            + """' required>
                             <option value="" disabled selected>Select Table</option>"""
        )
        for tableUSlist in t["tableUS"]:
            html = (
                html + f"""  <option value="{tableUSlist['tableName']}">{tableUSlist['tableName']}</option>"""
            )
        html = (
            html
            + f"""
                           </select>
                        </div>
                        <br>
                        <label for="">Select Date: </label>
                        <div class="ExistingFiles">
                          <select class="select2 form-control" name="select_date" id='selectDateErrorLog"""
            + f"""{element_id}"""
            + """' required>
                            <option value="" disabled selected>--------------------</option>
                            <option value="Latest">Latest</option>
                            <option value="Custom">Custom</option>
                          </select>
                       </div>

                        <div id ='ErrorLog"""
            + f"""{element_id}"""
            + """' class="col-12 mt-4" style="display:none">
                          <div class ="row">
                            <label for="">Select Date Range: </label>
                          </div>
                          <div class="row" style="margin-left:-1.2em;">
                             <div class="col-6">
                                  <b style="margin-right:1em;font-weight:500;">Start Date:</b><input type="date" id='fromErrorLog"""
            + f"""{element_id}"""
            + """' name="Start_Date" style="padding:1px;" placeholder="DD/MM/YYYY">
                             </div>
                             <div class="col-6">
                                <b style="margin-right:1em;font-weight:500;">End Date:</b><input type="date" id='toErrorLog"""
            + f"""{element_id}"""
            + """' name="End_Date" placeholder="DD/MM/YYYY"  style="padding:1px;">
                              </div>
                           </div>
                       </div>
                       <br>
                       <div class="row">
                       <button id='downloadErrorLogButton"""
            + f"""{element_id}"""
            + """' type="submit" name="uploadbuttonUS" value="ErrorLog" class="btn btn-primary btn-md mx-2 rounded px-2" style="float: right;"><i class="fa fa-download"></i>&nbsp;Download</button>
                      </div>
                      </div>
                    </div>
                  </form>
                  </div>
                </div>
               </div>
              </div>"""
        )
        script = script + scriptGenerator(
            "data_connector",
            "data_connector",
            element_id,
            request,
            t,
            advance_setting_check=advance_setting_check,
        )
        if tab_pane:
            pass
        else:
            html = html + "</div>"
        return html, script
    if tab_type == "Ocr":
        data = {}
        data["element_id"] = element_id
        data["tab_type"] = tab_type
        data["tab_header_name"] = header_name
        data["tab_body_content"] = create_view_tab_body_content
        tablename = model_name
        t = ocr_tab(model_name, data, request)
        html = ""
        if iden2 == "yes":
            html = (
                html
                + f"""
          <div class="tab-pane fade" id="{element_id}_tab_content" aria-labelledby="{element_id}-tab">"""
            )
        else:
            html = (
                html
                + f"""
          <div class="tab-pane fade" id="{element_id}_tab_content" role="tabpanel" aria-labelledby="{element_id}-tab">"""
            )
        html = (
            html
            + f"""
            <div class="card col-12">
            <div class="card-header">
                <h6 class="card-title" id="tableName_{element_id}">{tablename}</h6>
            </div>
            <div class="card-body">
                <div class="row">
                <div class="col-3 form-group">
                    <select name="selectOcrOperation" id="selectOcrOperation_{element_id}" class="form-control select2">
                    <option value="" disabled selected>Select Operation</option>
                    <option value="compareWithExisting">Compare with existing</option>
                    <option value="uploadNewTemplate">Upload new template</option>
                    </select>
                </div>
                </div>
            </div>
            </div>

            <div class="card" id="uploadNewTemplateCard_{element_id}" style="display: none;">
                <div class="card-header">
                <h6 class="card-title">Upload new template</h6>
                </div>
                <div class="card-body">
                <div class="row">
                    <div class="col-md-3 form-group">
                    <label for="newTemplateName_{element_id}">Template name</label>
                    <input type="text" class="textInput textinput form-control" id="newTemplateName_{element_id}">
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                    <form method="post" id="formdatainput_{element_id}" enctype="multipart/form-data">"""
            + """
                    {% csrf_token %}"""
            + f"""
                        <div class="custom-file">
                        <input type="file" class="custom-file-input" accept="image/*" name="imageOCR" id="ocrFile_{element_id}">
                        <label class="custom-file-label">Choose template image</label>
                        </div>
                    </form>
                    </div>
                </div>
                <br>
                <div class="row">
                    <div class="col-md-3">
                    <label for="selectRegionOfInterest">Select Region of Interest</label>
                    <select name="selectRegionOfInterest" id="selectRegionOfInterest_{element_id}" class="form-control select2">"""
        )
        for roi in t["region_of_interest"]:
            html = html + f""" <option value="{roi}">{roi}</option>"""
        html = (
            html
            + f"""  </select>
                    </div>

                </div>
                <br>
                <div class="row" id="maindiv_{element_id}" style="display:none;">
                    <div class="row">
                    <button type="button" id="addROI_{element_id}" class="btn btn-primary rounded ml-auto">Save Region of Interest</button>
                    </div>
                    <br>
                    <div class="row">
                    <div class="col-12" style="margin: auto;">
                        <img id="output_{element_id}"/>
                    </div>
                    </div>
                </div>
                </div>
                <div class="card-footer">
                <button type="button" id="saveTemplate_{element_id}" class="btn btn-primary mx-2 rounded px-2 float-right">Save Template</button>
                </div>
            </div>
            <div class="modal" id="compareWithExisting_{element_id}">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                    <h6 class="modal-title">Compare with existing</h6>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body" style="max-height:38rem;overflow:auto;">
                    <div class="row">
                        <div class="col-md-4">
                        <label for="selectTemplate">Select Template</label>
                        <select name="selectTemplate" id="selectTemplate_{element_id}" class="form-control select2">
                            <option value="" disabled selected>Select Template</option>"""
        )
        for temp in t["template_list"]:
            html = html + f""" <option value="{temp}">{temp}</option>"""
        html = (
            html
            + f"""
                        </select>
                        </div>
                    </div>
                    <br>
                    <div id="compareWithEContainer_{element_id}" style="display: none;">
                        <div class="row">
                        <div class="col-12" style="margin: auto;">
                            <img
                            id="templateImage_{element_id}"
                            width="100%"
                            alt="Template Preview"
                            title="Template Preview"
                            style="border:2px solid black;"
                            />
                        </div>
                        </div>
                        <br>
                        <div class="row">
                        <div class="col-md-4">
                            <form method="post" id="compareOCRForm_{element_id}" enctype="multipart/form-data">
                            """
            + """{% csrf_token %}"""
            + f"""
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" accept="image/*" name="compareOCRImage" id="compareOCRImage_{element_id}">
                                <label class="custom-file-label">Choose image</label>
                            </div>
                            </form>
                        </div>
                        </div>
                    </div>
                    </div>
                    <div class="modal-footer">
                    <button type="button" id="compareOCRButton_{element_id}" class="btn btn-primary mx-2 rounded px-2">Compare</button>
                    <button type="button" class="btn btn-primary mx-2 rounded px-2" data-dismiss="modal">Close</button>
                    </div>
                </div>
                </div>
            </div>

            <div class="card" id="ocrOutput_{element_id}" style="display: none;">
                <div class="card-header">
                <h6 class="card-title">Output</h6>
                </div>
                <div class="card-body">
                <div id="ocrOutputContainer_{element_id}">
                    <!-- ! Ocr output with editable content -->
                </div>
                </div>
                <div class="card-footer">
                <button type="button" id="saveUploadedData_{element_id}" class="btn btn-primary mx-2 rounded px-2 float-right">Save</button>
                </div>
            </div>

        </div>

        """
        )
        script = script + scriptGenerator("ocr", "ocr", element_id, request, t)
    elif tab_type == "reports":
        t = {}
        t["tab_type"] = tab_type
        html = (
            html
            + f"""
            <div class="tab-pane fade" id="{t['tab_type']}_tab_content" role="tabpanel" aria-labelledby="{t['tab_type']}-tab">
        <div class="container-fluid">
          <div class="font-weight-light">

            <div class="card ">
              <div class="card-header">
                <h6 class="card-title">Alert Details</h6>
                <div class="card-tools">
                  <button type="button" onclick="analysisConvertToPDF();" value="PDF" class=" btn btn-primary alertAgg" id='analysisPDF' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>
                </div>
              </div>

              <div class="card-body" id='alertDashboard'>
                <ul class="nav nav-tabs nav-fill" id="alertTab" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#tab1_tab1_content" role="tab"
                      aria-controls="tab1_tab_content" aria-selected="true">
                      <span class="contentEditable" id='tab1Header1'>Tab1</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#tab2_tab2_content" role="tab"
                      aria-controls="tab2_tab_content" aria-selected="false">
                      <span class="contentEditable" id='tab2Header2'>Tab2</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#tab3_tab3_content" role="tab"
                      aria-controls="tab3_tab_content" aria-selected="false">
                      <span class="contentEditable" id='tab3Header3'>Tab3</span>
                    </a>
                  </li>
                </ul>
                <div class="tab-content" id="alertTabContent">
                  <div class="tab-pane fade" id="tab1_tab1_content" role="tabpanel" aria-labelledby="tab1-tab1">
                   <div class="row" id='alertAgg'></div>
                <div class="row" id='alertChartsTab1'></div>
                  </div>
                  <div class="tab-pane fade" id="tab2_tab2_content" role="tabpanel" aria-labelledby="tab2-tab2">
                    <div class="row" id='alertChartsTab2'></div>
                  </div>
                  <div class="tab-pane fade" id="tab3_tab3_content" role="tabpanel" aria-labelledby="tab3-tab3">
                    <div class="row" id='alertChartsTab3'></div>
                  </div>
                </div>
              </div>
              <div id='elementHi'></div>
            </div>

          </div>
        </div>

      </div>
        """
        )
    elif tab_type == "report":
        tabConfig = json.loads(create_view_tab_body_content)
        row = {}
        row["element_id"] = element_id
        row["tab_type"] = tab_type
        row["tab_header_name"] = header_name
        row["tab_body_content"] = create_view_tab_body_content
        t = report_view_tab(tabConfig, request, row)
        html = (
            html
            + f"""
        <div class="tab-pane fade" id="{element_id}_tab_content" role="tabpanel" aria-labelledby="{element_id}-tab">
        <div class="container-fluid">
          <div class="font-weight-light">
              <div class="card">
                <div class="card-header">
                  <h6 class="card-title">Report creation</h6>
                </div>

                <div class="card-body" style="display:block;">
                <div class="mb-1">"""
        )
        for key, value in t["report_subelements"].items():
            if key == "Plot charts" and value == "Yes":
                html = (
                    html
                    + f"""<button type="button" value="Plot" id="plotCharts{element_id}" data-elementID="{element_id}" data-toggle="modal" data-target="#PlotElements{element_id}" class="btn btn-primary btn-md rounded px-2">
                    <i class="fas fa-chart-pie"></i>&nbsp;&nbsp;Plot charts
                    </button>"""
                )
            elif key == "Set alert" and value == "Yes":
                if t["table_data"] == "empty":
                    html = (
                        html
                        + f"""<button type="button" data-toggle="modal" data-target="#setalertmodal{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2">
                    Set alert
                    </button>"""
                    )
                else:
                    html = (
                        html
                        + f"""<button type="button" id="displayalert{element_id}"  data-elementid={element_id} class="btn btn-primary btn-md mx-2 rounded px-2">
                        Set alert
                    </button>"""
                    )
            elif key == "Customised report" and value == "Yes":
                html = (
                    html
                    + f""" <button id="customisedreport{element_id}" type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-toggle="modal" data-target="#reportmodal{element_id}" onclick="viewreport()">
                    Customised report
                    </button>"""
                )
            elif key == "Save template" and value == "Yes":
                html = (
                    html
                    + f"""<button id="saveTemplateButton{element_id}" type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1">
                    Save template
                    </button>"""
                )
            elif key == "Expand" and value == "Yes":
                html = (
                    html
                    + f"""<button id="expand{element_id}" value="Expand" type="button" class="btn btn-primary btn-md mx-2 rounded px-2 my-1">
                  Expand
                </button>"""
                )
        html = (
            html
            + f"""  </div>
                <div>
                  <table id="examplereport{element_id}" class="display compact reportcreationtable" style="width:100%;">
                    <thead>
                      <tr>"""
        )
        for header in t["report_headers"]:
            html = html + f"""  <th>{header}</th>"""
        html = (
            html
            + f"""  </tr>
                    </thead>
                    <tbody>"""
        )
        for report_innerdict in t["report_content"]:
            html = html + f"""  <tr>"""
            for key, value in report_innerdict.items():
                html = html + f"""  <td>{value}</td> """
            html = html + f"""  </tr> """
        html = (
            html
            + f""" </tbody>
                  </table>
                </div>
                </div>
              </div>
          </div>
        </div>


<div class="container-fluid" style="display:none" id="setalertcard{element_id}">
  <div class="row justify-content-center">
    <div class="card col-12">
      <div class="card-header">
        <h6 class="card-title">Report Alert details</h6>
        <div class="card-tools">
          <button type="button" value="Move to Alert" id="alertAgg{element_id}" data-elementid="{element_id}" class=" btn btn-primary alertAgg btn-md" title="Move to Alert"><i class='fas fa-arrow-alt-circle-right' style='font-size:1rem'></i></button>
        </div>
      </div>
      <div class="card-body" style="display:block;">
        <div class="row" style="margin-bottom:1em;">
          <button id="irow{element_id}" class="btn-md btn-primary" style="padding: .2em .5em;margin-left:0.5em;" data-toggle="modal" data-target="#setalertmodal1{element_id}"><i class="fa fa-plus"></i> Alert</button>
          <button id="icol{element_id}" class="btn-md btn-primary" style="padding: .2em .5em;margin-left:1em;"><i class="fa fa-plus"></i> Limit</button>
          <input id="col{element_id}" style="text-align:center;display:none;margin-left:0.5em;" placeholder="Enter Column Name"/>
            <!-- <button id="irow" class="btn-md btn-primary" style="padding: .2em .5em;">Insert Row</button> -->
        </div>
      <div id="col-12">
        <table id="example111{element_id}" data-elementid="{element_id}" class="display nowrap" style="width:100%">
            <thead>
              <tr>
              <th>Actions</th>"""
        )
        for alertItem in t["headers"]:
            if alertItem == "alert_id":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            elif alertItem == "id":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            elif alertItem == "name":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            elif alertItem == "tag":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            elif alertItem == "description":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            elif alertItem == "model_name":
                html = html + f"""<th style="text-align:center;">{alertItem}</th>"""
            else:
                html = (
                    html
                    + f"""<th style="text-align:center;">{alertItem}<i class="fa fa-times" title="Delete column" style="margin-left:1em" onclick="deletecol(&quot; {alertItem} &quot;)"></i></th>"""
                )

        html = (
            html
            + f"""    </tr>
          </thead>
            <tbody>"""
        )
        for alertItemcontent in t["alertdata"]:
            html = (
                html
                + f"""<tr id={alertItemcontent.alert_id}>
            <td class= "tbldelete" title="Delete record" id="{alertItemcontent.alert_id}"><i class="far fa-trash-alt ihover javaSC thin-icontrash text-primary" style="font-size:15px;"></td>"""
            )
            for key, val in alertItemcontent.items():
                if key == "alert_id":
                    html = (
                        html
                        + f"""<td><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                    )
                elif key == "id":
                    html = (
                        html
                        + f"""<td><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                    )
                elif key == "name":
                    html = (
                        html
                        + f"""<td><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                    )
                elif key == "tag":
                    html = html + f"""<td id="{alertItemcontent.alert_id}-{key}">{val}</td>"""
                elif key == "description":
                    html = (
                        html
                        + f"""<td><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                    )
                elif key == "model_name":
                    html = (
                        html
                        + f"""<td><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val}></td>"""
                    )
                else:
                    if val.status == "breached":
                        html = (
                            html
                            + f"""<td data-element_id="{element_id}" style="background-color:{val['color']}"><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;" value= {val['data']}></td>"""
                        )
                    else:
                        html = (
                            html
                            + f"""<td data-element_id="{element_id}"><input type="text" id="{alertItemcontent.alert_id}-{key}" style="border:0px;text-align:center;"></td>"""
                        )

            html = html + f""" </tr>"""
        html = (
            html
            + f"""  </tbody>
      </table>

    </div>
    <br/><br/>

      </div>
      </div>
      </div>
      </div>
        <div class="container-fluid" style="display: block; " id="plotSection{element_id}">

          <div class="row justify-content-center">
            <div class='card col-12'>
              <div class="card-header">
                <!--<h6 class="card-title">Visual Plot</h6>-->
                {htmlHeader}
              </div>
              <div class="card-body" style="display:block;">
                <div class="row justify-content-left" style="background: whitesmoke;">
                  <div class="form-inline" style="margin-left:0.5rem;">
                  <label>Cross Filter:&nbsp;</label>
                  <label class="switch" style="margin-top: 0.2rem;">
                    <input type="checkbox" id="crossFilterToggle{element_id}" data-elementID="{element_id}">
                    <span class="slider round"></span>
                  </label>
                </div>
              </div>
              <br>
                <div class="row justify-content-center" id="analysisrow{element_id}">
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
      <div class="modal fade" id="reportmodal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
          aria-hidden="true">
          <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content" style="border:none;">
              <div class="modal-header" style="background:#565a5e; color:white; text-align:center;">
                <h5 class="modal-title text-center w-100" style="margin:0 auto;">Customised Report</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div>
                  <div class="row">
                       <div class="col-1.5" style="margin-top:0.25rem;margin-left:0.5rem">
                           <b style="font-weight:500;">Date Range:</b>
                       </div>
                       <div class="col-5">
                          <select class="select2 fa fa-area-chart"  id="reportdate{element_id}">
                                        <option>Latest</option>
                                        <option>Today</option>
                                        <option>Yesterday</option>
                                        <option>This Week</option>
                                        <option>This Month</option>
                                        <option>This Quarter</option>
                                        <option>This Year</option>
                                        <option>Previous Week</option>
                                        <option>Previous Month</option>
                                        <option>Previous Quarter</option>
                                        <option>Previous Year</option>
                                        <option>Custom</option>
                           </select>
                        </div>
                       </div>
                       <div  id ="startandenddate{element_id}" style="display:none" class="col-8 mt-4">
                        <div class="row" style="margin-left:-1.2em;">
                           <div class="col-6">
                                <b style="margin-right:1em;font-weight:500;">Start Date:</b><input type="date" id="startdate{element_id}" style="padding:1px;" placeholder="DD/MM/YYYY">
                           </div>

                           <div class="col-6">
                              <b style="margin-right:1em;font-weight:500;">End Date:</b><input type="date" placeholder="DD/MM/YYYY" id="enddate{element_id}" style="padding:1px;">
                            </div>
                         </div>
                     </div>
                      <br>
                   </div>
                  <br>
                                    <form id="filter_form2" class="form-search" method="get">"""
            + """
                                      {% csrf_token %}"""
            + f"""
                                      <div class="btn-group">
                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                          {_("Advanced filter")}
                                          <span class="caret"></span>
                                        </button>
                                        <br>
                                        <br>
                                        <ul class="dropdown-menu">"""
        )
        for col, value in t["label_columns"].items():
            html = (
                html
                + f"""                  <li class="dropdown-item">
                                            <a href="javascript:void(0)" name={col} class="reportfilter_btn{element_id}" >
                                              { value }
                                            </a>
                                          </li>"""
            )
        html = (
            html
            + f"""
                                        </ul>
                                      </div>

                                      <div class="row" id="items">
                                        <table class="table reporttable reportfilter-table{element_id}">
                                        </table>
                                      </div>
                                      <br>
                                      <button type="button" class="btn  btn-sm btn-primary" id="reportbtn_search{element_id}" style="font-size:inherit;">
                                        {_("Run report")}
                                        <i class="fa fa-filter"></i>
                                      </button>
                                      <button type="button" class="btn  btn-sm btn-primary reportbtn_close" style="font-size:inherit;" onclick="close_report_filter()">
                                        Close
                                      </button>
                                    </form>
              </div>
            </div>
          </div>
        </div>
        """
        )
        html = (
            html
            + f"""
            <div class="modal fade" id="setalertmodal{element_id}" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Set Alert</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-4">
                    <div class="form-group">
                      <label  class=" requiredField">
                        Alert Name<span class="asteriskField">*</span>
                      </label>
                      <div class=""> <input type="text" id="alertname{element_id}" required="">
                      </div>
                    </div>
                  </div>
                  <div class="col-4">
                    <div class="form-group">
                      <label>
                        Alert tag multiple
                      </label>
                      <div class="">
                        <select class="form-control js-example-basic-multiple select2" id="select2multiple{element_id}" multiple="multiple">
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-4">
                    <div class="form-group">
                      <label>
                        Alert Description
                      </label>
                      <div class=""> <input type="text" id="alertdescription{element_id}">
                      </div>
                    </div>
                  </div>

                </div>
              </div>
              <div class="modal-footer">
                <!-- <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button> -->
                <button type="button" class="btn btn-primary button_standard_save" data-dismiss="modal" id="setalertfunction{element_id}" data-elementid="{element_id}">Save</button>
              </div>
            </div>
            </div>
            </div>

    <div class="modal fade" id="conditionmodal" role="dialog" data-focus="false">
      <div class="modal-dialog" style="max-width:700px">

        <!-- Modal content-->
        <div class="modal-content">
          <div class="modal-header">
            <div class="text-primary">Set Condition</div>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>
          <div class="modal-body">
            Set Condition For : <input type="text" id="selectedfield" style="border-bottom:0px;" disabled><br><br>

            <ul class="nav nav-tabs" id="myTab" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="home-tab1" data-toggle="tab" href="#home1" role="tab" aria-controls="home" aria-selected="true">Set Conditions</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Set Color</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Set Text</a>
              </li>
            </ul>
            <div class="tab-content" id="myTabContent">
              <div class="tab-pane show active" id="home1" role="tabpanel" aria-labelledby="home-tab1">
                <br><div class="row">
                  <div class="col-6"><br>
                    <div class="row">
                      <div class="col-5">Select Conditions :</div>
                      <div class="col-6">
                        <select class="select2" id="condition">
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
                <br><button type="button" class="btn btn-primary btn-md">Save</button>
              </div>
              <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                <br><div class="row">
                  <div class="col-6"><br>
                    <div class="row">
                      <div class="col-6">Select Color :</div>
                      <div class="col-6">
                      <input type="color">
                      </div>
                    </div>
                  </div>
                  </div>

                          <br><button type="button" class="btn btn-primary btn-md">Save</button>
                </div>
              <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                <br><div class="row">
                  <div class="col-6"><br>
                    <div class="row">
                      <div class="col-6">Select Conditional Text :</div>
                      <div class="col-6">
                      <input type="text" id="text" value="">
                      </div>
                    </div>
                  </div>
                  </div>
                          <br><button type="button" class="btn btn-primary btn-md" onclick="conditionset()">Save</button>
              </div>

            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
        </div>

      </div>
    </div>
    <div class="modal fade" id="setconditionmodal{element_id}" role="dialog" data-focus="false">
      <div class="modal-dialog" style="max-width:700px">

        <!-- Modal content-->
        <div class="modal-content">
          <div class="modal-header">
            <div class="text-primary"><h5>Set Condition</h5></div>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>
          <div class="modal-body">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="home-tab2{element_id}" data-toggle="tab" href="#home2{element_id}" role="tab" aria-controls="home" aria-selected="true">Set Conditions</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="profile-tab2{element_id}" data-toggle="tab" href="#profile2{element_id}" role="tab" aria-controls="profile" aria-selected="false">Set Color</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="contact-tab2{element_id}" data-toggle="tab" href="#contact2{element_id}" role="tab" aria-controls="contact" aria-selected="false">Set Text</a>
              </li>
            </ul>
            <div class="tab-content" id="myTabContent{element_id}">
              <div class="tab-pane show active" id="home2{element_id}" role="tabpanel" aria-labelledby="home-tab2{element_id}">
                <br>
                <div id="setcolumnheadername{element_id}" style="display:none"></div>
                <div id="setcolumnname1{element_id}" style="display:none"></div>
                <div id="setrowname1{element_id}" style="display:none"></div>
                <div class="row">
                  <div class="col-12"><br>
                    <div class="row">
                      <!-- <div class="col-4">Select Column on which you want to set condition :</div> -->
                      <div class="col-4">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="width:13em;">
                          Condition Parameter:
                          <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" style="font-size:small;padding-left:1em;">"""
        )
        for col, value in t["label_columns"].items():
            html = (
                html
                + f"""   <li>
                            <a href="javascript:void(0)" name={col} class="filter_btn1{element_id}">
                              { value }
                            </a>"""
            )
        html = (
            html
            + f"""                  </li>
                        </ul>
                      </div>
                    </div>
                    <br>
                    <div class="row">
                      <div class="setname" style="padding-left:2em;"></div>
                      <div class="row" id="items{element_id}">
                        <div class="alert-tableheader"></div>
                        <table class="table" id="alert-table{element_id}">
                        </table>
                      </div>
                    </div>

                  </div>
                  <!-- <div class="col-6"><br>
                    Limit : <input type="text" id="limit1">
                  </div> -->
                </div>
              </div>
              <div class="tab-pane fade" id="profile2{element_id}" role="tabpanel" aria-labelledby="profile-tab2{element_id}">
                <br><div class="row">
                  <div class="col-6"><br>
                    <div class="row">
                      <div class="col-6">Select Color :</div>
                      <div class="col-6">
                      <input type="color" id="colorset{element_id}" value="#aaaaaa">
                      </div>
                    </div>
                  </div>
                  </div>
                </div>
              <div class="tab-pane fade" id="contact2{element_id}" role="tabpanel" aria-labelledby="contact-tab2{element_id}">
                <br><div class="row">
                  <div class="col-6"><br>
                    <div class="row">
                      <div class="col-6">Select Conditional Text :</div>
                      <div class="col-6">
                      <input type="text" id="conditionaltext{element_id}" val="">
                      </div>
                    </div>
                  </div>
                  </div>
              </div>

            </div>
          </div>
          <div class="modal-footer">
            <button type="button" id="conditionsave{element_id}" class="btn btn-default" data-elementid="{element_id}">Save</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
        </div>

      </div>
    </div>
      """
        )
        script = script + scriptGenerator("report", "report", element_id, request, t)
    if tab_type == "computation":
        html = (
            html
            + f"""
      <div class="modal fade bd-example-modal-sm" id="run_model_in_progress_{element_id}" style="" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
          <div class="modal-dialog modal-lg-center modal-dialog-centered">
            <div class="modal-content" style="width:450px; padding-top:1.5rem; padding-bottom:1.5rem; margin:auto;">
              <div class="modal-body" style="display: flex; text-align: center; justify-content: center; flex-direction: column; align-items: center;">
                <div class="loader2" style="margin:auto;"></div>
                <h6 style="font-weight: 200;font-family: var(--font-family); text-align:center;margin-top:14px; margin-bottom:unset;">The model has been initialised, you may continue with your other tasks. You will be notified via the notification bell on it's successful completion.</h6>
                <style>
                  .loader2 {{
                    --c1:var(--primary-color,var(--primary));
                    --c2:var(--primary-color,var(--primary));
                    width: 25px;
                    height: 50px;
                    border-top: 4px solid var(--c1);
                    border-bottom: 4px solid var(--c1);
                    background: linear-gradient(90deg, var(--c1) 2px, var(--c2) 0 5px,var(--c1) 0) 50%/7px 8px no-repeat;
                    display: grid;
                    overflow: hidden;
                    animation: l5-0 2s infinite linear;
                  }}
                  .loader2::before,
                  .loader2::after {{
                    content: "";
                    grid-area: 1/1;
                    width: 75%;
                    height: calc(50% - 4px);
                    margin: 0 auto;
                    border: 2px solid var(--c1);
                    border-top: 0;
                    box-sizing: content-box;
                    border-radius: 0 0 40% 40%;
                    -webkit-mask:
                      linear-gradient(#000 0 0) bottom/4px 2px no-repeat,
                      linear-gradient(#000 0 0);
                    -webkit-mask-composite: destination-out;
                            mask-composite: exclude;
                    background:
                      linear-gradient(var(--d,0deg),var(--c2) 50%,#0000 0) bottom /100% 205%,
                      linear-gradient(var(--c2) 0 0) center/0 100%;
                    background-repeat: no-repeat;
                    animation: inherit;
                    animation-name: l5-1;
                  }}
                  .loader2::after {{
                    transform-origin: 50% calc(100% + 2px);
                    transform: scaleY(-1);
                    --s:3px;
                    --d:180deg;
                  }}
                  @keyframes l5-0 {{
                    80%  {{transform: rotate(0)}}
                    100% {{transform: rotate(0.5turn)}}
                  }}
                  @keyframes l5-1 {{
                    10%,70%  {{background-size:100% 205%,var(--s,0) 100%}}
                    70%,100% {{background-position: top,center}}
                  }}
                </style>
              </div>
            </div>
          </div>
        </div>
        """
        )
        pr_code = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "TabScreens",
                    "Columns": ["related_item_code"],
                },
                "condition": [
                    {
                        "column_name": "element_id",
                        "condition": "Equal to",
                        "input_value": element_id,
                        "and_or": "",
                    },
                ],
            },
        ).iloc[0]["related_item_code"]
        process_flow_design = read_data_func(
            request,
            {
                "inputs": {
                    "Data_source": "Database",
                    "Table": "NavigationSideBar",
                    "Columns": ["process_flow_design"],
                },
                "condition": [
                    {
                        "column_name": "item_code",
                        "condition": "Equal to",
                        "input_value": pr_code,
                        "and_or": "",
                    },
                ],
            },
        ).iloc[0]["process_flow_design"]
        if process_flow_design is not None:
            process_flow_design = json.loads(process_flow_design)
        process_flow_design_type = None
        if process_flow_design is not None:
            if element_id in process_flow_design["prCodes"]:
                process_flow_design_type = process_flow_design
        row = {}
        row["element_id"] = element_id
        row["tab_type"] = tab_type
        row["tab_header_name"] = header_name
        row["tab_body_content"] = create_view_tab_body_content
        computation_button_styling = json.loads(row["tab_body_content"]).get("computationButtonStyling")
        subprocess_name = json.loads(row["tab_body_content"]).get("sub_process_name")
        t = computation_tab(model_name, row, request)
        if tab_pane:
            tab_pane_class = "tab-pane fade"
            style = ""
        else:
            tab_pane_class = "c"
            style = ""
            html = html + "<div>"
        if iden2 == "yes":
            html = (
                html
                + f"""
          <div class="{tab_pane_class}" {style} id="{element_id}_tab_content" aria-labelledby="{element_id}-tab">"""
            )
        else:
            html = (
                html
                + f"""
        <div class="{tab_pane_class}" {style} id="{element_id}_tab_content" role="tabpanel" aria-labelledby="{element_id}-tab">"""
            )
        html = (
            html
            + f"""
        <div class="container-fluid">
          <div class="font-weight-light">

            <div class="card ">
              <div class="card-header">
                <h6 class="card-title" id="modelName_{element_id}" data-model_name = "{t['model_name']}">{t['model_name']}</h6>
              </div>"""
        )
        if process_flow_design_type is not None:
            html = html + '<div class="card-body">'
            html = (
                html
                + f""" <div class="col-12">
        <div id="processFlowDesignDiv{element_id}" class="displaynone processflowdiv" style="height: 10rem; width: 100%; border: 1px solid black; border-radius: 5px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">

                    </div>
                <div class="text-center">
        <i style="cursor: pointer;" class="fa-solid fa-angle-down" onclick="processDesignDiv_compute(this)" data-sub-process="{pr_code}" data-id="{element_id}" data-process="{process_flow_design_type['process_code']}"  data-list='{json.dumps(process_flow_design_type)}'></i>
        </div>
        </div>"""
            )
        else:
            html = html + f"""<div class="card-body">"""
        html = html + f"""<div>"""
        if t["form_computation"]:
            html = (
                html
                + f""" <div method="post" id="computationForm_{element_id}">"""
                + """
                  {% csrf_token %}"""
                + f"""
                    {t['form_computation']}
                  </div>"""
            )
        function_check = button_styling(computation_button_styling, "computationrunmodel")
        if function_check is not None:
            if t["mandatory list"]:
                html = (
                    html
                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="runModel_{element_id}" data-subprocess_name = "{subprocess_name}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2 standard_button_click {function_check['class']}" disabled>{function_check['iconAppend']} {function_check['changeText']}</button>"""
                )
            else:
                html = (
                    html
                    + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="runModel_{element_id}" data-subprocess_name = "{subprocess_name}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2 standard_button_click {function_check['class']}">{function_check['iconAppend']} {function_check['changeText']}</button>"""
                )
        else:
            if t["mandatory list"]:
                html = (
                    html
                    + f"""<button id="runModel_{element_id}" data-subprocess_name = "{subprocess_name}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2 standard_button_click" disabled>Run Model <i class="fas fa-play"></i></button>"""
                )
            else:
                html = (
                    html
                    + f"""<button id="runModel_{element_id}" data-subprocess_name = "{subprocess_name}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2 standard_button_click">Run Model <i class="fas fa-play"></i></button>"""
                )
        function_check = button_styling(computation_button_styling, "computationuploadconfigurescenarios")
        if function_check is not None:
            html = (
                html
                + f"""<button style ={function_check['styling']} onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']} id="scenarios_{element_id}" data-element_id = "{element_id}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2 {function_check['class']}">{function_check['iconAppend']} {function_check['changeText']}</button>"""
            )
        else:
            html = (
                html
                + f"""<button id="scenarios_{element_id}" data-element_id = "{element_id}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Configure Scenarios &nbsp;<i class="fas fa-globe"></i></button>"""
            )
        html = (
            html
            + f"""</div>
                <div class="row buttonalign">
                </div>
              </div>
            </div>

            <div class="card" id="runModelCard_{element_id}" style="display: block;">
              <div class="card-header">
                <h6 class="card-title" style=" float: right;">Run Date: <span id="runModel_date_{element_id}"></span></h6>
              </div>
              <div class="card-body">
              <div class="no_run_message" style="display: block;">
                <h6></h6>
              </div>
              <div id="multiRunOutputModal_{element_id}" style="display: none;">
                <div>
                  <!-- Modal body -->
                  <div class="modal-body" style="padding:0;">
                      <div class="card">
                          <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                              <span class="text-primary">Status:</span> <span id="statusMessageMRM_{element_id}"></span>
                          </div>
                          <div class="card-body" style="background:whitesmoke;display: none;">
                              <div class="progress"style="margin: 10px;background-color:black; height: 8px;">
                                  <div class="progress-bar progress-bar-striped active"id="progress_bar_MRM_{element_id}"
                                  role="progressbar"aria-valuenow="0"aria-valuemin="0"aria-valuemax="100"
                                  style=" font-size: small; background-color:var(--primary-color); height: 8px;">
                                      <!-- <span class="progress-bar-label"id="progress_bar_MRM_label"
                                      style="color:white">Facility Pooling in progress...</span> -->
                                  </div>
                              </div>
                          </div>
                      </div>
                      <div id="carouselMultiRun_{element_id}" class="carousel slide run_draw_carousel" data-interval="false">
                          <div class="card">
                              <div class="card-body">
                              <div class="carousel-inner" id='MultiRunCarouselInn_{element_id}' style="display:none;">
                                  <!--
                                      Add model run outputs on the fly.
                                   -->
                              </div>

                              <span class="carousel-control-prev-icon carousel-control-prev" href="#carouselMultiRun_{element_id}"
                                  role="button" data-slide="prev" aria-hidden="true" style="background-color:black;"></span>
                              <span class="sr-only">Previous</span>

                              <span class="carousel-control-next-icon carousel-control-next" href="#carouselMultiRun_{element_id}"
                                  role="button" data-slide="next" aria-hidden="true" style="background-color:black;"></span>
                              <span class="sr-only">Next</span>

                              </div>
                          </div>
                      </div>
                  </div>
                </div>
              </div>

                <div class="card" id="filterRunCard_computation{element_id}" style="display: none;">
                  <div class="card-body">
                    <button type="button" class="btn btn-tool" id="close_filterRuncard{element_id}" style="float:right;"><i class="fas fa-remove"></i></button>

                    <div class="btn-group">
                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                        {("Add Filter")}
                        <span class="caret"></span>
                      </button>
                      <ul class="dropdown-menu" id="condition_dropdown_run{element_id}">
                      </ul>
                    </div>
                    <div class="row">
                        <table class="table" id="filter-table_RunModel{element_id}">
                        </table>
                    </div>
                    <div>
                      <button type="button" id="btnSearchRun{element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" >Filter <i class="fa fa-filter fa-lg pl-1"></i></button>
                    </div>
                  </div>
                </div>

                <div class="modal" id="exData_comp_modal{element_id}">
                      <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
                        <div class="modal-content" style="width: 75%;text-align: center;justify-content: center;" >

                          <div class="modal-header" style="background:#565a5e;color:white;">
                            <h6 class="modal-title" style="flex: auto;">Extract Data</h6>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                          </div>

                          <div class="modal-body">
                            <form method="post" enctype="multipart/form-data">
                              <div class="row">
                                <div class="form-group col-12" id='exDataColumnDisp{element_id}'>
                                  <label>Select Columns (or leave blank to export all columns)</label>
                                  <select id="exDataColumn1{element_id}" class="select2 form-control" name="exDatacols" multiple>
                                  </select>
                                </div>
                              </div>
                            </form>
                          </div>

                          <div class="modal-footer">
                            <button type="submit" id="btn_exDataDownload{element_id}" data-elementid="{element_id}" data-submitname="exDataColumn1" name="uploadbuttonUS" onclick="downloadexdData_compL3.call(this)" value="ExtdownloadData" class="btn btn-primary mx-2 rounded px-2" data-dismiss="modal">
                            Download CSV
                            </button>
                            <button class="btn btn-primary mx-2 rounded px-2 rounded buttons-excel buttons-html5" data-dismiss="modal" type="button">
                            Download Excel
                            </button>
                            <button class="btn btn-primary mx-2 rounded px-2 rounded buttons-pdf buttons-html5" data-dismiss="modal" type="button">
                            Download PDF
                            </button>
                            <button class="btn btn-primary mx-2 rounded px-2 rounded buttons-xml buttons-html5" data-dismiss="modal" type="button">
                            Download XML
                            </button>
                            <button class="btn btn-primary mx-2 rounded px-2 rounded buttons-copy buttons-html5" data-dismiss="modal" type="button">
                            Copy Data
                            </button>
                          </div>

                        </div>
                      </div>
                    </div><script>
                    $('#exDataColumn1{element_id}').select2()
                    </script>

                 <div class="modal fade" id="freezeRunCard_computation{element_id}" role="dialog" data-focus="false">
                  <div class="modal-dialog modal-dialog-center" style="left:71px;">
                  <div class="modal-content" style="width:20rem">
                  <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                  <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Freeze Panes</span>
                  <button type="button" class="close" data-dismiss="modal" id="freeze_pane_close_{element_id}" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                  </button>
                  </div>
                  <div class="modal-body" id="freeze_pane_runbody_{element_id}" style="max-height:26rem;overflow:auto">

                  <label style="text-align: center;">Choose from which side :</label>
                  <div style="display: flex;flex-direction: row;align-content: space-between;justify-content: space-around;align-items: center;margin-top: 33px;">
                  <div class="custom-control custom-checkbox">
                        <input type="checkbox" id="freezerun_left_{element_id}" data-elementID="{element_id}" name="leftrun_{element_id}"  class="freezerunCheckbox checkboxinput custom-control-input" value="left">
                        <label for="freezerun_left_{element_id}" class="custom-control-label"> Left </label><br>
                  </div>
                  <div class="custom-control custom-checkbox">
                        <input type="checkbox" id="freezerun_right_{element_id}" data-elementID="{element_id}" name="rightrun_{element_id}" class="freezerunCheckbox checkboxinput custom-control-input" value="right">
                        <label for="freezerun_right_{element_id}" class="custom-control-label"> Right </label><br>
                  </div>
                  </div>

                  </div>
                  <div class="modal-footer">
                      <button data-elementID="{element_id}" type="button" id="btnFreezePaneRun{element_id}" onclick="unfreezeRuncardPane(this)" class="btn btn-primary btn-md rounded px-2">Unfreeze</button>
                      <button data-elementID="{element_id}" type="button" id="btnFreezePaneRun{element_id}" onclick="freezeRuncardPane(this)" class="btn btn-primary btn-md rounded px-2">Freeze</button>
                  </div>
                  </div>
                  </div>
                  </div>

                <div id="runModelContainer_{element_id}">
                  <div>
                    <button id="filter_button_run_computation{element_id}" data-elementID="{element_id}" data-toggle="modal" data-title="Filter" data-target="filterRunModal_computation{element_id}" class="btn btn-primary btn-md rounded">Filter</button>
                    <button id="freeze_button_run_computation{element_id}" data-elementID="{element_id}" data-toggle="modal" data-title="Freeze Panes" data-target="freezeRunModal_computation{element_id}" class="btn btn-primary btn-md rounded">Freeze Panes</button>
                    <button id="extractData_run_computation{element_id}" data-elementID="{element_id}" data-toggle="modal" data-title="Extract Data" data-target="extractDataModal_computation{element_id}" class="btn btn-primary btn-md rounded">Extract Data</button>
                  </div>
                  <style>
                    table.dataTable thead td, table.dataTable thead th {{
                      border-bottom: 0 !important;
                    }}
                  </style>
                  <table id="runModelTable_{element_id}" class="row-border">
                    <thead id="runModelTable_head_{element_id}">
                      <tr>

                      </tr>
                    </thead>
                    <tbody id="runModelTable_body_{element_id}">

                    </tbody>
                  </table>
                </div>
              </div>
            </div>


            <div class="card" id="previousRunCard_{element_id}" style="display: none;">
              <div class="card-header">
                <h6 class="card-title" style="float: right;">Run Date: <span id="previousRunDate_{element_id}" ></span></h6>
              </div>
              <div class="card-body">

                <div class="card" id="filterRunCard_computation{element_id}prev" style="display: none;">
                  <div class="card-body">
                    <button type="button" class="btn btn-tool" id="close_filterRuncard{element_id}prev" style="float:right;"><i class="fas fa-remove"></i></button>

                    <div class="btn-group">
                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                        {("Add Filter")}
                        <span class="caret"></span>
                      </button>
                      <ul class="dropdown-menu" id="condition_dropdown_run{element_id}prev">
                      </ul>
                    </div>
                    <div class="row">
                        <table class="table" id="filter-table_RunModel{element_id}prev">
                        </table>
                    </div>
                    <div>
                      <button type="button" id="btnSearchRun{element_id}prev" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Filter <i class="fa fa-filter fa-lg pl-1"></i></button>
                    </div>
                  </div>
                </div>

                <div class="modal" id="exData_comp_modal{element_id}prev">
                  <div class="modal-dialog modal-lg modal-dialog-centered" style="justify-content: center;">
                    <div class="modal-content" style="width: 75%;text-align: center;justify-content: center;" >

                      <div class="modal-header" style="background:#565a5e;color:white;">
                        <h6 class="modal-title" style="flex: auto;">Extract Data</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>

                      <div class="modal-body">
                        <form method="post" enctype="multipart/form-data">
                          <div class="row">
                            <div class="form-group col-12" id='exDataColumnDisp{element_id}prev'>
                              <label>Select Columns (or leave blank to export all columns)</label>
                              <select id="exDataColumn1{element_id}prev" class="select2 form-control" name="exDatacols" multiple>
                              </select>
                            </div>
                          </div>
                        </form>
                      </div>

                      <div class="modal-footer">
                        <button type="submit" id="btn_exDataDownload{element_id}prev" data-elementid="{element_id}prev" name="uploadbuttonUS" onclick="downloadexdData_compL3.call(this)" value="ExtdownloadData" class="btn btn-primary mx-2 rounded" data-submitname="exDataColumn1" data-dismiss="modal">
                        Download CSV
                        </button>
                        <button class="btn btn-primary mx-2 rounded buttons-excel buttons-html5" data-dismiss="modal" type="button">
                        Download Excel
                        </button>
                        <button class="btn btn-primary mx-2 rounded buttons-pdf buttons-html5" data-dismiss="modal" type="button">
                        Download PDF
                        </button>
                        <button class="btn btn-primary mx-2 rounded buttons-xml buttons-html5" data-dismiss="modal" type="button">
                        Download XML
                        </button>
                        <button class="btn btn-primary mx-2 rounded buttons-copy buttons-html5" data-dismiss="modal" type="button">
                        Copy Data
                        </button>
                      </div>

                    </div>
                  </div>
                </div><script>
                $('#exDataColumn1{element_id}prev').select2()
                </script>

                <div class="modal fade" id="freezeRunCard_computation{element_id}prev" role="dialog" data-focus="false">
                  <div class="modal-dialog modal-dialog-center" style="left:71px;">
                  <div class="modal-content" style="width:20rem">
                  <div class="modal-header" style="background:#565a5e; color:white; text-align:center;padding-bottom:2%;padding-top:3%;">
                  <span class="modal-title w-100" id="myModalLabel" style="font-size:1.2rem">Freeze Panes</span>
                  <button type="button" class="close" data-dismiss="modal" id="freeze_pane_close_{element_id}prev" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                  </button>
                  </div>
                  <div class="modal-body" id="freeze_pane_body_{element_id}prev" style="max-height:26rem;overflow:auto">

                  <label style="text-align: center;">Choose from which side :</label>
                  <div style="display: flex;flex-direction: row;align-content: space-between;justify-content: space-around;align-items: center;margin-top: 33px;">
                  <div class="custom-control custom-checkbox">
                        <input type="checkbox" id="freeze_left_{element_id}prev" data-elementID="{element_id}prev" name="left_{element_id}prev"  class="freezeprevCheckbox checkboxinput custom-control-input" value="left">
                        <label for="freeze_left_{element_id}prev" class="custom-control-label"> Left </label><br>
                  </div>
                  <div class="custom-control custom-checkbox">
                        <input type="checkbox" id="freeze_right_{element_id}prev" data-elementID="{element_id}prev" name="right_{element_id}prev" class="freezeprevCheckbox checkboxinput custom-control-input" value="right">
                        <label for="freeze_right_{element_id}prev" class="custom-control-label"> Right </label><br>
                  </div>
                  </div>

                  </div>
                  <div class="modal-footer">
                      <button data-elementID="{element_id}prev" type="button" id="btnFreezePaneRun{element_id}prev" onclick="unfreezeRuncardPane(this)" class="btn btn-primary btn-md rounded px-2">Unfreeze</button>
                      <button data-elementID="{element_id}prev" type="button" id="btnFreezePaneRun{element_id}prev" onclick="freezeRuncardPane(this)" class="btn btn-primary btn-md rounded px-2">Freeze</button>
                  </div>
                  </div>
                  </div>
                  </div>

                <div id="previousRunContainer_{element_id}">
                  <table class="row-border" id="previousRunTable_{element_id}">
                    <thead id="previousRunTable_head_{element_id}">
                      <tr>

                      </tr>
                    </thead>
                    <tbody id="previousRunTable_body_{element_id}">

                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <div class="modal" id="PF_Val_modal_{element_id}">
              <div class="modal-dialog modal-xl modal-dialog-centered">
                <div class="modal-content">
                      <!-- Modal Header -->
                      <div class="modal-header" style='padding:0.5rem;border-bottom:none;'>
                          <h5 class="modal-title" style="margin-left: 45%;">Results</h5>
                          <button type="button" class="close" data-dismiss="modal">&times;</button>
                      </div>
                      <!-- Modal body -->
                      <div class="modal-body" id="viewResults_{element_id}" style="max-height:38rem;overflow:auto;">
                      </div>
                  </div>
              </div>
            </div>


            <div class="modal" id="scenarioDataOutputModal_{element_id}" style="overflow-x: hidden;overflow-y: auto;">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                    <!-- Modal body -->
                    <div class="modal-body scenarioBody" style="padding:0;">
                        <div class="card">
                            <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                                <span class="existingDataHeader" class="text-primary">Existing Data</span>
                            </div>
                            <div class="card-body" style="background:whitesmoke;padding: 0;" id="viewScenarioData_{element_id}">

                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
            <div class="modal" id="runscenarioDataOutputModal_{element_id}">
              <div class="modal-dialog modal-lg modal-dialog-centered">
                  <div class="modal-content">
                  <!-- Modal body -->
                  <div class="modal-body" style="padding:0;">
                      <div class="card">
                          <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                              <span class="text-primary">Scenario Output</span>
                          </div>
                          <div class="card-body" style="background:whitesmoke;padding: 0;" id="viewRunScenarioData_{element_id}">

                          </div>
                      </div>

                  </div>
                  </div>
              </div>
            </div>
            <div class="modal" id="scenarioConfModal_{element_id}">
              <div class="modal-dialog modal-xl">
                <div class="modal-content">
                <!-- Modal body -->
                <div class="modal-body" style="padding:0;max-height: 45rem;overflow: auto;">
                    <div class="card">
                        <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                            <span class="text-primary">Model Inputs</span>
                        </div>
                        <div class="card-body" style="background:whitesmoke;border:solid 1.5px black;max-height:30rem;overflow:auto;padding: 0;padding-bottom: 1.25rem;">
                          <div id="model_inputs_scenario_{element_id}"> </div>
                        </div>
                    </div>
                    <div class="card">
                      <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                          <span class="text-primary">Configure Scenarios</span>
                      </div>
                      <div class="card-body" id = "scenario_container_{element_id}" style="background:whitesmoke;padding: 0.75rem;">
                          <div class = "row">
                              <div class = "col-6">
                                <div class="card">
                                  <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                                      <span class="text-primary">Saved Scenarios</span>
                                  </div>
                                  <div class="card-body" style="height: 19.25rem;overflow:auto;">
                                    <div class="row">
                                      <table class="table table-bordered table-hover" style="overflow: auto;max-height: 16rem;">
                                        <thead class="thead-dark">
                                          <tr>
                                            <th scope="col" style="text-align: center;">Scenario name</th>
                                            <th scope="col" style="text-align: center;">Action</th>
                                          </tr>
                                        </thead>
                                        <tbody id="savedScenarioTable_{element_id}">

                                        </tbody>
                                      </table>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div class = "col-6">
                                <div class="card">
                                  <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                                      <span class="text-primary">Add Scenarios</span>
                                  </div>
                                  <div class="card-body">
                                    <form class="" method="POST">"""
            + """
                                      {% csrf_token %}"""
            + f"""
                                      <div class="form-inline">
                                        <label for="scenario_name_{element_id}">Scenario Name:</label>
                                        &nbsp;&nbsp;<input type="text" id="scenario_name_{element_id}" data-element_id="{element_id}" class="textinput textInput form-control" required>
                                      </div>
                                      <br>
                                      <div class="form-inline">
                                        <label for="scenario_configuration_date_{element_id}">Configuration date:</label>
                                        &nbsp;&nbsp;<input type="date" placeholder="YYYY-MM-DD" id="scenario_configuration_date_{element_id}" class="form-control datepickerinput" required>
                                      </div>
                                      <br>
                                      <div class="custom-control custom-checkbox">
                                          <input type="checkbox" name="runWithBaseModel_{element_id}" class="checkboxinput custom-control-input" id="runWithBaseModel_{element_id}" value="Risk_Measures" required>
                                          <label for="runWithBaseModel_{element_id}" class="custom-control-label">
                                          Run with base model
                                          </label>
                                      </div>
                                      <br>
                                      <div class="row" style="overflow: auto;">
                                        <table class="table table-bordered table-hover">
                                          <thead class="thead-dark">
                                            <tr>
                                              <th scope="col" style="text-align: center;">Model input</th>
                                              <th scope="col" style="text-align: center;">Scenario type</th>
                                            </tr>
                                          </thead>
                                          <tbody id="element_incremental_data_{element_id}">

                                          </tbody>
                                        </table>
                                      </div>
                                      <br>
                                      <br>
                                      <button type="button" id="run_scenario_{element_id}" data-element_id="{element_id}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Run Scenario &nbsp;<i class="fas fa-play"></i></button>
                                      <button type="button" id="save_scenario_{element_id}" data-scenario_id="None" data-element_id="{element_id}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Save &nbsp;<i class="fas fa-save"></i></button>
                                    </form>
                                  </div>
                                </div>
                              </div>
                          </div>
                      </div>
                      <div class="card">
                        <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                            <span class="text-primary">Configure Comparative Analysis</span>
                        </div>
                        <div class="card-body" id = "configure_comparative_{element_id}" style="background:whitesmoke;padding: 0.75rem;display:none">
                          <div class="col-6">
                            <div class="card" id="configure_card_{element_id}">
                              <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                                <span class="text-primary">Column level configurations</span>
                              </div>
                              <div class="card-body" style="display:flex">
                                <!--<div class="col-4">
                                  <label>Configuration column:</label>
                                  <select id="config_type_{element_id}" class="select2" onchange="populateValue.call(this,'{element_id}')">
                                    <option value="column_level">Column level</option>
                                    <option value="row_level">Row level</option>
                                  </select>
                                </div>-->
                                <div class="col-4">
                                  <label>Identifier column:</label>
                                  <select id="identifier_column_{element_id}" class="select2" onchange="populateValue.call(this,'{element_id}')" multiple>

                                  </select>
                                </div>
                                <div class="col-4">
                                  <label>Comparative column:</label>
                                  <select id="comparative_column_{element_id}" class="select2" multiple>

                                  </select>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="col-6">
                            <div class="card" id="configure_card_{element_id}">
                              <div class="card-header" style="font-size: medium; font-weight: bold;text-align:center;">
                                <span class="text-primary">Row level configurations</span>
                              </div>
                              <div class="card-body" id="configure_parameter_{element_id}" style="display:flex">
                                <span>Select configuration type as row level to configure parameters</span>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="card-footer" style="display:none">
                          <button type="button" id="save_comparative_{element_id}" onclick="saveComparative.call(this,'{element_id}')" class="btn btn-primary btn-md mx-2 rounded px-2" style="float:right;">Save</button>
                        </div>
                      </div>
                </div>
                <div class="modal-footer" style="padding:0.5rem;">
                    <button type="button" id="quitScenario_{element_id}" onclick="closeScenario.call(this,'{element_id}')" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
            </div>
          </div>
        </div>

      </div>
      """
        )
        script = script + scriptGenerator("computation", "computation", element_id, request, t)
        if tab_pane:
            pass
        else:
            html = html + "</div>"
    return html, script


def scriptGenerator(
    template,
    view,
    element_id,
    request,
    t="",
    data1="",
    tab_pane=True,
    dic={},
    tablename="",
    iden="",
    advance_setting_check="",
):
    html = ""
    tab_body_content = t
    if view == "PivotReport":
        html = (
            html
            + """
      <script>
            """
            + """   google.load("visualization", "1", {
        packages: ["corechart", "charteditor"],
      });
        """
            + f"$('#report_db_name_{element_id}').on('select2:select',function()"
            + "{"
            + """
              let dbname = $(this).val()
              $.ajax({
              url: `/users/${urlPath}/create_new_pivot_report/`,
              data:{'operation':'fetch_model_details',model_name: dbname},
              type: "POST",
              async: false,
            dataType: "json",
              success: function (data) {
                let pivot_json_data = data['field_data']

                if(pivot_json_data){
                  pivot_json_data = JSON.parse(pivot_json_data)

                  $("#report_output_"""
            f"""{element_id}"""
            + """").pivotUI(pivot_json_data,
                    $(function () {
                      var derivers = $.pivotUtilities.derivers;
                      var renderers ={}
                        $.extend(
                          renderers,
                          $.pivotUtilities.renderers,
                          $.pivotUtilities.plotly_renderers,
                          $.pivotUtilities.c3_renderers,
                          $.pivotUtilities.d3_renderers,
                          $.pivotUtilities.gchart_renderers,
                          $.pivotUtilities.subtotal_renderers,
                        );

                      $("#report_output_"""
            f"""{element_id}"""
            + """").pivotUI(pivot_json_data, {
                        renderers:renderers,

                        rendererName: "Heatmap",

                        rows: [],
                        cols: [],
                        onRefresh: function (config) {
                          var config_copy = JSON.parse(JSON.stringify(config));
                          delete config_copy["rendererOptions"];
                          delete config_copy["localeStrings"];
                          latestconfig = JSON.stringify(config_copy, undefined, 2);
                        },
                      },true);
                    })
                  )
                }
              },
              error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              },
            });
            });

      //Save Report
          $(document).find("#save_reportbtn_"""
            f"""{element_id}"""
            + """").on('click',function(){

            const reportname = """
            f"""'{tab_body_content['report_name']}'"""
            + """;
            const categoryname = """
            f"""'{tab_body_content['category_name']}'"""
            + """;
            var config = $("#report_output_"""
            f"""{element_id}"""
            + """").data("pivotUIOptions");
            var config_copy = JSON.parse(JSON.stringify(config));
            var element_id ="""
            f"""'{element_id}'"""
            + """

            // Remove parameter if empty
            if(Object.keys(config_copy).includes("aggregators")){
              delete config_copy["aggregators"]
            }
            if(Object.keys(config_copy).includes("renderers")){
              delete config_copy["renderers"]
            }
            delete config_copy["rendererOptions"];
            delete config_copy["localeStrings"];
            latestconfig = JSON.stringify(config_copy, undefined, 2);

            if (reportname && categoryname) {
              $.ajax({
                method: "POST",
                dataType:'json',
                url: `/users/${urlPath}/create_new_pivot_report/`,
                data: {
                  operation: 'L3_save_pivot_report',
                  reportname: reportname,
                  element_id:element_id,
                  categoryname: categoryname,
                  report_data : latestconfig,
                  dbname: $('#report_db_name_"""
            f"""{element_id}"""
            + """').val(),
                },
                success: function (data) {
                    location.reload()
                },
                error: function () {

                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});


                },
              });
            }
          });

        //Reload Old configuration
        $.ajax({
                method: "POST",
                dataType:'json',
                url: `/users/${urlPath}/create_new_pivot_report/`,
                data: {
                  operation: 'L3_reload_pivot_report',
                  element_id: """
            f"""'{element_id}'"""
            + """,

                },
                success: function (data) {
                if(data.hasOwnProperty('table_list')){
                  let table_list = JSON.parse(data['table_list'])
                  $('#report_db_name_"""
            f"""{element_id}"""
            + """').empty()
                  $('#report_db_name_"""
            f"""{element_id}"""
            + """').append(`<option value='' selected disabled>Select Table Name</option>`)
                  if(table_list.length > 0){
                    for(let i=0;i<table_list.length;i++){
                      $('#report_db_name_"""
            f"""{element_id}"""
            + """').append(`<option value='${table_list[i]}'>${table_list[i]}</option>`)
                    }
                  }
                }



                if(data.hasOwnProperty('report_data')){
                  if(data['report_data'].length > 0){
                    let pivot_json_data = data['report_data'][0]['reportconfig']
                    let pivot_table_data = data['table_data']
                    if(pivot_json_data){
                      pivot_json_data = JSON.parse(pivot_json_data)
                    }
                    if(pivot_table_data){
                      pivot_table_data = JSON.parse(pivot_table_data)
                    }
                    $(function () {
                    var derivers = $.pivotUtilities.derivers;
                    var renderers = $.extend(
                      $.pivotUtilities.renderers,
                      $.pivotUtilities.gchart_renderers
                    );
                    $("#report_output_"""
            f"""{element_id}"""
            + """").pivotUI(pivot_table_data, {
                      renderers,
                      ...pivot_json_data,
                      rendererOptions: { gchart: { width: 800, height: 600 } },
                      onRefresh: function (config) {
                        var config_copy = JSON.parse(JSON.stringify(config));
                        delete config_copy["aggregators"];
                        delete config_copy["renderers"];

                        delete config_copy["rendererOptions"];
                        delete config_copy["localeStrings"];
                        latestconfig = JSON.stringify(config_copy, undefined, 2);
                      },
                    });
                    $('#report_db_name_"""
            f"""{element_id}"""
            + """').val(data['report_data'][0]['dbname']).trigger('change')
                  });
                  }}
                },
                error: function () {

                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});


                },
              });

              $('#report_db_name_"""
            f"""{element_id}"""
            + """').select2({width:'60%'})
            </script>
    <style>

      .pvtUi {
        color: #333;
      }

      table.pvtTable {
        font-size: 8pt;
        text-align: left;
        border-collapse: collapse;
      }
      table.pvtTable thead tr th,
      table.pvtTable tbody tr th {
        background-color: #e6eeee;
        border: 1px solid #cdcdcd;
        font-size: 8pt;
        padding: 5px;
      }

      table.pvtTable .pvtColLabel {
        text-align: center;
      }
      table.pvtTable .pvtTotalLabel {
        text-align: right;
      }

      table.pvtTable tbody tr td {
        color: #3d3d3d;
        padding: 5px;
        background-color: #fff;
        border: 1px solid #cdcdcd;
        vertical-align: top;
        text-align: right;
      }

      .pvtTotal,
      .pvtGrandTotal {
        font-weight: bold;
      }

      .pvtVals {
        text-align: center;
        white-space: nowrap;
      }
      .pvtRowOrder,
      .pvtColOrder {
        cursor: pointer;
        width: 15px;
        margin-left: 5px;
        display: inline-block;
      }
      .pvtAggregator {
        margin-bottom: 5px;
      }

      .pvtAxisContainer,
      .pvtVals {
        border: 1px solid lightgray;
        background: white;
        padding: 5px;
        min-width: 20px;
        min-height: 20px;

        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -khtml-user-select: none;
        -ms-user-select: none;
      }
      .pvtAxisContainer li {
        padding: 8px 6px;
        list-style-type: none;
        cursor: move;
      }
      .pvtAxisContainer li.pvtPlaceholder {
        -webkit-border-radius: 5px;
        padding: 3px 15px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        border: 1px dashed #aaa;
      }

      .pvtAxisContainer li span.pvtAttr {
        -webkit-text-size-adjust: 100%;
        background: var(--primary-color);
        color: white;
        border: 1px solid #dedede;
        padding: 2px 5px;
        white-space: nowrap;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
      }

      .pvtTriangle {
        cursor: pointer;
        color: white;
      }

      .pvtHorizList li {
        display: inline;
      }
      .pvtVertList {
        vertical-align: top;
      }

      .pvtFilteredAttribute {
        font-style: italic;
      }

      .pvtFilterBox {
        z-index: 100;
        width: 300px;
        border: 1px solid gray;
        background-color: #fff;
        position: absolute;
        text-align: center;
      }

      .pvtFilterBox h4 {
        margin: 15px;
      }
      .pvtFilterBox p {
        margin: 10px auto;
      }
      .pvtFilterBox label {
        font-weight: normal;
      }
      .pvtFilterBox input[type="checkbox"] {
        margin-right: 10px;
        margin-left: 10px;
      }
      .pvtFilterBox input[type="text"] {
        width: 230px;
      }
      .pvtFilterBox .count {
        color: gray;
        font-weight: normal;
        margin-left: 3px;
      }

      .pvtCheckContainer {
        text-align: left;
        font-size: 14px;
        white-space: nowrap;
        overflow-y: scroll;
        width: 100%;
        max-height: 250px;
        border-top: 1px solid lightgrey;
        border-bottom: 1px solid lightgrey;
      }

      .pvtCheckContainer p {
        margin: 5px;
      }

      .pvtRendererArea {
        padding: 5px;
      }
      /* {
        "mode":"full","isactive": false;
      } */
    </style>
      """
        )
    if view == "create view":
        comparable_context = dic
        if template == "Comparable":
            html = (
                html
                + f"""
            <script>
              var table_name={json.loads(comparable_context)['table']}
              $(`.columnMapperButton[data-elementid={element_id}]`).attr('data-table-name',JSON.stringify(table_name))
              $(`.upload_tables_comp`).attr('value',JSON.stringify(table_name))
            </script>
          """
            )
        if template == "Constraint":
            dataTab = read_data_func(
                request,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])
            model_name = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            verboseList = None
            actual_model_name = dynamic_model_create.get_model_class(model_name, request)
            verboseList = {
                field.name: field.verbose_name.title() for field in actual_model_name.concrete_fields
            }
            data = {}
            data["table_hidden"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            data["constraint_name"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_name"]
            data["constraint_type"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_type"]
            data["selected_tables"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["selected_tables"]
            data["selectedConstraint_fields"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4].get("selectedConstraint_fields")
            data["constraint_holder"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4]["constraint_holder"]

            data["remove_additional_column"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][4].get("remove_additional_column")
            data["verbose_list"] = verboseList
            data["actions"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3]["value"]

            html = (
                html
                + f"""

             <script type="text/javascript">

            function updateThreshold(element){{
              let constraint_condition = $(element).val()
              let tRow2 = $(element).parent().closest("tr");

              if(constraint_condition == 'In' || constraint_condition == "Not In"){{

                if( !(tRow2.find('td').eq(10).find('.constraint_row_input').hasClass("select2-hidden-accessible")) ){{
                  tRow2.find('td').eq(10).find('.constraint_row_input').remove()
                  tRow2.find('td').eq(10).append('<select  class="constraint_row_input select2 form-control" name="inputs[]" style="width:150px" multiple="true"></select>')
                  tRow2.find('td').eq(10).find('.constraint_row_input').select2({{tags:true, placeholder: "Enter Threshold",}})
                }}

              }}
              else{{
                if( tRow2.find('td').eq(10).find('.constraint_row_input').hasClass("select2-hidden-accessible") ){{
                  tRow2.find('td').eq(10).find('.constraint_row_input').select2('destroy')
                  tRow2.find('td').eq(10).find('.constraint_row_input').remove()
                  tRow2.find('td').eq(10).append('<input data-name="threshold" class="constraint_row_input form-control p-2 textInput" placeholder="Enter Threshold " style="width:150px;">')
                }}
              }}
            }}

                $('.add_constraint{element_id}').off('click').on('click',function() """
                + "{"
                + f""" $("#tables_constraint{element_id}").find("tbody").append(`
                                    <tr class="constraint-row" style="margin-top:3px;border-top:1px solid lightgrey;display: flex;justify-content: space-around;">
                        <td  data-name="use_case">
                        <input  data-name="use_case" class="use_cases form-control p-2 textInput"   placeholder="Usecase Name" style="width:150px;">
                        </td>

                        <td  data-name="rule_set">
                            <select class="constraint_row_reference_id select2 form-control "      name="template" style="width:150px;">
                            <option selected disabled> {data['verbose_list']['rule_set']} </option>
                            </select>
                        </td>

                        <td  data-name="constraint_name" >
                            <input  data-name="constraint_name" class="constraint_row_names form-control p-2 textInput"   placeholder="Constraint Name" style="width:150px;">
                        </td>

                        <td data-name="constraint_type">
                            <select  class="constraint_row_selection select2 form-control "   name="template" style="width:150px;">
                            <option selected disabled>Constraint Type </option>"""
            )
            for k, v in data["constraint_holder"].items():
                html = html + f""" <option value="{k}"  data-type="{v}"> {k} </option>"""
            html = (
                html
                + f""" </select>
                        </td>

                        <td data-name="table_name" >
                            <select class="constraint_row_tables select2 form-control"   name="template" style="width:150px;">
                            <option selected disabled>Select {data['verbose_list']['table_name']}</option>"""
            )
            for i in data["selected_tables"]:
                html = html + f""" <option value="{i}">{i}</option>"""
            html = (
                html
                + f""" </select>
                        </td>

                        <td  data-name="unique_constraint_column">
                            <select  class="constraint_row_mapping select2 form-control "   name="template" style="width:150px;">
                            <option selected disabled> {data['verbose_list']['unique_constraint_column']} </option>

                            </select>
                        </td>

                        <td data-name="constraint_parameter">
                            <select  class="constraint_row_column select2 form-control"   name="template" style="width:150px;">
                            <option selected disabled> {data['verbose_list']['constraint_parameter']}</option>
                            </select>
                        </td>

                        <td data-name="constraint_parameter_value"  size=5 style="max-height: 80px;overflow: hidden;">
                            <select  class="constraint_row_value select2 form-control" name="template" style="width:150px;" >

                            </select>
                        </td>

                        <td data-name="condition_datatype">
                            <select class="constraint_row_condition_type select2 form-control" name="template" style="width:150px;">
                            <option selected disabled>{data['verbose_list']['condition_datatype']}</option>
                            <option value="Character">Character Type</option>
                            <option value="Numeric">Numeric Type</option>
                        </td>

                        <td data-name="condition" >
                            <select class="constraint_row_condition select2 form-control" onchange="updateThreshold(this)" name="template" style="width:150px;">
                            <option selected disabled>{data['verbose_list']['condition']}</option>
                        </td>

                        <td data-name="threshold">
                            <input data-name="threshold"  class="constraint_row_input form-control p-2 textInput"    placeholder="Enter {data['verbose_list']['threshold']}" style="width:150px;">
                        </td>

                        <td  data-name="applicability_status"  >
                            <select class="constraint_row_status select2 form-control" name="template" style="width:150px;">
                            <option selected disabled>{data['verbose_list']['applicability_status']} </option>
                            <option value="Applicable">Applicable</option>
                            <option value="Not Applicable">Not Applicable</option>
                            </select>
                        </td>
                        <td>
                                        <a href="#"  class="remove_div remove-filter fa fa-times text-primary""></a>
                                        </td>

                        </tr>



                                `)

                var selectedFields = "{data['selectedConstraint_fields']}"
                var additionalCol ="{data['remove_additional_column']}"


                $("#tables_constraint{element_id}").find("tbody").find('tr').eq(-1).find('td').each(function()"""
                + "{"
                + """
                    $(this).show()
                    if(selectedFields.includes($(this).attr('data-name'))){
                        $(this).hide()
                    }
                    if(additionalCol.includes($(this).attr('data-name'))){
                        $(this).hide()
                    }
                });"""
                + f""" $("#tables_constraint{element_id}").find("tbody").find('tr').eq(-1).find('select').each(function()"""
                + """{
                    parent = $(this).parent();$(this).select2({dropdownParent:parent});"""
                + f""" $("#tables_constraint{element_id}").find("tbody").find('tr').eq(-1).on('click','.remove_div',function() """
                + """ {
                    $(this).closest("tr").remove()
                    })


                })"""
                + f"""; runner( $("#tables_constraint{element_id}").find("tbody").find('tr').eq(-1));"""
                + """})

                </script>


                <script class="text/javascript">




                function runner(rowName){
                $(document).ready(function(){

                    $.ajax({
                            url: `/users/${urlPath}/constriant_get_data/`,
                            data: {"""
                + f"""                'table_name':"{data['table_hidden']}",
                                'operation': 'fetch_reference_id',"""
                + """            },
                            type: "POST",
                            dataType: "json",
                            success: function (data) {

                        rowName.find(".constraint_row_reference_id").empty()
                                for (i in data["referenceList"]) {

                                rowName.find(".constraint_row_reference_id").append(new Option(data["referenceList"][i], data["referenceList"][i], false, false))

                                    }

                                    rowName.find(".constraint_row_reference_id").select2({
                        tags: true
                        });

                            },
                            error: function () {
                            rowName.find(".constraint_row_reference_id").select2({
                                tags: true
                            });
                                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                            }
                            })
                    })



                        $(".constraint_row_selection").on('change',function(){
                        let tRow2 = $(this).parent().closest("tr");

                        let reader = tRow2.find('td').eq(3).find("select option:selected").attr('data-type');

                        if(reader == "Array"){
                            tRow2.find('td').eq(7).find(".constraint_row_value").empty()
                            tRow2.find('td').eq(7).find(".constraint_row_value").attr('disabled',true);
                            tRow2.find('td').eq(7).find(".constraint_row_value").prop('multiple', false);
                        }
                        else{
                            tRow2.find('td').eq(7).find(".constraint_row_value").attr('disabled',false);
                            if(reader=="Grouped" ){

                        tRow2.find('td').eq(7).find(".constraint_row_value").prop('multiple',true);
                        tRow2.find("td").eq(7).css("overflow-y","scroll");
                        tRow2.find("td").eq(7).css( "font-size","10px");

                        tRow2.find('td').eq(7).find(".constraint_row_value").select2();
                        }else{
                        tRow2.find('td').eq(7).find(".constraint_row_value").prop('multiple', false);
                        tRow2.find("td").eq(7).css("overflow","visible");
                        tRow2.find("td").eq(7).css( "font-size","12px");
                        tRow2.find('td').eq(7).find(".constraint_row_value").select2();
                        }
                        }
                    })

                    $('.constraint_row_tables').off('select2:select').on('select2:select',function(){

                    let table_name=$(this).val()
                    let tRow = $(this).parent().closest("tr");

                            $.ajax({
                            url: `/users/${urlPath}/constriant_get_data/`,
                            data: {
                                'table_name':table_name,
                                'operation': 'fetch_table_columns_constraint',
                            },
                            type: "POST",
                            dataType: "json",
                            success: function (data) {
                            tRow.find('td').eq(6).find('.constraint_row_column').empty()
                            tRow.find('td').eq(5).find('.constraint_row_mapping').empty()

                                for (i in data.columnList) {


                                    tRow.find('td').eq(6).find('.constraint_row_column').append(new Option(data.columnList[i], data.columnList[i], false, false))
                                    tRow.find('td').eq(5).find('.constraint_row_mapping').append(new Option(data.columnList[i], data.columnList[i], false, false))
                                    }


                            },
                            error: function () {
                                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                            }
                            })
                        })



                        $(".constraint_row_condition_type").on('change',function(){

                        let condition_datatype= $(this).val()
                        let tRow2 = $(this).parent().closest("tr");

                        if( tRow2.find('td').eq(10).find('.constraint_row_input').hasClass("select2-hidden-accessible") ){
                          tRow2.find('td').eq(10).find('.constraint_row_input').select2('destroy')
                        }
                        tRow2.find('td').eq(10).find('.constraint_row_input').remove()
                        tRow2.find('td').eq(10).append('<input data-name="threshold" class="constraint_row_input form-control p-2 textInput" placeholder="Enter Threshold " style="width:150px;">')

                        if(condition_datatype=== 'Character'){
                            tRow2.find('td').eq(9).find('.constraint_row_condition').empty()
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Starts With","Starts With", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Ends With","Ends With", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Contains","Contains", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Not Contains","Not Contains", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Equal to","Equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Not Equal to","Not Equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("In","In", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Not In","Not In", false, false))

                        }else if(condition_datatype=== 'Numeric'){
                            tRow2.find('td').eq(9).find('.constraint_row_condition').empty()
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Equal to","Equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Not Equal to","Not Equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Greater than","Greater than", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Smaller than","Smaller than", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Greater than equal to","Greater than equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Smaller than equal to","Smaller than equal to", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("In","In", false, false))
                            tRow2.find('td').eq(9).find('.constraint_row_condition').append(new Option("Not In","Not In", false, false))
                        }
                    })



                    $('.constraint_row_column').off('select2:select').on('select2:select',function(){

                    let tRow2 = $(this).parent().closest("tr");
                    let table_name=tRow2.find('td').eq(4).find(".constraint_row_tables").val()
                    let column_name=$(this).val();

                    let constraint_selection = tRow2.find('td').eq(3).find("select option:selected").attr('data-type')


                            $.ajax({
                            url: `/users/${urlPath}/constriant_get_data/`,
                            data: {
                                'table_name':table_name,
                                'column_name':column_name,
                                'operation': 'fetch_table_columns_val_constraint',
                            },
                            type: "POST",
                            dataType: "json",
                            success: function (data) {
                            if(constraint_selection == "Grouped" || constraint_selection=="Individual"){
                                tRow2.find('td').eq(7).find('.constraint_row_value').empty()
                                for (i in data.columnList) {
                                tRow2.find('td').eq(7).find('.constraint_row_value').append(new Option(data.columnList[i], data.columnList[i], false, false))}
                                }
                                else{
                                tRow2.find('td').eq(7).find('.constraint_row_value').empty()
                                }

                            },
                            error: function () {
                                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                            }
                        })
                            })


                        }"""
                + f""";runner($("#tables_constraint{element_id}").find("tbody").find('tr').eq(-1));


                // Constraint Selectable Fields
                var selectedFields = "{data['selectedConstraint_fields']}"
                var additionalCol ="{data['remove_additional_column']}"
                var lenght_thead = document.getElementById('tables_constraint{element_id}').rows[0].cells
                var lenght_tr = document.getElementById('tables_constraint{element_id}').rows[1].cells;"""
                + """    for(var i =0; i < lenght_thead.length-1 ;i++ ){
                    lenght_thead[i].style.display="block"
                        lenght_tr[i].style.display="block"
                        if(selectedFields.includes(lenght_thead[i].getAttribute("data-name"))){
                        lenght_thead[i].style.display="none"
                        lenght_tr[i].style.display="none"
                        }else if(additionalCol.includes(lenght_thead[i].getAttribute("data-name"))){
                        lenght_thead[i].style.display="none"
                        lenght_tr[i].style.display="none"
                        }
                    }
                """
                + f"""$("#savebuttoninfo{element_id}").on("click",function()"""
                + """{
                    let constraintDict = [];
                    var saveDic={};"""
                + f"""    $("#tables_constraint{element_id}").find('tbody').find('tr').each(function()"""
                + """{
                    var checker= $(this).find('td').eq(3).find('select  option:selected').attr('data-type')
                    if(checker === "Array"){
                        saveDic ={
                    "rule_set":$(this).find('td').eq(1).find('select').val(),
                    "constraint_name":$(this).find('td').eq(2).find('input').val(),
                    "constraint_type":$(this).find('td').eq(3).find('select').val(),
                    "table_name":$(this).find('td').eq(4).find('select').val(),
                    "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                    "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                    "constraint_parameter_value":$(this).find('td').eq(7).find('select').val(),
                    "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                    "condition":$(this).find('td').eq(9).find('select').val(),
                    "threshold":$(this).find('td').eq(10).find('.constraint_row_input').val(),
                    "applicability_status":$(this).find('td').eq(11).find('select').val(),
                    "use_case":$(this).find('td').eq(0).find('input').val() ,"""
                + """}
                    }else if(checker === "Grouped"){
                        saveDic ={
                    "rule_set":$(this).find('td').eq(1).find('select').val(),
                    "constraint_name":$(this).find('td').eq(2).find('input').val(),
                    "constraint_type":$(this).find('td').eq(3).find('select').val(),
                    "table_name":$(this).find('td').eq(4).find('select').val(),
                    "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                    "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                    "constraint_parameter_value":JSON.stringify($(this).find('td').eq(7).find('select').val()),
                    "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                    "condition":$(this).find('td').eq(9).find('select').val(),
                    "threshold":$(this).find('td').eq(10).find('.constraint_row_input').val(),
                    "applicability_status":$(this).find('td').eq(11).find('select').val(),
                    "use_case":$(this).find('td').eq(0).find('input').val() ,"""
                + """}
                    }else{
                        saveDic ={
                    "rule_set":$(this).find('td').eq(1).find('select').val(),
                    "constraint_name":$(this).find('td').eq(2).find('input').val(),
                    "constraint_type":$(this).find('td').eq(3).find('select').val(),
                    "table_name":$(this).find('td').eq(4).find('select').val(),
                    "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                    "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                    "constraint_parameter_value":[$(this).find('td').eq(7).find('select').val()][0],
                    "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                    "condition":$(this).find('td').eq(9).find('select').val(),
                    "threshold":$(this).find('td').eq(10).find('.constraint_row_input').val(),
                    "applicability_status":$(this).find('td').eq(11).find('select').val(),
                    "use_case":$(this).find('td').eq(0).find('input').val()  ,"""
                + """}
                    }
                    for(var key in saveDic){
                    if(selectedFields.includes(key)){
                    delete saveDic[key]
                    }
                }
                constraintDict.push(saveDic);
                    });
                """
                + f"""    var itemCode = windowLocation.split("/")[4];"""
                + """
                  if(! itemCode.includes("Pr")) {
                    var id_ele = """
                + f"""'{element_id}'"""
                + """
                    for(let z = 0; z < item_code_list.length; z++) {
                      if(item_code_list[z].hasOwnProperty(id_ele)) {
                        itemCode = item_code_list[z][id_ele]
                        break
                      }
                    }
                  };
                """
                + f"""
                    let preview_mode = $("#savebuttoninfo{element_id}").attr('data-preview-mode')
                    let table_hidden =$("#table_hidden{element_id}").val();"""
                + """if(!preview_mode){
                    $.ajax({
                    url:`/users/${urlPath}/${itemCode}/create_file/`,
                    data: {
                        'constraint_data':JSON.stringify(constraintDict),"""
                + f"""     'element_id':'{element_id}','customValidationList':$('#customValidationList1{element_id}').attr('value'),"""
                + """        'operation': 'save_constraint_data',
                        'table_name':table_hidden,
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                        location.reload()
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Unable to save. Please try agian.'});
                    }
                    })
                    }
                })




                </script>"""
                + """<script>
                function saveAsDraft(){
                    let constraintDict = [];
                        var saveDic={};"""
                + f"""            $("#tables_constraint{element_id}").find('tbody').find('tr').each(function()"""
                + """{
                        var checker= $(this).find('td').eq(2).find('select  option:selected').attr('data-type')
                        if(checker === "Array"){
                            saveDic ={
                            "rule_set":$(this).find('td').eq(1).find('select').val(),
                            "constraint_name":$(this).find('td').eq(2).find('input').val(),
                            "constraint_type":$(this).find('td').eq(3).find('select').val(),
                            "table_name":$(this).find('td').eq(4).find('select').val(),
                            "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                            "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                            "constraint_parameter_value":$(this).find('td').eq(7).find('select').val(),
                            "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                            "condition":$(this).find('td').eq(9).find('select').val(),
                            "threshold":$(this).find('td').eq(10).find('input').val(),
                            "applicability_status":$(this).find('td').eq(11).find('select').val(),
                            "use_case":$(this).find('td').eq(0).find('input').val(),"""
                + """}
                        }else if(checker === "Grouped"){
                            saveDic ={
                              "rule_set":$(this).find('td').eq(1).find('select').val(),
                              "constraint_name":$(this).find('td').eq(2).find('input').val(),
                              "constraint_type":$(this).find('td').eq(3).find('select').val(),
                              "table_name":$(this).find('td').eq(4).find('select').val(),
                              "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                              "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                              "constraint_parameter_value":JSON.stringify($(this).find('td').eq(7).find('select').val()),
                              "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                              "condition":$(this).find('td').eq(9).find('select').val(),
                              "threshold":$(this).find('td').eq(10).find('input').val(),
                              "applicability_status":$(this).find('td').eq(11).find('select').val(),
                              "use_case":$(this).find('td').eq(0).find('input').val() , """
                + """}
                        }
                        else{
                            saveDic ={
                        "rule_set":$(this).find('td').eq(1).find('select').val(),
                        "constraint_name":$(this).find('td').eq(2).find('input').val(),
                        "constraint_type":$(this).find('td').eq(3).find('select').val(),
                        "table_name":$(this).find('td').eq(4).find('select').val(),
                        "unique_constraint_column":$(this).find('td').eq(5).find('select'). val(),
                        "constraint_parameter":$(this).find('td').eq(6).find('select').val(),
                        "constraint_parameter_value":[$(this).find('td').eq(7).find('select').val()][0],
                        "condition_datatype":$(this).find('td').eq(8).find('select').val(),
                        "condition":$(this).find('td').eq(9).find('select').val(),
                        "threshold":$(this).find('td').eq(10).find('input').val(),
                        "applicability_status":$(this).find('td').eq(11).find('select').val(),
                        "use_case":$(this).find('td').eq(0).find('input').val()"""
                + """}
                        }
                    constraintDict.push(saveDic);
                        });


                    var checker_dict=[]
                    for (i in constraintDict[0]){
                    checker_dict.push(constraintDict[0][i])
                    } """
                + f"""    var create_view_save_element_id = "{element_id}"
                    var table_name = "{data['table_hidden']}"
                    var data_table_id = null
                    var itemCode = windowLocation.split("/")[4];"""
                + """
                    if(! itemCode.includes("Pr")) {
                    var id_ele = """
                + f"""'{element_id}'"""
                + """
                    for(let z = 0; z < item_code_list.length; z++) {
                      if(item_code_list[z].hasOwnProperty(id_ele)) {
                        itemCode = item_code_list[z][id_ele]
                        break
                      }
                    }
                  };
                """
                + f"""
                    if($(`#saveDraftbuttoninfo{element_id}`).attr('data-table-id')) """
                + "{"
                + f""" data_table_id = $(`#saveDraftbuttoninfo{element_id}`).attr('data-table-id') """
                + """    }
                    if(0){
                      Swal.fire({icon: 'warning',text:"Fields should not be left blank." });
                    }else{
                    $.ajax({
                        url:`/users/${urlPath}/${itemCode}/create_file/`,
                        data: {
                            'constraint_data':JSON.stringify(constraintDict),
                            'element_id':create_view_save_element_id,
                            'operation': 'save_constraint_draft_data',
                            'table_name':table_name, """
                + f"""        'data_entry':$(`#saveDraftbuttoninfo{element_id}`).attr('data-entry'),"""
                + """            'data-table-id': data_table_id,
                        },
                        type: "POST",
                        dataType: "json",
                        success: function (data) {
                            location.reload();
                        },
                        error: function () {
                            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                        }
                        })
                    }
                }



                function previewDraft(){"""
                + f"""    var create_view_save_element_id = "{element_id}"
                var table_name = "{data['table_hidden']}"; """
                + """
                $.ajax({
                        url:`/users/${urlPath}/constriant_get_data/`,
                        data: {
                            'operation': 'preview_data_fetch',
                            'table_name':table_name,
                            'create_viewID':create_view_save_element_id,
                        },
                        type: "POST",
                        dataType: "json",
                        success: function (data) {
                        $('#previewTable').empty()
                        if(data.previewList.length > 0){
                            $('#previewTable').append("<tr class='header_column' style='border-bottom:2px solid var(--primary-color);'>")
                            $('#previewTable').find('.header_column').append(`<td style="font-weight:bolder">&nbsp;&nbsp;Actions</td>`)
                            for(var i in data.verboseName){
                            $('#previewTable').find('.header_column').append(`<td style="font-weight:bolder">${data.verboseName[i]}</td>`)
                            }
                            $('#previewTable').append("</tr>")

                            for(var i=0;i<data.previewList.length;i++){
                            $('#previewTable').append(`<tr class="column_${i}">`)
                            $('#previewTable').find(`.column_${i}`).append(`<td>
                            <a data-toggle="tooltip" title="Save As Final" data-elementID="${data.table_id[i]}" data-table_model_name="${table_name}" value="detail" id="SaveAsFinal${data.table_id[i]}" class="SaveAsFinal">
                              <i name="actions" value="Save" class="fa-solid fa-floppy-disk ihover javaSC thin-icon" style="font-size: 15px"></i>
                            </a>&nbsp;
                            <a data-toggle="tooltip" class"edit_button" title="Edit record" data-elementID="${data.table_id[i]}" id="EditRecord${data.table_id[i]}" data-table_name="${table_name}" value="update">
                              <i name="actions" value="Edit" class="fa fa-edit ihover javaSC thin-icon" style="font-size:15px"></i>
                            </a>&nbsp;
                            <a data-toggle="tooltip" class="delete_button" title="Delete record" data-elementID="${data.table_id[i]}" data-table_name="$(this).attr('data-table-name')" value="delete" id="deletedraft${data.table_id[i]}"><i name="actions" value="Delete" class="far fa-trash-alt ihover javaSC" style="font-size:15px"></i></a></td>`)
                                for(var vi = 0;vi<Object.keys(data.verboseName).length;vi++){
                                var preview_keys = Object.keys(data.previewList[i])
                                var verb_ans=Object.keys(data.verboseName)[vi]
                            if(preview_keys.includes(verb_ans)){
                                $('#previewTable').find(`.column_${i}`).append(`<td data-preview-name="${verb_ans}">${data.previewList[i][verb_ans]}</td>`)
                            }
                            else{
                                $('#previewTable').find(`.column_${i}`).append(`<td> --- </td>`)
                            }
                            }
                            $('#previewTable').append("</tr>")

                        $('#previewTable').find(`#EditRecord${data.table_id[i]}`).on('click',function(){
                            var data_elementID = $(this).attr('data-elementid')
                            $("#draftModal").modal('hide')

                            $(`#saveDraftbuttoninfo${create_view_save_element_id}`).attr('data-table-id',data_elementID)
                            $(`#saveDraftbuttoninfo${create_view_save_element_id}`).attr('data-entry','Existing')
                            var testing1  = []


                            if($('.remove_div ')){
                            $('.remove_div ').trigger('click')
                            }

                            $("#tables_constraint"+create_view_save_element_id).find('tbody').find('tr').eq(-1).each(function(i){
                            var current_data_elementID = data_elementID

                            for (n in data.completeData){
                                if(Object.keys(data.completeData[n])[0] === current_data_elementID){
                                    var user_info =data.completeData[n][current_data_elementID]
                                    var count =0
                                    for(var i in user_info ){


                                        $(this).find('td').find(`input[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`input[data-name=${i}]`).val(user_info[i]).trigger("change")

                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("change")
                                        count +=1
                                        if(i === "constraint_parameter"){
                                        testing1.push(user_info[i])
                                        }
                                        if(i === "constraint_parameter_value"){
                                        testing1.push(user_info[i])
                                        }

                                    }
                                    setTimeout(function(){

                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("change")
                                    },100)
                                }

                            }

                            })
                            var group_checker
                            if(testing1[1].indexOf('[') > -1){
                            group_checker = JSON.parse("[" + testing1[1] + "]");
                            }

                            setTimeout(function(){

                                        $('.constraint_row_column').val(testing1[0]).trigger("select2:select")
                                        $('.constraint_row_column').val(testing1[0]).trigger("change")

                                    },200)
                            setTimeout(function(){
                            if(typeof(group_checker) === "object"){
                                $('.constraint_row_value').val(group_checker[0]).trigger("select2:select")
                            $('.constraint_row_value').val(group_checker[0]).trigger("change")
                            }else{
                                $('.constraint_row_value').val(testing1[1]).trigger("select2:select")
                            $('.constraint_row_value').val(testing1[1]).trigger("change")
                            }


                            },500)
                        })

                        $('#previewTable').find(`#SaveAsFinal${data.table_id[i]}`).on('click',function(){
                            var data_elementID = $(this).find('a').attr('data-elementid')
                            $("#draftModal").modal('hide')
                            var data_elementID = $(this).attr('data-elementid')
                            var current_data_elementID = data_elementID
                            var testing1  = []
                            $("#tables_constraint"+create_view_save_element_id).find('tbody').find('tr').eq(-1).each(function(i){
                            var current_data_elementID = data_elementID

                            for (n in data.completeData){
                                if(Object.keys(data.completeData[n])[0] === current_data_elementID){
                                    var user_info =data.completeData[n][current_data_elementID]
                                    var count =0
                                    for(var i in user_info ){


                                        $(this).find('td').find(`input[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`input[data-name=${i}]`).val(user_info[i]).trigger("change")


                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("change")
                                        count +=1
                                        if(i === "constraint_parameter"){
                                        testing1.push(user_info[i])
                                        }
                                        if(i === "constraint_parameter_value"){
                                        testing1.push(user_info[i])
                                        }

                                    }
                                    setTimeout(function(){


                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("select2:select")
                                        $(this).find('td').find(`select[data-name=${i}]`).val(user_info[i]).trigger("change")
                                    },100)
                                }

                            }

                            })
                            var group_checker
                            if(testing1[1].indexOf('[') > -1){
                            group_checker = JSON.parse("[" + testing1[1] + "]");
                            }
                            setTimeout(function(){

                                        $('.constraint_row_column').val(testing1[0]).trigger("select2:select")
                                        $('.constraint_row_column').val(testing1[0]).trigger("change")

                                    },200)
                            setTimeout(function(){
                            if(typeof(group_checker_saveFinal) === "object"){
                                $('.constraint_row_value').val(group_checker_saveFinal[0]).trigger("select2:select")
                            $('.constraint_row_value').val(group_checker_saveFinal[0]).trigger("change")
                            }else{
                                $('.constraint_row_value').val(testing1[1]).trigger("select2:select")
                            $('.constraint_row_value').val(testing1[1]).trigger("change")
                            }
                            },500)

                            setTimeout(function(){
                            if($(`#savebutton_${create_view_id}`).trigger('click')){

                                $.ajax({
                                url: `/users/${urlPath}/constriant_get_data/`,
                                data: {
                                'element_id':data_elementID,
                                'operation': 'remove_from_draft_to_final',
                                },
                                type: "POST",
                                dataType: "json",
                                success: function (data) {
                                  Swal.fire({icon: 'success',text: 'Submitted successfully!'});
                                },
                                error: function () {
                                Swal.fire({icon: 'error',text: 'Error! Failure in executing submit request. Please try again.'});
                                }
                            })
                            }

                            },800)

                            setTimeout(function(){"""
                + f"""$(`#savebuttoninfo{element_id}`).removeAttr('data-preview-mode')
                        """
                + f"""$(`#savebuttoninfo{element_id}`).trigger('click') """
                + """    },1000)

                        })
                            }

                        }else{
                            $('#previewTable').html(`<p style="text-align:center;">No Draft Records Exist For ${table_name}</p>`)

                        }

                        $("#draftModal").modal('show')
                        },
                        error: function () {
                            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                        }
                    })
                }
                """
                + f"""    var pastVal =  $(`#saveDraftbuttoninfo{element_id}`).attr('data-entry');"""
                + """    function resetDraft(){"""
                + """    var confirmReset = null
            Swal.fire({
                            icon:'question',
                            title: `Reset Draft Status: ${ """
                + f"""$(`#saveDraftbuttoninfo{element_id}`).attr('data-entry')"""
                + """}  => ${pastVal}?\n\nClick 'Yes' to confirm or click 'No' if you do not wish to reset it.`,
                            showDenyButton: true,
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            denyButtonText: `No`,
                          }).then((result) => {
                            if (result.isConfirmed) {
                               confirmReset = true
                            } else if (result.isDenied) {
                               confirmReset = false
                            }
                          })

                if(confirmReset = true){"""
                + f"""    $(`#saveDraftbuttoninfo{element_id}`).attr('data-entry','New')
                    $(`#saveDraftbuttoninfo{element_id}`).removeAttr('data-table-id')"""
                + """    }
                }


                </script>
            """
            )
        if template == "Flow Definition":
            dataTab = read_data_func(
                request,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])
            flowcolumn = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][6]["flowcolumn"]
            mastertableflow = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][6]["mastertableflow"]
            masterColumnflow = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][6]["masterColumnflow"]
            html = (
                html
                + f"""
            <script>
            var flowcolumn = "{flowcolumn}"
            var mastertable = "{mastertableflow}"
            var mastercolumn = "{masterColumnflow}"
            var hidecolumn = "div_id_" + flowcolumn
            $("#id_{flowcolumn}_{element_id}").parent().parent().css("display","none")
            </script>
            """
            )
        elif template == "mandatory":
            html = (
                html
                + "<script>"
                + f"\n createViewIdList.push('{element_id}')"
                + "\n$('.search_create_view').find('form').find(('.search_enabled')).keyup(function(){\
            \n value = $(this).val()\
            \n$('.search_results_display').empty()\
            \nname = $(this).attr('name')\
            \nurl_string = window.location.pathname\
            \nf_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)\
            \ns_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)\
            \nt_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)\
            \napp_code2 = url_string.substring(f_occ+1,s_occ)\
            \ncurrent_dev_mode2 = url_string.substring(s_occ+1,t_occ)\
            \nif(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){\
              \ncurrent_dev_mode2 = 'User'\
            \n}\
            \n$.ajax({\
              \nurl: `/users/${urlPath}/search_create_view/`,\
              \ndata: {\
              \n'operation': 'create_view',\
              \n'name': name,\
              \n'value': value,\
             \n},\
              \ntype: 'POST',\
              \ndataType: 'json',\
              \nsuccess: function (data) {\
                \nfor (const property in data['data']) {\
                 \n $('.search_results_display').append(`<p style='padding:1em;background-color:aliceblue;'>${data['data'][property]}</p>`)\
                \n}\
              \n},\
              \nerror: function () {\
                \nalert('Error');\
              \n}\
            \n})\
            \n})\
            </script>"
            )
            html = (
                html
                + "<script>\
              \nvar ctoken = $('form').find(`input[name='csrfmiddlewaretoken']`).attr('value');\
              \n$.ajaxSetup({\
                  \nbeforeSend: function (xhr, settings) {\
                      \nxhr.setRequestHeader('X-CSRFToken', ctoken);\
                  \n}\
              \n});\
              \n$.ajax({\
              \nurl: `/users/${urlPath}/constriant_get_data/`,\
              \ndata: {"
                + f"\n'elementID': '{element_id}',"
                + "\n'operation': 'reload_config_mapper',\
              \n},\
              \ntype: 'POST',\
              \ndataType: 'json',\
                  \nsuccess: function (data) {\
                    \nif (\
                      \nObject.prototype.hasOwnProperty.call(data, 'reload_custom_validation')\
                    \n) {\
                      \nif (data.reload_custom_validation) {\
                        \nconst rowData = JSON.parse(data.reload_custom_validation);\
                        \n$(`#configuration_val_row_${data.element_id}`).empty();\
                        \nlet rowHtml = '';\
                        \nlet count = 1;\
                        \nfor (const rowName in rowData) {\
                          \nif(rowName != 'Master_filter'){\
                            \nrowHtml += `<tr> <td>${count}</td> <td value='${rowName}'>${rowName}</td> <td><button type='button' \nclass='btn-primary reconfigurecustomvalidation' name='${rowName}' data-element-id=${data.element_id}' id='reconfigurecustomvalidation_${rowName}'><i \nclass='fas fa-trash'></i></button> <button type='button' class='btn-primary editcustomexist_validation' name='${rowName}' data-element-id='${data.element_id}' href='#carouselCustomValidation${data.element_id}' data-slide='next' id='editcustomexist_validation_${rowName}'><i class='fas fa-edit'></i></button></td></tr>`;\
                            \ncount++;\
                          \n}\
                        \n}\
                        \n$(`#configuration_val_row_${data.element_id}`).append(rowHtml);\
                        \n$(`#customValidationList1${data.element_id}`).attr(\
                          \n'value',\
                          \ndata.reload_custom_validation\
                        \n);\
                      \n}\
                    \n}\
                    \nif(Object.prototype.hasOwnProperty.call(data, 'reload_data')){\
                      \nif (data.reload_data){\
                        \n$(`#columnmapperDict${data.element_id}`).attr(\
                          \n'value',\
                          \ndata.reload_data\
                        \n);\
                      \n}\
                    \n}\
                  \n},\
                  \nerror: function () {\
                    \nwindow.Swal.fire({icon: 'error',text: 'Error! Please try again.'});\
                  \n},\
                \n});\
              </script>"
            )
        elif template == "multi select":
            data = {}
            data_tab = dic
            master = {}
            master[element_id] = data_tab["master"]
            popUpOption = data_tab.get("popUpOption")
            if data_tab.get("condition") not in [None]:
                data["cond"] = data_tab["condition"]
            else:
                data["cond"] = []
            data["masterTable"] = data_tab["value"]
            data["masterColumn"] = data_tab["masterColumn"]
            data["tableColumn"] = data_tab["char_column"]
            data["master"] = data_tab["master"]
            data["add"] = data_tab["add"]
            data["checkBox"] = data_tab["checkBox"]
            columnNameMulti = []
            lenn = []
            for k in range(len(data["masterTable"])):
                if data["masterColumn"][k]:
                    data["add"][k].insert(0, data["masterColumn"][k])
                    data["add"][k].append("id")
                    modelName = dynamic_model_create.get_model_class(data["masterTable"][k], request)

                    dateCalls = [
                        field.name
                        for field in modelName.concrete_fields
                        if field.get_internal_type() == "DateField"
                    ]
                    date_timeCols = [
                        field.name
                        for field in modelName.concrete_fields
                        if field.get_internal_type() == "DateTimeField"
                    ]
                    verbose_column_name_dict_master = {
                        field.name: field.verbose_name.title() for field in modelName.concrete_fields
                    }
                    colAll = [field.name for field in modelName.concrete_fields]
                    if "id" in data["add"][k]:
                        data["add"][k].pop()
                        data["add"][k].append(modelName.pk.name)
                    if len(data["checkBox"]) > 0:
                        if data["checkBox"][k] == 1:
                            data["add"][k].insert(-1, "Default Value")
                    if data.get("columnValMulti") not in [None]:
                        data["columnValMulti"].append([])
                    else:
                        data["columnValMulti"] = []
                    if data.get("data") not in [None]:
                        data["data"].append([])
                    else:
                        data["data"] = []
                    if data.get("columnNameMulti") not in [None]:
                        data["columnNameMulti"].append(data["add"])
                    else:
                        data["columnNameMulti"] = []
                    if data.get("columnNameMultiVerb") not in [None]:
                        data["columnNameMultiVerb"].append([])
                    else:
                        data["columnNameMultiVerb"] = []
                        data["columnNameMultiVerb"].append([])
                    for i in data["add"][k]:
                        if i not in ["Default Value", "id", "Id"]:
                            data["columnNameMultiVerb"][-1].append(verbose_column_name_dict_master.get(i))
                    if "Default Value" in data["add"][-1]:
                        data["columnNameMultiVerb"][-1].append("Default Value")
                    data["columnNameMultiVerb"][-1].append("id")
                    columnNameMulti.append(data["add"][k])
                    lenn.append(len(data["add"][k]))
            html = (
                html
                + "<script>\
            \n   var tto = {}"
                + "\n var data = {};"
                + f"\n data['add'] = {data['add']}; data['data'] = {data['data']}; data['addVerb'] = {data['columnNameMultiVerb']};"
                + f"\n   tto['{element_id}'] = {columnNameMulti}"
            )
            html = (
                html
                + f"""
            $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('thead').find('th').eq(-1).css('opacity',{0});
            """
            )
            html = (
                html
                + "\n   var coloredElement = {}\
            \n   var coloredElementTick = {}\
            \n   var valuedElement = {}\
            \n   var tick = {}\
            \n   var colName = 0"
                + f"\n   var lenn = '{lenn}'"
                + f"\n   var rowLen =  $('#masterTable' + '{element_id}').find('tr').length;"
                + "\n   var onee={}\
            \n   $(document).ready(function() {\
            \n   setTimeout(()=> {"
            )
            if not iden:
                for m in master[element_id]:
                    html = (
                        html
                        + "for (i in createViewIdList) {"
                        + f"\n       if(createViewIdList[i] == '{element_id}') "
                        + "{"
                        + f"\n       tick[createViewIdList[i]+'_{m}'] = []"
                        + f"\n       valuedElement[createViewIdList[i]+'_{m}'] = [];"
                        + f"\n       coloredElementTick[createViewIdList[i]+'_{m}'] = [];"
                        + f"\n       onee['{element_id}_{m}'] = 0;"
                        + "\n   }\
              \n   }"
                    )
                html = html + "\n   },1000);"
                html = (
                    html
                    + "for (let i = 0; i <= lenn; i++) {"
                    + f"\n       t = $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').eq(i).text();"
                    "\n       if(t == 'id') {\
              \n       colName = i;\
              \n       }\
              \n   };"
                    + f"\n   colName = $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').length - 1;"
                )
                for m in master[element_id]:
                    html = (
                        html
                        + f"""
                  setTimeout(() => """
                        + """{
                    """
                        + """for (let j = 0; j < rowLen; j++) {"""
                        + f"""
                    $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(j).find('td').eq(-1).css('opacity', 0);
                    """
                        + """} """
                        + f"""
                    let js_exists = $('#id_'+'{m}_'+'{element_id}').attr('data-jsattr')
                    """
                    )
                    if popUpOption is not None:
                        if popUpOption[m]["popupCheckbox"] == "true":
                            html = (
                                html
                                + f"""$('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').attr('data-table',JSON.stringify({popUpOption[m]}));
                    """
                            )
                            html = (
                                html
                                + f"""$('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').select2("""
                                + """{ templateSelection: formatState});"""
                            )
                        else:
                            html = (
                                html
                                + f"""$('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').each(function(){{
                      parent = $(this).parent()
                      $(this).select2({{dropdownParent:parent}})
                    }});"""
                            )
                    else:
                        html = (
                            html
                            + f"""$('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').each(function(){{
                      parent = $(this).parent()
                      $(this).select2({{dropdownParent:parent}})
                    }});"""
                        )
                    html = (
                        html
                        + f"""var m__ = '{m}'
                var element_id__ = '{element_id}'
                if(js_exists != undefined) """
                        + """{"""
                        + f"""
                      if($('#id_'+'{m}_'+'{element_id}').hasClass('select2')) """
                        + """ { """
                        + f"""
                        $('#id_'+'{m}_'+'{element_id}').select2().select2('destroy');
                        $('#id_'+'{m}_'+'{element_id}').removeAttr('onchange');
                        let curr_ = $('#id_'+'{m}_'+'{element_id}').parent();
                        let attributes_ = $('#id_'+'{m}_'+'{element_id}');
                        $('#id_'+'{m}_'+'{element_id}').remove();
                        let new_id = 'id_'+'{m}_'+'{element_id}'
                        curr_.append(`<input id='${{new_id}}' style='display:none;' type='text' class='textinput textInput form-control p-2'>`);
                        $(attributes_[0].attributes).each(function() """
                        + """{"""
                        + f"""
                          if(!['id','data-select2-id','tab-index','class','data-jsattr'].includes(this.nodeName))"""
                        + """{"""
                        + f"""
                            $('#id_'+'{m}_'+'{element_id}').attr(this.nodeName,this.nodeValue)
                          """
                        + """}"""
                        + f"""
                        """
                        + """}"""
                        + f""")
                    """
                        + """  } """
                        + f"""
                      $('#'+'{element_id}_'+'{m}_unique').attr('data-jsattr',js_exists)
                      $('#'+'{element_id}_'+'{m}_unique').attr('onchange','jsChange.call(this)')
                    """
                        + """} """
                        + """
                """
                        + """
                let view_name = ""
                temp_type = $(`#${element_id__}_tab_content`).attr("data-template-type")
                if(temp_type == 'Multi Dropdown View'){
                  view_name = $(`#tableTab${element_id__}`).find("select").val()
                }

                $.ajax({
                    url: `/users/${urlPath}/dynamicVal/`,
                    data: {
                      'operation': 'fetchMultiSelect',
                      'element_id': element_id__,
                      'column_name': m__,
                      'view_name':view_name,
                      """
                        + f"""
                      'tablename': JSON.stringify('{tablename}')
                      """
                        + """
                      },
                      type: "POST",
                      dataType:"json",
                      success:function(data){
                        lofi = ''
                        lofi1 = ''
                        valLists = []
                        id_valLists = []
                        let id_valLists2 = []
                        if(data.hasOwnProperty('def_MulVal')){
                          valLists = data.def_MulVal
                        }
                        var autopopulatedValue = [];"""
                        + f"""
                        if ($('#id_' + ''+'{m}'+'_{element_id}').attr('data-autopoplate-value')) {{
                          autopopulatedValue = $('#id_' + ''+'{m}'+'_{element_id}').attr('data-autopoplate-value');
                          autopopulatedValue = JSON.parse(autopopulatedValue);
                        }}
                        """
                        + """
                        for (let i in data['data']){
                          if(valLists.length > 0){
                            if(valLists.includes(data['data'][i][0])){
                              id_valLists.push(data['data'][i].slice(-1))
                            }
                          }
                          const slicedData = data['data'][i].slice(1, -1);
                          if (autopopulatedValue.includes(data['data'][i][0])) {
                            selected = 'selected';
                          } else {
                            selected = '';
                          }
                          lofi += `<option value="${data['data'][i].slice(-1)}" ${selected}>${data['data'][i][0]} (${slicedData.join(' ')})</option>`
                          lofi1 += `<option value="${data['data'][i].slice(-1)}" ${selected}>${data['data'][i][0]}</option>`
                        }

                        for(let i=0;i<id_valLists.length;i++){
                          for(let j=0;j <id_valLists[i].length;j++){
                            id_valLists2.push(id_valLists[i][j].toString())
                          }
                        }

                        """
                        + f"""$('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').empty()
                        $('#createview{element_id}').find('#div_id_{m}').find('select').append($('#createview{element_id}').find('#div_id_{m}').find('select').attr('additionalinfobtn') === 'True' ? lofi : lofi1);
                        if(id_valLists2.length > 0) """
                        + """{
                        """
                        + f"""
                          $('#createview'+'{element_id}').find('#div_id_' + '{m}').find('select').val(id_valLists2).trigger('change.select2')
                          bk_onclick = $('#createview'+'{element_id}').find('#div_id_' + '{m}').parent().find('.plusBtn').attr('onclick')
                          $('#createview'+'{element_id}').find('#div_id_' + '{m}').parent().find('.plusBtn').attr('onclick',"multiselectShow_{element_id}.call(this,'{m}','{element_id}','no')")
                          $('#'+'{element_id}_'+'{m}_'+'unique').attr('data-data',JSON.stringify(id_valLists2))
                          $('#'+'{element_id}_'+'{m}_'+'unique').attr('data-dataClick',bk_onclick)
                          $('#'+'{element_id}'+'_'+'{m}'+'_'+'unique').parent().parent().find('.plusBtn').trigger('click');
                        """
                        + """ } """
                        + """
                        """
                        + f"""
                        $('#{element_id}_'+'{m}_'+'unique').on('select2:unselect', function (e) """
                        + """
                        {
                          """
                        + f"""var coloredElementTickIndex = coloredElementTick['{element_id}_'+'{m}'].indexOf(e.params.data.text)
                          coloredElementTick['{element_id}_'+'{m}'].splice(coloredElementTickIndex,1)
                          var tickIndex =tick['{element_id}_'+'{m}'].indexOf(e.params.data.element.index)
                          tick['{element_id}_'+'{m}'].splice(tickIndex,1)
                          """
                        + """
                          """
                        + f"""var uniqueValues = $('#{element_id}_'+'{m}_'+'unique').val() """
                        + """
                          """
                        + f"""valuedElement['{element_id}_'+'{m}'] = [] """
                        + """
                          """
                        + f"""coloredElement['{element_id}_'+'{m}'] =  """
                        + """ {}
                          var values = {}
                          for (let i in uniqueValues){
                            """
                        + f"""valuedElement['{element_id}_'+'{m}'].push('') """
                        + """
                            values[uniqueValues[i]] = '';
                            """
                        + f"""coloredElement['{element_id}_'+'{m}'] = values """
                        + """
                          }
                          """
                        + f"""$('#id_' + ''+'{m}'+'_{element_id}').val(JSON.stringify(coloredElement['{element_id}_'+'{m}'])).trigger('change');"""
                        + """
                          });
                        """
                        + f""" $('#{element_id}_'+'{m}_'+'unique').on('select2:select', function (e) """
                        + """
                        { """
                        + f""" coloredElementTick['{element_id}_'+'{m}'].push(e.params.data.text)
                          tick['{element_id}_'+'{m}'].push(e.params.data.element.index) """
                        + """
                          """
                        + f"""var uniqueValues = $('#{element_id}_'+'{m}_'+'unique').val() """
                        + """
                          """
                        + f"""valuedElement['{element_id}_'+'{m}'] = [] """
                        + """
                          """
                        + f"""coloredElement['{element_id}_'+'{m}'] =  """
                        + """ {}
                          var values = {}
                          for (let i in uniqueValues){
                            """
                        + f"""valuedElement['{element_id}_'+'{m}'].push('') """
                        + """
                            values[uniqueValues[i]] = '';
                            """
                        + f"""coloredElement['{element_id}_'+'{m}'] = values """
                        + """
                          }
                          """
                        + f"""$('#id_' + ''+'{m}'+'_{element_id}').val(JSON.stringify(coloredElement['{element_id}_'+'{m}'])).trigger('change');"""
                        + """
                          });
                          if (autopopulatedValue.length > 0) { """
                        + f"""
                            $('#{element_id}_'+'{m}_'+'unique').trigger('change.select2');
                            selectedIds = $('#{element_id}_'+'{m}_'+'unique').val();
                            prepedValue = {{}};
                            for (i of selectedIds) {{
                              prepedValue[`${{i}}`] = "";
                            }}
                            $('#id_{m}_{element_id}').val(JSON.stringify(prepedValue));
                          """
                        + """
                          }
                      },
                      error: function () {
                        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                      }
                      });
                  """
                        + """},100);
                """
                    )
            html = (
                html
                + f"\n   let le = $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').eq(-2).text();"
                + "\n   if (le == 'Default Value') {\
            \n       for(let i = 0; i < rowLen; i++) {"
                + f"\n       $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(i).find('td').eq(-2).empty();\
            \n       $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(i).find('td').eq(-2).html(`<input class='ioI' type='text' value=''>`);"
                + "\n       };"
                + "\n   }"
                + "\n   });"
            )
            for m in master[element_id]:
                html = html + f"""function multiselectShow_{element_id}(m__,element_id__,popup='yes') """
                html = html + "\n  {"
                html = (
                    html
                    + f"""
                  $(".savebutton").attr('data-col',m__)"""
                    + """
                \n
                let view_name = ""
                  temp_type = $(`#${element_id__}_tab_content`).attr("data-template-type")
                  if(temp_type == 'Multi Dropdown View'){
                    view_name = $(`#tableTab${element_id__}`).find("select").val()
                  }
                  let id_valLists2 = $(`#${element_id__}_${m__}_unique`).attr('data-data')
                  let bk_onclick = $(`#${element_id__}_${m__}_unique`).attr('data-dataClick')
                  if(id_valLists2 != undefined){
                    id_valLists2 = JSON.parse(id_valLists2)
                  }else{
                    id_valLists2 = []
                  }
                  let optionsBlocked = [];
                  $(`#${element_id__}_${m__}_unique option:disabled`).each(function () {
                    optionsBlocked.push($(this).val());
                  })
                $.ajax({
                  url: `/users/${urlPath}/dynamicVal/`,
                  data: {
                    'operation': 'fetchMultiSelect',
                    'element_id': element_id__,
                    'column_name': m__,
                    'view_name':view_name,
                    """
                    + f"""
                    'tablename': JSON.stringify('{tablename}')
                    """
                    + """
                    },
                    type: "POST",
                    dataType:"json",
                    success:function(data){
                      htmlTable = `
                          <table id='masterTable${data["element_id"]}' class='row-border solid black'>
                            <thead style="color:black;">
                            </thead>
                            <tbody>
                            </tbody>
                          </table>
                      `
                      $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}_wrapper`).remove();
                      $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).remove();
                      $('#createview'+`${data["element_id"]}`).find('#formModal'+data["element_id"]).find('.card-body').append(htmlTable);
                        data['addVerb'] = data['columnNameMultiVerb'];
                        var html = '<tr>'
                        html = html +`<th style="text-align:center">Checkbox</th>`
                        for (let i = 0; i < data['addVerb'].length; i++) {
                          if (data['addVerb'][i] == 'id') {
                            html = html + `<th style="opacity=0; display:none; color:black">${data['add'][i]}</th>`
                          } else {
                            html = html +`<th style="text-align:center">${data['addVerb'][i]}</th>`
                          }

                        }
                        html = html + '</tr>'
                        $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).find('thead').empty(); $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).find('thead').append(html)
                        html = ''
                        for (let i = 0; i < data['data'].length; i++) {
                          html =  html + '<tr>'
                          for (let j = -1; j < data['data'][i].length; j++) {
                            if(j == -1) {
                              html = html + `<td style="text-align:center"><div class="custom-control custom-checkbox" style="margin-left:30%">
                                <input type="checkbox" class="io custom-control-input" id="${data['data'][i][0]}">
                                <label for="${data['data'][i][0]}" class="custom-control-label">
                                  </label>
                                  </div></td>`
                              } else if (j == data['data'][i].length -1 ) {
                                html = html + `<td style='opacity:0;'>${data['data'][i][j]}</td>`
                              } else {
                                html = html + `<td style="text-align:center">${data['data'][i][j]}</td>`
                              }

                            }
                            html = html + '</tr>'
                        }
                          $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).find('tbody').empty();  $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).find('tbody').append(html);
                          $('#masterTable'+`${data["element_id"]}`).find('tbody').find('tr').each(function()  {
                            if(optionsBlocked.includes($(this).find('td').last().text().trim()))  {
                              $(this).find('td').eq(0).find('div > input.custom-control-input').prop('disabled', true);
                              $(this).css('opacity', 0.5);
                            }
                          })
                          if(popup == "no"){
                            $('#masterTable'+`${data["element_id"]}`).find('tbody').find('tr').each(function()  {
                            $(this).find('td').find('input').prop('checked', false)
							                  if(id_valLists2.includes($(this).find('td').last().text().trim()))  {
                                 $(this).find('td').find('input').prop('checked', true)
							                  }
                          }
                          );

                          $('#formModal'+`${data["element_id"]}`).find('.savebutton').attr('data-col',m__)
                          $('#formModal'+`${data["element_id"]}`).find('.savebutton').trigger('click')
                          $('#createview'+`${data["element_id"]}`).find('#div_id_' + m__).parent().find('.plusBtn').attr('onclick',bk_onclick)

                          $('#'+`${data["element_id"]+'_' +m__+'_unique'}`).removeAttr('data-data')
						              $('#'+`${data["element_id"]+'_' +m__+'_unique'}`).removeAttr('data-dataClick')
                          }
                          let le = $('#createview'+data["element_id"]).find('#masterTable' + data["element_id"]).find('tr').eq(0).find('th').eq(-2).text();
                          if (le == 'Default Value') {
                            let rowLen_ = $('#masterTable' + data["element_id"]).find('tr').length;
                            for(let i = 0; i < rowLen_; i++) {
                              $('#createview'+data["element_id"]).find('#masterTable' + data["element_id"]).find('tr').eq(i).find('td').eq(-2).empty();
                              $('#createview'+data["element_id"]).find('#masterTable' + data["element_id"]).find('tr').eq(i).find('td').eq(-2).html(`<input class='ioI' type='text' value=''>`);
                            };
                          }
                          if(popup == "yes"){
                            $('#formModal'+data["element_id"]).css('display', 'flex');
                          }
                          $('#createview'+`${data["element_id"]}`).find('#masterTable' + `${data["element_id"]}`).find('thead').find("th").eq(-1).css("opacity",0)
                          assign(data["element_id"]);
                          $('#createview'+data["element_id"]).find('#masterTable' + data["element_id"]).DataTable().columns.adjust();
                            setTimeout(() => {
                            },300);
                          $('#masterTable'+data["element_id"]+'_length').find('select').val('-1').trigger('change');
                          for (let j = 0; j < coloredElementTick[element_id__+'_'+m__].length; j++) {
                            $('#masterTable' + data["element_id"]).find('.io').eq(tick[element_id__+'_'+m__][j]).prop('checked', true);
                            $('#masterTable' + data["element_id"]).find('.ioI').eq(tick[element_id__+'_'+m__][j]).val(valuedElement[element_id__+'_'+m__][j]).trigger('change');
                          }
                          $('#masterTable'+data["element_id"]+'_length').find('select').val('50').trigger('change');
                        },
                        error: function () {
                          $('#tabsMultiFunc').find('.modal-footer').html(`<button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>`)
                          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                        }
                    });
              """
                )
                html = html + "\n   };"
            html = (
                html
                + f"\n   $('#createview'+'{element_id}').find('.close').on('click', function() "
                + "\n {"
                + f"\n   $('#masterTable'+'{element_id}'+'_length').find('select').val('-1').trigger('change');\
            \n   for (let i = 0; i < $('#masterTable' + '{element_id}').find('.io').length; i++) "
                + "\n { "
                + f"\n       $('#masterTable' + '{element_id}').find('.io').eq(i).prop('checked', false);\
            \n       $('#masterTable' + '{element_id}').find('.ioI').eq(i).val('').trigger('change');"
                + "\n   }"
            )
            for m in master[element_id]:
                html = (
                    html
                    + f"""
                $('#id_' + '{m}'+'_{element_id}').css('display', 'none');
              """
                )
            html = (
                html
                + f"\
            \n   $('#formModal'+'{element_id}').css('display', 'none');\
            \n   $('#createview'+'{element_id}').find('#'+'{element_id}'+'_{m}_unique').css('display', 'block');"
                + "\n   })"
            )
            html = (
                html
                + f"""
            \n   $('#createview'+'{element_id}').find('.savebutton').on('click', function()
            """
                + """{"""
                + f"""
            \n  $('#masterTable'+'{element_id}'+'_length').find('select').val('-1').trigger('change');"""
            )
            html = (
                html
                + f"\n    col__ = $(this).attr('data-col');\
            \n    var t1 = tick['{element_id}_'+col__].length;\
            \n   var t2 = valuedElement['{element_id}_'+col__].length;\
            \n   tick['{element_id}_'+col__].splice(0,t1)\
            \n   valuedElement['{element_id}_'+col__].splice(0,t2)\
            \n   coloredElementTick['{element_id}_'+col__].splice(0,t1);\
            \n   for(let i = 0; i < $('#masterTable' + '{element_id}').find('.io').length; i++) "
                + "\n {"
                + f"\n       if($('#masterTable' + '{element_id}').find('.io').eq(i).prop('checked') == true) "
                + "\n { "
                + f"\n       tick['{element_id}_'+col__] = [...tick['{element_id}_'+col__], i];\
            \n       valuedElement['{element_id}_'+col__] = [...valuedElement['{element_id}_'+col__], $('#masterTable' + '{element_id}').find('.ioI').eq(i).val()];"
                + "\n       }\
            \n   }\
            \n   var v,k = []\
            \n   var tableText = {}"
                + f"\n   v = $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').length;\
            \n   for(let i = 0; i < $('#masterTable' + '{element_id}').find('.io:checked').length; i++)"
                + "\n { "
                + f"\n   tableText[($('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(tick['{element_id}_'+col__][i] + 1).find('td').eq(v - 1).text())] = '';\
            \n   var kk = $('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(tick['{element_id}_'+col__][i] + 1).find('td').eq(1).text()\
            \n   if ($('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').eq(-2).text() == 'Default Value') "
                + "\n { "
                + f"\n       tableText[($('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(tick['{element_id}_'+col__][i] + 1).find('td').eq(v - 1).text())] = ($('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(tick['{element_id}_'+col__][i] + 1).find('td').eq(-2).find('input').val());"
                + "\n   }\
            \n   k.push(kk);"
                + f"\n   coloredElementTick['{element_id}_'+col__].push(kk);"
                + "\n   }"
                + f"\n   coloredElement['{element_id}_'+col__] = ((tableText));"
            )
            html = (
                html
                + f"""
                $('#id_' + ''+col__+'_{element_id}').css('display', 'none');
                $('#id_' + ''+col__+'_{element_id}').val(JSON.stringify(coloredElement['{element_id}_'+col__])).trigger('change');\
              """
            )
            html = (
                html
                + f"\
            \n   $('#createview'+'{element_id}').find('#'+'{element_id}_'+col__+'_unique').css('display', 'block');\
            \n   //$('#id_' + '{master[element_id]}'+'_{element_id}').val(JSON.stringify(coloredElement['{element_id}_'+col__])).trigger('change');\
            \n   $('#createview'+'{element_id}').find('#'+'{element_id}_'+col__+'_unique').val(Object.keys(coloredElement['{element_id}_'+col__])).trigger('change.select2');"
            )
            html = (
                html
                + f"\n   $('#formModal'+'{element_id}').css('display', 'none');\
            \n   if ($('#createview'+'{element_id}').find('#masterTable' + '{element_id}').find('tr').eq(0).find('th').eq(-2).text() == 'Default Value') "
                + "\n { "
                + f"\n   for (let i = 0; i < $('#masterTable' + '{element_id}').find('.io').length; i++) "
                "\n { "
                + f"\n       if($('#masterTable' + '{element_id}').find('.io').eq(i).prop('checked') == false) "
                + "\n { "
                + f"\n       $('#masterTable' + '{element_id}').find('.ioI').eq(i).val('').trigger('change');"
                + "\n       }\
            \n   }\
            \n   }})\
            \n   $('.savebutton').on('hover', function() {"
                + f"\n   $('#formModal'+'{element_id}').css('background-color', 'rgb(181, 141, 43)');"
                + "\n   })\
            \n   function remove(val) {\
            \n   for (let i = 0; i < coloredElement.length; i++) {\
            \n       if (coloredElement[i] == val) {\
            \n       coloredElement.splice(i,1);\
            \n       break;\
            \n       }\
            \n   }\
            \n   };"
                + f"//assign('{element_id}')"
                + "\n   function assign(id) {\
            \n   $(`#masterTable${id}`).DataTable( {\
            \n       'autoWidth': true,\
            \n       'scrollY': '100%',\
            \n       'scrollCollapse': true,\
            \n       'scrollX': '110%',\
            \n       // 'serverSide':true,\
            \n       orderCellsTop: true,\
            \n       //fixedHeader: true,\
            \n       responsive: true,\
            \n       colReorder: {\
            \n       fixedColumnsLeft: 1,\
            \n       },\
            \n       // stateSave: true,\
            \n       'deferRender': true,\
            \n       'paging': true,\
            \n       'lengthMenu': [[1, 5, 50, -1], [1, 5, 50, 'All']],\
            \n       stripeClasses: false,\
            \n       'pageLength': 50,\
            \n       dom: 'lfBrtip',\
            \n       'sScrollX': '100%',\
            \n       'scrollX': true,\
            \n       buttons: [\
            \n           {\
            \n           extend: 'collection',\
            \n           text: 'Export',\
            \n           buttons: [\
            \n               {\
            \n               extend: 'copy', title: '', exportOptions: {\
            \n                   columns: ':visible:not(.noVis)'\
            \n               }\
            \n               },\
            \n               {\
            \n               extend: 'excel', title: '', exportOptions: {\
            \n                   columns: ':visible:not(.noVis)'\
            \n               }\
            \n               },\
            \n               {\
            \n               extend: 'csv', title: '', exportOptions: {\
            \n                   columns: ':visible:not(.noVis)'\
            \n               }\
            \n               },\
            \n               {\
            \n               extend: 'pdf', title: '', exportOptions: {\
            \n                   columns: ':visible:not(.noVis)'\
            \n               }\
            \n               },\
            \n           ],\
            \n           },\
            \n           {\
            \n           extend: 'colvis',\
            \n           className: 'scroller',\
            \n           }\
            \n       ],\
            \n       columnDefs: [\
            \n           {\
            \n           targets: '_all',\
            \n           className: 'dt-center allColumnClass all'\
            \n           },\
            \n           {\
            \n           targets: 0,\
            \n           width: '20%',\
            \n           className: 'noVis'\
            \n           }\
            \n       ],\
            \n       });\
            \n   } </script>"
            )
        elif template == "Asset Grouping":
            dataTab = read_data_func(
                request,
                {
                    "inputs": {
                        "Data_source": "Database",
                        "Table": "TabScreens",
                        "Columns": ["tab_body_content"],
                    },
                    "condition": [
                        {
                            "column_name": "element_id",
                            "condition": "Equal to",
                            "input_value": element_id,
                            "and_or": "",
                        }
                    ],
                },
            ).tab_body_content.tolist()
            create_view_tab_body_content = json.loads(dataTab[0])
            model_name = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            verboseList = None
            actual_model_name = dynamic_model_create.get_model_class(model_name, request)
            verboseList = {
                field.name: field.verbose_name.title() for field in actual_model_name.concrete_fields
            }
            data = {}
            data["table_hidden"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][0]["value"][0]
            data["condition_type"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["constraint_type"]
            data["selected_tables"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["selected_tables"]
            data["usecase_name"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][7]["usecase_name"]
            data["verbose_list"] = verboseList
            data["actions"] = create_view_tab_body_content["Category_sub_elements"][0][
                "Category_sub_element_attributes"
            ][3]["value"]
            html = (
                html
                + f"""

                <script type="text/javascript">

              $('.add_asset{element_id}').off('click').on('click',function() """
                + "{"
                + f""" $("#tables_asset{element_id}").find("tbody").append(
                    `<tr style="display: flex;justify-content: space-around;align-items:flex-start">
                      <td>
                        <input  data-name="model_name" class="asset_model_name form-control p-2"  data-name="model_name"  placeholder="Model Name" style="width:150px;">
                      </td>
                      <td>
                        <select class="constraint_row_reference_id select2 form-control "     data-name="rule_set"  name="template" style="width:150px;">
                          <option selected disabled>{data['verbose_list']['Rule_name']} </option>
                        </select>
                      </td>
                      <td >
                        <input  data-name="constraint_name" class="constraint_row_names form-control p-2"  data-name="constraint_name"  placeholder="Constraint Name" style="width:150px;">
                      </td>

                      <td>
                        <select  class="assets_constraint_row_selection select2 form-control " data-name="constraint_type"  name="template" style="width:150px;">
                          <option selected disabled>Constraint Type </option>"""
            )
            for i in data["condition_type"]:
                html = html + f"""<option value="{i}"  data-type="{i}"> {i} </option>"""
            html = (
                html
                + f"""</select>
              </td>

              <td >
                <select class="assets_row_tables select2 form-control" data-name="table_name"   name="template" style="width:150px;">
                  <option selected disabled>Select {data['verbose_list']['table_name']}</option>"""
            )
            for i in data["selected_tables"]:
                html = html + f"""<option value="{i}">{i}</option>"""
            html = (
                html
                + f"""</select>
              </td>
              <td >
                <select  class="asset_row_column select2 form-control" data-name="constraint_parameter"  name="template" style="width:150px;">
                  <option selected disabled>{data['verbose_list']['Constaint_parameter']} </option>
                </select>
              </td>
              <td >
                <select class="asset_constraint_row_condition_type select2 form-control"  data-name="condition_datatype"   name="template" style="width:150px;">
                  <option selected disabled>{data['verbose_list']['Condition_datatype']}</option>
                  <option value="Character">Character Type</option>
                  <option value="Numeric">Numeric Type</option>
              </td>
              <td >
                <select class="asset_constraint_row_condition select2 form-control" data-name="condition"  name="template" style="width:150px;">
                  <option selected disabled>{data['verbose_list']['Condition']}</option>
              </td>
              <td >
                <input data-name="threshold"  class="constraint_row_input form-control p-2 " data-name="threshold"   placeholder="Enter {data['verbose_list']['Threshold']} " style="width:150px;">
              </td>
              <td><button type="button"  data-toggle="tooltip" title="Modal for extra condition" disabled  class="add_conditions btn btn-primary btn-md rounded mb-1 px-2"  ><i class="fas fa-check-circle" style="font-size: large;"></i></button>
                      <!-- <button type="button" data-toggle="tooltip" title="Pending for Rejection" disabled class="userpermission_reject btn btn-primary btn-md rounded mb-1 px-2" ><i class="fa fa-times-circle" style="font-size: large;"></i></button> -->
              </td>
              <td>
                                  <a href="#"  class="remove_div remove-filter fa fa-times text-primary"></a>
                                </td>

            </tr>`)



            $("#tables_asset{element_id}").find("tbody").find('tr').eq(-1).find('select').each(function()"""
                + """{
              parent = $(this).parent()
              $(this).select2({dropdownParent:parent})});"""
                + f"""$("#tables_asset{element_id}").find("tbody").find('tr').eq(-1).on('click','.remove_div',function()"""
                + """{
                $(this).closest("tr").remove()
              })"""
                + f"""; runner_1($("#tables_asset{element_id}").find("tbody").find('tr').eq(-1))

            $('.assets_constraint_row_selection').off('select2:select').on('select2:select',function()"""
                + """{
                  let tRow = $(this).parent().closest("tr");
                  if ($(this).val()!='Single'){
                  tRow.find('td').eq(9).find('button').prop('disabled', false)
                  }
                  else{
                    tRow.find('td').eq(9).find('button').prop('disabled', true)
                  }
              })
          })

          function runner_1(rowName){
          $(document).ready(function(){
            $.ajax({
                  url: `/users/${urlPath}/asset_grouping_get_data/`,
                  data: {"""
                + f"""
                      'table_name':"{data['table_hidden']}",
                      'operation': 'fetch_rule_id',"""
                + """      },
                  type: "POST",
                  dataType: "json",
                  success: function (data) {


                  function onlyUnique(value, index, self) {
                  return self.indexOf(value) === index;
                    }
                    var a = data["referenceList"];
                    var unique = a.filter(onlyUnique);
                    rowName.find(".constraint_row_reference_id").empty()
                      for (i in unique) {

                        rowName.find(".constraint_row_reference_id").append(new Option(unique[i], unique[i], false, false))

                          }

                          rowName.find(".constraint_row_reference_id").select2({
                tags: true
              });


                  },
                  error: function () {
                    rowName.find(".constraint_row_reference_id").select2({
                      tags: true
                      });
                      Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                  }
                  })
              })}


              $(document).on('change','.asset_constraint_row_condition_type',function(){
              let condition_datatype= $(this).val()
              let tRow2 = $(this).parent().closest("tr");

            if(condition_datatype=== 'Character'){
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').empty()
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Starts With","Starts With", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Ends With","Ends With", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Contains","Contains", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Not Contains","Not Contains", false, false))
            }else if(condition_datatype=== 'Numeric'){
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').empty()
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Equal to","Equal to", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Not Equal to","Not Equal to", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Greater than","Greater than", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Smaller than","Smaller than", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Greater than equal to","Greater than equal to", false, false))
              tRow2.find('td').eq(7).find('.asset_constraint_row_condition').append(new Option("Smaller than equal to","Smaller than equal to", false, false))
            }


        })
            $(document).off('select2:select').on('change').on('select2:select','.assets_row_tables',function(){
            let table_name=$(this).val()
            let tRow = $(this).parent().closest("tr");
                    $.ajax({
                    url: `/users/${urlPath}/asset_grouping_get_data/`,
                    data: {
                        'table_name':table_name,
                        'operation': 'fetch_table_columns_asset_grouping',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {

                      tRow.find('td').eq(5).find('.asset_row_column').empty()
                        for (i in data.columnList) {
                            tRow.find('td').eq(5).find('.asset_row_column').append(new Option(data.columnList[i], data.columnList[i], false, false))
                            }
                    },
                    error: function () {
                        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    }
                    })
                })"""
                + f""";runner_1($("#tables_asset{element_id}").find("tbody").find('tr').eq(-1))

          $('.assets_constraint_row_selection').off('select2:select').on('select2:select',function()"""
                + """{  let tRow = $(this).parent().closest("tr");
                  if ($(this).val()!='Single'){
                  tRow.find('td').eq(9).find('button').prop('disabled', false)
                  }
                  else{
                    tRow.find('td').eq(9).find('button').prop('disabled', true)
                  }
              })
            $(document).on('click','.add_conditions',function(){
            let tRow = $(this).parent().closest("tr");
            let rulename=tRow.find('td').eq(1).find('select').val()
            let ruledes=tRow.find('td').eq(2).find('input').val()
            let modelName=tRow.find('td').eq(0).find('input').val()
            $(".asset_row_reference_id").val(rulename).prop('disabled',true)
            $(".asset_row_names").val(ruledes).prop('disabled',true)
            $(".model_name").val(modelName).prop('disabled',true)
            $("#condition_modal").modal("show");
            var removebutton = $(".remove_div")
            $(".remove_div").attr('id',rulename+'removebutton')
          })
            var model_name;"""
                + f"""$("#savebuttonasset{element_id}").on("click",function()"""
                + """{
              assetDict=[];"""
                + f"""$("#tables_asset{element_id}").find('tbody').find('tr').each(function()"""
                + """{
              var condition= $(this).find('td').eq(3).find('select  option:selected').attr('data-type')
              model_name=$(this).find('td').eq(0).find('input').val()
              if(condition === "AND"){
                saveDic ={
            "Model_name":$(this).find('td').eq(0).find('input').val(),
            "Rule_name":$(this).find('td').eq(1).find('select').val(),
            "Rule_description":$(this).find('td').eq(2).find('input').val(),
            "Constraint_type":$(this).find('td').eq(3).find('select').val(),
            "Constraint_table":$(this).find('td').eq(4).find('select').val(),
            "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
            "condition_datatype":$(this).find('td').eq(6).find('select').val(),
            "condition":$(this).find('td').eq(7).find('select').val(),
            "threshold":$(this).find('td').eq(8).find('input').val(),

          }

              }else if(condition === "OR"){
                saveDic ={
            "Model_name":$(this).find('td').eq(0).find('input').val(),
            "Rule_name":$(this).find('td').eq(1).find('select').val(),
            "Rule_description":$(this).find('td').eq(2).find('input').val(),
            "Constraint_type":$(this).find('td').eq(3).find('select').val(),
            "Constraint_table":$(this).find('td').eq(4).find('select').val(),
            "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
            "condition_datatype":$(this).find('td').eq(6).find('select').val(),
            "condition":$(this).find('td').eq(7).find('select').val(),
            "threshold":$(this).find('td').eq(8).find('input').val(),

          }

              }
              else{
                saveDic ={
            "Model_name":$(this).find('td').eq(0).find('input').val(),
            "Rule_name":$(this).find('td').eq(1).find('select').val(),
            "Rule_description":$(this).find('td').eq(2).find('input').val(),
            "Constraint_type":$(this).find('td').eq(3).find('select').val(),
            "Constraint_table":$(this).find('td').eq(4).find('select').val(),
            "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
            "condition_datatype":$(this).find('td').eq(6).find('select').val(),
            "condition":$(this).find('td').eq(7).find('select').val(),
            "threshold":$(this).find('td').eq(8).find('input').val(),

          }
              }


          assetDict.push(saveDic);
          })
          var checker_dict=[]
        for (i in assetDict[0]){
          checker_dict.push(assetDict[0][i])
        }
        for (var i = 0; i < assetDictmodal.length; i++){
          y=[]
          y.push(Object.values(assetDictmodal[i]))
          assetDict.push(y[0][0][0])
          }"""
                + f"""
        var create_view_save_element_id = "{element_id}"
        var table_name = "{data['table_hidden']}"
        var data_table_id = null
        var itemCode = windowLocation.split("/")[4];
        let table_hidden =$("#table_hidden{element_id}").val();
        let preview_mode = $("#savebuttonasset{element_id}").attr('data-preview-mode')
        if((checker_dict.includes("")) || (checker_dict.includes(null)))"""
                + """{
              Swal.fire({icon: 'warning',text:"Fields should not be left blank." });
        }else{
        if(!preview_mode ){
        $.ajax({
          url:`/users/${urlPath}/${itemCode}/create_file/`,
          data: {
              'asset_data':JSON.stringify(assetDict),"""
                + f"""
              'element_id':'{element_id}','customValidationList':$('#customValidationList1{element_id}').attr('value'),"""
                + """    'operation': 'save_assetgrouping_data',
              'table_name':table_hidden,
          },
          type: "POST",
          dataType: "json",
          success: function (data) {
            url_string = window.location.pathname
            f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            app_code2 = url_string.substring(f_occ+1,s_occ)
            current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
              current_dev_mode2 = "User"
            }
                      $.ajax({
                    url:`/users/${urlPath}/filteredtables/`,
                    data: {
                      'operation': 'filter_assetgrouping_data',
                      'table_name':table_hidden,
                      'modal_name':model_name,
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                    location.reload()
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Unable to save. Please try again.'});
                    }
                  })

          },
          error: function () {
            Swal.fire({icon: 'error',text: 'Error! Unable to save. Please try again.'});
          }
        })}
        }
        });"""
                + f"""$('.add_asset_1{element_id}').off('click').on('click',function()"""
                + "{"
                + f"""

            $("#tables_asset_modal{element_id}").find("tbody").append(
              `<tr  style="display: flex;justify-content: space-around;align-items:flex-start">
                      <td>
                        <input  data-name="model_name" class="model_name form-control p-2"  data-name="model_name"  placeholder="Rule Name" style="width:150px;">
                      </td>
                      <td>
                        <input  data-name="asset_row_reference_id" class="asset_row_reference_id form-control p-2"  data-name="rule_set"  style="width:150px;">
                      </td>

                      <td >
                        <input  data-name="asset_name" class="asset_row_names form-control p-2"  data-name="asset_name"  placeholder="Rule Name" style="width:150px;">
                      </td>

                      <td>
                        <select  class="assets_constraint_row_selection select2 form-control " data-name="constraint_type"  name="template" style="width:150px;">
                          <option selected disabled>Constraint Type </option>"""
            )
            for i in data["condition_type"]:
                html = html + f"""<option value="{i}"  data-type="{i}"> {i} </option>"""
            html = (
                html
                + f"""
                    </select>
                  </td>

                  <td >
                    <select class="assets_row_tables select2 form-control" data-name="table_name"   name="template" style="width:150px;">
                      <option selected disabled>Select {data['verbose_list']['table_name']}</option>"""
            )
            for i in data["selected_tables"]:
                html = html + f""" <option value="{i}">{i}</option>"""
            html = (
                html
                + f"""</select>
                  </td>

                    <td>
                      <select  class="asset_row_column select2 form-control" data-name="constraint_parameter"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['Constaint_parameter']} </option>
                      </select>
                    </td>
                    <td >
                      <select class="asset_constraint_row_condition_type select2 form-control"  data-name="condition_datatype"   name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['Condition_datatype']}</option>
                        <option value="Character">Character Type</option>
                        <option value="Numeric">Numeric Type</option>
                    </td>

                    <td>
                      <select class="asset_constraint_row_condition select2 form-control" data-name="condition"  name="template" style="width:150px;">
                        <option selected disabled>{data['verbose_list']['Condition']}</option>
                    </td>

                    <td>
                      <input data-name="threshold"  class="constraint_row_input form-control p-2 " data-name="threshold"   placeholder="Enter {data['verbose_list']['Threshold']} " style="width:150px;">
                    </td>

                    <td>
                      <a href="#"  class=" fa fa-times" style="color:white;"></a>
                    </td>

                  </tr>`)
                  $("#tables_asset_modal{element_id}").find("tbody").find('tr').eq(-1).find('select').each(function()"""
                + """{
    $(this).select2()})"""
                + f"""
            $("#tables_asset_modal{element_id}").find("tbody").find('tr').eq(-1).on('click','.remove_div',function()"""
                + "{"
                + """
            $(this).closest("tr").remove();
            })"""
                + f"""
            let tRow = $("#tables_asset_modal{element_id}").find("tbody").find('tr').eq(-2);
            let modelName=tRow.find('td').eq(0).find('input').val()
            let rulename=tRow.find('td').eq(1).find('input').val()
            let ruledes=tRow.find('td').eq(2).find('input').val()
            $(".asset_row_reference_id").val(rulename).prop('disabled',true)
            $(".asset_row_names").val(ruledes).prop('disabled',true)
            $(".model_name").val(modelName).prop('disabled',true)"""
                + """
            })"""
                + f"""


            var assetDictmodal=[];

            $(".save_button_asset_modal").on("click",function()"""
                + "{"
                + """
            var assetDict1={
            };
              var assetDict2=[];
              var randomID;"""
                + f"""
            $("#tables_asset_modal{element_id}").find('tbody').find('tr').each(function()"""
                + "{"
                + """
                randomID=$(this).find('td').eq(1).find('input').val()+'removebutton';
                assetDict2=[]
                var condition= $(this).find('td').eq(2).find('select  option:selected').attr('data-type')

                if(condition === "AND"){
                  saveDic ={

              "Model_name":$(this).find('td').eq(0).find('input').val(),
              "Rule_name":$(this).find('td').eq(1).find('input').val(),
              "Rule_description":$(this).find('td').eq(2).find('input').val(),
              "Constraint_type":$(this).find('td').eq(3).find('select').val(),
              "Constraint_table":$(this).find('td').eq(4).find('select').val(),
              "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
              "condition_datatype":$(this).find('td').eq(6).find('select').val(),
              "condition":$(this).find('td').eq(7).find('select').val(),
              "threshold":$(this).find('td').eq(8).find('input').val(),

            }

                }else if(condition === "OR"){
                  saveDic ={
              "Model_name":$(this).find('td').eq(0).find('input').val(),
              "Rule_name":$(this).find('td').eq(1).find('input').val(),
              "Rule_description":$(this).find('td').eq(2).find('input').val(),
              "Constraint_type":$(this).find('td').eq(3).find('select').val(),
              "Constraint_table":$(this).find('td').eq(4).find('select').val(),
              "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
              "condition_datatype":$(this).find('td').eq(6).find('select').val(),
              "condition":$(this).find('td').eq(7).find('select').val(),
              "threshold":$(this).find('td').eq(8).find('input').val(),

            }
                }
                else{
                  saveDic ={
              "Model_name":$(this).find('td').eq(0).find('input').val(),
              "Rule_name":$(this).find('td').eq(1).find('input').val(),
              "Rule_description":$(this).find('td').eq(2).find('input').val(),
              "Constraint_type":$(this).find('td').eq(3).find('select').val(),
              "Constraint_table":$(this).find('td').eq(4).find('select').val(),
              "Constaint_parameter":$(this).find('td').eq(5).find('select').val(),
              "condition_datatype":$(this).find('td').eq(6).find('select').val(),
              "condition":$(this).find('td').eq(7).find('select').val(),
              "threshold":$(this).find('td').eq(8).find('input').val(),

            }
                }
              })
            assetDict2.push(saveDic);
            assetDict1[randomID]=assetDict2
            assetDictmodal.push(assetDict1);

            })


      $(document).on('click','.remove_div',function(){

                randomIDcheck=$(this).attr('id')
                for (i in assetDictmodal ){
                  if (randomIDcheck===Object.keys(assetDictmodal[i])[0]){
                    var value = assetDictmodal[i]
                    assetDictmodal.splice(i,1)

                  }
                }
              })

            </script>"""
            )

    if view == "Multiple table":
        if template == "Multiple table":
            html = (
                html
                + f"""
        <script>
        $("."+'{element_id}'+'_editable').attr("contenteditable",true);"""
                + """
        var edit1=function() {
          let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
              current_dev_mode2 = "User"
            }
           $.ajax({
              url: `/users/${urlPath}/processCreationsave/`,
              data: {
                'table_name': $(this).attr('data-table'),
                'element_id': $(this).attr('data-element_id'),
                'name': $(this).text(),
                'username':$(this).attr('data-user'),
                'operation': 'updateTableCardpopulate'
              },
              type: "POST",
              dataType: "json",
              success: function (data) {
              },
              error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            })
        }

        var saveTableBtn = function() {
          table_name_given = $(this).closest('.modal-content').find('.saveTableBtnSelect').val()
          element_id_given = $(this).attr('data-elementID')
          tab_header_given = $('#'+element_id_given.slice(0, -1)+'-tab').find('span').text();
          $('#addTableCard'+element_id_given.slice(0, -1)).find('.saveTableBtn').html(`<i class="fa fa-circle-notch fa-spin"></i>`)
          let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != "Build" && current_dev_mode2 != "Edit"){
              current_dev_mode2 = "User"
            }
          $.ajax({
              url: `/users/${urlPath}/processCreationsave/`,
              data: {
                'table_name': table_name_given,
                'element_id': element_id_given,
                'pr_code': windowLocation.split('/')[4],
                'tab_header':tab_header_given,
                'operation': 'updateTableCard'
              },
              type: "POST",
              dataType: "json",
              success: function (data) {
                $('#'+data.ele_id+'_tab_content').append(data.html)
                var ele_id_to_remove_loading = data.ele_id
                masterBaseDataFilter([data.ele_id+data.id],data.pagination)
                masterUploadFunc([data.ele_id+data.id])
                masterStandardButtonFunc()
                $('#popup'+data.ele_id+data.id).find('form').prepend(`<input type="hidden" name="csrfmiddlewaretoken" value="${$('form').find("input[name='csrfmiddlewaretoken']").attr('value')}">`)
                 url_string = window.location.pathname
             f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
             s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
             t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
             app_code2 = url_string.substring(f_occ+1,s_occ)
             current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
                $.ajax({
                  url: `/users/${urlPath}/asyncFunction/`,
                  data: {
                    'pr_code':windowLocation.split('/')[4],
                    'operation': 'regenerateHtml',
                  },
                  type: "POST",
                  dataType: "json",
                  success: function (data) {
                    $('#addTableCard'+ele_id_to_remove_loading).find('.saveTableBtn').html('Save')
                    $('#addTableCard'+ele_id_to_remove_loading).modal('hide');
                    Swal.fire({icon: 'success',text: 'Table added successfully!'});
                  },
                  error: function () {
                    Swal.fire({icon: 'error',text: 'Error! Failure in adding the Table. Please try again.'});
                    $('#addTableCard'+ele_id_to_remove_loading).find('.saveTableBtn').html('Save')
                  }
                })
              },
              error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            })
        }
      </script>
      <script>
            url_string = window.location.pathname
            f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            app_code2 = url_string.substring(f_occ+1,s_occ)
            current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
      </script>
      """
            )
    if view == "createViewOnModal":
        parent_element_id = t
        html = (
            html
            + f"""<script>
              $("#modalBody_createview_{element_id}").find("#{parent_element_id}_tab_content").removeAttr('class');

              $("#savebutton_{parent_element_id}").attr("connected_listview_id",'{element_id}')
              </script>"""
        )
    if view == "list view":
        html = (
            html
            + f"""
        <script>
            if(!analysiselementIDList.includes('{element_id}')){{
              analysiselementIDList.push("{element_id}");

            }}
            $("#uploadButton2{element_id}").on('click',function()"""
            + """ {
              localStorage.setItem('activeTabs',$(this).attr('data-elementid'))
              ;
            });"""
            + f"""
            // Add the following code if you want the name of the file appear on select
            $(".custom-file-input").on("change", function()"""
            + r""" {
              var fileName = $(this).val().split("\\").pop();
              $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
            });
        </script>
        <script>

       """
            + " var row_edited_dict = {}"
            + f"""

       $(document).on('focusin','.edit',function() """
            + "{"
            + """

          var row_id = $(this).parent().closest('tr').find('td').eq(1).text()
          var value = $(this).text();
          if ($(this).find("div").length > 0) {
            if ($(this).parent('td').length > 0) {
              var verbose_name= $(this).parent('td').closest('table').find('th').eq($(this).parent().index()).attr('orginal-name');
              var model_name = $(this).parent('td').closest('table').attr('data-table-name')
            } else {
              var verbose_name= $(this).closest('table').find('th').eq($(this).parent().index()).attr('orginal-name');
              var model_name = $(this).closest('table').attr('data-table-name')
            }
          }
          else {
            var verbose_name= $(this).closest('table').find('th').eq($(this).parent().index()).attr('orginal-name');
            var model_name = $(this).closest('table').attr('data-table-name')
          }
          var itemCode = windowLocation.split("/")[4];
          var editBtn = $(this)
          if ($(this).parent().find('.dropdown-content-list-view').length == 0){
            $(this).parent().append(`
            <div class="dropdown-content-list-view">
            </div>
            <div class="multi_select_dropdown_listview" style="display:none;">
            <select onchange="dropdownContentListView_multi_select(this)" multiple>

            </select>
            </div>
            `)
            $.ajax({
            url: `/users/${urlPath}/${itemCode}/`,
            data: {'operation': 'editMode_listview_dropdown','model_name': model_name,'verbose_name':verbose_name},
            type: "POST",
            dataType: "json",
            success:function(data) {
              editBtn.parent().find('.dropdown-content-list-view').empty()
              if ('multiSelect' in data.data){
                if (data.data['multiSelect'].length > 0){
                  for (let k in data.data.multiSelect){
                  editBtn.parent().find('.multi_select_dropdown_listview').find('select').append(`<option value="${data.data.multiSelect[k].slice(-1)}">${data.data.multiSelect[k][0]}</option>`)
                }
                editBtn.parent().find('div').eq(0).css('display','none')
                editBtn.parent().find('.multi_select_dropdown_listview').addClass('show')
                editBtn.parent().find('.multi_select_dropdown_listview').find('select').each(function(){
                  parent = $(this).parent()
                  $(this).select2({dropdownParent:parent})
                })
                }

              }else{
                for (let k in data.data){
                editBtn.parent().find('.dropdown-content-list-view').append(`<a onclick="dropdownContentListView(this)">${data.data[k]}</a>`)
              }
              }
              editBtn.parent().find('.dropdown-content-list-view').addClass('show')
            },
            error: function () {
            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          })
          }
          editBtn.parent().find('.dropdown-content-list-view').addClass('show')
        })

        $(document).on('focusout','.edit',function() """
            + "{"
            + """
          var row_id = $(this).parent().closest('tr').find('td').eq(1).text()
          var value = $(this).text();
          var field_name= $(this).closest('table').find('th').eq($(this).closest('td').index()).attr('orginal-name');
          var table1 = $(this).closest('table').DataTable()
          var table_row = $(this).closest('tr')
          const tab = table1.row(table_row).data()
          if (row_id.length < 3){
            if ('id' in tab){
              row_id = tab['id']
            }else if ('ID' in tab){
              row_id = tab['ID']
            }else if ('iD' in tab){
              row_id = tab['iD']
            }else if ('Id' in tab){
              row_id = tab['Id']
            }
          }

          if(row_edited_dict[row_id]){
            row_edited_dict[row_id][field_name] = value
          }else{
            row_edited_dict[row_id] = {}
          row_edited_dict[row_id][field_name] = value
          }
        })
              var ctoken = $('form').find(`input[name='csrfmiddlewaretoken']`).attr('value');
              $.ajaxSetup({
                  beforeSend: function (xhr, settings) {
                      xhr.setRequestHeader("X-CSRFToken", ctoken);
                  }
              });
                  $.ajax({
                  url: `/users/${urlPath}/constriant_get_data/`,
                  data: {
        """
            + f"""
                    elementID: '{element_id}',
        """
            + """
                    operation: 'reload_config_mapper',
                  },
                  type: 'POST',
                  dataType: 'json',
                  success: function (data) {
                    if (
                      Object.prototype.hasOwnProperty.call(data, 'reload_custom_validation')
                    ) {
                      if (data.reload_custom_validation) {
                        const rowData = JSON.parse(data.reload_custom_validation);
                        $(`#configuration_val_row_${data.element_id}`).empty();
                        let rowHtml = '';
                        let count = 1;
                        for (const rowName in rowData) {
                          if(rowName != "Master_filter"){
                            rowHtml += `<tr> <td>${count}</td> <td value='${rowName}'>${rowName}</td> <td><button type="button" class="btn-primary reconfigurecustomvalidation" name="${rowName}" data-element-id=${data.element_id}' id="reconfigurecustomvalidation_${rowName}"><i class="fas fa-trash"></i></button> <button type="button" class="btn-primary editcustomexist_validation" name="${rowName}" data-element-id="${data.element_id}" href="#carouselCustomValidation${data.element_id}" data-slide="next" id="editcustomexist_validation_${rowName}"><i class="fas fa-edit"></i></button></td></tr>`;

                            count++;
                          }
                        }
                        $(`#configuration_val_row_${data.element_id}`).append(rowHtml);
                        $(`#customValidationList1${data.element_id}`).attr(
                          'value',
                          data.reload_custom_validation
                        );
                      }
                    }

                    if(Object.prototype.hasOwnProperty.call(data, 'reload_data')){
                      if (data.reload_data){
                        $(`#columnmapperDict${data.element_id}`).attr(
                          'value',
                          JSON.stringify(data.reload_data)
                        );
                      }
                    }
                  },
                  error: function () {
                    window.Swal.fire({icon: 'error',text: 'Error! Please try again.'});;
                  },
                });

       """
            + f""" $('#saveEditListView{element_id}').on('click',function()"""
            + """{

          let main_dict ={}
          let count = 0
          var list_type = $(this).attr('data-list-type');
         """
            + f""" $('#example1{element_id} tbody').find('tr').each(function()"""
            + "{"
            + """
            var row_id = $(this).find('td').eq(1).text()
            var col_dict = {}
            var table1 = $(this).closest('table').DataTable()
            var table_row = $(this).closest('tr')
            const tab = table1.row(table_row).data()
            if (row_id.length < 3){
              if ('id' in tab){
                row_id = String(tab['id'])
              }else if ('ID' in tab){
                row_id = String(tab['ID'])
              }else if ('iD' in tab){
                row_id = String(tab['iD'])
              }else if ('Id' in tab){
                row_id = String(tab['Id'])
              }
            }
             if(Object.keys(row_edited_dict).includes(row_id)){
               $(this).find('td:not(:first-child)').each(function(){
                flag = 0
                if ($(this).find('.listviewembededcomputation').length == 1){
                  flag = 1
                }
                else if ($(this).find('div').length == 0){
                  var field_name = $(this).closest('table').find('th').eq($(this).index()).attr('orginal-name').trim();
                  var value
                  if ($(this).find('button').attr('data-name') != undefined){
                    value = $(this).find('button').attr('data-name');
                  }else if ($(this).find('[data-file]').length >0){
                    lengthOfFile = $(this).find('[data-file]').length
                    let valueFile = []
                    for (let d = 0; d <= lengthOfFile - 1; d++){
                      valueFile.push(`${$(this).find('[data-file]').eq(d).find('u').text()}`)
                    }
                    let valueFileString = valueFile.toString()
                    valueFileString = valueFileString.replaceAll(',', ', ')
                    value = valueFileString
                  }
                  else if ($(this).find('button').attr('data-data') != undefined){
                    value = $(this).find('button').attr('data-data');
                  } else {
                    value=  $(this).text().trim()
                    if (value == "-") {
                      value = ""
                    }
                  }
                }else if ($(this).find('.multi_select_dropdown_listview').find('select').attr('data-val') != undefined){
                  var field_name =$(this).closest('table').find('th').eq($(this).index()).attr('orginal-name').trim();
                  var value
                  if ($(this).find('div').find('button').attr('data-name') != undefined){
                    value = $(this).find('div').find('button').attr('data-name');
                  } else {
                    value=  $(this).find('.multi_select_dropdown_listview').find('select').attr('data-val')
                    if (value == "-") {
                      value = ""
                    }
                  }
                }
                else{
                  var field_name =$(this).closest('table').find('th').eq($(this).index()).attr('orginal-name').trim();
                  var value
                  if ($(this).find('div').find('button').attr('data-name') != undefined){
                    value = $(this).find('div').find('button').attr('data-name');
                  } else {
                    value=  $(this).find('div').eq(0).text().trim()
                    if (value == "-") {
                      value = ""
                    }
                  }
                }
                if (list_type == "Card View") {
                  value = value.replace(`${field_name}:`, '');
                }

                if (flag == 0){
                  col_dict[field_name] = value
                }

               })
               main_dict[count] = col_dict
               count+=1
             }

          })

          let actions = ['Delete', 'View', 'Temporary delete', 'Edit']
          for (let [key, value] of Object.entries(main_dict)) {
            for (let prop in value) {
              if (actions.includes(prop)) {
                delete value[prop];
              }
            }
          }
          var model_name = $(this).attr('data-table-name')
          var element_id = $(this).attr('data-element-id')
          var itemCode = windowLocation.split("/")[4];
          if(! itemCode.includes("Pr")) {
            var id_ele = element_id
            for(let z = 0; z < item_code_list.length; z++) {
              if(item_code_list[z].hasOwnProperty(id_ele)) {
                itemCode = item_code_list[z][id_ele]
                break
              }
            }
          };
            url_string = window.location.pathname
            f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            app_code2 = url_string.substring(f_occ+1,s_occ)
            current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }

            var view_name = ""
          temp_type = $(`#${element_id}_tab_content`).attr("data-template-type")
          if(temp_type == 'Multi Dropdown View'){
            view_name = $(`#tableTab${element_id}`).find("select").val()
            }

          $.ajax({
          url: `/users/${urlPath}/${itemCode}/`,
          data: { 'model_name': model_name,'list_type':list_type ,'view_name':view_name,'editRowsDict': JSON.stringify(main_dict),'editFieldDict':JSON.stringify(row_edited_dict),'element_id':element_id,'operation': 'editMode_listview' },
          type: "POST",
          dataType: "json",
          success:function(data) {
          if (data.operation_status == 'success'){
          iconHtml = `<i class="${data.edit_success_icon}" style="border: 0 !important;"></i>`
          Swal.fire({icon: 'success',iconHtml,text: data.edit_success_msg}).then((result) => {
          if (result.isConfirmed) {
          windowLocationAttr.reload();
          }
          })
          }
          },
          error: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
          }
          })
          })



        </script>

        """
        )

        if t.get("editTemplateName") == "Model Definition":
            html = (
                html
                + """<script>
              table_data_dict={};"""
                + f""" table_data_dict["original_verbose_column_names"]= {t['list_view_verbose_original_column_names']}
              table_data_dict["model_name"]= "{t['model_name']}"; """
                + f"""    table_data_dict["dataContainingColumnNames"] = {t['list_view_column_names']} table_data_dict["renamed_columns_list"] = {t['renamed_columns_list']};
                          table_data_dict["dataLoadingFirstTime"] = '[]'
                          //Filter variables
                          table_data_dict["table_name"] = "{t['table_name'] }";
                          table_data_dict["label_columns"] = {t['label_columns']};
                          table_data_dict["search_filters"] = {t['search_filters']};
                          table_data_dict["form_fields"] = {t['form_fields']};
              listViewTableDict["{element_id }"]=table_data_dict;
              element_table_IDList.push("{element_id}");
              element_page.push({t.get('page')});
              """
                + f"""$(`button[name='List_view__Data_table__Multi_select{element_id}']`).on("click", function () """
                + """    {
                  if ($(this).val() == "List_view__Data_table__Multi_select_show_checkboxes") {"""
                + f"""$(`#example1{element_id} input.multi_column_select_checkbox`).each(function ()"""
                + """{
                      $(this).show()
                  })
                  $(this).html("Select")

                  $(this).val("List_view__Data_table__Multi_select_open_modal")

                  return
                  };"""
                + f""" dataContainingColumnNames_sel = listViewTableDict["{element_id}"]['dataContainingColumnNames']
                  var table = $(`#example1{element_id}`).DataTable() ;
                  table_name = '{t['table_name'] }'; """
                + """ if ($(this).val() == "List_view__Data_table__Multi_select_open_modal") {
                      pk_list = [];"""
                + f"""    $(`#example1{element_id} input.multi_column_select_checkbox:checked`).each(function ()"""
                + """{
                      var cellIndex = this.parentElement._DT_CellIndex
                      var rowData = table.row(cellIndex.row).data();
                      var primaryKeyColumnName = dataContainingColumnNames_sel[0].data
                      var primaryKeyId = rowData[primaryKeyColumnName]
                      pk_list.push(primaryKeyId)
                      });"""
                + f"""$(`#example1{element_id} input.multi_column_select_checkbox`).each(function () """
                """{
                      $(this).prop("checked", false)
                      $(this).hide()
                  })

                  $(this).html("Multi select")
                  $(this).val("List_view__Data_table__Multi_select_show_checkboxes")
                  return
                  }
              })
              </script>
              <script>
              var elementIDList=[]
              </script>
              <script>
              elementIDList.push"""
                + f"""("{element_id}")"""
                + """
              </script>
              <script>"""
                + f"""listViewEditTemplate["{element_id}"]="{t.get('editTemplateName')}";
              </script>

              <script type="text/javascript">


              var tab_constriant="{t.get('createViewName')}"
              var tables_names="{t.get('selected_tables')}"
              var constraint_holder="{t.get('constraint_holder')}"
              var listConstraintID=  "{element_id}"

              var selectedFields = "{t.get('selectedConstraint_fields')}"
              var additionalCol ="{t.get('remove_additional_column')}"
              selectedFields += additionalCol"""
                + """\nif(listViewEditTemplate[listConstraintID] == "Model Definition"){
                      var listflowcolumnname = "None";

                      var htmlmodeldef= `
                      <ul class="nav nav-tabs nav-fill" id="myTab" role="tablist">

                      <li class="nav-item">
                      <a class="nav-link l3items active l3items" id="model_desc-tab" data-toggle="tab" href="#model_desc_tab_content" role="tab" aria-controls="list_user" aria-selected="false">Model Description</a>
                      </li>

                      <li class="nav-item">
                      <a class="nav-link l3items" id="model_method-tab" data-toggle="tab" href="#model_method_tab_content" role="tab" aria-controls="create_user" aria-selected="false">Model Methodology</a>
                      </li>

                      <li class="nav-item">
                      <a class="nav-link" id="model_stakeholders-tab" data-toggle="tab" href="#model_stakeholders_tab_content" role="tab" aria-controls="list_view" aria-selected="true">Model Stakeholders</a>
                      </li>

                      <li class="nav-item">
                      <a class="nav-link l3items" id="model_governance-tab" data-toggle="tab" href="#model_governance_tab_content" role="tab" aria-controls="create_view" aria-selected="false">Model Governance</a>
                      </li>
                  </ul>

                      <div class="tab-content" id="myTabContent">
                  <div class="tab-pane fade show active" id="model_desc_tab_content" role="tabpanel" aria-labelledby="model_desc-tab">
                      <br><br>
                      <div class="form-row form-row"> <div class="form-group col-md-3"> <div id="div_id_model_name" class="form-group"> <label for="id_model_name_processmodeldef" class=" requiredField">
                              Model name<span class="asteriskField">*</span> </label> <div class=""> <input type="text" name="model_name" value="" maxlength="255" id="id_model_name_processmodeldef" class="textinput textInput form-control is-invalid" required="" readonly> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_model_description" class="form-group"> <label for="id_model_description_processmodeldef" class="">
                              Model description
                          </label> <div class=""> <input type="text" name="model_description" value="" maxlength="255" id="id_model_description_processmodeldef" class="textinput textInput form-control is-invalid" readonly> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_model_type" class="form-group"> <label for="id_model_type_processmodeldef" class="">
                              Model type
                          </label> <div class=""> <input type="text" name="model_type" maxlength="255" id="id_model_type_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_active_inactive" class="form-group"> <label for="id_active_inactive_processmodeldef" class="">
                              Active inactive
                          </label> <div class=""> <select name="active_inactive" class="form-control select2 form-control" id="id_active_inactive_processmodeldef"> <option value="Active">Active</option> <option value="Inactive">Inactive</option>

              </select> </div> </div> </div> </div>
                      </div>
                      <div class="tab-pane fade" id="model_method_tab_content" role="tabpanel" aria-labelledby="model_method-tab">
                      <br><br>
                      <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_methodology_mapping_description" class="form-group"> <label for="id_model_methodology_mapping_description_processmodeldef" class="">
                              Model methodology mapping description
                          </label> <div class=""> <input type="text" name="model_methodology_mapping_description" maxlength="255" id="id_model_methodology_mapping_description_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_methodology_parameters" class="form-group"> <label for="id_model_methodology_parameters_processmodeldef" class="">
                              Model methodology parameters
                          </label> <div class=""> <input type="text" name="model_methodology_parameters" maxlength="255" id="id_model_methodology_parameters_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div> <div class="form-row"><div class="form-group col-md-3"> <div id="div_id_model_inputs" class="form-group"> <label for="id_model_inputs_processmodeldef" class=" requiredField">
                              Model inputs<span class="asteriskField">*</span> </label> <div class=""> <input type="text" name="model_inputs" maxlength="255" id="id_model_inputs_processmodeldef" class="textinput textInput form-control is-invalid" required=""> <span id="error_1_id_model_inputs" class="invalid-feedback"><strong>This field is required.</strong></span> </div> </div> </div></div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_data_management_methods" class="form-group"> <label for="id_model_data_management_methods_processmodeldef" class="">
                              Model data management methods
                          </label> <div class=""> <input type="text" name="model_data_management_methods" maxlength="255" id="id_model_data_management_methods_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div>
                          <div class="form-row">
                          <div class="form-group col-md-3"> <div id="div_id_model_variables" class="form-group"> <label for="id_model_variables_processmodeldef" class="">
                              Model variables
                          </label> <div class=""> <input type="text" name="model_variables" maxlength="255" id="id_model_variables_processmodeldef" class="textinput textInput form-control"> </div> </div> </div></div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_output_format" class="form-group"> <label for="id_model_output_format_processmodeldef" class="">
                              Model output format
                          </label> <div class=""> <input type="text" name="model_output_format" maxlength="255" id="id_model_output_format_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div>
                          </div>
                          <div class="tab-pane fade" id="model_stakeholders_tab_content" role="tabpanel" aria-labelledby="model_stakeholders-tab">
                          <br><br>

                          <div class="form-row form-row">
                  <div class="form-group col-md-6">
                      <label class="acies_label col-md-8">Workflow Steps</label>
                      <div class="row">
                      <div class="col-md-6">
                                      <select class="selectworkflowtemplate select2 form-control" name="table"><option style="display:none"></option>`
                  var master_data_template ="""
                + f""" `{t.get('master_data_template')}` """
                + """
                  master_data_template = JSON.parse(master_data_template.replace(/&quot;/g,'"'))
                  for(i in master_data_template) {
                      htmlmodeldef = htmlmodeldef + `<option value="${master_data_template[i]}">${master_data_template[i]}</option>`
                  }

                  var htmlmodeldef = htmlmodeldef + `</select></div> &nbsp &nbsp &nbsp
                  <div class="col-md-5">
                  <input type="button" value="Load" class="btn btn-primary buttonstyling" id="loadbuttontemplate">
                                  </div></div></div></div>
                      <table id ="model_stakeholders_table">
                      <thead>
                          <tr>
                          <th>
                              <center>Workflow Steps</center>
                          </th>
                          <th>
                              <center>Stakeholders</center>
                          </th>
                          <th>
                              <center>Approvers</center>
                          </th>
                          </tr>
                          </thead>
                          <tbody id="modeldefstakeholders_table_body">
                          </tbody>
                      </table>
                      <br><br></div>
                          <div class="tab-pane fade" id="model_governance_tab_content" role="tabpanel" aria-labelledby="model_governance-tab">
                          <br>
                          <div id="card1" class="card card-default collapsed-card">
                  <div class="card-header">
                      <h6 class="card-title" style="font-size: 0.8rem">Model Policy Applicability</h6>

                      <div class="card-tools">

                      <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                      </div>
                  </div>
                  <div class="card-body">
                      <div class="form-group col-md-3">
                      <select class="mdb-select md-form greyout_trig" id="model_policy_applicability" required>
                                  <option value="" disabled selected>Select</option>
                              </select>
                              </div>
              </div>
              </div>
              <div id="card2" class="card card-default collapsed-card">
                  <div class="card-header">
                      <h6 class="card-title" style="font-size: 0.8rem">Model Documentation</h6>

                      <div class="card-tools">

                      <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                      </div>
                  </div>
                  <div class="card-body">
                      <div id="edit_tablemodeldefdocument" class="table-editable" data-content="Please select the pool name"
                              data-toggle="popover" data-trigger="manual" data-placement="right">
                              <form id="documentform">
                              <table class="table table-responsive" id="test_tablemodeldefdocument">
                                  <tr>
                          <th class="text-center">Model Document Type</th>
                          <th class="text-center">Upload</th>
                          <th class="text-center">Download</th>
                          <th class="text-center">Add</th>
                          <th class="text-center">Remove</th>
                          </tr>
                          <tr>
                              <td class="pt-3-half document_model_def" contenteditable="true" id="document_model_def" required>
                              <input type="text">
                              </td>
                              <td class="pt-3-half upload_model_defdocument" contenteditable="true" id="upload_model_defdocument" required>
                              <div class="custom-file">
                              <input type="file" id="myfile" name="myfile" class="custom-file-input modeldeffile">
                              <label class="custom-file-label">Choose file</label>
                          </div>
                              </td>
                              <td></td>
                              <td>
                                  <span class="table-addmodeldefdocument"><button type="button"
                                          class="btn  btn-primary btn-rounded btn-sm my-0">+</button></span>
                              </td>
                              <td><center>
                                  <span class="table-removemodeldefdocument"><button type="button" style="background-color:black"
                                          class="btn btn-danger btn-rounded btn-sm my-0">-</button></span>
                                          </center></td>
                              </tr>
                          </table>
                          </form>
                          </div>
              </div>
              </div>
              <div id="card3" class="card card-default collapsed-card">
                  <div class="card-header">
                      <h6 class="card-title" style="font-size: 0.8rem">Model System Interactions</h6>

                      <div class="card-tools">

                      <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                      </div>
                  </div>
                  <div class="card-body">
                      <div id="edit_tablemodeldef" class="table-editable" data-content="Please select the pool name"
                              data-toggle="popover" data-trigger="manual" data-placement="right">
                              <table class="table table-responsive" id="test_tablemodeldef">
                                  <tr>
                          <th class="text-center">System type</th>
                          <th class="text-center">System name</th>
                          <th class="text-center">Step</th>
                          <th class="text-center">Add</th>
                          <th class="text-center">Remove</th>
                          </tr>
                          <tr>
                              <td class="pt-3-half system_type_model_def" contenteditable="true" id="system_type_model_def" required>
                              <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                              </td>
                              <td class="pt-3-half system_name_model_def" contenteditable="true" id="system_name_model_def" required>
                              <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                              </td>
                              <td class="pt-3-half steps_model_def" contenteditable="true" id="steps_model_def" required>
                              <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                              </td>
                              <td>
                                  <span class="table-addmodeldef"><button type="button"
                                          class="btn  btn-primary btn-rounded btn-sm my-0">+</button></span>
                              </td>
                              <td><center>
                                  <span class="table-removemodeldef"><button type="button" style="background-color:black"
                                          class="btn btn-danger btn-rounded btn-sm my-0">-</button></span>
                                          </center></td>
                              </tr>
                          </table>
                          </div>
              </div>
              </div>
              <div id="card4" class="card card-default collapsed-card">
                  <div class="card-header">
                      <h6 class="card-title" style="font-size: 0.8rem">Ongoing Maintenance</h6>

                      <div class="card-tools">

                      <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                      </div>
                  </div>
                  <div class="card-body">
                      <div class="form-row form-row">
                      <div class="form-group col-md-3"> <div id="div_id_val_freq" class="form-group"> <label for="id_val_freq_processmodeldef" class="">
                      Model validation frequency
                          </label> <div class=""> <select name="model_validation_frequency" class="form-control select2 form-control" id="id_val_freq_processmodeldef"> <option value="Annually">Annually</option> <option value="Semi-Annual">Semi-Annual</option><option value="Quarterly">Quarterly</option><option value="Monthly">Monthly</option>

              </select> </div> </div> </div></div>
              <div class="form-row form-row">
              <div class="form-group col-md-3"> <div id="div_id_recalib_freq" class="form-group"> <label for="id_recalib_freq_processmodeldef" class="">
              Model recalibration frequency
                          </label> <div class=""> <select name="model_recalibration_frequency" class="form-control select2 form-control" id="id_recalib_freq_processmodeldef"> <option value="Annually">Annually</option> <option value="Semi-Annual">Semi-Annual</option><option value="Quarterly">Quarterly</option><option value="Monthly">Monthly</option>
              </select> </div> </div> </div>
              </div>
              </div>
              </div>
              </div>
                          </div>
                          <div class="row">
                          <input type="button" value="Save and send for approval" class="btn btn-primary buttonstyling" id="saveapprovebuttontemplate"> &nbsp &nbsp &nbsp
                          <input type="button" value="Save" class="btn btn-primary buttonstyling " id="savebuttontemplate"> &nbsp &nbsp &nbsp
                          <input type="button" value="Approve" class="btn btn-primary buttonstyling" id="approvebuttontemplate"> &nbsp &nbsp &nbsp
                          </div>
                      </div>`
                      var users_template ="""
                + f""" `{t.get('users_template')}` """
                + """

              users_template = JSON.parse(users_template.replace(/&quot;/g,'"'))
                  var htmlusers = `<select class="selectuserstemplate select2 form-control" name="table"><option style="display:none"></option>`
                  for(i in users_template) {
                      htmlusers = htmlusers + `<option name="${users_template[i]}" value="${users_template[i]}">${users_template[i]}</option>`
                  }

                  var htmlusers = htmlusers + `</select>`
                  }

              if(listViewEditTemplate[listConstraintID] == "Flow Definition"){
                  var mastertableflow = """
                + f""" "{t.get('mastertableflow')}"
                  var master_data_flow = {t.get('master_data_flow')} """
                + f"""
                  var master_data_flow = master_data_flow

                  var htmlflow= `
                  <div class="form-group col-3">
                                      <label class="acies_label col-md-8">{t.get('flowcolumn')}</label><br>
                                      <select class="selectflow select2 form-control" name="table"><option style="display:none"></option>`

                  var listflowcolumn = "div_id_" + "{t.get('flowcolumn')}"

                  var listflowcolumnname =  "{t.get('flowcolumn')}"

                  var masterColumnflow =  "{t.get('masterColumnflow')}" ; """
                + """

                  for(i in master_data_flow) {
                      htmlflow = htmlflow + `<option value="${master_data_flow[i]}">${master_data_flow[i]}</option>`
                  }


                  var htmlflow = htmlflow + `</select>
                                  </div>
                      <table id ="flow_table">
                      <thead>
                          <tr>
                          <th>
                              <center>Workflow Steps</center>
                          </th>
                          <th>
                              <center>Actions</center>
                          </th>
                          </tr>
                          </thead>
                          <tbody id="flow_table_body">
                          </tbody>
                      </table>
                      <br><br>
                  `
                      } </script>"""
            )

        if t.get("editTemplateName") == "Flow Definition":
            html = (
                html
                + """<script>setTimeout(()=> {var flowcolumnverbose = """
                + f"""'{t["flowcolumnverbose"]}'"""
                + """;var tableid = "example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper"
          var indexflow
          $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("thead").find("th").each(function(){
            if($(this).text() == flowcolumnverbose){
            indexflow = $(this).data("column-index")
            }

          })
          var lenRowMain = $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").length;
          var data
          for (let i = 0; i < lenRowMain; i++) {
          data = $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").eq(i).find("td").eq(indexflow).text();
          if (data != "View Details") {
          $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").eq(i).find("td").eq(indexflow).attr("data-name",data);
          $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").eq(i).find("td").eq(indexflow).empty();
          try {
          JSON.parse(data);
          $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").eq(i).find("td").eq(indexflow).html("<button class='showflowbutton' style='background-color:transparent; border:transparent;'>View Details</button>");

          } catch(err) {
            $("#example1"+"""
                + f"""'{element_id}'"""
                + """+"_wrapper").find("table").find("tbody").find("tr").eq(i).find("td").eq(indexflow).html("<button class='showflownodetailss' style='background-color:transparent; border:transparent;'>No Details Configured</button>");
            }

            }
          }
          setTimeout(() => {
          $('#example1'+"""
                + f"""'{element_id}'"""
                + """).DataTable().columns.adjust();
          },300)
          $(".showflowbutton").on("click", function() {
          $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).find("thead").empty();
          $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).find("tbody").empty();
          $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).find("thead").append(`<tr><th><center>${flowcolumnverbose}</center></th></tr>`)
          var templateflow = JSON.parse($(this).closest("td").attr("data-name"))
          for(i in templateflow){
            $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).find("tbody").append(`<tr><td><center>${templateflow[i]}</center></td></tr>`)
          }
          $("#showDetailListflow"+"""
                + f"""'{element_id}'"""
                + """).css("display","block");
          if ( ! $.fn.DataTable.isDataTable("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """) ) {
          $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).DataTable({"ordering": false,"paging": false,
              "searching": false, "bPaginate": false,
              "info": false,"bLengthChange": false})
          }
          })
          $(".closeDetailflow").on("click", function() {
            $("#showDetailListflowtable" + """
                + f"""'{element_id}'"""
                + """).find("tbody").empty();
            $("#showDetailListflow"+"""
                + f"""'{element_id}'"""
                + """).find(".dataTables_scrollHead").css("opacity", 1);

            $("#showDetailListflow"+"""
                + f"""'{element_id}'"""
                + """).css("display","none");
          })
          },3000)

          </script>"""
            )
        html = (
            html
            + """
        <script>


            var mainid;
            var rowid = 1;
            var mainrowid;
            var columnidset;
            var maincolumnname=""
            var disall = "";

            $(document).ready(function() {"""
            + f"""$(`#select2multiple{element_id}`).select2"""
            + """({
                tags: true
            });"""
            + f"""$(`#select2multiple1{element_id}`).select2"""
            + """({
            tags: true
            });"""
            + f"""var setalerttable = $(`#example111{element_id}`).DataTable"""
            + """( {
            "autoWidth": true,
            "scrollY": 200,
            "scrollX": 500,
            "scrollCollapse": true,
            "sScrollXInner": "100%",
            "ordering":false,
            orderCellsTop: true,
            responsive: true,
            colReorder: {
            fixedColumnsLeft: 1
            },
            stateSave: true,
            "deferRender": true,
            "paging": true,
            "lengthMenu": [[1, 5, 50, -1], [1, 5, 50, "All"]],
            stripeClasses: false,
            "pageLength": 50,
            dom: 'lfBrtip',
            buttons: [
            {
                extend: 'collection',
                text: 'Export',
                buttons: [
                {
                    extend: 'copy', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'excel', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'csv', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'pdf', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                ],
            },
            {
                extend: 'colvis',
                className: "scroller",
            }
            ],
            columnDefs: [
            {
            targets: "_all",
            className: 'dt-center allColumnClass all'
            },
            {
            targets: 0,
            width: "20%",
            className: 'noVis'
            }
            //{ 'visible': false, 'targets': [1,3] }
            ],
            } );
            } );"""
            + f"""$(`#example111{element_id} thead tr`).eq(0).clone(true).appendTo(`#example111{element_id} thead`);
            $(`#example111{element_id} thead tr`).eq(1).find(`th`).eq(0).html('')
            $(`#example111{element_id} thead tr`).eq(0).find(`th`).eq(0).css('cursor', 'default');
            $(`#example111{element_id} thead tr`).eq(0).find(`th`).eq(0).css('background-image', 'none');
            $(`#example111{element_id} thead tr`).eq(1).find(`th`).css('padding', '5px');
            $(`#example111{element_id} thead tr`).eq(1).find(`th`).slice(1).each(function (i)"""
            + """{
            $(this).addClass('dt-center')
            var title = $(this).text();
            $(this).html('<input type="text" value="" data-input_value="" style="text-align:center;border-bottom:none;border:1px solid #ced4da;width:190px;"placeholder="Search ' + title + '" />');
            });"""
            + f"""$(`#displayalert{element_id}`).click(function()"""
            + """{"""
            + f"""element_id = $(this).attr('data-elementid')
            $(`#setalertcard{element_id}`).css('display','block')"""
            + """})

            function rowidset(rowid){
            var rowid = rowid;
            mainrowid = rowid;
            }

            function alertcondition(newcolheaderdef){
            var newcolheaderdef = newcolheaderdef;
            };"""
            + f"""$(`#icol{element_id}`).click(function()"""
            + """{ """
            + f"""$(`#col{element_id}`).css("display","block")"""
            + f"""\n if($(`#col{element_id}`).val())"""
            + """{ """
            + f"""var newcolheader = $(`#col{element_id}`).val();
            $(`#col{element_id}`).css("display","none")

            $(`#example111{element_id} tr`).append($("<th id= temp>"));

            var newcolumn = $(`#col{element_id}`).val();
            var i, frags = newcolumn.split(' ');"""
            + """for (i=0; i<frags.length; i++) {
                frags[i] = frags[i].toLowerCase();
            }
            var originalname = frags.join('_');
            var columnid = parseInt($(this).closest('tr').attr('id')) + "-" + originalname ;"""
            + f"""$(`#example111{element_id} tr`).find("#temp").attr("id", columnid);

            $(`#example111{element_id} tbody tr`).each(function()"""
            + """{$(this).children('td').last()});"""
            + """let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
            $.ajax({
            url: `/users/${urlPath}/alertModel/`,
            data: {
                'operation': "setnewcol",
                'name': newcolumn,
                'originalname':originalname,
                },
                type: "POST",
                dataType: "json",
                success: function (data) {

                },
                error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
            });"""
            + f"""$(`#col{element_id}`).val('');
            $(`#setcolumnheadername{element_id}`).val('');"""
            + """}
            });"""
            + f"""$(`#rowadd{element_id}`).on( 'click', function ()"""
            + """{
              Swal.fire({icon: 'success',text: 'Alert created successfully!'});
            var element_id = $(this).attr('data-elementid');"""
            + """rowid = (parseInt($(`#example111${element_id} tbody tr`).last().attr('id'))+1);
            $( `#example111${element_id} tbody`).append($(`#example111${element_id} tbody tr`).last().clone().attr("id",rowid));
            var alertnames=document.getElementById(`alertname1${element_id}`).value;
            var alertdesc=document.getElementById(`alertdescription1${element_id}`).value;
            var str = "";
            var acmodel_name = """
            + f""" "{t['model_name']}" """
            + """
            $(`#select2multiple1${element_id} option`).each(function()
            {
            str += ("," + this.text);
            });
            var trimstring = str.substring(1);
            var newstr = "[" + trimstring + "]";
            $(`#example111${element_id} tbody tr`).last().find(`td:nth-child(3)`).html(rowid);
            $(`#example111${element_id} tbody tr`).last().find(`td:nth-child(4)`).html(alertnames);
            $(`#example111${element_id} tbody tr`).last().find(`td:nth-child(5)`).html(newstr);
            $(`#example111${element_id} tbody tr`).last().find(`td:nth-child(6)`).html(alertdesc);"""
            + """let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
            $.ajax({
            url: `/users/${urlPath}/alertModel/`,

                data: {
                'operation': "setnewalert1",
                'row_id':rowid,
                'alertname': alertnames,
                'alerttag': newstr,
                'alertdescription':alertdesc,
                'acmodel_name':acmodel_name,
                },
                type: "POST",
                dataType: "json",
                success: function (data) {

            },
                error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
            })
            rowidset(rowid);
            });

            function deletecol(name){
            var name = name;
            var allength ="""
            + f""" $(`#example111{element_id} tr`).eq(0).find(`th`)"""
            + """

            for(var i=0;i<(allength.length);i++)
            {"""
            + f"""if((($(`#example111{element_id} tr`).eq(0).find(`th`).eq(i)[0].outerText).trim())== (name.trim()))"""
            + """{
            $('.dataTables_scrollHead table thead tr').eq(4).find('th').eq(i).remove();
            $('.dataTables_scrollHead table thead tr').eq(5).find('th').eq(i).remove();"""
            + f"""$(`#example111{element_id} tr`).each(function() """
            + """{
            $(this).children("td").eq(i).remove();
            });
            }
            }
            let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
            $.ajax({
                url: `/users/${urlPath}/alertModel/`,
                data: {
                    'operation': "deletecol",
                    'name': name,
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                    Swal.fire({icon: 'success',text: 'Success!'});
                    },
                    error: function () {
                    }
                })
            };"""
            + f"""$(`#example111{element_id} tbody`).on('click', 'td:first-child',function () """
            + """{
            var nid = ($(this).closest('tr').attr('id'));
            $(this).closest('tr').remove();
            let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
            $.ajax({
            url: `/users/${urlPath}/alertModel/`,
                data: {
                    'operation': "deletelimit",
                    'nid': nid,
                },
                type: "POST",
                dataType: "json",
                success: function (data) {

                },
                error: function () {
                }
                })
            });"""
            + """$(`#setalertfunction"""
            + f"""{element_id}"""
            + """`).on( 'click', function ()"""
            + """{
            var element_id = $(this).attr('data-elementid')
            Swal.fire({icon: 'success',text: 'Alert created succesfully!'});"""
            + f"""var acmodel_name = "{t["model_name"]}"; """
            + """var alertnames=document.getElementById(`alertname${element_id}`).value;
            var alertdesc=document.getElementById(`alertdescription${element_id}`).value;
            var str = ",";
            $(`#select2multiple${element_id} option`).each(function() {
            str += ("," + this.text);
            });
            var trimstring = str.substring(2);
            var newstr = "[" + trimstring + "]";
            var alerttags = newstr;

            $(`#example111${element_id} tbody tr:first-child td:nth-child(3)`).html("1");
            $(`#example111${element_id} tbody tr:first-child td:nth-child(4)`).html(alertnames);
            $(`#example111${element_id} tbody tr:first-child td:nth-child(5)`).html(alerttags);
            $(`#example111${element_id} tbody tr:first-child td:nth-child(6)`).html(alertdesc);
            let url_string = window.location.pathname
            let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
            let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
            let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
            let app_code2 = url_string.substring(f_occ+1,s_occ)
            let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
            if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
              current_dev_mode2 = 'User'
            }
            $.ajax({
            url: `/users/${urlPath}/alertModel/`,

                data: {
                'operation': "setnewalert",
                'name': alertnames,
                'tag': alerttags,
                'description':alertdesc,
                'acmodel_name':acmodel_name,
                },
                type: "POST",
                dataType: "json",
                success: function (data) {

            },
                error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
            })
            disall="true"
            sessionStorage.reloadAfterPageLoad = true;
            location.reload();

            })

            $( function () {"""
            + f"""if('{t['table_data']}' == "empty")"""
            + """{"""
            + f"""    $(`#setalertcard{element_id}`).css('display','none')"""
            + """}
            else{"""
            + f"""    $(`#setalertcard{element_id}`).css('display','block')"""
            + """}
            });"""
            + f"""$(`#example111{element_id} tbody`).on( 'dblclick', 'td:gt(2)', function ()"""
            + """{
            var element_id = ($(this).closest('table').attr('data-elementid'))
            $(`#setcolumnname1${element_id}`).empty()
            $(`#setrowname1${element_id}`).empty()
            $(`#setcolumnheadername${element_id}`).empty()
            $(`#setconditionmodal${element_id}`).modal('show');

            var idval = $(this).closest('tr').attr('id');
            var idcol1 = ($(`#example111${element_id} thead tr th div`).eq($(this).index()).html());
            var idcol= idcol1.substr(0, idcol1.indexOf('<i class="fa fa-times"'));
            $(`#setrowname1${element_id}`).append(idval);

            var rowid = ($(this).closest("tr").attr('id'));"""
            + f"""var id = (idcol1.substr(0, idcol1.indexOf('<i class="fa fa-times"'))) + '{t['model_name']}' + ($(this).closest("tr").attr('id'));"""
            + """var newid = $(this).attr('id',id)
            var columnname = $(this).attr(id);
            var rowname = $(`#example111${element_id} tr`).last().attr("id");

            $(`#setcolumnname1${element_id}`).append(idcol)

            $(`#setcolumnheadername${element_id}`).append(id)
            $(".setalert").empty();
            $(".setname").empty();
            $(`#setcolumnheadername${element_id}`).val('');
            myvariable(id);

            });

            function myvariable(id)
            {
            var id = id;
            mainid = id;
            };"""
            + f"""$(`.filter_btn1{element_id}`).click(function ()"""
            + """{
            $(".setalert").empty();
            $(".setname").empty();
            var alertname = $(this).attr('name');
            maincolumnname = alertname
            var text = $(this).text();"""
            + f"""var form_fields = {t['form_fields']};
            var STRING1 = form_fields[alertname]
            $(`#alert-table{element_id}`).append(STRING1)"""
            + """});"""
            + f"""$(`#conditionsave{element_id}`).click(function()"""
            + """{"""
            + f"""var element_id = $(this).attr('data-elementid')
            var mname = '{t['model_name']}'
            var m_name = '{t['model_name']}'
            var alerttablename = "{ t['table_name']}"
            var alert_list_temp = [];"""
            + """var colname = $(`#setcolumnheadername${element_id}`)[0].innerHTML;
            var color1 = document.getElementById(`colorset${element_id}`).value;
            var conditionaltext = $(`#conditionaltext${element_id}`).val();
            var rowname = $(`#example111${element_id} tr`).last().attr("id");
            var filter_rows = $(`#alert-table${element_id}`).find("tr")
            if (filter_rows.length > 0) {
                if (filter_rows.length == 1) {  // if only 1 row exists then its a simple_single_column filter
                    filter_rows.each(function () {
                        var filter_condition_dropdown = $(this).find("select[data-dropdown_purpose='select_filter_condition']")
                        var col_verbose_name = filter_condition_dropdown.attr('data-verbose_name')
                        var col = filter_condition_dropdown.val();
                        var filter_condition_value_text = filter_condition_dropdown.val()
                        var limit_value = $(this).find('input').val()
                        var tempid = "#"+mainid;
                        var status;
                        var logical_operator_value = $(this).find("select[data-dropdown_purpose='select_logical_operator']").val()
                        var length = 0;
                        var counter = 0;
                        var columnname = filter_condition_dropdown.attr('data-verbose_name')
                        var cname = filter_condition_dropdown.val();
                        var condition = filter_condition_value_text;
                        var inputval =  $(this).find('input').val()
                        var colname = $(`#setcolumnheadername${element_id}`)[0].innerHTML;
                        var colname1 = $(`#setcolumnname1${element_id}`)[0].innerHTML;
                        var rowname1 = $(`#setrowname1${element_id}`)[0].innerHTML;
                        var colordata = color1;
                        var alertcolumn = filter_condition_dropdown.attr('name')
                        var alertcondition = filter_condition_value_text;
                        var alertinput = $(this).find('input').val()
                        let url_string = window.location.pathname
                        let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
                        let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
                        let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
                        let app_code2 = url_string.substring(f_occ+1,s_occ)
                        let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
                        if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                          current_dev_mode2 = 'User'
                        }
                        $.ajax({
                        url: `/users/${urlPath}/alertModel/`,
                        data: {
                            'operation': "setcolumndatainfo",
                            'cname':alertcolumn,
                            'cond':alertcondition,
                            'inp':alertinput,
                            'tname':alerttablename,
                            'rowname': rowname1,
                            'colname': colname1,
                            'data': conditionaltext,
                            'colordata':colordata,
                            'condition':condition,
                            'columnname': maincolumnname,
                            'inputval': inputval,
                            'm_name':m_name,
                        },
                        type: "POST",
                        dataType: "json",
                        success: function (data) {
                            var alertstatus = data.alert
                            if(alertstatus == "breached")
                            {
                            $(tempid).css("background-color",''+ color1)
                            $(tempid).html(conditionaltext)
                            }
                            else{
                            $(tempid).css("background-color","white")
                            $(tempid).html("")
                            }
                        },
                        error: function () {
                        }
                        })
                    });
                    $(`#setcolumnheadername${element_id}`)[0].innerHTML="";
                    $(`#setcolumnname1${element_id}`)[0].innerHTML="";
                    $(`#setrowname1${element_id}`)[0].innerHTML="";
                }
                else { // if more than 1 row exists, then its a simple_multi_column filter with logical operators
                filter_rows.each(function () {
                    var filter_condition_dropdown = $(this).find("select[data-dropdown_purpose='select_filter_condition']")
                    var col_verbose_name = filter_condition_dropdown.attr('data-verbose_name')
                    var filter_condition_value_text = filter_condition_dropdown.val()
                    var limit_value = $(this).find('input').val()
                    var logical_operator_value = $(this).find("select[data-dropdown_purpose='select_logical_operator']").val()
                    alert_list_temp.push({
                    "column_verbose_name": col_verbose_name,
                    "condition": filter_condition_value_text,
                    "limit": limit_value,
                    "dependency": "true",
                    "operator": logical_operator_value
                    })
                })
                type_of_alert = "simple_multi_column"
                }
            }
            })
            </script>"""
        )
        html = (
            html
            + """ <script>
            //Custom View Starts Here
            var customViewIndex = {};"""
        )
        if t.get("custom_view_cols") is not None:
            html = html + f"""customViewIndex["{element_id}"] = {t.get('custom_view_cols')}"""
        else:
            html = (
                html
                + f"""customViewIndex["{element_id}"] = '{t.get('custom_view_cols')}' ; var element_id='{element_id}'; """
            )
        html = (
            html
            + """ if (customViewIndex["""
            + f"""'{element_id}'"""
            + """].length > 0 && customViewIndex[element_id] != "None") {
            function viewDetails() {
              let url_string = window.location.pathname
              let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
              let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
              let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
              let app_code2 = url_string.substring(f_occ+1,s_occ)
              let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }
                $.ajax({
                    url: `/users/${urlPath}/customView/`,

                    data: {
                    'custom_view_columns': JSON.stringify(customViewIndex["""
            + f"""'{element_id}'"""
            + """]),
                    'id': JSON.stringify("""
            + f"""'{element_id}'"""
            + """)
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                    },
                    error: function () {
                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    }
                })
                var lenTable = $("#example1"+"""
            + f"""'{element_id}'"""
            + """).find('tbody').find('tr').length;

            };

            viewDetails();


            $("#example1"+"""
            + f"""'{element_id}'"""
            + """).find('tbody').on('click','button',function(){
            function customViewTableDesign() {
            $("#customViewTable"+"""
            + f"""'{element_id}'"""
            + """).DataTable( {
                    "autoWidth": true,
                    "scrollY": '60vh',
                    "scrollCollapse": true,
                    "scrollX": "110%",
                    // "serverSide":true,
                    orderCellsTop: true,
                    //fixedHeader: true,
                    responsive: true,
                    colReorder: {
                    fixedColumnsLeft: 1,
                    },
                    // stateSave: true,
                    "deferRender": true,
                    "paging": true,
                    "lengthMenu": [[1, 5, 50, -1], [1, 5, 50, "All"]],
                    stripeClasses: false,
                    "pageLength": 50,
                    dom: 'lfBrtip',
                    "sScrollX": "100%",
                    "scrollX": true,
                    buttons: [
                        {
                        extend: 'collection',
                        text: 'Export',
                        buttons: [
                            {
                            extend: 'copy', title: '', exportOptions: {
                                columns: ':visible:not(.noVis)'
                            }
                            },
                            {
                            extend: 'excel', title: '', exportOptions: {
                                columns: ':visible:not(.noVis)'
                            }
                            },
                            {
                            extend: 'csv', title: '', exportOptions: {
                                columns: ':visible:not(.noVis)'
                            }
                            },
                            {
                            extend: 'pdf', title: '', exportOptions: {
                                columns: ':visible:not(.noVis)'
                            }
                            },
                        ],
                        },
                        {
                        extend: 'colvis',
                        className: "scroller",
                        }
                    ],
                    columnDefs: [
                        {
                        targets: "_all",
                        className: 'dt-center allColumnClass all'
                        },
                        {
                        targets: 0,
                        width: "20%",
                        className: 'noVis'
                        }
                    ],


                    });
            };
            $("#customViewTable"+"""
            + f"""'{element_id}'"""
            + """+"_wrapper").remove();
            $("#customViewTable"+"""
            + f"""'{element_id}'"""
            + """).remove();
            var customTable = `
            <table id="customViewTable${"""
            + f"""'{element_id}'"""
            + """}"  class="display compact" style="width:100%;"">
                <thead>
                </thead>

                <tbody>

                </tbody>

            </table>
            `
            $("#customShowDetailList"+"""
            + f"""'{element_id}'"""
            + """).find('.modal-body').find('.card-body').append(customTable);
            $("#customShowDetailList"+"""
            + f"""'{element_id}'"""
            + """).find('.modal-body').find('.card-header').html(`<h5 class="mb-0" style="text-align:center;">
                ${$(this).attr('data-name')}
            </h5>`)
            $("#customShowDetailList"+"""
            + f"""'{element_id}'"""
            + """).css('display','block');
            var customViewData = JSON.parse($(this).attr('data-pop'));
            var customTableHtml = "<tr>";
            for (const [key, value] of Object.entries(customViewData["0"])) {
                customTableHtml = customTableHtml + `<th>${key}</th>`;
            }
            customTableHtml = customTableHtml + `</tr>`
            $("#customViewTable"+"""
            + f"""'{element_id}'"""
            + """).find('thead').append(`
            ${customTableHtml}
            `)
            for (const [key, value] of Object.entries(customViewData)) {
                var html = "<tr>";
                for (const [key1, value1] of Object.entries(value)) {
                html = html + `<td>${value1}</td>`
                }
                html = html + `</tr>`;
                $("#customViewTable"+"""
            + f"""'{element_id}'"""
            + """).find('tbody').append(`
                ${html}
                `)
            }
            customViewTableDesign();
            })
            $("#customShowDetailList"+"""
            + f"""'{element_id}'"""
            + """).find('.close').on('click',function() {
            $("#customShowDetailList"+"""
            + f"""'{element_id}'"""
            + """).css('display','none');
            })
            }
            // Ends Here

            </script>"""
        )
        html = (
            html
            + """    <script>
        var reportingViewTemplate = {}; </script>"""
        )
        if t.get("reportingViewTemplate"):
            html = (
                html
                + """<script>
            var None = 'None';
            //Reporting View Starts Here
            var reportingViewColumns = {}
            var reportingVerboseColumn = {}
            var reportingViewColumnsValue = {}
            var reportingViewId = {}
            var tableInitial = {}
            var reportingViewSelectedValue = {}
            var reportingShowLatest ={}
            var basicfilter_config={}
            var countSelect = {};"""
                + f"""var element_id = '{element_id}';

            if ("{t['reportingViewTemplate']}" == "Scenario" || "{t['reportingViewTemplate']}" == "Reporting View" || "{t['reportingViewTemplate']}" == "List View With History" || "{t['reportingViewTemplate']}" == "Multi Dropdown View" || "{t['reportingViewTemplate']}" == "Approval Template" )"""
                + """ {
                $(`#setalertcard${element_id}`).css('display', 'none');
                $(`#${element_id}_tab_content`).find('.card-body.bodyListview').css('display','none');
            }
            """
                + f""" var element_id = '{element_id}';
            if ("{t['reportingViewTemplate']}" == "Scenario" || "{t['reportingViewTemplate']}" == "Reporting View" || "{t['reportingViewTemplate']}" == "List View With History" || "{t['reportingViewTemplate']}" == "Multi Dropdown View" || "{t['reportingViewTemplate']}" == "Approval Template" )"""
                + """ {
            """
            )
            if t.get("reportingViewColumnsValue") or t.get("reportingViewColumnsValue") == []:
                html += (
                    """
              if"""
                    + f""" ("{t['reportingViewTemplate']}" == "Scenario")"""
                    + """ {
                  var templateUI = {}
                  var countReportingView = {};
                  countReportingView[element_id] = -1;
                  templateUI[element_id]  = `
                  <div class="card col-12" """
                    + f""" id="tableTabScenario{element_id}">"""
                    + """
                  <div class="card-header">
                      <h6 class="card-title">View scenario detail</h6>
                      <div class="card-tools">
                          <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>
                          <!-- <button type="button" class="btn btn-tool" data-card-widget="remove"><i class="fas fa-remove"></i></button> -->
                      </div>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="form-group col-3">
                          <label class="acies_label col-md-12">Model name</label>
                          <select class="select2 form-control">
                              <option value=""selected disabled>---</option>
                              <option value="All">All</option>
                          </select>
                        </div>
                      </div>
                        <div id="{element_id}_tableTabSaveBtn" class='row saveReportView' style='padding:0rem;'><button type="button" data-toggle="tooltip" title="View Detail" class="btn btn-primary btn-md mx-2 rounded px-2 my-1" data-parent_group_no="g2">
                            View Detail
                        </button>
                        </div>
                    </div>
                  </div>
                  `

                $(`#{element_id}_tab_content`).find('.card-body').css('display','none');
                $(`#{element_id}_tab_content`).prepend(templateUI["{element_id}"]);
                $('#tableTabScenario'+"{element_id}").find('#'+"{element_id}"+'_tableTabSaveBtn').find('button').prop('disabled',false);
                $('#tableTabScenario'+"{element_id}").find('select').each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
  });
                $('#tableTabScenario'+"{element_id}").addClass('')
                $('#tableTabScenario'+"{element_id}").find('.card-body').css('display','block');
                $('#tableTabScenario'+"{element_id}").find('.card-header').find('.card-tools').find('i').addClass('fas fa-minus');"""
                    + """
                $('#tableTabScenario'+element_id).find('#'+element_id+'_tableTabSaveBtn').find('button').on('click', function() {

                $('#tableTabScenario'+element_id).find('#'+element_id+'_tableTabSaveBtn').attr('data-element_id',element_id)
                  var el_id = $(this).parent().attr('data-element_id')
                  ajaxFuncScenario($('#tableTabScenario'+el_id).find('.card-body').find('select').val(),el_id);
                })

              }"""
                )
            html = (
                html
                + f"""
              if ("{t['reportingViewTemplate']}" == "Reporting View" || "{t['reportingViewTemplate']}" == "List View With History" || "{t['reportingViewTemplate']}" == "Approval Template")"""
                + """ {
            """
            )
            if t.get("basicfilter_config"):
                html += f"""
                var defaultFilter = JSON.stringify({json.loads(t['basicfilter_config'])});
              """
            else:
                html += "var defaultFilter = JSON.stringify([]);"
            if t.get("reportingViewColumns"):
                html += f"""
                var reportingParameters = JSON.stringify({t['reportingViewColumns']});
                var reportingTable = '{t['reportingViewTableName']}';
              """
            else:
                html += """
                var reportingParameters = JSON.stringify([]);
                var reportingTable = '';
              """
            html = (
                html
                + """
                $.ajax({
                  url:`/users/${urlPath}/dynamicVal/`,
                  data: {
                    'operation':'reporting view',
                    'defaultFilter': defaultFilter,
                    'reportingParameters': reportingParameters,
                    'reportingTable': reportingTable,
                    'element_id':element_id,
                  },
                  type: 'POST',
                  dataType: "json",
                  success: function (data) {
                    if(data.hasOwnProperty('data')){
                      let reportingParameterCard = $('#tableTab'+data.data.element_id).find('.card-body');
                      for(let [key, value] of Object.entries(data.data.parameter_inputs)) {
                        var targetElement = reportingParameterCard.find(`select[data-parameter-name="${key}"]`);
                        targetElement.empty();
                        targetElement.append(`<option disabled selected value="">Select Value</option>`)
                        for(let j =0; j < value.length; j++) {
                          targetElement.append(`<option value='${value[j]}'>${value[j]}</option>`)
                        }
                      }
                    }
                  },
                  error: ()=>{
                    Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                  }
                });
              }"""
            )
            html = (
                html
                + f"""
                if ("{t['reportingViewTemplate']}" == "Scenario")"""
                + """ {
              """
            )
            html = (
                html
                + """
            let url_string = window.location.pathname
              let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
              let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
              let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
              let app_code2 = url_string.substring(f_occ+1,s_occ)
              let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }
                $.ajax({
                  url:`/users/${urlPath}/dynamicVal/`,
                  data: {
                    'operation':'scenario',
                    'element_id':element_id,
                  },
                  type: 'POST',
                  dataType: "json",
                  success: function (data) {
                    if(data.hasOwnProperty('data')){
                      $('#tableTabScenario'+element_id).find('.card-body').find('select').empty();
                      $('#tableTabScenario'+element_id).find('.card-body').find('select').append(`<option disabled selected value="">----------</option>`)
                      for(let i =0; i < data.data.length; i++) {
                        $('#tableTabScenario'+element_id).find('.card-body').find('select').append(`<option value="${data.data[i]}">${data.data[i]}</option>`)
                      }
                    }
                  },
                  error: ()=>{
                      Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                  }
                });
              }


                function ajaxFuncScenario(model_name, element_id,column_name="scenario_config") {
                  let url_string = window.location.pathname
                  let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
                  let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
                  let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
                  let app_code2 = url_string.substring(f_occ+1,s_occ)
                  let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
                  if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                    current_dev_mode2 = 'User'
                  }
                  $.ajax({
                    url: `/users/${urlPath}/dynamicVal/`,
                    data: {
                        'operation':'scenario_redis',
                        'column':column_name,
                        'model_name':model_name,
                        'element_id':element_id
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                      $('#'+`example1${element_id}`).DataTable()
                      .draw()
                      if ("Scenario" == "Reporting View") {
                      $('#'+`example1${element_id}`).DataTable()
                          .column(0).visible(true)
                      }
                      $(`#${element_id}_tab_content`).find('.card-body').css('display','block');
                      },
                    error: function () {
                        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    }
                  })
                }
              }
                //Reporting View Ends Here
            </script>"""
            )
        html = (
            html
            + """
            <!-- Constriant  -->


            <script>"""
            + f"""listViewEditTemplate["{element_id}"]="{t.get('editTemplateName')}";
            </script>

            <script type="text/javascript">


            var tab_constriant="{t.get('createViewName')}"
            var tables_names="{t.get('selected_tables')}"
            var constraint_holder="{t.get('constraint_holder')}"
            var listConstraintID=  "{element_id}"

            var selectedFields = "{t.get('selectedConstraint_fields')}"
            var additionalCol ="{t.get('remove_additional_column')}"
            selectedFields += additionalCol"""
            + """\nif(listViewEditTemplate[listConstraintID] == "Model Definition"){
                    var listflowcolumnname = "None";

                    var htmlmodeldef= `
                    <ul class="nav nav-tabs nav-fill" id="myTab" role="tablist">

                    <li class="nav-item">
                    <a class="nav-link l3items active l3items" id="model_desc-tab" data-toggle="tab" href="#model_desc_tab_content" role="tab" aria-controls="list_user" aria-selected="false">Model Description</a>
                    </li>

                    <li class="nav-item">
                    <a class="nav-link l3items" id="model_method-tab" data-toggle="tab" href="#model_method_tab_content" role="tab" aria-controls="create_user" aria-selected="false">Model Methodology</a>
                    </li>

                    <li class="nav-item">
                    <a class="nav-link" id="model_stakeholders-tab" data-toggle="tab" href="#model_stakeholders_tab_content" role="tab" aria-controls="list_view" aria-selected="true">Model Stakeholders</a>
                    </li>

                    <li class="nav-item">
                    <a class="nav-link l3items" id="model_governance-tab" data-toggle="tab" href="#model_governance_tab_content" role="tab" aria-controls="create_view" aria-selected="false">Model Governance</a>
                    </li>
                </ul>

                    <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="model_desc_tab_content" role="tabpanel" aria-labelledby="model_desc-tab">
                    <br><br>
                    <div class="form-row form-row"> <div class="form-group col-md-3"> <div id="div_id_model_name" class="form-group"> <label for="id_model_name_processmodeldef" class=" requiredField">
                            Model name<span class="asteriskField">*</span> </label> <div class=""> <input type="text" name="model_name" value="" maxlength="255" id="id_model_name_processmodeldef" class="textinput textInput form-control is-invalid" required="" readonly> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_model_description" class="form-group"> <label for="id_model_description_processmodeldef" class="">
                            Model description
                        </label> <div class=""> <input type="text" name="model_description" value="" maxlength="255" id="id_model_description_processmodeldef" class="textinput textInput form-control is-invalid" readonly> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_model_type" class="form-group"> <label for="id_model_type_processmodeldef" class="">
                            Model type
                        </label> <div class=""> <input type="text" name="model_type" maxlength="255" id="id_model_type_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> <div class="form-group col-md-3"> <div id="div_id_active_inactive" class="form-group"> <label for="id_active_inactive_processmodeldef" class="">
                            Active inactive
                        </label> <div class=""> <select name="active_inactive" class="form-control select2 form-control" id="id_active_inactive_processmodeldef"> <option value="Active">Active</option> <option value="Inactive">Inactive</option>

            </select> </div> </div> </div> </div>
                    </div>
                    <div class="tab-pane fade" id="model_method_tab_content" role="tabpanel" aria-labelledby="model_method-tab">
                    <br><br>
                    <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_methodology_mapping_description" class="form-group"> <label for="id_model_methodology_mapping_description_processmodeldef" class="">
                            Model methodology mapping description
                        </label> <div class=""> <input type="text" name="model_methodology_mapping_description" maxlength="255" id="id_model_methodology_mapping_description_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_methodology_parameters" class="form-group"> <label for="id_model_methodology_parameters_processmodeldef" class="">
                            Model methodology parameters
                        </label> <div class=""> <input type="text" name="model_methodology_parameters" maxlength="255" id="id_model_methodology_parameters_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div> <div class="form-row"><div class="form-group col-md-3"> <div id="div_id_model_inputs" class="form-group"> <label for="id_model_inputs_processmodeldef" class=" requiredField">
                            Model inputs<span class="asteriskField">*</span> </label> <div class=""> <input type="text" name="model_inputs" maxlength="255" id="id_model_inputs_processmodeldef" class="textinput textInput form-control is-invalid" required=""> <span id="error_1_id_model_inputs" class="invalid-feedback"><strong>This field is required.</strong></span> </div> </div> </div></div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_data_management_methods" class="form-group"> <label for="id_model_data_management_methods_processmodeldef" class="">
                            Model data management methods
                        </label> <div class=""> <input type="text" name="model_data_management_methods" maxlength="255" id="id_model_data_management_methods_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div>
                        <div class="form-row">
                        <div class="form-group col-md-3"> <div id="div_id_model_variables" class="form-group"> <label for="id_model_variables_processmodeldef" class="">
                            Model variables
                        </label> <div class=""> <input type="text" name="model_variables" maxlength="255" id="id_model_variables_processmodeldef" class="textinput textInput form-control"> </div> </div> </div></div> <div class="form-row"> <div class="form-group col-md-3"> <div id="div_id_model_output_format" class="form-group"> <label for="id_model_output_format_processmodeldef" class="">
                            Model output format
                        </label> <div class=""> <input type="text" name="model_output_format" maxlength="255" id="id_model_output_format_processmodeldef" class="textinput textInput form-control"> </div> </div> </div> </div>
                        </div>
                        <div class="tab-pane fade" id="model_stakeholders_tab_content" role="tabpanel" aria-labelledby="model_stakeholders-tab">
                        <br><br>

                        <div class="form-row form-row">
                <div class="form-group col-md-6">
                    <label class="acies_label col-md-8">Workflow Steps</label>
                    <div class="row">
                    <div class="col-md-6">
                                    <select class="selectworkflowtemplate select2 form-control" name="table"><option style="display:none"></option>`
                var master_data_template ="""
            + f""" `{t.get('master_data_template')}` """
            + """
                master_data_template = JSON.parse(master_data_template.replace(/&quot;/g,'"'))
                for(i in master_data_template) {
                    htmlmodeldef = htmlmodeldef + `<option value="${master_data_template[i]}">${master_data_template[i]}</option>`
                }

                var htmlmodeldef = htmlmodeldef + `</select></div> &nbsp &nbsp &nbsp
                <div class="col-md-5">
                <input type="button" value="Load" class="btn btn-primary buttonstyling" id="loadbuttontemplate">
                                </div></div></div></div>
                    <table id ="model_stakeholders_table">
                    <thead>
                        <tr>
                        <th>
                            <center>Workflow Steps</center>
                        </th>
                        <th>
                            <center>Stakeholders</center>
                        </th>
                        <th>
                            <center>Approvers</center>
                        </th>
                        </tr>
                        </thead>
                        <tbody id="modeldefstakeholders_table_body">
                        </tbody>
                    </table>
                    <br><br></div>
                        <div class="tab-pane fade" id="model_governance_tab_content" role="tabpanel" aria-labelledby="model_governance-tab">
                        <br>
                        <div id="card1" class="card card-default collapsed-card">
                <div class="card-header">
                    <h6 class="card-title" style="font-size: 0.8rem">Model Policy Applicability</h6>

                    <div class="card-tools">

                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group col-md-3">
                    <select class="mdb-select md-form greyout_trig" id="model_policy_applicability" required>
                                <option value="" disabled selected>Select</option>
                            </select>
                            </div>
            </div>
            </div>
            <div id="card2" class="card card-default collapsed-card">
                <div class="card-header">
                    <h6 class="card-title" style="font-size: 0.8rem">Model Documentation</h6>

                    <div class="card-tools">

                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                    </div>
                </div>
                <div class="card-body">
                    <div id="edit_tablemodeldefdocument" class="table-editable" data-content="Please select the pool name"
                            data-toggle="popover" data-trigger="manual" data-placement="right">
                            <form id="documentform">
                            <table class="table table-responsive" id="test_tablemodeldefdocument">
                                <tr>
                        <th class="text-center">Model Document Type</th>
                        <th class="text-center">Upload</th>
                        <th class="text-center">Download</th>
                        <th class="text-center">Add</th>
                        <th class="text-center">Remove</th>
                        </tr>
                        <tr>
                            <td class="pt-3-half document_model_def" contenteditable="true" id="document_model_def" required>
                            <input type="text">
                            </td>
                            <td class="pt-3-half upload_model_defdocument" contenteditable="true" id="upload_model_defdocument" required>
                            <div class="custom-file">
                            <input type="file" id="myfile" name="myfile" class="custom-file-input modeldeffile">
                            <label class="custom-file-label">Choose file</label>
                        </div>
                            </td>
                            <td></td>
                            <td>
                                <span class="table-addmodeldefdocument"><button type="button"
                                        class="btn  btn-primary btn-rounded btn-sm my-0">+</button></span>
                            </td>
                            <td><center>
                                <span class="table-removemodeldefdocument"><button type="button" style="background-color:black"
                                        class="btn btn-danger btn-rounded btn-sm my-0">-</button></span>
                                        </center></td>
                            </tr>
                        </table>
                        </form>
                        </div>
            </div>
            </div>
            <div id="card3" class="card card-default collapsed-card">
                <div class="card-header">
                    <h6 class="card-title" style="font-size: 0.8rem">Model System Interactions</h6>

                    <div class="card-tools">

                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                    </div>
                </div>
                <div class="card-body">
                    <div id="edit_tablemodeldef" class="table-editable" data-content="Please select the pool name"
                            data-toggle="popover" data-trigger="manual" data-placement="right">
                            <table class="table table-responsive" id="test_tablemodeldef">
                                <tr>
                        <th class="text-center">System type</th>
                        <th class="text-center">System name</th>
                        <th class="text-center">Step</th>
                        <th class="text-center">Add</th>
                        <th class="text-center">Remove</th>
                        </tr>
                        <tr>
                            <td class="pt-3-half system_type_model_def" contenteditable="true" id="system_type_model_def" required>
                            <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                            </td>
                            <td class="pt-3-half system_name_model_def" contenteditable="true" id="system_name_model_def" required>
                            <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                            </td>
                            <td class="pt-3-half steps_model_def" contenteditable="true" id="steps_model_def" required>
                            <input type="text" pattern="^[a-zA-Z_.-]*$" title="Only Alphabets, _ ,- are accepted">
                            </td>
                            <td>
                                <span class="table-addmodeldef"><button type="button"
                                        class="btn  btn-primary btn-rounded btn-sm my-0">+</button></span>
                            </td>
                            <td><center>
                                <span class="table-removemodeldef"><button type="button" style="background-color:black"
                                        class="btn btn-danger btn-rounded btn-sm my-0">-</button></span>
                                        </center></td>
                            </tr>
                        </table>
                        </div>
            </div>
            </div>
            <div id="card4" class="card card-default collapsed-card">
                <div class="card-header">
                    <h6 class="card-title" style="font-size: 0.8rem">Ongoing Maintenance</h6>

                    <div class="card-tools">

                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>

                    </div>
                </div>
                <div class="card-body">
                    <div class="form-row form-row">
                    <div class="form-group col-md-3"> <div id="div_id_val_freq" class="form-group"> <label for="id_val_freq_processmodeldef" class="">
                    Model validation frequency
                        </label> <div class=""> <select name="model_validation_frequency" class="form-control select2 form-control" id="id_val_freq_processmodeldef"> <option value="Annually">Annually</option> <option value="Semi-Annual">Semi-Annual</option><option value="Quarterly">Quarterly</option><option value="Monthly">Monthly</option>

            </select> </div> </div> </div></div>
            <div class="form-row form-row">
            <div class="form-group col-md-3"> <div id="div_id_recalib_freq" class="form-group"> <label for="id_recalib_freq_processmodeldef" class="">
            Model recalibration frequency
                        </label> <div class=""> <select name="model_recalibration_frequency" class="form-control select2 form-control" id="id_recalib_freq_processmodeldef"> <option value="Annually">Annually</option> <option value="Semi-Annual">Semi-Annual</option><option value="Quarterly">Quarterly</option><option value="Monthly">Monthly</option>
            </select> </div> </div> </div>
            </div>
            </div>
            </div>
            </div>
                        </div>
                        <div class="row">
                        <input type="button" value="Save and send for approval" class="btn btn-primary buttonstyling" id="saveapprovebuttontemplate"> &nbsp &nbsp &nbsp
                        <input type="button" value="Save" class="btn btn-primary buttonstyling " id="savebuttontemplate"> &nbsp &nbsp &nbsp
                        <input type="button" value="Approve" class="btn btn-primary buttonstyling " id="approvebuttontemplate"> &nbsp &nbsp &nbsp
                        </div>
                    </div>`
                    var users_template ="""
            + f""" `{t.get('users_template')}` """
            + """

            users_template = JSON.parse(users_template.replace(/&quot;/g,'"'))
                var htmlusers = `<select class="selectuserstemplate select2 form-control" name="table"><option style="display:none"></option>`
                for(i in users_template) {
                    htmlusers = htmlusers + `<option name="${users_template[i]}" value="${users_template[i]}">${users_template[i]}</option>`
                }

                var htmlusers = htmlusers + `</select>`
                }

            if(listViewEditTemplate[listConstraintID] == "Flow Definition"){
                var mastertableflow = """
            + f""" "{t.get('mastertableflow')}"
                var master_data_flow = {t.get('master_data_flow')} """
            + f"""
                var master_data_flow = master_data_flow

                var htmlflow= `
                <div class="form-group col-3">
                                    <label class="acies_label col-md-8">{t.get('flowcolumn')}</label><br>
                                    <select class="selectflow select2 form-control" name="table"><option style="display:none"></option>`

                var listflowcolumn = "div_id_" + "{t.get('flowcolumn')}"

                var listflowcolumnname =  "{t.get('flowcolumn')}"

                var masterColumnflow =  "{t.get('masterColumnflow')}" ; """
            + """

                for(i in master_data_flow) {
                    htmlflow = htmlflow + `<option value="${master_data_flow[i]}">${master_data_flow[i]}</option>`
                }


                var htmlflow = htmlflow + `</select>
                                </div>
                    <table id ="flow_table">
                    <thead>
                        <tr>
                        <th>
                            <center>Workflow Steps</center>
                        </th>
                        <th>
                            <center>Actions</center>
                        </th>
                        </tr>
                        </thead>
                        <tbody id="flow_table_body">
                        </tbody>
                    </table>
                    <br><br>
                `
                    } </script>"""
        )

        if t.get("verbose_list"):

            html = (
                html
                + """<script> var html4= ` """
                + f"""

            <div id="listtable{element_id}" class="row" style="align-items:flex-start;j">

                            <div data-name="table_name" class="form-group col-3">
                                    <label class="acies_label col-md-8">{t.get('verbose_list')['table_name']}</label><br>
                                <select  class="selectTable select2 form-control" name="table">"""
            )
            if t.get("selected_tables"):
                for i in t["selected_tables"]:
                    html = html + f"""    <option value="{i}">{i}</option>"""
            html = (
                html
                + f"""       </select>
                            </div>

                                <div data-name="constraint_parameter" class="form-group col-3">
                                <label class="acies_label col-md-8">{t.get('verbose_list')['constraint_parameter']}</label>
                                <span class="columnReminder" style="color:red;">* Select Constraint Parameter </span><br>

                                <select class=" selectColumn select2 form-control" name="template">

                                </select>
                            </div>

                                <div data-name="unique_constraint_column" class="form-group col-3">"""
            )
            if t.get("verbose_list"):
                html = (
                    html
                    + f"""  <label class="acies_label col-md-10">{t.get('verbose_list').get('unique_constraint_column')}</label><br>  """
                    + """
                <select  class=" selectMapping select2 form-control" name="template">"""
                )
            else:
                html = html + f"""  <label class="acies_label col-md-10"></label><br>"""

            html = (
                html
                + f"""                        </select>
                            </div>

                            <div data-name="constraint_parameter_value"  class="form-group col-3" >
                                <label class="acies_label col-md-10"> {t.get('verbose_list').get('constraint_parameter_value')} <span class="valueReminder" style="color:red;">* </span></label>

                                <br>
                                <select class="selectValue select2 form-control"  name="template" ">
                                </select>
                            </div>

                            <div  data-name="constraint_name" class="form-group col-3">
                        <label class="acies_label col-md-8"> {t.get('verbose_list').get('constraint_name')} </label>
                <br>
                                <input  class=" selectConstraintName form-control textInput" >

                            </div>

                            <div data-name="constraint_type" class="form-group col-3">
                                <label class="acies_label col-md-8"> {t.get('verbose_list').get('constraint_type')}</label><br>
                                <select  class="selectConstraintType select2 form-control"  name="template">"""
            )
            if t.get("constraint_holder"):
                for k, v in t["constraint_holder"].items():
                    html = html + f"""     <option value="{k}" data-type="{v}">{k}</option> """
            html = (
                html
                + f"""      </select>
                            </div>

                            <div data-name="condition_datatype" class="form-group col-3">
                                <label class="acies_label col-md-8">{t.get('verbose_list').get('condition_datatype')} </label><br>
                                <select class="condition_type select2 form-control" name="template">
                                <option selected disabled>----------------------</option>
                                        <option value="Character">Character Type</option>
                                        <option value="Numeric">Numeric Type</option>
                                </select>
                                </div>

                            <div data-name="condition" class="form-group col-3">
                                <label class="acies_label col-md-8">{t.get('verbose_list').get('condition')}</label><br>
                                <select class="condition_name select2 form-control" name="template">
                                <option selected disabled>----------------------</option>
                                </select>
                            </div>

                            <div  data-name="threshold"class="form-group col-3 "">
                                <label class="acies_label col-md-8">{t.get('verbose_list').get('threshold')}</label><br>
                                <input style="max-height: 40px;overflow: hidden;" class=" select_input_value form-control p-2 textInput" placeholder="Enter Threshold">
                                </div>


                                <div data-name="applicability_status" class="form-group col-3">
                                <label class="acies_label col-md-8"> {t.get('verbose_list').get('applicability_status')}</label><br>
                                <select class="status_type select2 form-control" name="template">
                                <option selected disabled>----------------------</option>
                                        <option value="Applicable">Applicable</option>
                                        <option value="Not Applicable">Not Applicable</option>

                                </select>
                                </div>

                              <div data-name="use_case" class="form-group col-3">
                                <label class="acies_label col-md-8"> {t.get('verbose_list').get('use_case')}</label><br>

                                  <input  class="constraint_usecase form-control textInput" >
                                </div>



                        </div>
                        <div class="modal-footer">
            <div   style="margin-top:20px;margin-left:5px"class="form-group">  <input type="submit" name="submit" value="Save" class="btn btn-primary buttonstyling " id="savebuttonListinfo"> <input type="button" name="back" value="&#8592;" class="btn backbtn" id="button-id-back" onclick="goBack()" style='margin-bottom:10px;'>
            </div>
            </div>
                `




            </script>"""
            )

        html = (
            html
            + f"""    <!--  -->
            <script>
            var element_id = "{element_id}" """
            + """
            $('#printChartConfigButton'+"""
            + f"""'{element_id}'"""
            + """).on('click', async function() {
                var element_id = """
            + f""" '{element_id}'"""
            + """
                $('#printChartConfigButton'+element_id).html(`<i class="fa fa-circle-notch fa-spin"></i> Loading`)
                function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
                }
                $('#'+element_id+'_tab_content').find('.card').eq(0).css('display','none');

                $('#areaToPlotDifferentGraphs'+element_id).find('.charts').find('.card-header').find('.row').find('i').css('display','none')
                $(document).scrollTop(0);
                await sleep(2000);
                $(document).scrollTop(0);
                await html2canvas($('#plotSection'+element_id).find('#areaToPlotDifferentGraphs'+element_id)[0], { useCors: true, allowTaint: true }).then(function(canvas) {

                    var imgData = canvas.toDataURL('image/png',1.0);
                    var pdfWidth = $('#plotSection'+element_id).find('#areaToPlotDifferentGraphs'+element_id)[0].offsetWidth
                    var pdfHeight =$('#plotSection'+element_id).find('#areaToPlotDifferentGraphs'+element_id)[0].offsetHeight
                    var doc = new jsPDF("l","mm",[pdfWidth,pdfHeight]);
                    doc.addImage(canvas.toDataURL('image/png'), 'PNG',0,0,doc.internal.pageSize.width,(doc.internal.pageSize.height));
                    doc.save('list-main.pdf');
                    $('#areaToPlotDifferentGraphs'+element_id).find('.charts').find('.card-header').find('.row').find('i').css('display','block')
                    $('#'+element_id+'_tab_content').find('.card').eq(0).css('display','block');
                    //$(`#${tabDict["pdfButtonID"]}`).html(`<i class="fa fa-file-pdf-o"></i>&nbsp;PDF`)
                });
                $('#printChartConfigButton'+element_id).html(`<i class="fa fa-file-pdf-o"></i>&nbsp;PDF`)
            })"""
            + f"""
            var masterTableName = "{t.get('masterTableName')}"
            </script>
        """
        )
        if t.get("templateMultiSelect"):
            if "Multi Select" in t.get("templateMultiSelect"):
                html = (
                    html
                    + """

        <script>
        var element_id = """
                    + f""" '{element_id}' """
                    + """
        var coloredElements = {};
        var coloredElementsCheck = {};
        var valuedElements = {};
        var ticks = {};
        """
                    + f""" names['{element_id}'] = {t['masterColName']};
        var listViewMultiSelectTableName = ["{t['model_name']}"];
        """
                    + """
        var colNames = {};
        var len = {};
        var tempName = {};
        var tableTextIndex = {}
        var columnName = []
        var once = {}
        var index = {}
        $(document).ready(function() {
            var element_id = """
                    + f""" '{element_id}' """
                    + """
            """
                )
                ind = 0
                for m in t["masterColName"]:
                    html = (
                        html
                        + f"""
              for(i in element_table_IDList) {{
                ticks[element_table_IDList[i]+'_{m}'] = []
                coloredElementsCheck[element_table_IDList[i]+'_{m}'] = [];
                valuedElements[element_table_IDList[i]+'_{m}'] = [];
                once[element_table_IDList[i]+'_{m}'] = 0;
                tableTextIndex[element_table_IDList[i]+'_{m}'] = [];
                index[element_table_IDList[i]+'_{m}']
              }}
                len[element_id+'_{m}'] = """
                        + f""" {t['len'][ind]} """
                    )
                    ind = ind + 1
                html = (
                    html
                    + """
        })
        for (let multiSelectCol = 0; multiSelectCol < names[element_id].length; multiSelectCol++) {
          const name_ajax = names[element_id][multiSelectCol];
          let view_name = ""
          temp_type = $(`#${element_id}_tab_content`).attr("data-template-type")
          if(temp_type == 'Multi Dropdown View'){
            view_name = $(`#tableTab${element_id}`).find("select").val()
          }
          $.ajax({
            url: `/users/${urlPath}/dynamicVal/`,
            data: {
              'operation': 'fetchMultiSelect',
              'element_id': element_id,
              'column_name':name_ajax,
              'view_name':view_name,
              'tablename': JSON.stringify(listViewMultiSelectTableName)
              },
              type: "POST",
              dataType:"json",
              success:function(data){
                var htmlTable = `
                    <table id='masterListTablei${data["element_id"]}_${name_ajax}' class='row-border solid black'>
                      <thead style="color:white;background-color: black;">
                      </thead>
                      <tbody>
                      </tbody>
                    </table>
                `
                  $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).remove()
                  $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}_wrapper`).remove();
                  $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('.card-body').append(htmlTable);
                  data['addVerb'] = data['columnNameMultiVerb'];
                  var html = '<tr>'
                  html = html +`<th style="text-align:center; color:black">Checkbox</th>`
                  for (let i = 0; i < data['addVerb'].length; i++) {
                    if (data['addVerb'][i] == 'id') {
                      html = html + `<th style="display:none;">${data['add'][i]}</th>`
                    } else {
                      html = html +`<th style="text-align:center; color:black;">${data['addVerb'][i]}</th>`
                    }

                  }
                  html = html + '</tr>'
                  $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('thead').empty(); $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('thead').append(html)
                  html = ''
                  for (let i = 0; i < data['data'].length; i++) {
                    html =  html + '<tr>'
                    for (let j = -1; j < data['data'][i].length; j++) {
                      if(j == -1) {
                        html = html + `<td style="text-align:center"><div class="custom-control custom-checkbox" style="margin-left:30%">
                          <input type="checkbox" class="ioL custom-control-input" id="${data['data'][i][0]}list${data["element_id"]}">
                          <label for="${data['data'][i][0]}list${data["element_id"]}" class="custom-control-label">
                            </label>
                            </div></td>`
                        } else if (j == data['data'][i].length -1 ) {
                          html = html + `<td style="display:none;">${data['data'][i][j]}</td>`
                        } else {
                          html = html + `<td style="text-align:center">${data['data'][i][j]}</td>`
                        }

                      }
                      html = html + '</tr>'
                    }
                    $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('tbody').empty(); $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('tbody').append(html);
                    let le = $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(0).find('th').eq(-2).text();
                    if (le == 'Default Value') {
                        let rowLen_ = $('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').length;
                        for(let i = 0; i < rowLen_; i++) {
                          $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(i).find('td').eq(-2).empty();
                          $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(i).find('td').eq(-2).html(`<input class='ioLI' type='text' value=''>`);
                        };
                      }
              },
              error: ()=>{

              }
            });
        }
        for (let i = 1; i <= len[element_id]; i++) {
            let t = $('#masterListTablei' + element_id).find('tr').eq(0).find('th').eq(i).text();
            columnName.push(t);
            }
            function updateParent(element_id,name){
            var JSAttributes = """
                    + f""" '{t['JSAttributes']}' """
                    + """
            var element_iddd = """
                    + f""" '{element_id}' """
                    + """
            """
                    + """
            $('#list_view_edit_modal_' + element_id).find('#div_id_' + `${name}`).attr('data-JSAttribute', JSAttributes);
                let ids = [];
                let bool;
                let opop;"""
                    + """
            try{
                if ($('#id_' + `${name}`+ '_' + element_id).val()) {
                  opop = """
                    + """JSON.parse($('#id_' + `${name}`+ '_' + element_id).val());
                } else {
                  opop = {};
                }
                let rr
                for (let i = 0; i < $(`#formModalListL${element_id}_${name}`).find('.ioL').length; i++) """
                    + """{
                rr = $('#masterListTablei'+element_id + '_' + name).find('tbody').find('tr').eq(i).find('td').eq(-1).text();
                rr = rr.trim()
                if (opop[rr] != undefined) {
                    ids = [...ids, rr];
                }
                }
                bool = false;
                for (i in ids) {
                if(Number.isInteger((ids[i]))) {

                }
                }
                let r, coun = 0;
                for (i in ids) {
                if(Number.isInteger(parseInt(ids[i]))) {
                    for(let j = 0; j <= $(`#masterListTablei${element_id}_${name}`).find('.ioL').length; j++) {
                    r = $(`#masterListTablei${element_id}_${name}`).find('tr').eq(j).find('td').eq(-1).text();
                    r = r.trim();
                    if (r == ids[i]) {
                        coun = coun + 1;
                    }
                }
                }
                }
                if (coun == ids.length) {
                bool = true;
                }} catch(err) {
                bool = false
                }
                let le = $(`#masterListTablei${element_id}_${name}`).find('tr').eq(0).find('th').eq(-2).text();
                if (le == 'Default Value') {

                for(let i = 0; i <= $(`#masterListTablei${element_id}_${name}`).find('.ioL').length; i++) {

                    $(`#masterListTablei${element_id}_${name}`).find('tr').eq(i).find('td').eq(-2).html(`<input class="ioLI" type="text" value="" >`);
                }
                }
                function updateVal(name, JSAttributes) {
                var element_idd = """
                    + f"""'{element_id}'"""
                    + """
                if (bool) {
                let valList = []
                $"""
                    + f"""('#id_' +name + '_' + element_id).css('display','none');
                let tableTextL,countCheck = 0"""
                    + """

                let view_name = ""
                temp_type = $(`#${element_id}_tab_content`).attr("data-template-type")
                if(temp_type == 'Multi Dropdown View'){
                  view_name = $(`#tableTab${element_id}`).find("select").val()
                }
                let tablename = $('#list_view_edit_modal_' + element_id).find(`input[name='tablename']`).val()
                $.ajax({
                  url: `/users/${urlPath}/dynamicVal/`,
                  data: {
                    'operation': 'fetchMultiSelect',
                    'element_id': element_id,
                    'column_name': `${name}`,
                    'view_name':view_name,
                    """
                    + f"""
                    'tablename': JSON.stringify(tablename)
                    """
                    + """
                    },
                    type: "POST",
                    dataType:"json",
                    success:function(data){
                      lofi = ''
                      lofi1 = ''
                      for (let i in data['data']){
                        const slicedData = data['data'][i].slice(1, -1);
                        lofi += `<option value="${data['data'][i].slice(-1)}">${data['data'][i][0]} (${slicedData.join(' ')})</option>`
                        lofi1 += `<option value="${data['data'][i].slice(-1)}">${data['data'][i][0]}</option>`
                      }

                      """
                    + """$('#list_view_edit_modal_' + element_id).find('#'+`${element_id}_${name}`+'_unique').empty()"""
                    + """
                      $('#list_view_edit_modal_' + element_id).find('#'+`${element_id}_${name}`+'_unique').append($('#list_view_edit_modal_' + element_id).find('#'+`${element_id}_${name}`+'_unique').attr('additionalinfobtn') === 'True' ? lofi : lofi1);
                    """
                    + """
                    for(let i = 0; i <= $('#masterListTablei' + element_id + '_' + name).find('.ioL').length; i++) {
                    tableTextL =  $('#masterListTablei' + element_id + '_' + name).find('tr').eq(i).find('td').eq(1).text();
                    iid = $('#masterListTablei' + element_id + '_' + name).find('tr').eq(i).find('td').eq(-1).text();
                    iid = iid.trim();
                    tableTextL = tableTextL.trim();
                    for (j in ids){
                    if (ids[j] == iid) {
                        $"""
                    + """('#masterListTablei' + `${element_id}_${name} > tbody`).find('tr').eq(i-1).find('td').eq(0).find('div > input.custom-control-input').prop('checked', true);
                        $('#masterListTablei' + `${element_id}_${name} > tbody`).find('tr').eq(i-1).find('td').eq(0).find('div > input.custom-control-input').attr('checked',"checked");
                        if (JSAttributes === 'restrictMSEdit') {
                          $('#masterListTablei' + `${element_id}_${name} > tbody`).find('tr').eq(i - 1).find('td').eq(0).find('div > input.custom-control-input').prop('disabled', true);
                          $('#masterListTablei' + `${element_id}_${name} > tbody`).find('tr').eq(i - 1).find('td').eq(0).find('div > input.custom-control-input').attr('disabled', 'disabled');
                          $('#masterListTablei' + `${element_id}_${name} > tbody`).find('tr').eq(i - 1).css('opacity', 0.5);
                        }

                        valList.push(iid);

                        if ($(`#masterListTablei${element_id}_${name}`).find('tr').eq(0).find('th').eq(-2).text() == 'Default Value')"""
                    + """ {
                        $(`#masterListTablei${element_id}_${name}`).find('.ioLI').eq(i-1).val(opop[ids[j]]).trigger('change');
                        }
                        countCheck = countCheck + 1;
                    }
                    }
                }
                $(`#list_view_edit_modal_${element_id}`).find('#'+element_id+'_'+name+'_unique').val(valList).trigger('change');
                $('#list_view_edit_modal_' + element_id).find('#div_id_' + `${name}`).parent().find(`button[data-col='${name}']`).removeAttr('onclick')

                      """
                    + """
                      """
                    + f"""
                      """
                    + """
                      """
                    + """
                      """
                    + """
                      $(`#${element_id}_`+`${name}_`+'unique').on('select2:unselect', function (e) """
                    + """
                      {
                        """
                    + """var coloredElementTickIndex = coloredElementsCheck[`${element_id}_`+`${name}`].indexOf(e.params.data.text)
                        coloredElementsCheck[`${element_id}_`+`${name}`].splice(coloredElementTickIndex,1)
                        var tickIndex =ticks[`${element_id}_`+`${name}`].indexOf(e.params.data.element.index)
                        ticks[`${element_id}_`+`${name}`].splice(tickIndex,1)
                        """
                    + """
                        """
                    + """var uniqueValues = $(`#${element_id}_`+`${name}_`+'unique').val() """
                    + """
                        """
                    + """valuedElements[`${element_id}_`+`${name}`] = [] """
                    + """
                        """
                    + """coloredElements[`${element_id}_`+`${name}`] =  """
                    + """ {}
                        var values = {}
                        for (let i in uniqueValues){
                          """
                    + """valuedElements[`${element_id}_`+`${name}`].push('') """
                    + """
                          values[uniqueValues[i]] = '';
                          """
                    + """coloredElements[`${element_id}_`+`${name}`] = values """
                    + """
                        }
                        """
                    + """$('#id_' + ''+`${name}`+`_${element_id}`).val(JSON.stringify(coloredElements[`${element_id}_`+`${name}`])).trigger('change');"""
                    + """
                         });
                      """
                    + """ $(`#${element_id}_`+`${name}_`+'unique').on('select2:select', function (e) """
                    + """
                      { """
                    + """ coloredElementsCheck[`${element_id}_`+`${name}`].push(e.params.data.text)
                        ticks[`${element_id}_`+`${name}`].push(e.params.data.element.index) """
                    + """
                        """
                    + """var uniqueValues = $(`#${element_id}_`+`${name}_`+'unique').val() """
                    + """
                        """
                    + """valuedElements[`${element_id}_`+`${name}`] = [] """
                    + """
                        """
                    + """coloredElements[`${element_id}_`+`${name}`] =  """
                    + """ {}
                        var values = {}
                        for (let i in uniqueValues){
                          """
                    + """valuedElements[`${element_id}_`+`${name}`].push('') """
                    + """
                          values[uniqueValues[i]] = '';
                          """
                    + """coloredElements[`${element_id}_`+`${name}`] = values """
                    + """
                        }
                        """
                    + """$('#id_' + ''+`${name}`+`_${element_id}`).val(JSON.stringify(coloredElements[`${element_id}_`+`${name}`])).trigger('change');"""
                    + """
                        });
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    }
                    });

                }
            }
            updateVal(name, JSAttributes);
            var t;
            for (let i = 0; i <= len[element_id+`_${name}`]; i++) {
                t = $('#masterListTablei' + element_id + '_' + name).find('tr').eq(0).find('th').eq(i).text();
                t = t.trim()
                if(t == 'id') {
                colNames[name] = i;
                }
            }

            let l = $('#masterListTablei' + element_id + '_' + name).find('tr').length
            var """
                    + """ m_col = name """
                    + """
            $('#masterListTablei' + element_id + '_' + name).find('tr').eq(0).find('th').eq(-1).css('opacity', 0);
                for (let j = 0; j < l; j++) {

                $('#masterListTablei' + element_id + '_' + name).find('tr').eq(j).find('td').eq(-1).css('opacity', 0);

                }
                $('#list_view_edit_modal_' + element_id).find('#div_id_' + `${name}`).parent().find(`button[data-col='${name}']`).on('click', function() {
                var element_idd = $(this).closest(".modal-body").attr("id").replace("modalBody","")
                var closest_div = $(this).parent().parent();
                var name_ajax = closest_div.attr("id").replace("div_id_","")
                var JSAttribute = closest_div.attr("data-JSAttribute")
                let view_name = ""
                temp_type = $(`#${element_id}_tab_content`).attr("data-template-type")
                if(temp_type == 'Multi Dropdown View'){
                  view_name = $(`#tableTab${element_id}`).find("select").val()
                }
                let tablename = $('#list_view_edit_modal_' + element_id).find(`input[name='tablename']`).val()
                $.ajax({
                url: `/users/${urlPath}/dynamicVal/`,
                data: {
                  'operation': 'fetchMultiSelect',
                  'element_id': element_idd,
                  'column_name':name_ajax,
                  'view_name':view_name,
                  'tablename': JSON.stringify(tablename)
                  },
                  type: "POST",
                  dataType:"json",
                  success:function(data){
                    data["element_id"] = element_idd;
                    var htmlTable = `
                        <table id='masterListTablei${data["element_id"]}_${name_ajax}' class='row-border solid black'>
                          <thead style="color:white;background-color: black;">
                          </thead>
                          <tbody>
                          </tbody>
                        </table>
                    `
                      $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).remove()
                      $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}_wrapper`).remove();
                      $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('.card-body').append(htmlTable);
                      data['addVerb'] = data['columnNameMultiVerb'];
                      var html = '<tr>'
                      html = html +`<th style="text-align:center;">Checkbox</th>`
                      for (let i = 0; i < data['addVerb'].length; i++) {
                        if (data['addVerb'][i] == 'id') {
                          html = html + `<th style="display:none;">${data['add'][i]}</th>`
                        } else {
                          html = html +`<th style="text-align:center;">${data['addVerb'][i]}</th>`
                        }

                      }
                      html = html + '</tr>'
                      $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('thead').empty(); $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('thead').append(html)
                      html = ''
                      for (let i = 0; i < data['data'].length; i++) {
                        html =  html + '<tr>'
                        for (let j = -1; j < data['data'][i].length; j++) {
                          if(j == -1) {
                            html = html + `<td style="text-align:center"><div class="custom-control custom-checkbox" style="margin-left:30%">
                              <input type="checkbox" class="ioL custom-control-input" id="${data['data'][i][0]}list${data["element_id"]}">
                              <label for="${data['data'][i][0]}list${data["element_id"]}" class="custom-control-label">
                                </label>
                                </div></td>`
                            } else if (j == data['data'][i].length -1 ) {
                              html = html + `<td style="display:none;">${data['data'][i][j]}</td>`
                            } else {
                              html = html + `<td style="text-align:center">${data['data'][i][j]}</td>`
                            }

                          }
                          html = html + '</tr>'
                        }
                        $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('tbody').empty(); $('#formModalListL'+`${data["element_id"]}_${name_ajax}`).find('#masterListTablei' + `${data["element_id"]}_${name_ajax}`).find('tbody').append(html);
                        let le = $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(0).find('th').eq(-2).text();
                        if (le == 'Default Value') {
                            let rowLen_ = $('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').length;
                            for(let i = 0; i < rowLen_; i++) {
                              $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(i).find('td').eq(-2).empty();
                              $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('#masterListTablei' + data["element_id"]+"_"+name_ajax).find('tr').eq(i).find('td').eq(-2).html(`<input class='ioLI' type='text' value=''>`);
                            };
                          }
                        $('#id_' + `${name_ajax}`+ '_' + data["element_id"]).css('display','none');

                        $('#formModalListL'+data["element_id"]+"_"+name_ajax).css('display', 'flex');
                        fun(data["element_id"]+"_"+name_ajax);
                        $('#masterListTablei'+data["element_id"]+"_"+name_ajax+'_length').find('select').val('-1').trigger('change');
                        updateVal(name_ajax, JSAttribute)
                        for (let j = 0; j < ticks[data["element_id"]+`_${name_ajax}`].length; j++) {
                            $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('.ioL').eq(ticks[data["element_id"]+`_${name_ajax}`][j]).prop('checked', true);
                            $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('.ioLI').eq(ticks[data["element_id"]+`_${name_ajax}`][j]).val(valuedElements[data["element_id"]+`_${name_ajax}`][j]).trigger('change');
                            if (JSAttribute === 'restrictMSEdit') {
                              $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('.ioL').eq(ticks[data["element_id"]+`_${name_ajax}`][j]).prop('disabled', true);
                              $('#formModalListL'+data["element_id"]+"_"+name_ajax).find('.ioL').eq(ticks[data["element_id"]+`_${name_ajax}`][j]).closest('tr').css('opacity', 0.5);
                            }
                        }
                        $('#masterListTablei'+data["element_id"]+"_"+name_ajax+'_length').find('select').val('50').trigger('change');
                        $(document).off('focusin.modal')
                        $('#list_view_edit_modal_' + data["element_id"]).css('display', 'none');
                      },
                      error: function () {
                        $('#tabsMultiFunc').find('.modal-footer').html(`<button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>`)
                        Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                      }
                  });
            })

            var t1 = ticks[element_id+`_${name}`].length;
            ticks[element_id+`_${name}`].splice(0,t1);
            valuedElements[element_id+`_${name}`].splice(0,t1);
            $('#formModalListL'+`${element_id}_${name}`).find(`.savebuttonL[data-col=${name}]`).on('click', function() {
              var element_id = $(this).closest(".modal").attr('id').replace("formModalListL","");
              element_id = element_id.split("_")[0]
              var m_col = """
                    + f"""{t['masterColName']};"""
                    + """
              var m_col = [$(this).attr("data-col")]
              for(let k = 0; k < 1; k++){
              $('#masterListTablei'+element_id+'_'+m_col[k]+'_length').find('select').val('-1').trigger('change');
              var t1 = ticks[element_id+`_${m_col[k]}`].length;
              var t3 = valuedElements[element_id+`_${m_col[k]}`].length;
              ticks[element_id+`_${m_col[k]}`].splice(0,t1);
              valuedElements[element_id+`_${m_col[k]}`].splice(0,t3);
              for(let i = 0; i < $('#formModalListL'+`${element_id}`+`_${m_col[k]}`).find('.ioL').length; i++) {
                  if($('#formModalListL'+`${element_id}`+`_${m_col[k]}`).find('.ioL').eq(i).prop('checked') == true) {
                  ticks[element_id+`_${m_col[k]}`] = [...ticks[element_id+`_${m_col}`], i];
                  valuedElements[element_id+`_${m_col[k]}`] = [...valuedElements[element_id+`_${m_col[k]}`], $('#formModalListL'+element_id+`_${m_col[k]}`).find('.ioLI').eq(i).val()]
                  }
              }
              let randVal = []
              var tableText = {};
              for(let i = 0; i < $('#formModalListL'+`${element_id}`+`_${m_col[k]}`).find('.ioL:checked').length; i++) {

                  tableText[($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(ticks[element_id+`_${m_col[k]}`][i] + 1).find('td').eq(colNames[m_col[k]]).text())] = "";
                  var tt = $('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(ticks[element_id+`_${m_col[k]}`][i] + 1).find('td').eq(1).text();
                  var tt_ind = parseInt($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(ticks[element_id+`_${m_col[k]}`][i] + 1).find('td').eq(colNames[m_col[k]]).text())
                  if ($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(0).find('th').eq(-2).text() == "Default Value") {
                  tableText[($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(ticks[element_id+`_${m_col[k]}`][i] + 1).find('td').eq(colNames[m_col[k]]).text())] = ($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(ticks[element_id+`_${m_col[k]}`][i] + 1).find('td').eq(-2).find('input').val());
                  }
                  randVal.push(tt_ind);
                  }
              coloredElements[element_id+`_${m_col[k]}`] = ((tableText));
              $('#id_' + `${m_col[k]}`+'_'+element_id).val(JSON.stringify(coloredElements[element_id+`_${m_col[k]}`])).trigger('change');
              $('#list_view_edit_modal_' + element_id).find('#'+element_id+'_'+`${m_col[k]}`+'_unique').val(randVal).trigger('change');
              $('#id_' + `${m_col[k]}`+ '_' + element_id).css('display','none');
              $('#formModalListL'+element_id+`_${m_col[k]}`).css('display', 'none');
              $('#list_view_edit_modal_'+element_id).css('display', 'block');
              if ($('#masterListTablei' + element_id+`_${m_col[k]}`).find('tr').eq(0).find('th').eq(-2).text() == 'Default Value') {
              for (let i = 0; i < $('#formModalListL'+`${element_id}`+`_${m_col[k]}`).find('.ioL').length; i++) {
                  if($('#formModalListL'+`${element_id}`+`_${m_col[k]}`).find('.ioL').eq(i).prop('checked') == false) {
                  $('#formModalListL'+element_id+`_${m_col[k]}`).find('.ioLI').eq(i).val('').trigger('change');
                  }
              }
            }}})
            }

                """
                )
                for m in t["masterColName"]:
                    html = (
                        html
                        + """
        $('#formModalListL'+ """
                        + f""" '{element_id}_{m}' """
                        + """).find('.closeL[data-col"""
                        + f"""={m}"""
                        + """]').on('click', function() {
        var element_id = $(this).closest(".modal").attr('id').replace("formModalListL","");
        element_id = element_id.split("_")[0]
        var m_col = """
                        + f"""{t['masterColName']}"""
                        + """
        try {
            let opop = JSON.parse($('#id_' + """
                        + f"""`{m}`"""
                        + """+ '_' + element_id).val());
            $('#list_view_edit_modal_' + element_id).find('#'+element_id+'_'+"""
                        + f"""'{m}'"""
                        + """+'_unique').css('display', 'block');
            $('#id_' + """
                        + f"""`{m}`"""
                        + """+ '_' + element_id).css('display','none');
        } catch(err) {
            $('#id_' + """
                        + f"""`{m}`"""
                        + """+ '_' + element_id).css('display','block');
        }
        for (let i = 0; i < $('#formModalListL'+`${element_id}`+"""
                        + f"""'_{m}'"""
                        + """).find('.ioL').length; i++) {
            $('#formModalListL'+`${element_id}`+"""
                        + f"""'_{m}'"""
                        + """).find('.ioL').eq(i).prop('checked', false);
        }

        $('#formModalListL'+element_id+"""
                        + f"""'_{m}'"""
                        + """).css('display', 'none');
        $('#list_view_edit_modal_'+element_id).css('display', 'block');
        $('#masterListTablei'+element_id+"""
                        + f"""'_{m}'"""
                        + """+'_length').find('select').val('-1').trigger('change');
        })"""
                    )
                html = (
                    html
                    + """
        $('#closeModal' + element_id).on('click', function() {
        var m_col = """
                    + f"""{t['masterColName']};"""
                    + """
        for(let k = 0; k < m_col.length; k++){
        try {
            let opop = JSON.parse($('#id_' + `${m_col[k]}`+ '_' + element_id).val());
            $('#id_' + `${m_col[k]}`+ '_' + element_id).css('display','none');
        } catch(err) {
            $('#id_' + `${m_col[k]}`+ '_' + element_id).css('display','block');
        }

        for (let i = 0; i < $('#formModalListL'+`${element_id}`).find('.ioL').length; i++) {
            $('#formModalListL'+`${element_id}`).find('.ioL').eq(i).prop('checked', false);
            $('#formModalListL'+element_id).find('.ioLI').eq(i).val('').trigger('change');
        }
        }
        })

        function fun(elementID) {
        $(`#masterListTablei${elementID}`).DataTable( {
        "autoWidth": true,
        // "serverSide":true,
        orderCellsTop: true,
        //fixedHeader: true,
        responsive: true,
        colReorder: {
            fixedColumnsLeft: 1,
        },
        // stateSave: true,
        "deferRender": true,
        "paging": true,
        "lengthMenu": [[1, 5, 50, -1], [1, 5, 50, "All"]],
        stripeClasses: false,
        "pageLength": 50,
        dom: 'lfBrtip',
        buttons: [
            {
                extend: 'collection',
                text: 'Export',
                buttons: [
                {
                    extend: 'copy', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'excel', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'csv', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                {
                    extend: 'pdf', title: '', exportOptions: {
                    columns: ':visible:not(.noVis)'
                    }
                },
                ],
            },
            {
                extend: 'colvis',
                className: "scroller",
            }
            ],
            columnDefs: [
            {
                targets: "_all",
                className: 'dt-center allColumnClass all'
            },
            {
                targets: 0,
                width: "20%",
                className: 'noVis'
            }
        ],

        });
        }
        </script>
        """
                )
        html = (
            html
            + """
        <script>
        function alertAgg(e){
            var selectedElement=$('.alertAgg');
            var tab1Header=$('#tab1Header1')[0].innerText;
            var tab2Header=$('#tab2Header2')[0].innerText;
            var tab3Header=$('#tab3Header3')[0].innerText;
            $( `<div class="dt-button-background displayclass" style=""></div>
            <div class="dt-button-collection displaynone" style="top: 5%; left:90%;"><div role="menu">
            <div class="row"><button type="button" class="btn btn-default alertDashboardmove" data-tab='Tab1' data-tab_ct='Tab1'">${tab1Header}</button></div>
            <div class="row"><button type="button" class="btn btn-default alertDashboardmove" data-tab='Tab2' data-tab_ct='Tab2'">${tab2Header}</button></div>
            <div class="row"><button type="button" class="btn btn-default alertDashboardmove" data-tab='Tab3' data-tab_ct='Tab3'">${tab3Header}</button></div>
            </div></div>` ).insertAfter(selectedElement);

            $('.alertDashboardmove').click(function () {
            if ($(this).attr('data-tab_ct') == 'Tab1') {"""
            + f"""$(`#setalertcard{element_id}`).appendTo("#alertChartsTab1");"""
            + """$('.displayclass').css("display","none")
            $('.displaynone').css("display","none")
            $('.alertAgg').css("display","none")
            document.getElementsByClassName("displayclass").style.position = "inherit";
            var div = document.getElementsByClassName("alertAgg");
            div.parentNode.removeChild(div);
            }
            if ($(this).attr('data-tab_ct') == 'Tab2') {"""
            + f"""$(`#setalertcard{element_id}`).appendTo("#alertChartsTab2")
            $('.displayclass').css("display","none")
            $('.displaynone').css("display","none")
            $('.alertAgg').css("display","none")
            document.getElementsByClassName("displayclass").style.position = "inherit";
            var div = document.getElementsByClassName("alertAgg");
            div.parentNode.removeChild(div);"""
            + """}
            if ($(this).attr('data-tab_ct') == 'Tab3') {"""
            + f"""$(`#setalertcard{element_id}`).appendTo("#alertChartsTab3")
            $('.displayclass').css("display","none")
            $('.displaynone').css("display","none")
            $('.alertAgg').css("display","none")
            document.getElementsByClassName("displayclass").style.position = "inherit";
            var div = document.getElementsByClassName("alertAgg");
            div.parentNode.removeChild(div);"""
            + """}
            })
            }

            function conditionset(){

            var condition=document.getElementById("condition").value;
            var colorset = document.getElementById("colorset").value;
            var text = document.getElementById("text").value;
            }
            </script>
            <script>
            table_data_dict={};"""
            + f""" table_data_dict["original_verbose_column_names"]= {t['list_view_verbose_original_column_names']}
            table_data_dict["model_name"]= "{t['model_name']}"; """
        )
        if t.get("alert"):
            html = html + f"""table_data_dict["alert_base_table_raw_data"] = {t['alert']}"""

        html = html + f"""    table_data_dict["dataContainingColumnNames"] = {t['list_view_column_names']};"""
        html = (
            html
            + f"""    table_data_dict["renamed_columns_list"] = {t['renamed_columns_list']};
            table_data_dict["dataLoadingFirstTime"] = '[]'
            //Filter variables
            table_data_dict["table_name"] = "{t['table_name'] }";
            table_data_dict["label_columns"] = {t['label_columns']};
            table_data_dict["search_filters"] = {t['search_filters']};
            table_data_dict["form_fields"] = {t['form_fields']};
            table_data_dict["list_table_header_config"] = {t['list_table_header_config']}
            table_data_dict["allowEditColAlign"] = {t['allowEditColAlign']}
            table_data_dict["allowEditColConfig"] = {t['allowEditColConfig']}
            table_data_dict["rest_cols"] = {t['rest_cols']}

            listViewTableDict["{element_id }"]=table_data_dict;
            element_table_IDList.push("{element_id}");
            element_page.push({t.get('page')});
            """
            + f"""$(`button[name='List_view__Data_table__Multi_select{element_id}']`).on("click", function () """
            + """    {
                if ($(this).val() == "List_view__Data_table__Multi_select_show_checkboxes") {"""
            + f"""$(`#example1{element_id} input.multi_column_select_checkbox`).each(function ()"""
            + """{
                    $(this).show()
                })
                $(this).html("Select")

                $(this).val("List_view__Data_table__Multi_select_open_modal")

                return
                };"""
            + f""" dataContainingColumnNames_sel = listViewTableDict["{element_id}"]['dataContainingColumnNames']
                var table = $(`#example1{element_id}`).DataTable() ;
                table_name = '{t['table_name'] }'; """
            + """ if ($(this).val() == "List_view__Data_table__Multi_select_open_modal") {
                    pk_list = [];"""
            + f"""    $(`#example1{element_id} input.multi_column_select_checkbox:checked`).each(function ()"""
            + """{
                    var cellIndex = this.parentElement._DT_CellIndex
                    var rowData = table.row(cellIndex.row).data();
                    var primaryKeyColumnName = dataContainingColumnNames_sel[0].data
                    var primaryKeyId = rowData[primaryKeyColumnName]
                    pk_list.push(primaryKeyId)
                    });"""
            + f"""$(`#example1{element_id} input.multi_column_select_checkbox`).each(function () """
            """{
                    $(this).prop("checked", false)
                    $(this).hide()
                })

                $(this).html("Multi select")
                $(this).val("List_view__Data_table__Multi_select_show_checkboxes")
                return
                }
            })
            </script>
            <script>
            var elementIDList=[]
            </script>
            <script>
            elementIDList.push"""
            + f"""("{element_id}")"""
        )
        if not data1.get("no"):
            html = (
                html
                + """
              </script>

        """
            )
            html = (
                html
                + """
        <script type="text/javascript" src="{% static 'js/Kore_TI_js/datatables/upload_table.min.js' %}"></script>
        <script>try{masterUploadFunc(element_table_IDList)}catch(err){}</script>
        <!-- Upload Modal code ends-->


        <!--add/create button in list view-->
        <!--on clicking add/create button in list view, create view tab opens-->
        <script src="{% static 'js/Kore_TI_js/create_view_form.js/add_button_list_view_open_create_view.min.js' %}" defer></script>
        <!--add/create button in list view code ends-->

        <!--ocr js-->
            """
            )
    if view == "analysisPdfComment":
        i = data1
        analysis_button_styling = tab_body_content.get("analysisButtonStyling")
        html = (
            html
            + f"""<script>
        $(`#AddComment{element_id}{i['TabID']}`).click(function()"""
            + """{
          var id_ = ('analysisEditor' + Math.random()).replace('.',"");// $(this).attr('id').split('AddComment')[1];
          $(this).parent().parent().next().append(`
                  <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                    <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                      <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                      <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                      <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                    </div>
                    <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                    </div>
                  </div>`)
          $(".commentboxcard").resizable();
          $('.contentEditable').each(function () {
              $(this).on('click', function () {
                $(this).attr("contenteditable", "true")
                $(this).focus()
              })
              $(this).focusout(function () {
                  var content = this.innerText
                  content = content.trim()
                  if (content.length == 0){
                    this.innerText = "Enter text here."
                    $(this).removeAttr("contenteditable");
                    $(this).trigger("click")
                  }
                  else{
                  $(this).removeAttr("contenteditable");
                  }
              })
            })
        $('.deleteCommentBox').click(function () {
            $(this).parent().parent().remove()
        })
        $(".commentboxcard").draggable({
            cancel: '',
            containment: "parent",
        });
      })
      </script>"""
        )
    if view == "analysisNoLayout":
        html = (
            html
            + """
          <script>
          $('.chartDivSection').resizable()
          </script>
        """
        )
    if view == "analysisSlicer":
        analysis_button_styling = tab_body_content.get("analysisButtonStyling")
        i = data1
        html = (
            html
            + f""" <script>
        if(!analysiselementIDList.includes('{element_id}')){{
              analysiselementIDList.push("{element_id}");
        }}"""
        )
        html = (
            html
            + """
        function fetchSlicerParams(app_code = ""){
          $(".analysisSlicerTable").off('select2:select').on('select2:select', function(){
             if (app_code == ""){
              if($("body").find("div").eq(0).attr("app_code") != undefined){
                app_code = $("body").find("div").eq(0).attr("app_code")
              } else if($(this).closest(".chartDivSection").attr("app_code") != undefined){
                app_code = $(this).closest(".chartDivSection").attr("app_code");
              }
            }
            let tableNameSlicer = $(this).val();
            let closestAnalysisParameter = $(this).parent().parent().find(".form-group").eq(1).find(".analysisSlicerParameter");
            if (tableNameSlicer != "") {
              let url_string = window.location.pathname
              let f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
              let s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
              let t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
              let app_code2 = url_string.substring(f_occ+1,s_occ)
              let current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }
              $.ajax({
                url: `/users/${urlPath}/processGraphModule/`,

                data: {
                  'operation': 'dropFieldList',
                  'app_code': app_code,
                  'tableName':tableNameSlicer,
                },
                type: "POST",
                dataType: "json",
                success: function (data) {
                  if (data.fieldList.length > 0) {
                    closestAnalysisParameter.empty();
                    closestAnalysisParameter.append("<option value=''>Select slicer parameter</option>");
                    for (var i = 0; i < data.fieldList.length; i++) {
                      closestAnalysisParameter.append(new Option(data.fieldList[i], data.fieldNameList[i]));
                    }
                    if(closestAnalysisParameter.attr('data-slicerParam') != undefined){
                      var slicerParameter = closestAnalysisParameter.attr('data-slicerParam')
                      closestAnalysisParameter.val(slicerParameter).trigger('change');
                      closestAnalysisParameter.removeAttr('data-slicerParam')
                    }
                  }
                },
                error: function () {
                  Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
                }
              });
            } else {
              closestAnalysisParameter.empty();
              closestAnalysisParameter.append("<option value=''>Select slicer parameter</option>");
            }
          });
        }
        fetchSlicerParams()
        function addSlicers(analysisElementId, tabId){
          $(`#slicerConfigCard${analysisElementId}${tabId}`).append(`
            <div class="card" data-slicer_class="selectSlicerConfig_"""
            + f"""{element_id}{{tabId}}" """
            + """>
              <div class="card-header">
                <button type="button" class="btn removeSlicer" onclick="removeSlicer.call(this)"><i class="far fa-trash-alt text-primary"></i> Remove slicer</button>
              </div>
              <div class="card-body">
                <div class="form-group" style="margin-bottom:5px;text-align:left;">
                  <label for="analysisSlicerTable" class="justify-content-start" style="width:100%">Source table:
                  </label>
                  <select  class="select2 form-control analysisSlicerTable" name="analysisSlicerTable" style="width:100%">
                    <option value="">Select source table</option>
                  </select>
                    </div>
                    <div class="form-group" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                      <label for="analysisSlicerParameter" class="justify-content-start" style="width:100%">Slicer parameter:
                      </label>
                      <select  class="select2 form-control analysisSlicerParameter" name="analysisSlicerParameter" style="width:100%">
                        <option value="">Select slicer parameter</option>
                      </select>
                    </div>
                    <div class = "form-group" style="margin-bottom:5px;text-align:left;">
                      <label for="analysisSlicerBoolean">
                      <input type="checkbox" class="analysisSlicerBoolean" name="analysisSlicerBoolean" value="True" style="margin-right:10px">
                      Add default option for all values</label>
                    </div>
                    <div class="form-group" style="margin-bottom:5px;text-align:left;">
                      <label>
                      <input class="mulcheckbox" type="checkbox" style="margin-right:10px">
                      Multiselect Slicer</label>
                    </div>
                  </div>
                </div>
                `)
                var tableArray = $(`#slicerConfigCard${analysisElementId}${tabId}`).attr('data-tableArray');
                if (tableArray) {
                  tableArray = JSON.parse(tableArray);
                  for (var table of tableArray) {
                    $(`#slicerConfigCard${analysisElementId}${tabId}`).find('.card').eq(-1).find(".analysisSlicerTable").append(`<option value="${table}">${table}</option>`)
                  };
                } else {
                  $.ajax({
                    url: `/users/${urlPath}/dynamicVal/`,
                    data: {
                        'operation': 'fetchAnalysisSlicerTableList',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                      var tableArray = data.table;
                      $(`#slicerConfigCard${analysisElementId}${tabId}`).attr('data-tableArray', JSON.stringify(tableArray));
                      for (var table of tableArray) {
                        $(`#slicerConfigCard${analysisElementId}${tabId}`).find('.card').eq(-1).find(".analysisSlicerTable").append(`<option value="${table}">${table}</option>`)
                      };
                    },
                    error: ()=>{

                    }
                  });
                }

                """
            + """$(`#slicerConfigCard${analysisElementId}${tabId}`).find('.card').eq(-1).find(".card-body").find("select").each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
  })
                fetchSlicerParams();"""
            + """
            }

            function removeSlicer(){
              $(this).parent().parent().remove();
            }

            $('#saveTabSlicerConfig"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).on('click', function(){
              var tabDict={
                "TabID":('"""
            + f"""{i.get('TabID')}"""
            + """'),
                "slicerTable":[],
                "slicerParameter":[],
                "slicerBoolean":[],
                "slicerReload" : [],
                "multipleSlicer":[]
              }
              $('#slicerConfigCard"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card').find('.analysisSlicerTable').each(function() {
                tabDict["slicerTable"].push($(this).val())
              })
              $('#slicerConfigCard"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card').find('.analysisSlicerParameter').each(function() {
                tabDict["slicerParameter"].push($(this).val())
              })
              $('#slicerConfigCard"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card').find('.mulcheckbox').each(function() {
                if ($(this).is(":checked")){
                  tabDict["multipleSlicer"].push(true);
                }else{
                  tabDict["multipleSlicer"].push(false);
                }
              })
              $('#slicerConfigCard"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card').find('.analysisSlicerBoolean').each(function() {
                if ($(this).is(":checked")){
                  tabDict["slicerBoolean"].push("True")
                }else {
                  tabDict["slicerBoolean"].push("False")
                }
              });
              url_string = window.location.pathname
              f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
              s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
              t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
              app_code2 = url_string.substring(f_occ+1,s_occ)
              current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }
              $.ajax({
                url: `/users/${urlPath}/processGraphModule/`,
                data: {
                  'tab_slicer_config': JSON.stringify(tabDict),
                  'element_id': '"""
            + f"""{element_id}"""
            + """',
                  'tab_id': '"""
            + f"""{i.get('TabID')}"""
            + """',
                  'operation': 'saveAnalysisSlicerConfigL3',
                },

                type: "POST",
                dataType: "json",
                success: function (data) {
                  $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools').empty();
                  $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools').append(`"""
        )
        function_check = button_styling(analysis_button_styling, "analysisaddcomment")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f"""<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md {function_check['class']}" id="AddComment"""
                + f"""{element_id}{i.get('TabID')}" """
                + """  data-toggle="tooltip" title="Add comment" style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>&nbsp;"""
            )
        else:
            html = (
                html
                + f"""<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment"""
                + f"""{element_id}{i.get('TabID')}" """
                + """  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
            )
        function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f"""<button type="button" value="PDF" class=" btn btn-primary {function_check['class']}" data-tabHeaderID="tabHeader"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ id='analysisPDF"""
                + f"""{element_id}{i.get('TabID')}' """
                + """ style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;margin-right:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>"""
            )
        else:
            html = (
                html
                + f"""<button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ id='analysisPDF"""
                + f"""{element_id}{i.get('TabID')}' """
                + """ style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
            )
        function_check = button_styling(analysis_button_styling, "analysisslicer")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + f"""<button type="button" value="slicerConfig" class="btn btn-primary {function_check['class']}" data-tabHeaderID="tabHeader"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ id='slicerConfig"""
                + f"""{element_id}{i.get('TabID')}' """
                + """ data-toggle="modal" data-target="#slicerConfigModal"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>"""
            )
        else:
            html = (
                html
                + f"""<button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ id='slicerConfig"""
                + f"""{element_id}{i.get('TabID')}' """
                + """ data-toggle="modal" data-target="#slicerConfigModal"""
                + f"""{element_id}{i.get('TabID')}" """
                + """ style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>"""
            )
        html = (
            html
            + f""" `);

                  let tabSlicerConfig = data['"""
            + f"""{i.get('TabID')}"""
            + """'];
                  let analysis_additional_config = tabSlicerConfig.analysis_additional_config;
                  if (analysis_additional_config == "slicer_config") {
                    let slicerTables = tabSlicerConfig.slicerTable;
                    let slicerParameters = tabSlicerConfig.slicerParameter;
                    let slicerBooleans = tabSlicerConfig.slicerBoolean;
                    let slicerParameterValues = tabSlicerConfig.slicer_parameter_values;
                    let slicerReloadValue = tabSlicerConfig.slicerReload;
                    let multipleSlicer = tabSlicerConfig.multipleSlicer;
                    let mapDict = tabSlicerConfig.mappingDict
                    var html = '';
                    for(let i = 0; i < slicerParameterValues.length; i++) {
                      let attr_ = 'data-value = ""'
                      let multiple = "";
                      if(slicerReloadValue != undefined){
                        if (slicerReloadValue.length != 0) {
                          attr_ = 'data-value' + `= '${JSON.stringify(slicerReloadValue[i])}'`
                        }
                      }
                      if(multipleSlicer != undefined){
                        if(multipleSlicer.length > 0){
                          if(multipleSlicer[i]){
                            multiple = "multiple";
                          }
                        }
                      }
                      html = html + `
                      <div class="form-inline" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                        <span class="text-primary" style=" margin-right:10px; margin-left:10px;">${mapDict[i][slicerParameters[i]]}:</span>

                        <select class="selectSlicerConfig_"""
            + f"""{element_id}{i.get('TabID')}  """
            + """select2 form-control slicerParamValue"""
            + f"""{element_id}"""
            + """ data-tab="""
            + f"""'{i.get('TabID')}'"""
            + """ data-slicertable="${slicerTables[i]}" data-slicerColumn= "${slicerParameters[i]}" ${attr_} data-id="selectSlicerConfig_"""
            + f"""{element_id}{i.get('TabID')}" """
            + """ style="width:150px;display:inline-block;" ${multiple}>`
                          if(slicerBooleans != undefined){
                            if (slicerBooleans.length != 0) {
                              if(slicerBooleans[i] == 'True'){
                                html = html + `<option value="" selected>All</option>`
                              }
                            }
                          }
                          for(let j = 0; j < slicerParameterValues[i].length; j++) {
                            if(slicerParameterValues[i][j] != ''){
                            html = html + `<option value="${slicerParameterValues[i][j]}">${slicerParameterValues[i][j]}</option>`
                            }
                          }
                        html = html +
                        `</select>
                      </div>
                      `
                    }
                    $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools').append(html);
                    $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools').find('select').each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
  })
                    $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("max-height","55px");
                    $('#tab"""
            + f"""{element_id}{i.get('TabID')}' """
            + """).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("overflow-y","scroll");
                    slicerChangeUpdatePlots();
                  }
                },
                error: function () {
                  Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
                }
              });
            });
          </script>"""
        )

    if view == "analysisTab":
        i = t
        html = (
            html
            + """<script>
        """
            + """
        if(document.getElementById"""
            + f"""(`indextab{element_id}{i['TabID']}`) != null)"""
            + """{
          document.getElementById"""
            + f"""(`indextab{element_id}{i['TabID']}`)"""
            + """.addEventListener("click", (e) =>"""
            + """ { """
            + f"""
              e.preventDefault();
              gotoTab("#analysisTab{element_id}", "tab{element_id}{i['TabID']}"); """
            + """
          });"""
            + """
        }"""
            + f"""
        $(`#removeTab{element_id}{i['TabID']}`).click(function() """
            + """{"""
            + f"""
          $(`#index`+$(this).attr("id").replace("removeT","t")).closest(".row").remove()
          const deleteButton = document.getElementById(`removeTab{element_id}{i['TabID']}`);"""
            + """
          let ind = 0
          """
            + f"""$("#tabLinks{element_id}").find(".col-2")"""
            + """.each(function() {
            $(this).find("p").html(++ind)
          })
          deleteButton.addEventListener("click", (e) => {
            const id = e.target.parentNode.id.replace('removeT', 'indext');;
            """
            + f"""const indexTab = document.getElementById('tabLinks{element_id}')"""
            + """;
            const linkToBeDeleted  = document.getElementById(`${id}`);
            $(`#${id}`).closest(".row").remove();
          })
          var tabAnchorID=$(this).attr('data-tabAnchorID')
          var tabContainerDivID=$(this).attr('data-tabContainerDivID')
          $(`#${tabAnchorID}`).parent().remove()
          $(`#${tabContainerDivID}`).remove()
        })
        $('.contentEditable').each(function () {
        $(this).on('click', function () {
          $(this).attr("contenteditable", "true")
          $(this).focus()
        })
        $(this).focusout(function () {
          var tab_header = this.innerText
          tab_header = tab_header.trim()
          if (tab_header.length == 0){
            this.innerText = "Set Name"
            $(this).removeAttr("contenteditable");
            $(this).addClass("bg-danger")
            $(this).trigger("click")
          }
          else{
          $(this).removeAttr("contenteditable");
          $(this).removeClass("bg-danger")
          }
      })
      })
    </script>"""
        )
    if view == "analysis" or view == "analysisList":
        analysis_button_styling = tab_body_content.get("analysisButtonStyling")
        html = (
            html
            + """ <script>
        var elementIDList = []
        var analysisData_Raw;
        $(document).ready(function() {"""
            + f"""
            $(`#select2multiple_group"""
            + f"""{element_id}`)"""
            + """.select2({

            })
            })
            var element_id = """
            + f""" '{element_id}' """
            + """
            $(`#last_updated_time${element_id}`)."""
            + f"""text("00-00-00 00:00");"""
            + """
            $(`#analysisDashboard${element_id} .nav-tabs a`).first().tab('show');"""
        )
        html = (
            html
            + """  $(`#plotCharts${element_id}`).click(function(event){
            var element_id = """
            + f""" '{element_id}'"""
            + """
            $(`#plotCharts${element_id}`).off('click');
            event.preventDefault();
            $(`#PlotElements${element_id}`).modal('show');
            })

            $(`#analysisAddTab"""
            + f"""{element_id}`"""
            + """).click(function () {
            var element_id = """
            + f""" '{element_id}'
            var tabID = String(Math.random()).replace('.','');
            var tabName = $('#analysisTab{element_id}').children("li").length+1;"""
            + """
            $(`#selectXYTab${element_id}`).append(`<option value="analysisrow${element_id}${tabID}">Tab${tabName}</option>`);
            $(`#analysisTab${element_id}`).append(`<li class="nav-item navtab scroll-link"><a class="nav-link" id="analysistab${element_id}${tabID}" href="#tab${element_id}${tabID}" role="tab" data-toggle="tab" aria-controls="#tab${element_id}${tabID}" aria-selected="false">
            <div class="row">
            <div class="col-md-10" style="padding-right: 0.1rem">
            <span class="contentEditable tabname" id="${`tabHeader${element_id}`+tabID}" data-tab="analysisrow${element_id}${tabID}" data-tab_ct="analysisrow${element_id}${tabID}">Tab${tabName}</span>
            </div>
            <div class="col-md-2" style="padding-top: 0px;">
            <button type="button" id="${`removeTab${element_id}`+tabID}" data-tabAnchorID="analysistab${element_id}${tabID}" data-tabContainerDivID="tab${element_id}${tabID}" style="border-width:0px;padding: 1px 1px;background-color: white;"><i class="fa fa-times" style="font-size:0.9rem;"></i></button>
            </div>
            </div>
            </a></li>`);

            const navUl = document.querySelector('.nav.nav-tabs.nav-fill.analysis-nav');
            if(navUl.children.length > 4) {
              navUl.classList.add("scroll-nav")
            }

            // INDEX TAB UPDATION
            const updateIndex = (index, val) => {
              let ind = index.replace('Header', '')
              const indexTabs = $("#tabLinks"+element_id).find(".linkCard") //document.getElementById('tabLinks').children;
              Array.from(indexTabs).forEach(ele => {
                const id = ele.id.replace('index', '');
                if(id == ind) {
                  $(`#index${id} .tab-title`).text(val)
                }
              });
            }
            let link = 'tab' + element_id + tabID;
            let length_index = $("#tabLinks"+element_id).find(".linkCard").length + 1;"""
        )
        if not tab_body_content.get("dashboardIndexTemplate"):
            tab_body_content["dashboardIndexTemplate"] = "Template1"
        else:
            pass
        if tab_body_content.get("dashboardIndexTemplate") == "Template1":
            html = (
                html
                + """let markup = `
              <div class="row index-rows" style="box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;border-radius: 5px;margin: 20px 20px;align-items: center;display: flex;">
                <div id="" class="col-2 index-no-column">
                  <p style="font-size: 1.2rem; margin:0;"> ${length_index} </p>
                </div>
                <div class="col-10" style="">
                  <i class="fa fa-pen editTabIcon" onclick="openModal('index${link}')" style="right: -8px;top:-8px;"></i>
                  <div id="index${link}" class="linkCard defaultTabTheme">
                    <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                      <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="${link}"> Tab${tabName} </a>
                      <p class="tab-desc colored-text" data-name="index${link}" style="margin-bottom:0"></p>
                    </div>
                    <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center" >
                      <i class="" data-name="index${link}"></i>
                    </div>
                  </div>
                </div>
              </div>
          ` ;"""
            )
        elif tab_body_content.get("dashboardIndexTemplate") == "Template2":
            html = (
                html
                + """let markup = `
            <div class="row index-rows index-rows-temp2" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;">
              <div id="" class="col-2 index-no-column index-column-temp2" style="border-top-right-radius: 0px;border-bottom-right-radius: 0px;height: 6rem;color:var(--font-color);">
                <p style="font-size: 1.2rem; margin:0;"> ${length_index} </p>
              </div>
              <div class="col-10" style="background: white !important;">
                <i class="fa fa-pen editTabIcon" onclick="openModal('index${link}')" style="right: -8px;top:-8px;"></i>
                <div id="index${link}" style="background-color: transparent !important;" class="linkCard">
                  <div class="col-10 d-flex flex-column align-items-center justify-content-center">
                    <a class="tab-title" style="color:black !important;font-size: 1.2rem;" href="${link}"> Tab${tabName} </a>
                    <p class="tab-desc" data-name="index${link}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 colored-icons TabIcons d-flex align-items-center justify-content-center" >
                    <i class="" data-name="index${link}"></i>
                  </div>
                </div>
              </div>
            </div>
          ` ;"""
            )
        elif tab_body_content.get("dashboardIndexTemplate") == "Template3":
            html = (
                html
                + """let markup = `
            <div class="row index-rows defaultTabTheme" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;margin: 20px 20px;align-items: center;display: flex;border-radius: 0px 40px !important;">
              <div id="" class="col-2 d-flex align-items-center justify-content-center" style="background-color:white;border-radius: 0px 40px !important;height: 6rem;">
                <p style="font-size: 1.2rem; color:black !important; margin:0;"> ${length_index} </p>
              </div>
              <div class="col-10" style="">
                <i class="fa fa-pen editTabIcon" onclick="openModal('index${link}')"></i>
                <div id="index${link}" style="border-top-right-radius: 40px;" class="linkCard">
                  <div class="col-10 d-flex  flex-column align-items-center justify-content-center">
                    <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="${link}"> Tab${tabName} </a>
                    <p class="tab-desc colored-text" data-name="index${link}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 tab-icons TabIcons d-flex align-items-center justify-content-center" >
                    <i class="" data-name="index${link}" ></i>
                  </div>
                </div>
              </div>
            </div>
          ` ;"""
            )

        elif tab_body_content.get("dashboardIndexTemplate") == "Template4":
            html = (
                html
                + """let markup = `
            <div class="row index-rows" style="margin: 40px 50px 40px 0px;align-items: center;display: flex;justify-content: center;">
              <div id="" class="col-1 dropIndex">
              <p style="font-size: 1.2rem; margin:0;"> ${length_index} </p>
              </div>
              <div class="col-10" style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius:10px;">
                <i class="fa fa-pen editTabIcon" onclick="openModal('index${link}')" style="right: -8px;top:-8px;"></i>
                <div id="index${link}" class="linkCard">
                  <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                    <a class="tab-title" style="color:black !important;font-size: 1.2rem;" href="${link}"> Tab${tabName} </a>
                    <p class="tab-desc" data-name="index${link}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 colored-icons TabIcons d-flex justify-content-center align-items-center">
                    <i class="" data-name="index${link}"></i>
                  </div>
                </div>
              </div>
            </div>
          ` ;"""
            )

        elif tab_body_content.get("dashboardIndexTemplate") == "Template5":
            html = (
                html
                + """let markup = `
            <div class="row index-rows" style="margin: 40px 0px;align-items: center;display: flex;justify-content: center;">
              <div id="" class="col-2 boxIndex" >
              <p style="font-size: 1.2rem; margin:0;"> ${length_index} </p>
              </div>
              <div class="col-8 defaultTabTheme" style="border-radius:10px;">
                <i class="fa fa-pen editTabIcon" onclick="openModal('index${link}')" style="right: -23px;top:-7px;"></i>
                <div id="index${link}" class="linkCard">
                  <div class="col-10 d-flex flex-column justify-content-center align-items-center">
                    <a class="tab-header-name tab-title" style="font-size: 1.2rem;" href="${link}"> Tab${tabName} </a>
                    <p class="tab-desc colored-text" data-name="index${link}" style="margin-bottom:0"></p>
                  </div>
                  <div class="col-1 tab-icons TabIcons d-flex justify-content-center align-items-center">
                    <i class="" data-name="index${link}"></i>
                  </div>
                </div>
              </div>
              <div class="col-1"><span class="arrow-tab"></span></div>
            </div>
          ` ;"""
            )

        html = (
            html
            + """    $(`#tabLinks${element_id}`).append(markup);
              var col1 = "var(--primary-color,var(--primary-color))"
              var col2 = "var(--font-color))"
              let gobalConfigIndexBG = $(".indextabBG").val()
              let gobalConfigindextabFC = $(".indextabFC").val()
              $(".defaultTabTheme").css("background-color",gobalConfigIndexBG);
              $(".index-no-column").css("background-color",gobalConfigIndexBG);
              $(".dropIndex").css("background",`${col1} linear-gradient(to bottom right, ${col1} 25%, #fff)`);
              $(".boxIndex").css("background",`${col1} linear-gradient(to bottom right, ${col1} 25%, #fff)`);
              $(".dropIndex").find('p').css("color",col2);
              $(".boxIndex").find('p').css("color",col2);
              $(".tab-header-name").css("color",col2);
              $(".colored-text").css("color",col2);
              $(".tab-icons").find('i').css("color",col2);
              $(".colored-icons").find('i').css("color",col1);
              $(".index-no-column").find('p').css("color",gobalConfigindextabFC);
              $(".linkCard").find('a').css("color",gobalConfigindextabFC);
              $(".index-rows").css("border-color",col1);
              $(".index-no-column").css("border-color",col1);
              $(".arrow-tab").css("border-left-color",col1);

            if(document.getElementById(`index${link}`) != null){
              document.getElementById(`index${link}`).addEventListener("click", (e) => {
                e.preventDefault();
                gotoTab("#analysisTabellipse09392335077605267", link);
              });
            }
            const editables = document.getElementsByClassName('contentEditable tabname');
            Array.from(editables).forEach(ele => {
              ele.addEventListener("blur", (e) => {
                updateIndex(ele.id, ele.textContent)
              })
            });
            const deleteButton = document.getElementById(`removeTab${element_id}${tabID}`);
            deleteButton.addEventListener("click", (e) => {
              const id = e.target.parentNode.id.replace('removeT', 'indext');;
              const indexTab = document.getElementById('tabLinks'+element_id);
              const linkToBeDeleted  = document.getElementById(`${id}`);
              let ind = 0
              $(`#${id}`).closest(".row").remove();
              $("#tabLinks"+element_id).find(".col-2").each(function() {
                $(this).find("p").html(++ind)
              })
            })

            $(`#analysisTabContent${element_id}`).append(`<div class="tab-pane fade" id="tab${element_id}${tabID}" role="tabpanel" aria-labelledby="analysistab${element_id}${tabID}">
            <div class="d-flex justify-content-between" style="padding-top:1%">
            <div class="card-tools tabCardTools row col-12" style="background:whitesmoke; padding-bottom: 2px;margin:auto">"""
        )
        function_check = button_styling(analysis_button_styling, "analysisaddcomment")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md"""
                + f"""{function_check['class']} """
                + """ " id="${"AddComment"""
                + f"""{element_id}" """
                + """ +tabID}"  data-toggle="tooltip" title="Add comment" style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>&nbsp;"""
            )
        else:
            html = (
                html
                + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="${"AddComment"""
                + f"""{element_id}" """
                + """ +tabID}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
            )

        function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """<button type="button" value="PDF" data-tabHeaderID="${"tabHeader"""
                + f"""{element_id}" """
                + """ +tabID}" class=" btn btn-primary"""
                + f"""{function_check['class']} """
                + """ " id='${'analysisPDF"""
                + f"""{element_id}'"""
                + """ +tabID}' style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;margin-right:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>
                  """
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """
              </button>
              """
            )
        else:
            html = (
                html
                + """<button type="button" value="PDF" data-tabHeaderID="${"tabHeader"""
                + f"""{element_id}" """
                + """ +tabID}" class=" btn btn-primary" id='${'analysisPDF"""
                + f"""{element_id}'"""
                + """ +tabID}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;margin-right:5px;margin-top:10px; margin-bottom:10px">
                  <i class="fa fa-file-pdf-o"></i>&nbsp;PDF
              </button>
              """
            )
        function_check = button_styling(analysis_button_styling, "analysisslicer")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """ <button type="button" value="slicerConfig" class="btn btn-primary"""
                + f"""{function_check['class']} """
                + """ " data-tabHeaderID="tabHeader"""
                + f"""{element_id}"""
                + """${tabID}" id='slicerConfig"""
                + f"""{element_id}"""
                + """${tabID}' data-toggle="modal" data-target="#slicerConfigModal"""
                + f"""{element_id}"""
                + """${tabID}" style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>"""
            )
        else:
            html = (
                html
                + """ <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader"""
                + f"""{element_id}"""
                + """${tabID}" id='slicerConfig"""
                + f"""{element_id}"""
                + """${tabID}' data-toggle="modal" data-target="#slicerConfigModal"""
                + f"""{element_id}"""
                + """${tabID}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>"""
            )
        if t.get("Layout") != "No layout":
            function_check = button_styling(analysis_button_styling, "analysisgridlines")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """<button type="button" value="gridLines" class="btn btn-primary"""
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="tabHeader"""
                    + f"""{element_id}"""
                    + """${tabID}" id='gridLines"""
                    + f"""{element_id}"""
                    + """${tabID}' style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """ onclick="gridLine.call(this)">"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """<button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader"""
                    + f"""{element_id}"""
                    + """${tabID}" id='gridLines"""
                    + f"""{element_id}"""
                    + """${tabID}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>"""
                )
        html = (
            html
            + """    </div>
      </div>
      <div class="col-lg-12 row chartDivSection" """
            + f"""data-layout="{t.get('Layout')}" """
            + """id="analysisrow"""
            + f"""{element_id}"""
            + """${tabID}" ondblclick="resetCrossFilter.call(this)"></div></div>

      <div class="modal" id="slicerConfigModal"""
            + f"""{element_id}"""
            + """${tabID}">
        <div class="modal-dialog modal-md modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h6 class="modal-title" style="text-align:center;">Configure slicer</h6>
              <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
              <div class="card">
                <div class="card-body">
                  <div class="card-tools text-primary" style="display:flex; flex-direction:row; align-items:center; justify-content:space-between;">
                    <label for="">Add slicer</label>
                    <button type="button" class="btn addOptionBtn" onclick="addSlicers('"""
            + f"""{element_id}"""
            + """', '${tabID}')"><i class="fas fa-plus"></i></button>
                  </div>
                  <div id="slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}" style="max-height: 15.25rem; overflow-y: scroll; overflow-x: hidden;">
                    <div class="card" data-slicer_class="selectSlicerConfig_"""
            + f"""{element_id}"""
            + """${tabID}">
                      <div class="card-body">
                        <div class="form-group" style="margin-bottom:5px;text-align:left;">
                          <label for="analysisSlicerTable" class="justify-content-start" style="width:100%">Source table:
                          </label>
                          <select class="select2 form-control analysisSlicerTable" name="analysisSlicerTable" style="width:100%">
                            <option value="">Select source table</option>
                          </select>
                        </div>
                        <div class="form-group" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                          <label for="analysisSlicerParameter" class="justify-content-start" style="width:100%">Slicer parameter:
                          </label>
                          <select  class="select2 form-control analysisSlicerParameter" name="analysisSlicerParameter" style="width:100%">
                            <option value="">Select slicer parameter</option>
                          </select>
                        </div>
                        <div class = "form-group" style="margin-bottom:5px;text-align:left;">
                          <label for="analysisSlicerBoolean">
                          <input type="checkbox" class="analysisSlicerBoolean" name="analysisSlicerBoolean" value="True" style="margin-right:10px">
                          Add default option all values</label>
                        </div>
                        <div class="form-group" style="margin-bottom:5px;text-align:left;">
                          <label>
                          <input class="mulcheckbox" type="checkbox" style="margin-right:10px">
                          Multiselect Slicer</label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="saveTabSlicerConfig"""
            + f"""{element_id}"""
            + """${tabID}" data-analysis_id="""
            + f""" "{element_id}" """
            + """ data-tab_id="${tabID}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
            </div>
          </div>
            </div>
            </div>
          `);
          $.ajax({
            url: `/users/${urlPath}/dynamicVal/`,
            data: {
                'operation': 'fetchAnalysisSlicerTableList',
            },
            type: "POST",
            dataType: "json",
            success: function (data) {
              var tableArray = data.table;
              $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).attr('data-tableArray', JSON.stringify(tableArray));
              for (var table of tableArray) {
                $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').eq(-1).find(".analysisSlicerTable").append(`<option value="${table}">${table}</option>`)
              };
            },
            error: ()=>{

            }
          });
          if ($(`#analysisTabContent${element_id}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
            $('.chartDivSection').css({
              "background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)",
              "background-size": "5% 5%",
              "width":"100%",
              "margin":"auto",
              "aspect-ratio": 16/9,
              "overflow-y": "hidden",
              "overflow-x": "hidden",
              "border": "0.1px solid black",
            })
          } else if ($(`#analysisTabContent${element_id}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
            $('.chartDivSection').css({
              "background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)",
              "background-size": "5% 5%",
              "width":"1080px",
              "margin":"auto",
              "aspect-ratio": 9/16,
              "overflow-y": "hidden",
              "overflow-x": "hidden",
              "border": "0.1px solid black",
            })
          } else {
            $(`#analysisTabContent${element_id}`).find('.chartDivSection').resizable();
              $('.chartDivSection').css({
              "width":"92%",
              "padding-left": "70px",
              "padding-top": "9px",
              "padding-right": "9px",
          })
          }
          """
            + f"""
           """
            + """
          $(`#removeTab${element_id}${tabID}`).click(function() {
              const deleteButton = document.getElementById(`removeTab${element_id}${tabID}`);
                deleteButton.addEventListener("click", (e) => {
                const id = e.target.parentNode.id.replace('removeT', 'indext');;
                const indexTab = document.getElementById('tabLinks'+element_id);
                const linkToBeDeleted  = document.getElementById(`${id}`);
                $(`#${id}`).closest(".row").remove();
              })
              var tabAnchorID=$(this).attr('data-tabAnchorID')
              var tabContainerDivID=$(this).attr('data-tabContainerDivID')
              $(`#${tabAnchorID}`).parent().remove()
              $(`#${tabContainerDivID}`).remove()
            })
            $('.contentEditable').each(function () {
            $(this).on('click', function () {
              $(this).attr("contenteditable", "true")
              $(this).focus()
            })
            $(this).focusout(function () {
              var tab_header = this.innerText
              tab_header = tab_header.trim()
              if (tab_header.length == 0){
                this.innerText = "Set Name"
                $(this).removeAttr("contenteditable");
                $(this).addClass("bg-danger")
                $(this).trigger("click")
              }
              else{
              $(this).removeAttr("contenteditable");
              $(this).removeClass("bg-danger")
              }
          })
          });"""
            + f"""

            $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').eq(-1).find(".card-body").find("select").each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
  })
      slicerTabConfigDict['selectSlicerConfig_'+"""
            + f"""'{element_id}'"""
            + """+tabID] = [];
      slicerChangeUpdatePlots();
      global_apply_button_click();
      if(typeof(fetchSlicerParams) != undefined && typeof(fetchSlicerParams) != 'undefined'){
        fetchSlicerParams();
      }
      $(`#saveTabSlicerConfig"""
            + f"""{element_id}"""
            + """${tabID}`).on('click', function(){
        let anlysisElementId = $(this).attr('data-analysis_id');
        let analysistabNo = $(this).attr('data-tab_id');
        var tabDict={
          "TabID":(tabID),
          "slicerTable":[],
          "slicerParameter":[],
          "slicerBoolean" :[],
          "slicerReload" : [],
          "multipleSlicer": []
        }
        $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').find('.analysisSlicerTable').each(function() {
          tabDict["slicerTable"].push($(this).val())
        })
        $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').find('.analysisSlicerParameter').each(function() {
          tabDict["slicerParameter"].push($(this).val())
        })
        $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').find('.mulcheckbox').each(function() {
          if ($(this).is(":checked")){
            tabDict["multipleSlicer"].push(true);
          }else{
            tabDict["multipleSlicer"].push(false);
          }
        })
        $(`#slicerConfigCard"""
            + f"""{element_id}"""
            + """${tabID}`).find('.card').find('.analysisSlicerBoolean').each(function() {
          if ($(this).is(":checked")){
            tabDict["slicerBoolean"].push("True")
          }else {
            tabDict["slicerBoolean"].push("False")
          }
        })
               url_string = window.location.pathname
               f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
               s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
               t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
               app_code2 = url_string.substring(f_occ+1,s_occ)
               current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }
        $.ajax({
          url: `/users/${urlPath}/processGraphModule/`,
          data: {
            'tab_slicer_config': JSON.stringify(tabDict),
            'element_id': '"""
            + f"""{element_id}"""
            + """',
            'tab_id': tabID,
            'operation': 'saveAnalysisSlicerConfigL3',
          },
          type: "POST",
          dataType: "json",
          success: function (data) {
            var analysisSlicerElementId = data.elementID;
            var analysisSlicerTabId = data.slicer_tab_id;
            $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').empty();
            $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(`"""
        )
        function_check = button_styling(analysis_button_styling, "analysisaddcomment")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md"""
                + f"""{function_check['class']} """
                + """ " id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>&nbsp;"""
            )
        else:
            html = (
                html
                + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
            )
        function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """<button type="button" value="PDF" class=" btn btn-primary"""
                + f"""{function_check['class']} """
                + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px;  margin-right:5px;margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>"""
            )
        else:
            html = (
                html
                + """<button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
            )
        function_check = button_styling(analysis_button_styling, "analysisslicer")
        if function_check is not None:
            styling_to_put = function_check["styling"].replace("'", "")
            html = (
                html
                + """<button type="button" value="slicerConfig" class="btn btn-primary"""
                + f"""{function_check['class']} """
                + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style=" """
                + f"""{styling_to_put}"""
                + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                + """>"""
                + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                + """</button>"""
            )
        else:
            html = (
                html
                + """<button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>"""
            )
        if t.get("Layout") != "No layout":
            function_check = button_styling(analysis_button_styling, "analysisgridlines")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """<button type="button" value="gridLines" class="btn btn-primary"""
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """<button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>"""
                )
        html = (
            html
            + """`);

            let tabSlicerConfigOutput = data[analysisSlicerTabId];
            let analysis_additional_config = tabSlicerConfigOutput.analysis_additional_config;
            if (analysis_additional_config == "slicer_config") {
              let slicerTables = tabSlicerConfigOutput.slicerTable;
              let slicerParameters = tabSlicerConfigOutput.slicerParameter;
              let mapDict = tabSlicerConfigOutput.mappingDict
              let slicerBooleans = tabSlicerConfigOutput.slicerBoolean;
              let slicerParameterValues = tabSlicerConfigOutput.slicer_parameter_values;
              let slicerReloadValue = tabSlicerConfigOutput.slicerReload;
              let multipleSlicer = tabSlicerConfigOutput.multipleSlicer;
              var html = '';

              for(let i = 0; i < slicerParameterValues.length; i++) {
                let attr_ = 'data-value = ""'
                let multiple = "";
                if(slicerReloadValue != undefined){
                  if (slicerReloadValue.length != 0) {
                    attr_ = 'data-value' + `= '${JSON.stringify(slicerReloadValue[i])}'`
                  }
                }
                if(multipleSlicer != undefined){
                  if(multipleSlicer.length > 0){
                    if(multipleSlicer[i]){
                      multiple = "multiple";
                    }
                  }
                }
                html = html + `
                <div class="form-inline" style="margin-bottom:5px;text-align:left;">
                  <span class="text-primary" margin-right:10px; margin-left:10px;">${mapDict[i][slicerParameters[i]]}:</span>
                  <select class="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId} select2 form-control slicerParamValue${analysisSlicerElementId}" data-tab="${analysisSlicerTabId}" data-slicertable="${slicerTables[i]}" data-slicerColumn= "${slicerParameters[i]}" ${attr_} data-id="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}" style="width:150px;display:inline-block;" ${multiple}>`
                    if(slicerBooleans != undefined){
                      if (slicerBooleans.length != 0) {
                        if(slicerBooleans[i] == 'True'){
                          html = html + `<option value="" selected>All</option>`
                        }
                      }
                    }
                for(let j = 0; j < slicerParameterValues[i].length; j++) {
                    if(slicerParameterValues[i][j] != ''){
                    html = html + `<option value="${slicerParameterValues[i][j]}">${slicerParameterValues[i][j]}</option>`
                    }
                }
                html = html +
                  `</select>
                </div>
                `
              }
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(html);
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('select').each(function(){
                parent = $(this).parent()
                $(this).select2({dropdownParent:parent})
              })
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("max-height","55px");
              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("overflow-y","scroll");

                                    $(`#AddComment${analysisSlicerElementId}${analysisSlicerTabId}`).click(function(){
                                      var id_ = ('analysisEditor' + Math.random()).replace('.',"");
                                        $(this).parent().parent().next().append(`

                                               <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                                        <div class="row"  style="position:absolute; margin-left:100%;display:none;flex-wrap:wrap;">
                                          <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                                          <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                                          <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                                        </div>
                                        <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                                        </div>
                                      </div>`)
                                      $(".commentboxcard").resizable();
                                      $('.contentEditable').each(function () {
                                          $(this).on('click', function () {
                                            $(this).attr("contenteditable", "true")
                                            $(this).focus()
                                          })
                                          $(this).focusout(function () {
                                              var content = this.innerText
                                              content = content.trim()
                                              if (content.length == 0){
                                                this.innerText = "Enter text here."
                                                $(this).removeAttr("contenteditable");
                                                $(this).trigger("click")
                                              }
                                              else{
                                              $(this).removeAttr("contenteditable");
                                              }
                                          })
                                        })
                                      $('.deleteCommentBox').click(function () {
                                          $(this).parent().parent().remove()
                                      })
                                      $(".commentboxcard").draggable({
                                          cancel: '',
                                          containment: "parent",
                                      });
                                  })
            }
            slicerChangeUpdatePlots();
          },
          error: function () {
            Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
          }
            });
          });
          """
        )

        if t.get("Layout") == "No layout":
            html = html + """$('.chartDivSection').resizable();"""

        html = (
            html
            + """$(`#${"removeTab"+element_id+tabID}`).click(function(){

                var tabAnchorID=$(this).attr('data-tabAnchorID')
                var tabContainerDivID=$(this).attr('data-tabContainerDivID')
                $(`#${tabAnchorID}`).parent().remove()
                $(`#${tabContainerDivID}`).remove()
            })
            $('.contentEditable').each(function () {
            $(this).on('click', function () {
                $(this).attr("contenteditable", "true")
                $(this).focus()
            })
            $(this).focusout(function () {
                var tab_header = this.innerText
                tab_header = tab_header.trim()
                if (tab_header.length == 0){
                this.innerText = "Set Name"
                $(this).removeAttr("contenteditable");
                $(this).addClass("bg-danger")
                $(this).trigger("click")

                }
                else{
                $(this).removeAttr("contenteditable");
                $(this).removeClass("bg-danger")
                }
            })
            })
            $(`#${"AddComment"+element_id+tabID}`).click(function(){
                var id_ = ('analysisEditor' + Math.random()).replace('.',"");
                $(this).parent().parent().next().append(`
                  <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                  <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                    <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                    <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                    <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                  </div>
                  <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                  </div>
                </div>`)
                $(".commentboxcard").resizable();
                $('.contentEditable').each(function () {
                    $(this).on('click', function () {
                    $(this).attr("contenteditable", "true")
                    $(this).focus()
                    })
                    $(this).focusout(function () {
                        var content = this.innerText
                        content = content.trim()
                        if (content.length == 0){
                        this.innerText = "Enter text here."
                        $(this).removeAttr("contenteditable");
                        $(this).trigger("click")
                        }
                        else{
                        $(this).removeAttr("contenteditable");
                        }
                    })
                })
                $('.deleteCommentBox').click(function () {
                    $(this).parent().parent().remove()
                })
                $(".commentboxcard").draggable({
                    cancel: '',
                    containment: "parent",
                });
            })
        })
        var share_status = false
        $(`#analysisshare${element_id}`).click(function () {
            share_status = true
            let element_id_extract = $(this).attr("data-elementID");

            saveGroupConfigAnalysis(($(this).attr("data-elementID")),($(`#select2multiple_group${element_id_extract}`).val()))
            })"""
        )
        if t.get("Layout") == "Landscape":
            index_style_width = "100%"
            index_aspect_ratio = 16 / 9
        else:
            index_style_width = "1080px"
            index_aspect_ratio = 9 / 16
        html = (
            html
            + """
          var analysisType = """
            + f"""'{t.get('analysis_package')}'; """
            + """
              url_string = window.location.pathname
              f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
              s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
              t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
              app_code2 = url_string.substring(f_occ+1,s_occ)
              current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                current_dev_mode2 = 'User'
              }"""
        )
        if view != "analysisList":
            html = (
                html
                + """
          var versionData = {};
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'saveVersionConfig',
              'element_id': """
                + f"""'{element_id}'"""
                + """
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              versionData = data;
              saveElementID = data.analysisConfigData.ElementID
              $(`#last_updated_time${saveElementID}`).text(data["last_modified_date"])
              for (const [key, uconfig] of Object.entries(data['user_config_list'])){
                $(`#selectConfig${saveElementID}`).append(`<option value="${uconfig['name']}"> ${uconfig['name']} </option>`)
              };
              for (let i = 0; i < data['group_name_list'].length; i++){
                $(`#select2multiple_group${saveElementID}`).append(`<option value="${data['group_name_list'][i]}"> ${data['group_name_list'][i]} </option>`)
              };
                  $(`#selectConfig${saveElementID}`).change(function(){
                  var name = $(this).val()
                  if(!name) {
                    $(".chartDivSection").empty()
                    analysisData_Raw = undefined
                    window.location.reload()
                  } else {
                    $(`#selectversion${saveElementID}`).empty()
                    $(`#selectversion${saveElementID}`).append(`<option value="------"> ----- </option>`);
                    $(`#select2multiple_group${saveElementID}`).val($(this).val()).trigger("change")
                    for (const [key, gconfig] of Object.entries(data['group_config_list']))
                    {  if(name == gconfig['name'] )
                    {
                        $(`#selectversion${saveElementID}`).append(`<option value="${gconfig['version_name']}"> ${gconfig['version_name']} </option>`);
                        $(`#last_updated_time${saveElementID}`).text(gconfig['date'])
                        var gRawData = JSON.parse(gconfig['config'])



                            var bg_x= gRawData['subTabContent'][0]['tab_background-color']
                            var bg_image= gRawData['subTabContent'][0]['global_bg_name']
                            var bg_folder= gRawData['subTabContent'][0]['global_bg_folder']
                            $(`#bg_image_url${saveElementID}`).html("")
                            $(`#bg_image_url${saveElementID}`).html(bg_image)
                            var global_bg_value = gRawData['subTabContent'][0]['global_bg_value']
                            $(`#global_bg${saveElementID}`).val(global_bg_value).trigger("change")
                            if(global_bg_value == "background_image"){
                              $('.global_bg_color').css("display","none")
                              $('.global_bg_image').css("display","block")
                                if(bg_image != "" || bg_image != undefined)
                            {
                              if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'100% calc(100vw * 9/16)' )
                                  }
                              else if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'1080px calc(100vw * 16/9)' )
                                  }
                              else{
                                $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'100%' )
                              }
                              url_string = window.location.pathname
                              f_occ = url_string.indexOf('/', url_string.indexOf('/') + 1)
                              s_occ = url_string.indexOf('/', url_string.indexOf('/') + f_occ +1)
                              t_occ = url_string.indexOf('/', url_string.indexOf('/') + s_occ +1)
                              app_code2 = url_string.substring(f_occ+1,s_occ)
                              current_dev_mode2 = url_string.substring(s_occ+1,t_occ)
                              if(current_dev_mode2 != 'Build' && current_dev_mode2 != 'Edit'){
                                current_dev_mode2 = 'User'
                              }
                              $.ajax({
                                  url: `/users/${urlPath}/reload_bg_image/`,

                                  data:{
                                      'folder_name': bg_folder,
                                      'filename': bg_image,
                                  },
                                  type: "POST",
                                  dataType: "json",
                                  success: function (data) {
                                      $(`.mainDiv`).css("background-image",'url(data:image/png;base64,' + data.image_url )
                                      $(`.mainDiv`).css("background-size",'56em 15em' )
                                      $(`#bg_image_url${saveElementID}`).html("")
                                      $(`#bg_image_url${saveElementID}`).html(data.image_url)
                                      $(`#bg_image_name${saveElementID}`).html("")
                                      $(`#bg_image_name${saveElementID}`).html(data.image_name)
                                      $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-image",'url(data:image/png;base64,' + data.image_url )

                                  }
                              })
                              }
                              }
                              else{
                                $('.global_bg_color').css("display","block")
                              $('.global_bg_image').css("display","none")
                              $(`.mainDiv`).css("background-image",'none' )
                              }


                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-color",bg_x)
                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr("config_background-color",bg_x)
                            $(`#analysisDashboard${saveElementID} .tab-content`).attr("config_background-color",bg_x);
                            $(`#analysisTab${saveElementID}`).find('.nav-link').attr("config_background-color",bg_x);
                              if(bg_x != undefined){
                                $(`#myColor${saveElementID}`).val(bg_x)
                                $(`#main_theme${saveElementID}`).css("background-color",bg_x);
                              }
                              if(gRawData['subTabContent'][0]['outer_color'] != undefined){
                                $(`#theme1${saveElementID}`).css("background-color",gRawData['subTabContent'][0]['outer_color']);
                                $(`#themeColor${saveElementID}`).val(gRawData['subTabContent'][0]['outer_color'])
                              }
                              if(gRawData['subTabContent'][0]['inner_color'] != undefined)
                              {
                                $(`#themegrad${saveElementID}`).css("background-color",gRawData['subTabContent'][0]['inner_color']);
                                $(`#themeColor1${saveElementID}`).val(gRawData['subTabContent'][0]['inner_color'])
                              }

                              if(gRawData['subTabContent'][0]['indexCard_BGColor'] != undefined)
                              {
                                $(`#indextabBG${saveElementID}`).css(gRawData['subTabContent'][0]['indexCard_BGColor']);
                                $(`#indextabBG${saveElementID}`).val(gRawData['subTabContent'][0]['indexCard_BGColor'])
                              }
                              if(gRawData['subTabContent'][0]['indexCard_FontColor'] != undefined)
                              {
                                $(`#indextabFC${saveElementID}`).css("background-color",gRawData['subTabContent'][0]['indexCard_FontColor']);
                                $(`#indextabFC${saveElementID}`).val(gRawData['subTabContent'][0]['indexCard_FontColor'])
                              }

                              if(gRawData['subTabContent'][0]['header_color'] != undefined)
                              {
                                 $(".inner-div_title").css("color",gRawData['subTabContent'][0]['header_color']);
                                $(".global_header_color").val(gRawData['subTabContent'][0]['header_color'])
                              }
                              if(gRawData['subTabContent'][0]['header_bg_color'] != undefined)
                              {
                                $(".inner-div_header").css("background-color",gRawData['subTabContent'][0]['header_bg_color']);
                                $(".global_header_bgcolor").val(gRawData['subTabContent'][0]['header_bg_color'])
                              }
                              if(gRawData['subTabContent'][0]['global_header_alignment'] != undefined)
                              {
                              $(".global_header_alignment").val(gRawData['subTabContent'][0]['global_header_alignment']).trigger("change")
                              }
                              $(".global_header_fontsize").val(gRawData['subTabContent'][0]['header_fontsize'])
                              $(".global_header_fontweight").val(gRawData['subTabContent'][0]['header_fontweight']).trigger("change")
                               $(".global_header_fontstyle").val(gRawData['subTabContent'][0]['header_fontstyle']).trigger("change")
                              $(".inner-div_title").css("font-size",gRawData['subTabContent'][0]['header_fontsize'] + 'px');
                              $(".inner-div_title").css("font-weight",gRawData['subTabContent'][0]['header_fontweight']);
                              $(".inner-div_title").css("font-style",gRawData['subTabContent'][0]['header_fontstyle']);
                              var theme_height = (parseInt(gRawData['subTabContent'][0]['header_fontsize']) + 20) + "px"
                              $(".inner-div_header").css("height",theme_height);
                              if(gRawData['subTabContent'][0]['global_checkBox'] != undefined)
                              {
                                $(".global_shadow").prop('checked',gRawData['subTabContent'][0]['global_checkBox'])
                              }
                              if(gRawData['subTabContent'][0]['global_checkBox_border'] != undefined)
                              {
                                $(".global_border").prop('checked',gRawData['subTabContent'][0]['global_checkBox_border'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowColor'] != undefined)
                              {
                                $(".global_shadow_color").val(gRawData['subTabContent'][0]['global_shadowColor'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowXOffset'] != undefined)
                              {
                                $(".global_shadow_x").val(gRawData['subTabContent'][0]['global_shadowXOffset'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowBlur'] != undefined)
                              {
                                $(".global_shadow_blur").val(gRawData['subTabContent'][0]['global_shadowBlur'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowYOffset'] != undefined)
                              {
                                $(".global_shadow_y").val(gRawData['subTabContent'][0]['global_shadowYOffset'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowThickness'] != undefined)
                              {
                                $(".global_shadow_thickness").val(gRawData['subTabContent'][0]['global_shadowThickness'])
                              }

                              if(gRawData['subTabContent'][0]['global_borderThickness'] != undefined)
                              {
                                $(".global_border_thickness").val(gRawData['subTabContent'][0]['global_borderThickness'])
                              }
                              if(gRawData['subTabContent'][0]['global_borderStyle'] != undefined)
                              {
                                $(".global_border_style").val(gRawData['subTabContent'][0]['global_borderStyle']).trigger("change")
                              }
                              if(gRawData['subTabContent'][0]['global_borderColor'] != undefined)
                              {
                                $(".global_border_color").val(gRawData['subTabContent'][0]['global_borderColor'])
                              }
                              globalBorderFunction()
                              globalShadowFunction()

                            if(gRawData['subTabContent'][0]['g_color'] == "yes"){
                              $('.global_gradient_color').prop('checked', true);
                            }
                            else{
                              $('.global_gradient_color').prop('checked', false);
                            }
                    }
                    } $(`#selectversion${saveElementID}`).val("version1").trigger('change');
                  }


              })
              $(`#selectversion${saveElementID}`).change(function(){
                  var version_name = $(this).val()
                  var group_name = $(`#selectConfig${saveElementID}`).val()
                    for (const [key, gconfig] of Object.entries(versionData["group_config_list"])){
                    if(version_name == gconfig['version_name'] && group_name == gconfig['name'])
                        {
                        $(`#last_updated_time${saveElementID}`).text(gconfig['date'])
                        analysisData_Raw = JSON.parse(gconfig['config'])
                        let indexTab = true;
                        if(analysisData_Raw.hasOwnProperty("tabIndex")){
                          indexTab = analysisData_Raw["tabIndex"];
                        }
                        var gRawData = JSON.parse(gconfig['config'])

                        var tab_object = $(`#analysisDashboard${saveElementID} .tab-content`)
                             var bg_x= gRawData['subTabContent'][0]['tab_background-color']
                            var bg_image= gRawData['subTabContent'][0]['global_bg_name']
                            var bg_folder= gRawData['subTabContent'][0]['global_bg_folder']
                            $(`#bg_image_url${saveElementID}`).html("")
                            $(`#bg_image_url${saveElementID}`).html(bg_image)
                            var global_bg_value = gRawData['subTabContent'][0]['global_bg_value']
                            $(`#global_bg${saveElementID}`).val(global_bg_value).trigger("change")
                            if(global_bg_value == "background_image"){
                              $('.global_bg_color').css("display","none")
                              $('.global_bg_image').css("display","block")
                                if(bg_image != "" || bg_image != undefined)
                            {
                              if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'100% calc(100vw * 9/16)' )
                                  }
                              else if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'1080px calc(100vw * 16/9)' )
                                  }
                              else{
                                $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'100%' )
                              }

                              $.ajax({
                                  url: `/users/${urlPath}/reload_bg_image/`,

                                  data:{
                                      'folder_name': bg_folder,
                                      'filename': bg_image,
                                  },
                                  type: "POST",
                                  dataType: "json",
                                  success: function (data) {
                                      $(`.mainDiv`).css("background-image",'url(data:image/png;base64,' + data.image_url )
                                      $(`.mainDiv`).css("background-size",'56em 15em' )
                                      $(`#bg_image_url${saveElementID}`).html("")
                                      $(`#bg_image_url${saveElementID}`).html(data.image_url)
                                      $(`#bg_image_name${saveElementID}`).html("")
                                      $(`#bg_image_name${saveElementID}`).html(data.image_name)
                                      $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-image",'url(data:image/png;base64,' + data.image_url )

                                  }
                              })
                              }
                              }
                              else{
                                $('.global_bg_color').css("display","block")
                              $('.global_bg_image').css("display","none")
                              $(`.mainDiv`).css("background-image",'none' )
                              }

                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-color",bg_x)
                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr("config_background-color",bg_x)
                            $(`#analysisDashboard${saveElementID} .tab-content`).attr("config_background-color",bg_x);
                            $(`#analysisDashboard${saveElementID} .tab-content`).find('.chartDivSection').css("background-color",bg_x);
                            $(`#analysisTab${saveElementID}`).find('.nav-link').attr("config_background-color",bg_x);
                              if(bg_x != undefined){
                                $(`#myColor${saveElementID}`).val(bg_x)
                                $(`#main_theme${saveElementID}`).css("background-color",bg_x);
                                $("#tabLinks"+saveElementID+" .index-rows").css("background-color",bg_x);
                              }
                              if(gRawData['subTabContent'][0]['outer_color'] != undefined){
                                $(`#theme1${saveElementID}`).css("background-color",gRawData['subTabContent'][0]['outer_color']);
                                $(`#themeColor${saveElementID}`).val(gRawData['subTabContent'][0]['outer_color'])
                              }
                              if(gRawData['subTabContent'][0]['inner_color'] != undefined)
                              {
                                $(`#themegrad${saveElementID}`).css("background-color",gRawData['subTabContent'][0]['inner_color']);
                                $(`#themeColor1${saveElementID}`).val(gRawData['subTabContent'][0]['inner_color'])
                              }


                              if(gRawData['subTabContent'][0]['indexCard_BGColor'] != undefined)
                              {
                                $(`#indextabBG${saveElementID}`).css(gRawData['subTabContent'][0]['indexCard_BGColor']);
                                $(`#indextabBG${saveElementID}`).val(gRawData['subTabContent'][0]['indexCard_BGColor'])
                              } else{
                                $(`#indextabBG${saveElementID}`).css('var(--primary-color)');
                                $(`#indextabBG${saveElementID}`).val('var(--primary-color)')

                              }
                              if(gRawData['subTabContent'][0]['indexCard_FontColor'] != undefined)
                              {
                                $(`#indextabFC${saveElementID}`).css("color",gRawData['subTabContent'][0]['indexCard_FontColor']);
                                $(`#indextabFC${saveElementID}`).val(gRawData['subTabContent'][0]['indexCard_FontColor'])
                              } else {
                                $(`#indextabFC${saveElementID}`).css("color",'#ffffff');
                                $(`#indextabFC${saveElementID}`).val('#ffffff')
                              }

                              if(gRawData['subTabContent'][0]['header_color'] != undefined)
                              {
                                $(".inner-div_title").css("color",gRawData['subTabContent'][0]['header_color']);
                                $(".global_header_color").val(gRawData['subTabContent'][0]['header_color'])
                              }
                              if(gRawData['subTabContent'][0]['header_bg_color'] != undefined)
                              {
                                $(".inner-div_header").css("background-color",gRawData['subTabContent'][0]['header_bg_color']);
                                $(".global_header_bgcolor").val(gRawData['subTabContent'][0]['header_bg_color'])
                              }
                              if(gRawData['subTabContent'][0]['global_header_alignment'] != undefined)
                              {
                              $(".global_header_alignment").val(gRawData['subTabContent'][0]['global_header_alignment']).trigger("change")
                              }
                              $(".global_header_fontsize").val(gRawData['subTabContent'][0]['header_fontsize'])
                              $(".global_header_fontweight").val(gRawData['subTabContent'][0]['header_fontweight']).trigger("change")
                               $(".global_header_fontstyle").val(gRawData['subTabContent'][0]['header_fontstyle']).trigger("change")
                              $(".inner-div_title").css("font-size",gRawData['subTabContent'][0]['header_fontsize'] + 'px');
                              $(".inner-div_title").css("font-weight",gRawData['subTabContent'][0]['header_fontweight']);
                              $(".inner-div_title").css("font-style",gRawData['subTabContent'][0]['header_fontstyle']);
                              var theme_height = (parseInt(gRawData['subTabContent'][0]['header_fontsize']) + 20) + "px"
                              $(".inner-div_header").css("height",theme_height);
                              if(gRawData['subTabContent'][0]['global_checkBox'] != undefined)
                              {
                                $(".global_shadow").prop('checked',gRawData['subTabContent'][0]['global_checkBox'])
                              }
                              if(gRawData['subTabContent'][0]['global_checkBox_border'] != undefined)
                              {
                                $(".global_border").prop('checked',gRawData['subTabContent'][0]['global_checkBox_border'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowColor'] != undefined)
                              {
                                $(".global_shadow_color").val(gRawData['subTabContent'][0]['global_shadowColor'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowXOffset'] != undefined)
                              {
                                $(".global_shadow_x").val(gRawData['subTabContent'][0]['global_shadowXOffset'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowBlur'] != undefined)
                              {
                                $(".global_shadow_blur").val(gRawData['subTabContent'][0]['global_shadowBlur'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowYOffset'] != undefined)
                              {
                                $(".global_shadow_y").val(gRawData['subTabContent'][0]['global_shadowYOffset'])
                              }
                              if(gRawData['subTabContent'][0]['global_shadowThickness'] != undefined)
                              {
                                $(".global_shadow_thickness").val(gRawData['subTabContent'][0]['global_shadowThickness'])
                              }

                              if(gRawData['subTabContent'][0]['global_borderThickness'] != undefined)
                              {
                                $(".global_border_thickness").val(gRawData['subTabContent'][0]['global_borderThickness'])
                              }
                              if(gRawData['subTabContent'][0]['global_borderStyle'] != undefined)
                              {
                                $(".global_border_style").val(gRawData['subTabContent'][0]['global_borderStyle']).trigger("change")
                              }
                              if(gRawData['subTabContent'][0]['global_borderColor'] != undefined)
                              {
                                $(".global_border_color").val(gRawData['subTabContent'][0]['global_borderColor'])
                              }

                              globalBorderFunction()
                              globalShadowFunction()



                            if(gRawData['subTabContent'][0]['g_color'] == "yes"){
                              $('.global_gradient_color').prop('checked', true);
                            }
                            else{
                              $('global_gradient_color').prop('checked', false);
                            }
                        }
                    }

                  if(analysisData_Raw == undefined){

                      $(".chartDivSection").empty()
                      }

              if(analysisData_Raw!=undefined){

                  analysisTabID=analysisData_Raw["ElementID"]
                  let indexTab = true;
                  if(analysisData_Raw.hasOwnProperty("indexTab")){
                    indexTab = analysisData_Raw["indexTab"];
                  }
                  var analysisTableNames = versionData["analysis_table_list"]
                  var mainL3ULID=analysisData_Raw["ParentULID"]
                  var mainTabContainerID=analysisData_Raw["ParentTabContainerID"]
                  $(`#${mainL3ULID}`).empty()
                  $(`#${mainTabContainerID}`).empty()
                  if(indexTab){
                    $(`#${mainL3ULID}`).append(`
                      <li class="nav-item navtab scroll-link">
                        <a class="nav-link" id="indexTab${analysisTabID}" href="#indexTabContent${analysisTabID}" role="tab" data-toggle="tab" aria-controls="#indexTab" aria-selected="true">
                          <div class="row">
                            <div class="col-md-11" style="padding-right: 0.1rem">
                              <span class="tabname1" id="indexTab${analysisTabID}" data-tab="indexTab{analysisTabID}" data-tab_ct="indexTab${analysisTabID}">
                                Index
                              </span>
                            </div>
                          </div>
                        </a>
                      </li>
                      `)
                  }

                    const navUl = document.querySelector('.nav.nav-tabs.nav-fill.analysis-nav');
                    if(navUl.children.length > 4) {
                      navUl.classList.add("scroll-nav")
                    }
                  var interaction
                  var tabs = []
                  for(j in analysisData_Raw["subTabContent"]) {
                    var tabDict=analysisData_Raw["subTabContent"][j];
                    if(!tabDict["aHref"].includes("#indexTabContent")) {
                      tabs.push([tabDict["aHref"], tabDict["subTabName"]])
                    }
                  }
                  tabs = tabs.reverse();

                  // INDEX TAB


                  const updateIndex = (index, val) => {
                    let ind = index.replace('Header', '')
                    const indexTabs = $("#tabLinks").find(".linkCard")
                    Array.from(indexTabs).forEach(ele => {
                      const id = ele.id.replace('index', '');
                      if(id == ind) {
                       $(`#index${id} .tab-title`).text(val)
                      }
                    });
                  }
                  if(indexTab){
                    $(`#${mainTabContainerID}`).append(`
                      <div class="tab-pane fade" id="indexTabContent${analysisTabID}" role="tabpanel" aria-labelledby="indexTab">
                        """
                + f"""<div id="tabLinks${{analysisTabID}}" class="tabLinksclass"  style="max-width: {index_style_width}; """
                + """ margin: auto; border: 0.1px solid black; aspect-ratio: {index_aspect_ratio}; overflow:auto;">
                        </div>
                      </div>
                    `)
                  }

                  tabs.forEach((ele, index) => {
                    let ind = ele[0].split('#')[1];
                    let index1 = tabs.length - index
                    let colo1 = $(".indextabBG").val();
                    let colo2 = $(".indextabFC").val();
                    let markup = `
                    <div class="row" style="box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;border-radius: 5px;margin: 20px 0;align-items: center;display: flex;">
                      <div id="" class="col-2 index-no-column" style="background-color: ${colo1};">
                        <p style="font-size: 1.2rem; color:${colo2}; margin:0;" href="${ele[0]}"> ${index1} </p>
                      </div>
                      <div class="col-10" style="">
                        <div id="index${ind}" style="background-color:${colo1};" class="linkCard defaultTabTheme">
                          <div class="col-10 d-flex align-items-center justify-content-center">
                            <a style="color:${colo2};font-size: 1.2rem;" href="${ele[0]}"> ${ele[1]} </a>
                          </div>
                          <div class="col-1 tab-icons d-flex align-items-center justify-content-center" style="margin:1rem;height:4rem; ">
                            <i class="fa fa-pen" style="color: ${colo2};"></i>
                          </div>
                        </div>
                      </div>
                    </div>
                    ` ;
                    const tabLinks = document.getElementById('tabLinks'+analysisTabID);
                    if(tabLinks != null){
                      tabLinks.insertAdjacentHTML("afterbegin", markup)
                      document.getElementById(`index${ind}`).addEventListener("click", (e) => {
                        e.preventDefault();
                        gotoTab(mainTabContainerID, ind);
                      });
                    }
                  });

                  // REMOVING THE OVERFLOW
                  const clearOverflow = () => {
                    if(document.getElementById('indexTab'+analysisTabID) != null){
                      const t = document.getElementById('indexTab'+analysisTabID).children
                      Array.from(t).forEach(ele => { if(ele.className == "hidden") { ele.parentNode.removeChild(ele) } })
                    }
                  }
                  const overflow = setTimeout(clearOverflow, 250)
                  for(j in analysisData_Raw["subTabContent"]){
                    var tabDict=analysisData_Raw["subTabContent"][j];
                    if (Object.keys(tabDict).includes('crossFilter')) {
                      interaction = tabDict['crossFilter'];
                    } else {
                        interaction = []
                    }
                    if (Object.keys(tabDict).includes('tabSlicerConfig')) {
                        var tabSlicerConfig = tabDict['tabSlicerConfig'];
                    } else {
                        var tabSlicerConfig = {
                            'slicerTable': [],
                            'slicerParameter': [],
                            'slicerBoolean': [],
                            'slicerReload' : [],
                            'multipleSlicer': [],
                        };
                    }
                    var parentId = mainL3ULID.split('analysisTab')[1]
                    var tab_ID = tabDict["aID"].replace('analysistab'+parentId,"");
                    if(!tab_ID.includes("indexTab")) {
                    $(`#${mainL3ULID}`).append(`<li class="nav-item navtab scroll-link"><a class="nav-link" id="${tabDict["aID"]}" href="${tabDict["aHref"]}" role="tab" data-toggle="tab" aria-controls="${tabDict["aHref"]}" aria-selected="false">
                      <div class="row">
                      <div class="col-md-10" style="padding-right: 0.1rem">
                      <span class="contentEditable tabname" id="${tabDict["tabHeaderID"]}" data-tab="${tabDict["chartDivContainer"]}" data-tab_ct="${tabDict["chartDivContainer"]}">${tabDict["subTabName"]}</span>
                      </div>
                      <div class="col-md-2" style="padding-top: 0.3rem">
                      <button type="button" id="${tabDict["deleteButtonID"]}" data-tabAnchorID="${tabDict["aID"]}" data-tabContainerDivID="${tabDict["aHref"].replace("#","")}" style="border-width:0px;padding: 1px 1px;background-color: white;"><i class="fa fa-times" style="font-size:0.9rem;"></i></button>
                      </div>
                      </div>
                      </a></li>`);
                      const deleteButton = document.getElementById(`${tabDict["deleteButtonID"]}`);
                      deleteButton.addEventListener("click", (e) => {
                        const id = e.target.parentNode.id.replace('removeT', 'indext');;
                        const indexTab = document.getElementById('tabLinks');
                        const linkToBeDeleted  = document.getElementById(`${id}`);
                        $(`#${id}`).closest(".row").remove();
                        let ind = 0
                        $("#tabLinks").find(".col-2").each(function() {
                          $(this).find("p").html(++ind)
                        })
                        const navUl = document.querySelector('.nav.nav-tabs.nav-fill.analysis-nav');
                        if(navUl.children.length > 4) {
                          navUl.classList.add("scroll-nav")
                        } else {
                          navUl.classList.remove("scroll-nav")
                        }
                      })
                      }
                      $(`#${mainTabContainerID}`).append(`<div class="tab-pane fade" id="${tabDict["aHref"].replace("#","")}" role="tabpanel" aria-labelledby="${tabDict["aID"]}">
                      <div class="d-flex justify-content-between" style="padding-top:1%">
                      <div class="card-tools tabCardTools row col-12" style="background:whitesmoke; display:flex; flex-direction:row; align-items:center; flex-wrap:wrap; padding-top:2px; padding-bottom:2px;margin:auto">"""
            )
            function_check = button_styling(analysis_button_styling, "analysisaddcomment")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md"""
                    + f"""{function_check['class']} """
                    + """ " id="${tabDict["commentButtonID"]}"  data-toggle="tooltip" title="Add comment" style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>&nbsp;"""
                )
            else:
                html = (
                    html
                    + """<button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="${tabDict["commentButtonID"]}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white; margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
                )
            function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """<button type="button" value="PDF" class=" btn btn-primary """
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """<button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
                )
            function_check = button_styling(analysis_button_styling, "analysisslicer")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """<button type="button" value="slicerConfig" class="btn btn-primary"""
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' data-toggle="modal" data-target="#slicerConfigModal${analysisTabID}${tab_ID}" style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """<button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="${tabDict["tabHeaderID"]}" id='${tabDict["pdfButtonID"]}' data-toggle="modal" data-target="#slicerConfigModal${analysisTabID}${tab_ID}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>"""
                )
            html = (
                html
                + """</div>
                      </div>
                      <div class="col-lg-12 row chartDivSection" """
                + f""" data-layout="{t.get('Layout')}" """
                + """id="${tabDict["chartDivContainer"]}" ondblclick="resetCrossFilter.call(this)"></div>
                      <div class="modal" id="slicerConfigModal${analysisTabID}${tab_ID}">
                        <div class="modal-dialog modal-md modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h6 class="modal-title" style="text-align:center;">Configure slicer</h6>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div class="card">
                                        <div class="card-body">
                                        <div class="card-tools text-primary" style="display:flex; flex-direction:row; align-items:center; justify-content:space-between;">
                                            <label for="">Add slicer</label>
                                            <button type="button" class="btn addOptionBtn" onclick="addSlicers('${analysisTabID}', '${tab_ID}')"><i class="fas fa-plus text-primary" ></i></button>
                                        </div>
                                        <div id="slicerConfigCard${analysisTabID}${tab_ID}" style="max-height: 15.25rem; overflow-y: scroll; overflow-x: hidden;">
                                            <div class="card" data-slicer_class="selectSlicerConfig_${analysisTabID}${tab_ID}">
                                            <div class="card-body">
                                                <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                                <label for="analysisSlicerTable" class="justify-content-start" style="width:100%">Source table:
                                                </label>
                                                <select class="select2 form-control analysisSlicerTable" name="analysisSlicerTable" style="width:100%">
                                                    <option value="">Select source table</option>

                                                </select>
                                                </div>
                                                <div class="form-group" style="flex-direction: column;align-items: baseline;margin-bottom:5px;text-align:left;">
                                                <label for="analysisSlicerParameter" class="justify-content-start" style="width:100%">Slicer parameter:
                                                </label>
                                                <select  class="select2 form-control analysisSlicerParameter" name="analysisSlicerParameter" style="width:100%">
                                                    <option value="">Select slicer parameter</option>
                                                </select>
                                                </div>
                                                <div class = "form-group" style="margin-bottom:5px;text-align:left;">
                                                  <label for="analysisSlicerBoolean">
                                                  <input type="checkbox" class="analysisSlicerBoolean" name="analysisSlicerBoolean" value="True" style="margin-right:10px">
                                                  Add default option for all values</label>
                                                </div>
                                                <div class="form-group" style="margin-bottom:5px;text-align:left;">
                                                  <label>
                                                  <input class="mulcheckbox" type="checkbox" style="margin-right:10px">
                                                  Multiselect Slicer</label>
                                                </div>
                                            </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" id="saveTabSlicerConfig${analysisTabID}${tab_ID}" data-analysis_id="${analysisTabID}" data-tab_id="${tab_ID}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
                                </div>
                            </div>
                        </div>
                      </div>
                      </div>`)
                        var bg_x= gRawData['subTabContent'][0]['tab_background-color']
                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-color",bg_x);
                            $("#tabLinks"+analysisTabID+" .index-rows").css("background-color",bg_x);
                            $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr("config_background-color",bg_x)
                            $(`#analysisDashboard${saveElementID} .tab-content`).attr("config_background-color",bg_x);
                            $(`#analysisTab${saveElementID}`).find('.nav-link').attr("config_background-color",bg_x);
                      if(gRawData['subTabContent'][0]['indexCard_BGColor'] != undefined)
                              {
                                $(`#indextabBG${analysisTabID}`).css(gRawData['subTabContent'][0]['indexCard_BGColor']);
                                $(`#indextabBG${analysisTabID}`).val(gRawData['subTabContent'][0]['indexCard_BGColor'])
                              }
                              if(gRawData['subTabContent'][0]['indexCard_FontColor'] != undefined)
                              {
                                $(`#indextabFC${analysisTabID}`).css("color",gRawData['subTabContent'][0]['indexCard_FontColor']);
                                $(`#indextabFC${analysisTabID}`).val(gRawData['subTabContent'][0]['indexCard_FontColor'])
                              }
                      if($('.chartDivSection').attr('data-layout') == "Landscape") {
                          $('.chartDivSection').css({
                            "background-size": "5% 5%",
                            "width":"100%",
                            "margin":"auto",
                            "aspect-ratio": 16/9,
                            "overflow-y": "hidden",
                            "overflow-x": "hidden",
                          })
                        } else if($('.chartDivSection').attr('data-layout') == "Portrait") {
                          $('.chartDivSection').css({
                            "background-size": "5% 5%",
                            "width":"1080px",
                            "margin":"auto",
                            "aspect-ratio": 9/16,
                            "overflow-y": "hidden",
                            "overflow-x": "hidden",
                          })
                        } else {
                          $('.chartDivSection').css({
                          "width":"92%",
                          "padding-left": "70px",
                          "padding-top": "9px",
                          "padding-right": "9px",
                        })
                        }
                        if($('.chartDivSection').attr('data-layout') == "Landscape" || $('.chartDivSection').attr('data-layout') == "Portrait") {
                          if (Object.keys(tabDict).includes('grid')) {
                              if(tabDict["grid"] == "no") {
                                $(`#${tabDict["chartDivContainer"]}`).css('background-image',"none");
                              } else {
                                $(`#${tabDict["chartDivContainer"]}`).css({"background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)"});
                              }
                          } else {
                            $(`#${tabDict["chartDivContainer"]}`).css({"background-image": "linear-gradient(rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%), linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0.05rem, transparent 0.36%)"});
                          }

                        }

                            var bg_image= gRawData['subTabContent'][0]['global_bg_name']
                            var bg_folder= gRawData['subTabContent'][0]['global_bg_folder']
                            $(`#bg_image_url${saveElementID}`).html("")
                            $(`#bg_image_url${saveElementID}`).html(bg_image)
                            var global_bg_value = gRawData['subTabContent'][0]['global_bg_value']
                            $(`#global_bg${saveElementID}`).val(global_bg_value).trigger("change")
                            if(global_bg_value == "background_image"){
                              $('.global_bg_color').css("display","none")
                              $('.global_bg_image').css("display","block")
                                if(bg_image != "" || bg_image != undefined)
                            {
                              if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Landscape") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'1920px calc(100vw * 9/16)' )
                                  }
                              else if ($(`#analysisTabContent${saveElementID}`).find('.chartDivSection').attr('data-layout') == "Portrait") {
                                  $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'1080px calc(100vw * 16/9)' )
                                  }
                              else{
                                $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-size",'100%' )
                              }

                              $.ajax({
                                  url: `/users/${urlPath}/reload_bg_image/`,

                                  data:{
                                      'folder_name': bg_folder,
                                      'filename': bg_image,
                                  },
                                  type: "POST",
                                  dataType: "json",
                                  success: function (data) {
                                      $(`.mainDiv`).css("background-image",'url(data:image/png;base64,' + data.image_url )
                                      $(`.mainDiv`).css("background-size",'56em 15em' )
                                      $(`#tabLinks`+analysisTabID).css("background-image",'url(data:image/png;base64,' + data.image_url )
                                      $(`#tabLinks`+analysisTabID).css("background-size",'56em 15em' )
                                      $(`#bg_image_url${saveElementID}`).html("")
                                      $(`#bg_image_url${saveElementID}`).html(data.image_url)
                                      $(`#bg_image_name${saveElementID}`).html("")
                                      $(`#bg_image_name${saveElementID}`).html(data.image_name)
                                      $(`#analysisTabContent${saveElementID}`).find('.chartDivSection').css("background-image",'url(data:image/png;base64,' + data.image_url )

                                  }
                              })
                              }
                              }
                              else{
                                $('.global_bg_color').css("display","block")
                              $('.global_bg_image').css("display","none")
                              $(`.mainDiv`).css("background-image",'none' )
                              }


                      fetchSlicerParams();
                      function fetchAnalysisSlicer(tabSlicerConfig, analysisTabID, tabNo) {

                          $.ajax({
                          url: `/users/${urlPath}/processGraphModule/`,
                          data: {
                              'tab_slicer_config': JSON.stringify(tabSlicerConfig),
                              'element_id': analysisTabID,
                              'tab_id': (tabNo),
                              'operation': 'saveAnalysisSlicerConfigL3',
                          },
                          type: "POST",
                          dataType: "json",
                          success: function (data) {
                              var analysisSlicerElementId = data.elementID;
                              var analysisSlicerTabId = data.slicer_tab_id;
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').empty();
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(`"""
            )
            function_check = button_styling(analysis_button_styling, "analysisaddcomment")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """     <button type="button" value="AddComment" class="btn btn-primary commentButton btn-md"""
                    + f"""{function_check['class']} """
                    + """ " id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px;margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>&nbsp;"""
                )
            else:
                html = (
                    html
                    + """     <button type="button" value="AddComment" class="btn btn-primary commentButton btn-md" id="AddComment${analysisSlicerElementId}${analysisSlicerTabId}"  data-toggle="tooltip" title="Add comment" style="height: 25px;border-radius:5px;border-color:none;color:white;margin-top:10px; margin-bottom:10px"><i class='far fa-comment-dots' style="font-size:1rem;"></i></button>&nbsp;"""
                )
            function_check = button_styling(analysis_button_styling, "analysisaddpdftab")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """     <button type="button" value="PDF" class=" btn btn-primary"""
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px;  margin-right:5px;margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """     <button type="button" value="PDF" class=" btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px;  margin-right:5px;margin-top:10px; margin-bottom:10px"><i class="fa fa-file-pdf-o"></i>&nbsp;PDF</button>"""
                )
            function_check = button_styling(analysis_button_styling, "analysisslicer")
            if function_check is not None:
                styling_to_put = function_check["styling"].replace("'", "")
                html = (
                    html
                    + """     <button type="button" value="slicerConfig" class="btn btn-primary """
                    + f"""{function_check['class']} """
                    + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style=" """
                    + f"""{styling_to_put}"""
                    + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                    + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                    + """>"""
                    + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                    + """</button>"""
                )
            else:
                html = (
                    html
                    + """     <button type="button" value="slicerConfig" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='slicerConfig${analysisSlicerElementId}${analysisSlicerTabId}' data-toggle="modal" data-target="#slicerConfigModal${analysisSlicerElementId}${analysisSlicerTabId}" style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px"><i class="fas fa-filter"></i>&nbsp;Slicer</button>"""
                )
            if t.get("Layout") != "No layout":
                function_check = button_styling(analysis_button_styling, "analysisgridlines")
                if function_check is not None:
                    styling_to_put = function_check["styling"].replace("'", "")
                    html = (
                        html
                        + """<button type="button" value="gridLines" class="btn btn-primary"""
                        + f"""{function_check['class']} """
                        + """ " data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style=" """
                        + f"""{styling_to_put}"""
                        + """border-radius:5px; margin-right:10px; margin-top:10px; margin-bottom:10px" """
                        + f"""onMouseOver={function_check['onMouseOver']} onMouseOut={function_check['onMouseOut']}"""
                        + """ onclick="gridLine.call(this)">"""
                        + f"""{function_check['iconAppend']} {function_check['changeText']}"""
                        + """</button>"""
                    )
                else:
                    html = (
                        html
                        + """<button type="button" value="gridLines" class="btn btn-primary" data-tabHeaderID="tabHeader${analysisSlicerElementId}${analysisSlicerTabId}" id='gridLines${analysisSlicerElementId}${analysisSlicerTabId}' style="height: 25px;border-radius:5px;border-color:none;color:white;padding-left:9px;padding-top:2px; margin-right:10px; margin-top:10px; margin-bottom:10px" onclick="gridLine.call(this)"><i class="fa fa-table"></i>&nbsp;Grid lines</button>"""
                    )
            html = (
                html
                + """ `);

                              let tabSlicerConfigOutput = data[analysisSlicerTabId];
                              let analysis_additional_config = tabSlicerConfigOutput.analysis_additional_config;
                              if (analysis_additional_config == "slicer_config") {
                              let slicerTables = tabSlicerConfigOutput.slicerTable;
                              let slicerParameters = tabSlicerConfigOutput.slicerParameter;
                              let slicerParameterValues = tabSlicerConfigOutput.slicer_parameter_values;
                              let mapDict = tabSlicerConfigOutput.mappingDict
                              let slicerBooleans = tabSlicerConfigOutput.slicerBoolean;
                              let slicerReloadValue = tabSlicerConfigOutput.slicerReload;
                              let multipleSlicer = tabSlicerConfigOutput.multipleSlicer;
                              var html = '';
                              for(let i = 0; i < slicerParameterValues.length; i++) {
                                  let attr_ = 'data-value = ""'
                                  let multiple = "";
                                  if(slicerReloadValue != undefined){
                                    if (slicerReloadValue.length != 0) {
                                      attr_ = 'data-value' + `= '${JSON.stringify(slicerReloadValue[i])}'`
                                    }
                                  }
                                  if(multipleSlicer != undefined){
                                    if(multipleSlicer.length > 0){
                                      if(multipleSlicer[i]){
                                        multiple = "multiple";
                                      }
                                    }
                                  }
                                  html = html + `
                                  <div class="form-inline" style="margin-bottom:5px;text-align:left;">
                                  <span class="text-primary" margin-right:10px; margin-left:10px;">${mapDict[i][slicerParameters[i]]}:</span>
                                   <select class="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId} select2 form-control slicerParamValue${analysisSlicerElementId}" data-tab="${analysisSlicerTabId}" data-slicertable="${slicerTables[i]}" data-slicerColumn= "${slicerParameters[i]}" ${attr_} data-id="selectSlicerConfig_${analysisSlicerElementId}${analysisSlicerTabId}" style="width:150px;display:inline-block;" ${multiple}>`
                                      if(slicerBooleans != undefined){
                                        if (slicerBooleans.length != 0) {
                                          if(slicerBooleans[i] == 'True'){
                                            html = html + `<option value="" selected>All</option>`
                                          }
                                        }
                                      }
                                  for(let slc_val = 0; slc_val < slicerParameterValues[i].length; slc_val++) {
                                    if(slicerParameterValues[i][slc_val] != ''){
                                      html = html + `<option value="${slicerParameterValues[i][slc_val]}">${slicerParameterValues[i][slc_val]}</option>`
                                    }
                                  }
                                  html = html +
                                  `</select>
                                  </div>
                                  `
                              }
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').append(html);
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('select').each(function(){
                                parent = $(this).parent()
                                $(this).select2({dropdownParent:parent})
                              })
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("max-height","55px");
                              $(`#tab${analysisSlicerElementId}${analysisSlicerTabId}`).find('.card-tools.tabCardTools').find('.select2').parent().find(".select2-container").css("overflow-y","scroll");
                              }
                                slicerChangeUpdatePlots();
                                $(`#analysisPDF${analysisSlicerElementId}${analysisSlicerTabId}`).click(async function(){
                                    function sleep(ms) {
                                        return new Promise(resolve => setTimeout(resolve, ms));
                                      }
                                        var buttonText = $(this).html()
                                        $(this).html(`<i class="fa fa-circle-notch fa-spin"></i> Loading`);
                                        $(this).parent().attr("data-html2canvas-ignore", true);
                                        $('.nav-tabs').attr("data-html2canvas-ignore", true);
                                        $(`#${$(this).parent().parent().next().attr('id')}`).css('border','none')
                                        var layout_old = $(`#${$(this).parent().parent().next().attr('id')}`).attr('data-layout')
                                        $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display','none')
                                        $('body').css('pointer-events','none')
                                        $('body').css('background-color','black')
                                        $('body').css('opacity',0.5)
                                        $('body').css('overflow-y','hidden')
                                        $(document).scrollTop(0);
                                        await sleep(1000);
                                        page_section = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent();
                                        HTML_Width = page_section.width();
                                        HTML_Height = page_section.height();
                                        top_left_margin = 5;
                                        PDF_Width = HTML_Width + (top_left_margin * 2);
                                        PDF_Height = (PDF_Width * 1.2) + (top_left_margin * 2);
                                        pdfName=$(`#${$(this).attr('data-tabHeaderID')}`).text()

                                        var wid = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0].offsetWidth
                                        var hei = $(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0].offsetHeight
                                        await html2canvas($(`#${$(this).parent().parent().next().attr('id')}`).parent().parent().parent()[0], { useCors: true, allowTaint: true }).then(function(canvas) {
                                          canvas_image_height= HTML_Height
                                          canvas_image_width=HTML_Width
                                          var imgData = canvas.toDataURL('image/png');
                                          var doc = new jsPDF("l","px",[wid,hei]);
                                          doc.addImage(imgData, 'PNG',0,0,doc.internal.pageSize.width, doc.internal.pageSize.height);
                                          doc.save(pdfName);
                                          $('.tab-content').find('.tab-pane').find('.card-body').find('.tab-content').find('.tab-pane').find('.chartDivSection').find('.charts').find('.card-header').find('.row').find('i').css('display','inline-block')
                                          $(`#${tabDict["pdfButtonID"]}`).html(`<i class="fa fa-file-pdf-o"></i>&nbsp;PDF`)
                                        });
                                        $(this).empty();
                                        $(this).html(buttonText);
                                        if(layout_old != "No layout") {
                                          $(`#${$(this).parent().parent().next().attr('id')}`).css('border',"solid black 0.1px")
                                        }
                                        $('.nav-tabs').removeAttr("data-html2canvas-ignore");
                                        $(this).parent().removeAttr("data-html2canvas-ignore");
                                        $('body').css('pointer-events','')
                                        $('body').css('background-color','')
                                        $('body').css('opacity','')
                                        $('body').css('overflow-y','')
                                  })
                                    $(`#AddComment${analysisSlicerElementId}${analysisSlicerTabId}`).click(function(){
                                      var id_ = ('analysisEditor' + Math.random()).replace('.',"");// $(this).attr('id').split('AddComment')[1];
                                      $(this).parent().parent().next().append(`
                                        <div class="small-box commentboxcard" data-id="${id_}" id = "${id_}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="min-height:6rem;min-width:6rem;height:6rem;width:9rem;" >
                                          <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                                            <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                                            <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                                            <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                                          </div>
                                          <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">

                                          </div>
                                        </div>`)
                                      $(".commentboxcard").resizable();
                                      $('.contentEditable').each(function () {
                                          $(this).on('click', function () {
                                            $(this).attr("contenteditable", "true")
                                            $(this).focus()
                                          })
                                          $(this).focusout(function () {
                                              var content = this.innerText
                                              content = content.trim()
                                              if (content.length == 0){
                                                this.innerText = "Enter text here."
                                                $(this).removeAttr("contenteditable");
                                                $(this).trigger("click")
                                              }
                                              else{
                                              $(this).removeAttr("contenteditable");
                                              }
                                          })
                                        })
                                      $('.deleteCommentBox').click(function () {
                                          $(this).parent().parent().remove()
                                      })
                                      $(".commentboxcard").draggable({
                                          cancel: '',
                                          containment: "parent",
                                      });
                                  })
                          },
                          error: function () {
                              Swal.fire({icon: 'error',text: 'Error! Failure in fetching the columns. Please try again.'});
                          }
                          });
                      }
                      fetchAnalysisSlicer(tabSlicerConfig, analysisTabID, tab_ID);

                    //   Updating slicer config
                      $(`#saveTabSlicerConfig${analysisTabID}${tab_ID}`).off('click').on('click', function(){
                          let anlysisElementId = $(this).attr('data-analysis_id');
                          let analysistabNo = $(this).attr('data-tab_id');
                          var analysisSlicerTabDict = {
                            "TabID":tab_ID,
                            "slicerTable":[],
                            "slicerParameter":[],
                            "slicerBoolean" :[],
                            "slicerReload":[],
                            "multipleSlicer":[]
                          }
                          $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerTable').each(function() {
                              analysisSlicerTabDict["slicerTable"].push($(this).val());
                          });
                          $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerParameter').each(function() {
                              analysisSlicerTabDict["slicerParameter"].push($(this).val());
                          });
                          $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerParameter').each(function() {
                              analysisSlicerTabDict["slicerParameter"].push($(this).val());
                          });
                          $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.mulcheckbox').each(function() {
                              if ($(this).is(":checked")){
                                analysisSlicerTabDict["multipleSlicer"].push(true);
                              }else{
                                analysisSlicerTabDict["multipleSlicer"].push(false);
                              }
                          });
                          $(`#slicerConfigCard${anlysisElementId}${analysistabNo}`).find('.card').find('.analysisSlicerBoolean').each(function() {
                            if ($(this).is(":checked")){
                              analysisSlicerTabDict["slicerBoolean"].push("True")
                            }else {
                              analysisSlicerTabDict["slicerBoolean"].push("False")
                            }
                          });
                          fetchAnalysisSlicer(analysisSlicerTabDict, anlysisElementId, (analysistabNo));
                          slicerChangeUpdatePlots();
                      });

                      $(`#slicerConfigCard${analysisTabID}${tab_ID}`).empty()
                        for (let slicer=0; slicer < tabSlicerConfig.slicerTable.length; slicer++) {
                            addSlicers(analysisTabID, tab_ID);
                            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").empty()
                            for (var table of analysisTableNames) {
                                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").append(`<option value="${table}">${table}</option>`)
                            };
                            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").val(tabSlicerConfig.slicerTable[slicer]).trigger('select2:select');
                            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerTable").val(tabSlicerConfig.slicerTable[slicer]).trigger('change');
                            if(tabSlicerConfig.slicerBoolean != undefined){
                              if (tabSlicerConfig.slicerBoolean.length > 0) {
                                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerBoolean").prop("checked", tabSlicerConfig.slicerBoolean[slicer])
                              }
                            }
                            if(tabSlicerConfig.multipleSlicer != undefined && tabSlicerConfig.multipleSlicer.length > 0){
                              if( tabSlicerConfig.multipleSlicer[slicer] != undefined){
                                $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".mulcheckbox").prop("checked", tabSlicerConfig.multipleSlicer[slicer])
                              }
                            }
                            if($(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam') != undefined){
                              $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam').removeAttr(data-slicerParam)
                            }
                            $(`#slicerConfigCard${analysisTabID}${tab_ID}`).find('.card').eq(slicer).find(".analysisSlicerParameter").attr('data-slicerParam', tabSlicerConfig.slicerParameter[slicer])


                        }

                      $(`#${tabDict["chartDivContainer"]}`).append($(`<div class="hidden" style="height:${tabDict["chartDivContainerHeight"]+"px"}">`));"""
            )
            if t.get("Layout") == "No layout":
                html = html + """ $('.chartDivSection').resizable();"""
            html = (
                html
                + """ $(`#${tabDict["deleteButtonID"]}`).click(function(){
                        var tabAnchorID=$(this).attr('data-tabAnchorID')
                        var tabContainerDivID=$(this).attr('data-tabContainerDivID')
                        $(`#${tabAnchorID}`).parent().remove()
                        $(`#${tabContainerDivID}`).remove()
                      })


                      $('.contentEditable').each(function () {
                      $(this).on('click', function () {
                        $(this).attr("contenteditable", "true")
                        $(this).focus()
                      })
                      $(this).focusout(function () {
                        var tab_header = this.innerText
                        tab_header = tab_header.trim()
                        if (tab_header.length == 0){
                          this.innerText = "Set Name"
                          $(this).removeAttr("contenteditable");
                          $(this).addClass("bg-danger")
                          $(this).trigger("click")

                        }
                        else{
                        $(this).removeAttr("contenteditable");
                        $(this).removeClass("bg-danger")
                        }
                    })
                    })

                }

                const editables = document.getElementsByClassName('contentEditable tabname');
                  Array.from(editables).forEach(ele => {
                    ele.addEventListener("blur", (e) => {
                      updateIndex(ele.id, ele.textContent)
                    })
                });

                for(k in analysisData_Raw["subTabChartDetails"]){
                    var chartDict=analysisData_Raw["subTabChartDetails"][k]

                    var parentContainerID=chartDict["ParentContainerID"]
                    var chartJson=chartDict["chartJson"]
                    for(i in chartJson){
                        var filters = chartJson[i].filters
                        var filter_input_final = chartJson[i].filter_input_final
                        var plotType = chartJson[i].chartType;
                        if(plotType=="Textbox"){
                            if(!chartJson[i].hasOwnProperty('id_text_editor')) {
                            $(`#${parentContainerID}`).append(`<div class="small-box commentboxcard" data-id="${id_text_editor}" id = "${id_text_editor}" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};">
                              <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                                <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                                <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                                <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                              </div>
                              <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
                              ${chartJson[i].textboxvalue}
                              </div>
                            </div>`)
                          } else {
                            var id_text_editor =  chartJson[i].id_text_editor
                            $(`#${parentContainerID}`).append(`

                                <div class="small-box commentboxcard" onmouseenter="showTool.call(this)" onmouseleave="hideTool.call(this)" data-id="${id_text_editor}" id = "${id_text_editor}" style="position:absolute;min-height:6rem;min-width:6rem;height:${chartJson[i].height+"px"};width:${chartJson[i].width+"px"};top:${chartJson[i].position.top+"px"};left:${chartJson[i].position.left+"px"};">
                                  <div class="row"  style="position:absolute; margin-left:100%; display:none;flex-wrap:wrap;">
                                    <i class="fa fa-times deleteCommentBox" title="Delete" style="font-size:1rem;margin-right:0.5rem;margin-left:1px;margin-bottom:2px;"></i>
                                    <i class='fas fa-edit' onclick="ckEditorFunc.call(this)" style="font-size:1rem;margin-right:0.5rem;margin-bottom:2px;"></i>
                                    <i class="fa fa-arrows" style="font-size:1rem;margin-right:0.5rem;"></i>
                                  </div>
                                  <div class="commentbox contentEditable" name="comment" style="margin-top:1rem;max-height: 75%;padding: 0.3em 0.5em 0 0.5em;background-color: transparent;text-align: left;overflow-y: auto;">
                                  ${chartJson[i].textboxvalue}
                                  </div>
                                </div>`);
                            }
                            $(".commentboxcard").resizable();
                            $('.contentEditable').each(function () {
                                $(this).on('click', function () {
                                  $(this).attr("contenteditable", "true")
                                  $(this).focus()
                                })
                                $(this).focusout(function () {
                                    var content = this.innerText
                                    content = content.trim()
                                    if (content.length == 0){
                                      this.innerText = "Enter text here."
                                      $(this).removeAttr("contenteditable");
                                      $(this).trigger("click")
                                    }
                                    else{
                                    $(this).removeAttr("contenteditable");
                                    }
                                })
                              })
                                $(`#${parentContainerID}`).find('.deleteCommentBox').click(function () {
                                    $(this).parent().parent().remove()
                                })
                                $(`#${parentContainerID}`).find(".commentboxcard").draggable({
                                    cancel: '',
                                    containment: "parent",
                                });
                        }
                        else{
                            var tab_id = parentContainerID
                                      var height = chartJson[i].height;
                                      var width = chartJson[i].width;
                                      var position = chartJson[i].position;
                                      var config_gridlines = chartJson[i].config_gridlines;
                                      var layout = chartJson[i].layout;
                                      var graph_subtype = chartJson[i].graph_subtype;
                                      var chartDivId = chartJson[i].id;
                                      var graphdata = chartJson[i].data;
                                      var x_axis = chartJson[i].x_axis;
                                      var y_axis = chartJson[i].y_axis;

                                      var computed_number = chartJson[i].computed_number;
                                      var is_title = chartJson[i].is_title;
                                      var img_icon = chartJson[i].img_icon;
                                      var title_value = chartJson[i].title_value;
                                      var operation_n = chartJson[i].operation_n;
                                      var agg_distinct = chartJson[i].agg_distinct;

                                      var second_column = chartJson[i].second_column;
                                      var operation = chartJson[i].operation;
                                      var operation_line = chartJson[i].operation_line;
                                      var titlefontsize = chartJson[i].titlefontsize;
                                      var valuefontsize = chartJson[i].font_size;
                                      var chart_title = chartJson[i].chart_title;
                                      var data_value = chartJson[i].data_value;
                                      var config_valuesize = chartJson[i].config_valuesize;
                                      var config_titlesize = chartJson[i].config_titlesize;
                                      var config_data_value = chartJson[i].config_data_value;
                                      var backgroundcolor = chartJson[i].backgroundcolor;
                                      var changed_text = chartJson[i].changed_text;
                                      var chartheader = chartJson[i].chartheader;
                                      var filters=JSON.stringify(chartJson[i].filters);
                                      var line_column=chartJson[i].line_column;
                                      var tableName=chartJson[i].tableName;
                                      var config_color = chartJson[i].config_color;
                                      var config_labels = chartJson[i].config_labels;
                                      var config_xrange = chartJson[i].config_xrange;
                                      var config_yrange = chartJson[i].config_yrange;
                                      var config_x_axis_title = chartJson[i].config_x_axis_title;
                                      var legend_x = chartJson[i].legend_x;
                                      var legend_y = chartJson[i].legend_y;
                                      var config_label_placement = chartJson[i].config_label_placement;
                                      var config_y_axis_title = chartJson[i].config_y_axis_title;
                                      var config_element_color = chartJson[i].config_element_color;
                                      var element_label = chartJson[i].element_label;
                                      var slicerColumnId = tab_id.replace("analysisrow", "selectSlicerConfig_")
                                      var color = chartJson[i].color;
                                      var plot_bg_color = chartJson[i].plot_bg_color;
                                      var global_bg = chartJson[i].global_bg;
                                      var grad_color = chartJson[i].grad_color;
                                      var global_bgcolor = chartJson[i].global_bgcolor;
                                      var global_ind_color = chartJson[i].global_ind_color;
                                      var total_y = chartJson[i].total_y;
                                      var total_L = chartJson[i].total_L;
                                      var data_shadowon = chartJson[i].data_shadowon;
                                      var data_shadecolor = chartJson[i].data_shadecolor;
                                      var data_shadowX = chartJson[i].data_shadowX;
                                      var data_shadowY = chartJson[i].data_shadowY;
                                      var data_shadowblurry = chartJson[i].data_shadowblurry;
                                      var data_borderColor = chartJson[i].data_borderColor;
                                      var data_borderStyle = chartJson[i].data_borderStyle;
                                      var data_borderon = chartJson[i].data_borderon;
                                      var data_borderThickness = chartJson[i].data_borderThickness;
                                      var data_shadowThick = chartJson[i].data_shadowThick;
                                      var header_fontsize = chartJson[i].header_fontsize;
                                      var header_fontweight = chartJson[i].header_fontweight;
                                      var header_fontstyle = chartJson[i].header_fontstyle;
                                      var header_alignment = chartJson[i].header_alignment;
                                      var header_color = chartJson[i].header_color;
                                      var header_bgcolor = chartJson[i].header_bgcolor;
                                      var conditional_table = chartJson[i].conditional_table;
                                      var slicerColumnId = tab_id.replace("analysisrow", "selectSlicerConfig_")
                                      var slicerColumnValue = []
                                      var slicerColumn = []



                                    for (let i = 0; i < $(`.${slicerColumnId}`).length; i++) {
                                        slicerColumnValue.push($(`.${slicerColumnId}`).eq(i).val());
                                        slicerColumn.push($(`.${slicerColumnId}`).eq(i).attr("data-slicerColumn"))
                                    }

                                     var plotDict = {'is_title':is_title,'title_value':title_value,"conditional_table":conditional_table, "img_icon" : img_icon ,"header_alignment":header_alignment,"header_fontstyle":header_fontstyle,"header_fontsize":header_fontsize,"header_fontweight":header_fontweight, "header_color":header_color,"header_bgcolor":header_bgcolor,"data_shadowon":data_shadowon, "data_shadecolor":data_shadecolor, "data_shadowX":data_shadowX, "data_shadowY":data_shadowY, "data_shadowblurry":data_shadowblurry, "data_shadowThick":data_shadowThick, "data_borderColor":data_borderColor, "data_borderStyle":data_borderStyle, "data_borderon":data_borderon, "data_borderThickness":data_borderThickness,'total_y':total_y, 'total_L':total_L,'color':color,'plot_bg_color':plot_bg_color,'global_bg':global_bg,'grad_color':grad_color,'global_bgcolor':global_bgcolor,'global_ind_color':global_ind_color,"element_label":element_label,"config_element_color":config_element_color,"config_data_value":config_data_value,"config_valuesize":config_valuesize,"config_titlesize":config_titlesize, "config_label_placement":config_label_placement,"legend_x":legend_x,"legend_y":legend_y,'computed_number':computed_number,'operation_n':operation_n,"agg_distinct":agg_distinct, "operation": operation, "operation_line": operation_line,"tableName":tableName, "filters":filters,"line_column":line_column,"chartheader": chartheader, "chart_title": chart_title,"data_value":data_value, "x_axis": x_axis, "y_axis": y_axis, "second_column": second_column,  'graph_subtype': graph_subtype, 'tab_id': tab_id, 'height': height, 'width': width, 'data': graphdata, 'layout': layout, 'chartDivId': chartDivId, "position": position, "backgroundcolor": backgroundcolor, "titlefontsize": titlefontsize, "valuefontsize": valuefontsize,"titlefontsize": titlefontsize, "config_color":config_color,"config_xrange":config_xrange,"config_yrange":config_yrange,"config_gridlines":config_gridlines,"config_labels":config_labels,"config_x_axis_title":config_x_axis_title,"config_y_axis_title":config_y_axis_title,"changed_text": changed_text,"filters":filters,'filter_input_final': JSON.stringify(filter_input_final),}
                                    plotFunction(plotDict, slicerColumn="", slicerColumnValue="", slicerColumnId=slicerColumnId,existingDivId=chartDivId)

                                    slicerChangeUpdatePlots();
                        }

                    }
                }
                var i = 1
                setTimeout(() => {
                    $('.chartDivSection').find('.charts').each(function() {
                        var idPlot = $(this).attr('id').split('card')[0]
                        if(interaction.length > 0) {
                            if(interaction[i-1]) {
                                $('#'+idPlot+'interaction').attr('checked','checked')
                            } else {
                                $('#'+idPlot+'interaction').prop('checked',false)
                            }
                        } else {
                            $('#'+idPlot+'interaction').attr('checked','checked')
                        }
                        i = i + 1;
                    })

                },5000)
                if (Object.keys(analysisData_Raw).includes('slicerTabConnectDict')) {
                    slicerTabConnectDict = analysisData_Raw['slicerTabConnectDict'];
                }
                $(`#analysisDashboard${analysisTabID} .nav-tabs a`).first().tab('show')
                $(`#analysisDashboard${saveElementID} .nav-tabs a`).first().tab('show');
              }
              });


            }, error: () => {

            }
          })
        """
            )
        html = (
            html
            + """
        var analysisDataRaw;
        var analysisTabConfigDataRaw = {};
        </script>

        <script>

        """
        )
        if t["tab_type"] == "analysis":
            html = (
                html
                + f""" chartSaveEleId = '{element_id}';
          if(!analysiselementIDList.includes('{element_id}')){{
              analysiselementIDList.push("{element_id}");
          }}
          """
            )
        if t["tab_type"] == "list_view":
            html = (
                html
                + f"""
            if(!chartSaveEleIdList.includes('{element_id}')){{
              chartSaveEleIdList.push("{element_id}");
            }}; """
            )
        html = html + """</script>"""

        html = (
            html
            + """
          <script>
            $("#drilldownmodal").find('.modal-body').find('.nav-item>a').on("click",function(){
              $("#myTabContentJust").find('.tab-pane').css('display', 'none');
              let tabPane = $(this).attr('href');
              $(tabPane).css('display', 'block');
            });
          </script>
        """
        )
    if view == "ocr":
        html = (
            html
            + f"""
        <script>
            var ocrIdList = [];
            ocrIdList.push("{element_id}")
            """
            + r"""$(".custom-file-input").on("change", function() {
            var fileName = $(this).val().split("\\").pop();
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
          });
        </script>
        """
            + """
        <script src="{% static 'js/Kore_TI_js/ocr/ocr.min.js' %}" defer></script>"""
        )
    if view == "computation":
        html = (
            html
            + f"""
        <script>
          computationElementIdsArray.push("{element_id}");
        """
        )
        if t["previous_run"] == "yes":
            html += f"""
          previousRunComputeElementIdArray.push("{element_id}")
          """
        else:
            pass
        html += (
            r"""
        $(".custom-file-input").on("change", function() {
          var fileName = $(this).val().split("\\").pop();
          $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });"""
            + """
        if ($('form').find("input[name='csrfmiddlewaretoken']").attr('value') != undefined) {
            var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
            $.ajaxSetup({
                beforeSend: function (xhr, settings) {
                    xhr.setRequestHeader("X-CSRFToken", ctoken);
                }
            });
        }
        function flowUICreator(elementsArray,container,element_id,data,configs) {
          var count = 0
          for (let k in elementsArray){
            if (elementsArray[k]['group'] =='nodes'){
              if (elementsArray[k]['data']['id'] in configs){
                elementsArray[k]['data']['text'] = configs[elementsArray[k]['data']['id']]
              }
              count ++
            }
          }
          if (count >= 5){
            container.css('height','20rem');
          }
          if (configs['shapes_options_text'] =='inside'){
            var styles = {
              'shape': configs['shapes_options'],
              'label': 'data(text)',
              'text-valign': 'center',
              'font-size': configs['font-size'],
              'color':configs['font-color'],
              'width': configs['shape_width'],
              'height': configs['shape_height'],
              'text-wrap': 'wrap',
              'text-max-width': `${String(configs['shape_width'])}px`,
            }
          }else{
            var styles = {
              'shape': configs['shapes_options'],
              'label': 'data(text)',
              'font-size': configs['font-size'],
              'color':configs['font-color'],
              'width': configs['shape_width'],
              'height': configs['shape_height'],
              'text-wrap': 'wrap',
              'text-max-width': `${String(configs['shape_width'])}px`,
            }
          }
          var cy = cytoscape({
            container: container,
            zoomingEnabled: false,
            userZoomingEnabled: false,
            elements: elementsArray,
            style: [
              {
                selector: 'node',
                style: styles,
              },
              {
                selector: 'edge',
                style: {
                  width: 1
                }
              }
            ],
            layout: {
              name: "dagre",
              rankDir: "LR",
              padding: 10,
              spacingFactor: 1.25,
              fit: true,
              nodeDimensionsIncludeLabels: true,
              avoidOverlap: true,
              pan: { x: 200, y: 100 }
            }
          });
          if (data != undefined){
            cy.nodes().forEach(function(ele, i, eles){
              for (let k in data){
                if (data[k]['element_id'] == ele.id()){
                  if (data[k]['current_status'] == 'Pass'){
                    ele.css('background-color','#4bb543')
                  }
                }
              }
            });
          }else{
            flag = true
            cy.nodes().forEach(function(ele, i, eles){
              if(flag){
                ele.css('background-color','#4bb543')
              }
              if (element_id == ele.id()){
                flag = false
              }
            });
          }
        }
        function processDesignDiv_compute(obj){
          var eleId = $(obj).attr('data-id')
          $(obj).parent().parent().find('.processflowdiv').toggleClass("displaynone")

          if ($(obj).parent().parent().find('.processflowdiv').hasClass("displaynone") == false){
            $(obj).prev().find('.stepper-wrapper').empty()
            if ($(obj).attr('data-trans')!= undefined){
              if ($(obj).attr('data-trans')!=''){
                var trans_code = $(obj).attr('data-trans')
                var flag = true
                if (trans_code.startsWith("[")){
                  trans_code = JSON.parse(trans_code)
                  trans_code = trans_code[0]
                  flag = true
                }else if (trans_code == "NULL") {
                  trans_code = ''
                  flag = false
                }
                if (flag){
                  $.ajax({
                    url:`/users/${urlPath}/dynamicVal/`,
                    data: {
                    "operation":"fetch_process_flow_model_trans",
                    'trans_code':trans_code,
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                    flowUICreator(data.data,$(obj).closest('.modal-body').find('.processflowdiv'),eleId,data.flow,JSON.parse($(obj).attr('data-list')))
                    },
                    failure: function () {
                      Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                    },
                  })
                }

              }
            }else{
              $.ajax({
                url:`/users/${urlPath}/dynamicVal/`,
                data: {
                "operation":"fetch_process_flow_model_xml",
                'sub_pr_code':$(obj).attr('data-sub-process'),
                'pr_code':$(obj).attr('data-process'),
                },
                type: "POST",
                dataType: "json",
                success: function (data) {
                  flowUICreator(data.elements_list,$(obj).closest('.card-body').find('.processflowdiv'),eleId,undefined,JSON.parse($(obj).attr('data-list')))
                },
                failure: function () {
                  Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                },
              })
            }

          }

          $(obj).toggleClass("rotate")
        }"""
        )
        if tab_body_content.get("button_config") is not None:
            if tab_body_content["button_config"].get("scenario_config_btn") is True:
                html = (
                    html
                    + r"""
            $.ajax({
              url: `/users/${urlPath}/computationModule/`,
              data: {
                'model': $("#modelName_"""
                    + f"""{element_id}"""
                    + """").attr("data-model_name"),
                'operation': 'fetch_saved_scenarios',
              },
              type: "POST",
              dataType: "json",
              success: function (data) {
                if (Object.keys(data.scenarios).length>0) {
                  for (let scn of data.scenarios) {
                    $("#savedScenarioTable_"""
                    + f"""{element_id}"""
                    + """").append(
                      `<tr>
                        <td style="text-align: center;" data-scenario_id="${scn.scenario_id}">${scn.scenario_name}</td>
                        <td style="text-align: center;">
                          <i class="fas fa-trash deleteSavedScenario text-primary" data-scenario_id="${scn.scenario_id}" data-element_id='"""
                    + f"""{element_id}"""
                    + """' data-title="Delete scenario"></i>
                          <i class="fa fa-eye text-primary"" onclick="viewCompScenario.call(this)" data-scenario_id="${scn.scenario_id}" data-element_id='"""
                    + f"""{element_id}"""
                    + """' data-title="View scenario"></i>
                        </td>
                      </tr>`
                    );
                    $(".deleteSavedScenario").off("click").on("click", function(){
                      deleteCompScenario(this);
                    });
                  }
                }
              },
              error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Failure in fetching the saved scenarios. Please try again.'});
              }
            });"""
                )
                html = (
                    html
                    + r"""
            function deleteCompScenario(This) {
              var scenario_id = $(This).attr("data-scenario_id");

              $.ajax({
                url: `/users/${urlPath}/computationModule/`,
                data: {
                  'scenario_id': scenario_id,
                  'operation': 'delete_saved_scenarios',
                },
                type: "POST",
                dataType: "json",
                success: function (data) {
                  $(This).parent().closest("tr").remove();
                  Swal.fire({icon: 'success',text: 'Scenario deleted successfully!'});
                },
                error: ()=>{
                  Swal.fire({icon: 'error',text: 'Error! Failure in deleting the saved scenario. Please try again.'});
                }
              });
            }

            function initialise_table_results(table_id,element_id){
              data_table = $(`#${table_id}_${element_id}`).DataTable({
              "autoWidth": true,
              "scrollY": 400,
              "scrollX": 300,
              "scrollCollapse": true,
              "sScrollXInner": "100%",
              "ordering":false,
              orderCellsTop: true,
              responsive: true,
              colReorder: {
              fixedColumnsLeft: 1
              },
              // stateSave: true,
              "deferRender": true,
              "paging": true,
              "lengthMenu": [[1, 5, 50, -1], [1, 5, 50, "All"]],
              stripeClasses: false,
              "pageLength": 50,
              dom: 'lfBrtip',
              buttons: [
                  {
                  extend: 'collection',
                  text: 'Export',
                  buttons: [
                      {
                      extend: 'copy', title: '', exportOptions: {
                          columns: ':visible:not(.noVis)'
                      }
                      },
                      {
                      extend: 'excel', title: '', exportOptions: {
                          columns: ':visible:not(.noVis)'
                      }
                      },
                      {
                      extend: 'csv', title: '', exportOptions: {
                          columns: ':visible:not(.noVis)'
                      }
                      },
                      {
                      extend: 'pdf', title: '', exportOptions: {
                          columns: ':visible:not(.noVis)'
                      }
                      },
                  ],
                  },
                  {
                  extend: 'colvis',
                  className: "scroller",
                  }
                  ],
                  columnDefs: [
              {
                  targets: "_all",
                  className: 'dt-center allColumnClass all'
              },
              ],
            });
            }

            $("#scenarios_"""
                    + f"""{element_id}"""
                    + """").click(function(){
              var computationScenarioButtonText = $("#scenarios_"""
                    + f"""{element_id}"""
                    + """").html()
              $("#remove_1").remove();
              var model_element_id = $(this).attr('data-element_id')
              var model_name = $(`#modelName_${model_element_id}`).attr("data-model_name")
              $('#runModel_"""
                    + f"""{element_id}"""
                    + """').attr("data-scenario_part","yes");
              var show_error = false
              for(let i = 0; i < variableList_scenario.length; i++){
                if(variableList_scenario[i]["inputValue"] == ""){
                  show_error = true
                }
              }
              if(show_error == false) {

              $('#scenarios_"""
                    f"""{element_id}"""
                    + """').empty()
              $('#scenarios_"""
                    f"""{element_id}"""
                    + """').append(`<i class="fa fa-circle-notch fa-spin"></i> Loading`)
              $('#runModel_"""
                    + f"""{element_id}"""
                    + """').removeAttr("data-scenario_part");

              $.ajax({
                  url: `/users/${urlPath}/computationModule/`,
                  data: {
                    'model': model_name,
                    'type' : "new_scenario",
                    'operation': 'computation_scenario_tree',
                  },
                  type: "POST",
                  dataType: "json",
                  success: function (data) {
                    $('#scenarios_"""
                    f"""{element_id}"""
                    + """').empty()
                    $('#scenarios_"""
                    f"""{element_id}"""
                    + """').append(computationScenarioButtonText)
                    $("#remove_").remove();
                    $("#configure_comparative_"+model_element_id).parent().append(`<i id="remove_" style="font-size:40px;text-align:center;margin:10px;" class="fa fa-circle-notch fa-spin"></i>`)
                    var scenario_name = $(`#scenario_name_${model_element_id}`).val()
                    var variableList = [];
                    var elementIDGVar;
                    $(`#computationForm_${model_element_id}`).find("div.form-row").each(function(){
                      elementIDGVar = $(this).attr('data-parent_element_id');
                      $(this).find("div.form-group").each(function(){
                        if($(this).find('select').length === 0 ){
                          var varDict = {
                          varName:$(this).find("label").text(),
                          inputValue:$(this).find(`input`).val(),
                          };
                        }else{
                          var varDict = {
                          varName:$(this).find("label").text(),
                          inputValue:$(this).find(`select`).val(),
                          };
                        }
                        variableList.push(varDict);
                      });
                    });
                    if (scenario_name!=null){

                      $.ajax({
                        url: `/users/${urlPath}/computationModule/`,
                        data: {
                          'config': JSON.stringify({
                            model: $(`#modelName_${model_element_id}`).attr("data-model_name"),
                            configGlobalDict: variableList,
                            configGlobalFunc: [],
                          }),
                          'comparative_bool':"Yes",
                          'scenario_name': scenario_name,
                          'operation': 'run_scenario',
                        },
                        type: "POST",
                        dataType: "json",
                        success: function (data) {
                          $('#scenarios_"""
                    f"""{element_id}"""
                    + """').empty()
                        $('#scenarios_"""
                    f"""{element_id}"""
                    + """').append(computationScenarioButtonText)
                        $("#remove_").remove()

                                if (Object.keys(data).includes('inter_output_export_message_list')) {
                                    for (let i of data.inter_output_export_message_list) {
                                        if (i) {
                                            Swal.fire({icon: 'info',text: i});
                                        }
                                    }
                                };

                                if (data.element_error_message == 'Success') {
                                  $("#configure_comparative_"+model_element_id).attr("data-data",JSON.stringify(data.content))
                                  $("#configure_comparative_"+model_element_id).attr("data-model_name",model_name)
                                  $("#configure_comparative_"+model_element_id).attr("data-model_element_id",model_element_id)
                                  $("#remove_").remove()
                                  $("#configure_comparative_"+model_element_id).css("display","flex");
                                  $("#save_comparative_"+model_element_id).parent().css("display","block");
                                  $("#config_type_"+model_element_id).val("column_level").trigger("change")
                                  $("#identifier_column_"+model_element_id).attr("data-output_columns",data.output_columns)
                                  $("#identifier_column_"+model_element_id).empty()
                                  $("#comparative_column_"+model_element_id).empty()
                                  for(let [key,value] of Object.entries(data.content[0])){
                                    $("#identifier_column_"+model_element_id).append(`<option value="${key}">${key}</option>`);
                                    $("#comparative_column_"+model_element_id).append(`<option value="${key}">${key}</option>`);
                                  }
                                  let model__ = model_name

                                  $.ajax({
                                    url: `/users/${urlPath}/dynamicVal/`,
                                    data: {
                                      "operation":"fetchComparative",
                                      "model_name": model__,
                                    },
                                    type: "POST",
                                    dataType: "json",
                                    success: function (data) {
                                      if(!["NULL","None",undefined,null].includes(data.data)){
                                        $("#identifier_column_"+model_element_id).val(data.data.identifier).trigger("change");
                                        $("#comparative_column_"+model_element_id).val(data.data.comparative).trigger("change");
                                        let value = data.data.parameters
                                        for(j in data.data.identifier){
                                          for(let i = 0; i < value[data.data.identifier[j]].length; i++){
                                            $("#configure_parameter_"+model_element_id).find("#"+data.data.identifier[j]+"_"+model_element_id).val(value[data.data.identifier[j]]).trigger("change");
                                          }
                                        }
                                      }
                                    },
                                    failure: function () {
                                      Swal.fire({icon: 'warning',text: 'No process or subprocess exist.'});
                                    },
                                  });

                                } else {
                                  $("#remove_").remove()
                                  $("#configure_comparative_"+model_element_id).parent().append(`<span id="remove_" style="font-size:17.25px;text-align:center;margin:10px;">Model output table not detected.</span>`);
                                }
                        },
                        error: function () {
                          Swal.fire({icon: 'error',text: 'Error! Failure in running the scenario. Please try again.'});
                        }
                      })
                    } else {
                      $("#remove_").remove()
                      $("#configure_comparative_"+model_element_id).parent().append(`<span id="remove_" style="font-size:17.25px;text-align:center;margin:10px;">Model output table not detected.</span>`);
                    }
                    $(`.EBDisplayButtonIDDiv`).empty();
                    $(`#scenario_name_${model_element_id}`).val("").trigger("change");
                    $(`#element_incremental_data_${model_element_id}`).empty();
                    $(`#runWithBaseModel_${model_element_id}`).prop("checked", false);
                    $(`#scenario_configuration_date_${model_element_id}`).val("").trigger("change");
                    $(`#scenarioConfModal_${model_element_id}`).modal({backdrop: 'static', keyboard: false});
                    $(`#scenarioConfModal_${model_element_id}`).modal('show');
                    var chart_config = {
                      chart: {
                          container: `#model_inputs_scenario_${model_element_id}`,
                          levelSeparation: 50,
                          siblingSeparation: 60,
                          subTeeSeparation: 60,
                          nodeAlign: "CENTER",
                          connectors: {
                              type: 'step'
                          },
                          node: {
                              HTMLclass: 'nodeExample1',
                          }
                      },
                      nodeStructure: data.nodes,
                    };
                    var chart = new Treant(chart_config);
                    $('.nodeExample1').css('background','black')
                    $('.nodeExample1').css('color','white')
                    $('.nodeExample1').css('border-radius','0.5rem')
                    $(".data_model_input_new_scenario").hover(
                      function() {
                        $(this).addClass('shadow').css('cursor', 'pointer');
                      }, function() {
                        $(this).removeClass('shadow');
                      }
                    );
                    $('.csv_input').css('background','grey')
                    $('.node-title').css('margin','1rem')
                    $('.node-name').css('margin','1rem')
                    $('.model_names').css('background','var(--primary-color)')

                    $('.data_model_input_new_scenario').click(function(){
                      var element_identifier = $(this).attr('data-element_id');
                      var element_name_component = $(this).attr('data-element_name');
                      var scenario_name = $(`#scenario_name_${model_element_id}`).val();
                      if(scenario_name != ""){

                        $.ajax({
                            url: `/users/${urlPath}/computationModule/`,
                            data: {
                              'model': $(this).attr('data-model_name'),
                              'element_id': element_identifier,
                              'operation': 'computation_element_data',
                            },
                            type: "POST",
                            dataType: "json",
                            success: function (data) {
                              $(".existingDataHeader").text("Existing Data")
                              $(`#viewScenarioData_${model_element_id}`).empty()
                              $(`#viewScenarioData_${model_element_id}`).append(
                                `<div class="card shadow-sm  bg-white rounded;">
                                  <div class="card-body" style="padding:0.9rem;max-height:90">
                                      <table id="exampledataResultsScenario_${model_element_id}" class="display compact" style="width:100%;">
                                          <thead>
                                              <tr></tr>
                                          </thead>
                                          <tbody>
                                          </tbody>
                                      </table>
                                  </div>
                                </div>
                                <div class="card shadow-sm  bg-white rounded;">
                                <form id="incremental_data_${model_element_id}">
                                  <div class="card-header" style="">
                                    <h5 class="mb-0" style="text-align:center;">
                                      Configure Scenario Data
                                    </h5>
                                  </div>
                                  <div class="card-body" style="padding:0.9rem;">
                                    <div class="row">
                                      <div class="form-group col-4">
                                          <label for="selectScenarioDataType_${model_element_id}">Select scenario data type:</label>
                                          <select id="selectScenarioDataType_${model_element_id}" class="select2 form-control" name="selectScenarioDataType_${model_element_id}">
                                            <option value="upload_data">Upload data</option>
                                            <option value="equation_builder">Create with equation builder</option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="row">
                                      <div class="form-group col-4" id="uploadData_${model_element_id}">
                                        <div class="custom-file" style="margin-left: 0.5rem;">
                                          <input type="file" class="custom-file-input"  accept=".csv" name="customFile">
                                          <label class="custom-file-label" for="customFile">Choose file</label>
                                        </div>
                                        <br>
                                        <br>
                                      </div>
                                      <div class="form-group col-4 EBDisplayButtonIDDiv" id="equationBuilder_${model_element_id}" style="display:none">
                                        <button style="color:aliceblue; margin-left: 0.5rem;" type="button" id="EBDisplayButtonID" class="btn btn-primary btn-md rounded">Equation builder</button>
                                      </div>
                                    </div>
                                    <div class="form-group col-4" style="display:flex">
                                      <label style="margin-left: 0.5rem;">Scenario type : </label>
                                      <div id="" class="custom-control custom-checkbox" style="margin-left:1%;">
                                        <input type="checkbox" name="defaultValueConfig" data-scenario_type="append" id="append${model_element_id}" class="checkboxinput custom-control-input" value="0">
                                        <label for="append${model_element_id}" class="custom-control-label">
                                          Append
                                        </label>
                                      </div>
                                      <div id="" class="custom-control custom-checkbox" style="margin-left:1%;">
                                        <input type="checkbox" name="defaultValueConfig" data-scenario_type="replace" id="replace${model_element_id}" class="checkboxinput custom-control-input" value="0">
                                        <label for="replace${model_element_id}" class="custom-control-label">
                                          Replace
                                        </label>
                                      </div>
                                    </div>
                                  <div class="form-group col-4" style="margin-left:0.4rem;display:None;">
                                      <label for="selectIdentifierColumns_${model_element_id}">Select identifier columns:</label>
                                      <select id="selectIdentifierColumns_${model_element_id}" class="select2 form-control" name="selectIdentifierColumns_${model_element_id}" multiple>
                                      </select>
                                  </div>
                                  <div class="form-group col-4" style="margin-left:0.4rem;display:None;">
                                    <label for="selectUpdateColumns_${model_element_id}">Select columns to update:</label>
                                    <select id="selectUpdateColumns_${model_element_id}" class="select2 form-control" name="selectUpdateColumns_${model_element_id}" multiple>
                                    </select>
                                  </div>
                                  </div>
                                  <div style="float:right;">
                                    <button type="button" id="addScenarioData_${model_element_id}" data-element_id = "${model_element_id}"  data-form_id = "incremental_data_${model_element_id}" data-element_id_component = "${element_identifier}" data-scenario_name = "${scenario_name}" data-element_name = "${element_name_component}" class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Add scenario &nbsp;<i class="fas fa-plus"></i></button>
                                    <button type="button" id="quitScenarioData_${model_element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                                  </div>
                                </form>
                                </div>
                                `
                              );
                              $('select.select2:not(.modal select.select2)').each(function(){
                                parent = $(this).parent()
                                $(this).select2({dropdownParent:parent})
                              })
                              $('.modal select.select2').each(function(){
                                  $(this).select2()
                              })
                              for(i in data.columns_list){
                                $(`#selectIdentifierColumns_${model_element_id}`).append(`<option value="${data.columns_list[i]}">${data.columns_list[i]}</option>`)
                                $(`#selectUpdateColumns_${model_element_id}`).append(`<option value="${data.columns_list[i]}">${data.columns_list[i]}</option>`)
                              }
                              $(`#selectIdentifierColumns_${model_element_id}`).off('select2:select select2:unselect').on('select2:select select2:unselect', function(){
                                  $(`#selectUpdateColumns_${model_element_id}`).empty();
                                  let selIdentifier = $(this).val();
                                  for (i in data.columns_list) {
                                      if (selIdentifier.includes(data.columns_list[i]) == false){
                                          $(`#selectUpdateColumns_${model_element_id}`).append(new Option(data.columns_list[i], data.columns_list[i], false, false));
                                      };
                                  };
                              });
                              $(`#selectScenarioDataType_${model_element_id}`).select2();
                              $(`#selectScenarioDataType_${model_element_id}`).off("select2:select").on("select2:select", function(){
                                if ($(this).val() == "upload_data") {
                                  $(`#uploadData_${model_element_id}`).css("display", "");
                                  $(`#equationBuilder_${model_element_id}`).css("display", "none");
                                } else {
                                  $(`#uploadData_${model_element_id}`).css("display", "none");
                                  $(`#equationBuilder_${model_element_id}`).css("display", "");
                                }
                              });
                              $('[name="defaultValueConfig"]').change(function(){
                                if($(this).attr('data-scenario_type') == "replace"){
                                  $(`#selectIdentifierColumns_${model_element_id}`).parent().css('display','')
                                  $(`#selectUpdateColumns_${model_element_id}`).parent().css('display','')
                                }
                                else{
                                  $(`#selectIdentifierColumns_${model_element_id}`).parent().css('display','none')
                                  $(`#selectUpdateColumns_${model_element_id}`).parent().css('display','none')
                                }
                                if(this.checked){
                                  $('[name="defaultValueConfig"]').not(this).prop('checked', false);
                                }
                              });
                              $('#EBDisplayButtonID').attr('data-name',scenario_name+element_identifier)
                              eqBuilder(scenario_name,element_identifier,model_element_id)
                              """
                    + r"""
                              $(".custom-file-input").on("change", function() {
                                var fileName = $(this).val().split("\\").pop();
                                $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
                              });"""
                    + """
                              for (var i = 0; i < data.table[data.table_headers[0]].length; i++) {
                                  string=`<tr>`
                                  for(j in data.table_headers){
                                      string+=`<td style="text-align:center;">${data.table[data.table_headers[j]][i]}</td>`
                                  }
                                  string+=`</tr>`
                                  $(`#exampledataResultsScenario_${model_element_id}`).find('tbody').append(string)
                                  }

                              $(`#exampledataResultsScenario_${model_element_id} thead tr`).empty()
                              for(j in data.table_headers){
                                  $(`#exampledataResultsScenario_${model_element_id}`).find('thead tr').eq(0).append(`<th style="text-align:center;">${data.table_headers[j]}</th>`)
                              }
                              $(`#scenarioDataOutputModal_${model_element_id}`).modal('show')
                              initialise_table_results("exampledataResultsScenario",model_element_id)
                              $(`#addScenarioData_${model_element_id}`).attr('data-scenario_data_source','new_scenario')
                              $(`#addScenarioData_${model_element_id}`).attr('data-scenario_id','None')
                              $(`#addScenarioData_${model_element_id}`).click(saveIncrementalData)
                            },
                            error: function () {
                              Swal.fire({icon: 'error',text: 'Error! Failure in fetching the data from the Table. Please try again.'});
                          }
                        })
                      }
                      else{
                        Swal.fire({icon: 'warning',text: 'Please enter a scenario name.'});
                      }
                    })
                  },
                  error: function () {
                    Swal.fire({icon: 'error',text: 'Error! Failure in loading the scenario configuration. Please check your configuration and try again.'});
                      $('#scenarios_"""
                    f"""{element_id}"""
                    + """').empty()
                      $('#scenarios_"""
                    f"""{element_id}"""
                    + """').append(computationScenarioButtonText)
                  }
                })
                } else{
                  $("#computationForm_"+model_element_id).closest(".card-body").append(`<span id="remove_1" style="color:red;">Enter global variable</span>`);
                }
              })


              $("#run_scenario_"""
                    + f"""{element_id}"""
                    + """").click(function(){
                $("#run_scenario_"""
                    + f"""{element_id}"""
                    + """").html(`Loading &nbsp;<i class="fa fa-circle-notch fa-spin"></i>`)
                var model_element_id = $(this).attr('data-element_id')
                var scenario_name = $(`#scenario_name_${model_element_id}`).val()
                var variableList = [];
                var elementIDGVar;
                $(`#computationForm_${model_element_id}`).find("div.form-row").each(function(){
                  elementIDGVar = $(this).attr('data-parent_element_id');
                  $(this).find("div.form-group").each(function(){
                    if($(this).find('select').length === 0 ){
                      var varDict = {
                      varName:$(this).find("label").text(),
                      inputValue:$(this).find(`input`).val(),
                      };
                    }else{
                      var varDict = {
                      varName:$(this).find("label").text(),
                      inputValue:$(this).find(`select`).val(),
                      };
                    }
                    variableList.push(varDict);
                  });
                });
                $(`#computationForm_${model_element_id}`).find("div.form-row").each(function(){
                  elementIDGVar = $(this).attr('data-parent_element_id');
                  $(this).find("div.form-group").each(function(){
                    if ($(this).find(`input[name=gVarFileRM]`).attr("type") === 'file') {
                      let formData = new FormData($(this).find(`form.gVarFileInput`)[0]);
                      formData.append("operation", "gVarFileRunModel");
                      formData.append("gVarName", $(this).find("label.gVarNameLabel").text());
                      formData.append("elementID", elementIDGVar);

                      $.ajax({
                        url:`/users/${urlPath}/computationModule/`,
                        data: formData,
                        type: 'POST',
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                        },
                        error: ()=>{
                            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                        }
                      });
                    };
                  });
                });
                if (scenario_name!=null){
                  $.ajax({
                    url: `/users/${urlPath}/computationModule/`,
                    data: {
                      'config': JSON.stringify({
                        model: $(`#modelName_${model_element_id}`).attr("data-model_name"),
                        configGlobalDict: variableList,
                        configGlobalFunc: [],
                      }),
                      'scenario_name': scenario_name,
                      'operation': 'run_scenario',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                      $(`#viewRunScenarioData_${model_element_id}`).empty()
                      $("#run_scenario_"""
                    + f"""{element_id}"""
                    + """").html(`Run Scenario &nbsp;<i class="fas fa-play"></i>`)
                      $(`#viewRunScenarioData_${model_element_id}`).append(
                        `<div class="card shadow-sm  bg-white rounded;">
                          <div class="card-body" style="padding:0.9rem;">
                              <table id="exampledataResultsScenarioRun_${model_element_id}" class="display compact" style="width:100%;">
                                  <thead>
                                      <tr></tr>
                                  </thead>
                                  <tbody>
                                  </tbody>
                              </table>
                          </div>
                        </div>
                        <div style="float:right;">
                            <button type="button" id="quitRunScenarioData_${model_element_id}" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                        </div>
                        `)
                        $(`#exampledataResultsScenarioRun_${model_element_id} tbody`).empty();
                        $(`#exampledataResultsScenarioRun_${model_element_id} thead tr`).empty()
                        for(let [key,value] of Object.entries(data.content[0]) ){
                            $(`#exampledataResultsScenarioRun_${model_element_id}`).find('thead tr').eq(0).append(`<th>${key}</th>`)
                        };
                        for (var i = 0; i < data.content.length; i++) {
                            string=`<tr>`
                            for(let [key,value] of Object.entries(data.content[i]) ){
                                string+=`<td>${value}</td>`
                                }
                            string+=`</tr>`
                            $(`#exampledataResultsScenarioRun_${model_element_id}`).find('tbody').append(string)
                        };
                        $(`#runscenarioDataOutputModal_${model_element_id}`).modal('show')
                        initialise_table_results("exampledataResultsScenarioRun",model_element_id)
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Failure in running the scenario. Please try again.'});
                    }
                  })
                }
              })

              $("#scenario_name_"""
                    + f"""{element_id}"""
                    + """").on('change',function(){
                var model_element_id = $(this).attr('data-element_id')
                var scenario_name = $(this).val();
                if (scenario_name!=""){
                  $.ajax({
                    url: `/users/${urlPath}/computationModule/`,
                    data: {
                      'model': $(`#modelName_${model_element_id}`).attr("data-model_name"),
                      'scenario_name': scenario_name,
                      'operation': 'validate_scenario_name',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                      if (data.message == "exists") {
                        Swal.fire({icon: 'warning',text:"Scenario with the same name already exists. Please choose a unique name to proceed." });
                        $(`#scenario_name_${model_element_id}`).val("");
                      }
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Failure in validating the scenario name. Please check and try again.'});
                    }
                  });
                }
              });

              $("#save_scenario_"""
                    + f"""{element_id}"""
                    + """").click(saveScenario)
              $('#save_edited_scenario').off("click").on("click",saveScenario)
              function saveScenario(){
                var scenario_id = $(this).attr('data-scenario_id')
                var model_element_id = $(this).attr('data-element_id')
                if (scenario_id!='None'){
                  var scenario_name = $(`#scenario_name_`).val();
                  var runScenarioWithBaseModel = $(`#runWithBaseModel_`).prop("checked");
                  var scenario_configuration_date = $(`#scenario_configuration_date_`).val();
                }
                else{
                  var scenario_name = $(`#scenario_name_${model_element_id}`).val();
                  var runScenarioWithBaseModel = $(`#runWithBaseModel_${model_element_id}`).prop("checked");
                  var scenario_configuration_date = $(`#scenario_configuration_date_${model_element_id}`).val();
                }

                if (scenario_name!=null){
                  var scenarioArray = [];
                  if (scenario_id!='None'){
                    $(`#element_incremental_data_`).find("tr").each(function(){
                    if($(this).find("td").eq(0).attr('data-replace_identifier_list') === undefined){
                        var replace_identifier_list = []
                        var replace_column_list = []
                      }
                    else{
                      var replace_identifier_list = JSON.parse($(this).find("td").eq(0).attr('data-replace_identifier_list'))
                      var replace_column_list = JSON.parse($(this).find("td").eq(0).attr('data-replace_column_list'))
                    }
                    var scenario_config = {
                      element_id : $(this).find("td").eq(0).attr('data-element_component_id'),
                      scenario_type : $(this).find("td").eq(0).attr('data-scenario_type'),
                      scenario_type_scenarioData : $(this).find("td").eq(0).attr('data-scenario_type_scenarioData'),
                      scenario_data_type : $(this).find("td").eq(0).attr('data-scenario_data_type'),
                      replace_identifier_list: replace_identifier_list,
                      replace_column_list: replace_column_list,
                      element_name : $(this).find("td").eq(0).text(),
                    }
                    if ($(this).find("td").eq(0).attr('data-scenario_data_type') == "equation_builder"){
                      scenario_config["equation_editor_model"] = $(this).find("td").eq(0).attr('data-equation_editor_model')
                      scenario_config["base_model_name"] = $(`#modelName_${model_element_id}`).attr("data-model_name")
                    }
                    scenarioArray.push(scenario_config);
                  });
                  }
                  else{
                    $(`#element_incremental_data_${model_element_id}`).find("tr").each(function(){
                    var scenario_config = {
                        element_id : $(this).find("td").eq(0).attr('data-element_component_id'),
                        scenario_type : $(this).find("td").eq(0).attr('data-scenario_type'),
                        scenario_type_scenarioData : $(this).find("td").eq(0).attr('data-scenario_type_scenarioData'),
                        scenario_data_type : $(this).find("td").eq(0).attr('data-scenario_data_type'),
                        replace_identifier_list: JSON.parse($(this).find("td").eq(0).attr('data-replace_identifier_list')),
                        replace_column_list: JSON.parse($(this).find("td").eq(0).attr('data-replace_column_list')),
                        element_name : $(this).find("td").eq(0).text(),
                    }
                    if ($(this).find("td").eq(0).attr('data-scenario_data_type') == "equation_builder"){
                      scenario_config["equation_editor_model"] = $(this).find("td").eq(0).attr('data-equation_editor_model')
                      scenario_config["base_model_name"] = $(`#modelName_${model_element_id}`).attr("data-model_name")
                    }
                    scenarioArray.push(scenario_config);
                  });
                  }

                  $.ajax({
                    url: `/users/${urlPath}/computationModule/`,
                    data: {
                      'model': $(`#modelName_${model_element_id}`).attr("data-model_name"),
                      'scenarioList': JSON.stringify(scenarioArray),
                      'scenario_name': scenario_name,
                      'scenario_id': scenario_id,
                      'configuration_date': scenario_configuration_date,
                      'run_with_base': runScenarioWithBaseModel,
                      'operation': 'save_scenario',
                    },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                      if (data.message != "success") {
                        Swal.fire({icon: 'info',text: data.message});
                      } else {
                        $(`#savedScenarioTable_${model_element_id}`).find("tr").each(function(){
                          if ($(this).find("td").eq(0).attr('data-scenario_id') == scenario_id) {
                            $(this).find("td").eq(0).text(scenario_name)
                          }
                        });
                        if(scenario_id =='None'){
                          $(`#savedScenarioTable_${model_element_id}`).append(
                            `<tr>
                              <td style="text-align: center;" data-element_id="${model_element_id}" data-scenario_id="${data.scenario_id}">${scenario_name}</td>
                              <td style="text-align: center;">
                                <i class="fas fa-trash deleteSavedScenario text-primary" data-scenario_id="${data.scenario_id}" data-element_id="${model_element_id}" data-title="Delete scenario"></i>
                                <i class="fa fa-eye text-primary"" onclick="viewCompScenario.call(this)" data-scenario_id="${data.scenario_id}" data-element_id="${model_element_id}" data-title="View scenario"></i>
                              </td>
                            </tr>`
                          );
                          $(".deleteSavedScenario").off("click").on("click", function(){
                            deleteCompScenario(this);
                          });
                        }
                        Swal.fire({icon: 'success',text: 'Scenario saved successfully!'});
                        $('#viewCompScenario').modal('hide')
                      }
                    },
                    error: function () {
                      Swal.fire({icon: 'error',text: 'Error! Failure in saving the scenario. Please try again.'});
                    }
                  })
                } else {
                  Swal.fire({icon: 'warning',text:'Scenario name connot be left blank. Please fill in a scenario name.' });
                }
              };

              $(document).on('show.bs.modal', '.modal', function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function() {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
              });
            </script>
            """
                )
            else:
                html = (
                    html
                    + f"""$("#scenarios_"""
                    + f"""{element_id}"""
                    + """").css("display","none");
            </script>
            """
                )
        else:
            html += "</script>"
    if view == "data_connector":
        html = (
            html
            + """<script>"""
            + """
              var bulkUploadTableDetails = [];
              $("#documenttableUS[data-element-id='"""
            + f"""{element_id}"""
            + """'] > tbody").find("tr").each(function(){

                var uploadTargetBtn = $(this).find(".downloadButton"""
            + f"""{element_id}"""
            + """");
                bulkUploadTableDetails.push($(this).find('td > input').eq(0).val());
              })
              var uploadElementId = """
            + f""" "{element_id}" """
            + """;

              var ctoken = $('form').find(`input[name='csrfmiddlewaretoken']`).attr('value');
              $.ajaxSetup({
                  beforeSend: function (xhr, settings) {
                      xhr.setRequestHeader("X-CSRFToken", ctoken);
                  }
              });
              $.ajax({
                url: windowLocation,
                data:{
                  table_details: JSON.stringify(bulkUploadTableDetails),
                  element_id: uploadElementId,
                  operation: "fetchUploadTableDetails",
                },
                type: "POST",
                dataType: "json",
                success: function (data) {
                  var uploadElementId = data.element_id;
                  for (let index = 0; index < data.table_info_list.length; index++) {
                    const element = data.table_info_list[index];
                    $(`#tableUSLUD${uploadElementId}${element.DBtableName}`).val(element.lastuploaddate).trigger('change');
                  }

                },
                error: function(){
                  if(windowLocation.includes("Pr")){
                    Swal.fire({icon: 'error',text: 'Error! Failure in fetching the upload details. Please try again.'});
                  }
                }
              })

                $.ajax({
                  url: `/users/${urlPath}/constriant_get_data/`,
                  data: {
                    elementID: uploadElementId,
                    operation: 'reload_config_mapper',
                  },
                  type: 'POST',
                  dataType: 'json',
                  success: function (data) {
                    if (
                      Object.prototype.hasOwnProperty.call(data, 'reload_custom_validation')
                    ) {
                      if (data.reload_custom_validation) {
                        const rowData = JSON.parse(data.reload_custom_validation);
                        $(`#configuration_val_row_${data.element_id}`).empty();
                        let rowHtml = '';
                        let count = 1;
                        for (const rowName in rowData) {
                          rowHtml += `<tr> <td>${count}</td> <td value='${rowName}'>${rowName}</td> <td><button type="button" class="btn-primary reconfigurecustomvalidation" name="${rowName}" data-element-id=${data.element_id}' id="reconfigurecustomvalidation_${rowName}"><i class="fas fa-trash"></i></button> <button type="button" class="btn-primary editcustomexist_validation" name="${rowName}" data-element-id="${data.element_id}" href="#carouselCustomValidation${data.element_id}" data-slide="next" id="editcustomexist_validation_${rowName}"><i class="fas fa-edit"></i></button></td></tr>`;

                          count++;
                        }
                        $(`#configuration_val_row_${data.element_id}`).append(rowHtml);
                        $(`#customValidationList1${data.element_id}`).attr(
                          'value',
                          data.reload_custom_validation
                        );
                      }
                    }

                    if(Object.prototype.hasOwnProperty.call(data, 'reload_data')){
                      if (data.reload_data){
                        $(`#columnmapperDict${data.element_id}`).attr(
                          'value',
                          data.reload_data
                        );
                      }
                    }
                  },
                  error: function () {
                    window.Swal.fire({icon: 'error',text: 'Error! Please try again.'});;
                  },
                });


                              $('#doe_form_"""
            f"""{element_id}"""
            + """').find(".doe_field_selection").select2({width:'60%'})
                // Select Type of  Date Of Extraction Field


                   $('#date_extraction_checker"""
            f"""{element_id}"""
            + """').on('change',function(){
                   if(this.checked == true){


                      if($(this).attr('data-file-type')){
                            $('#doe_sheet_selection"""
            f"""{element_id}"""
            + """').css('display','block')

                        }else{
                            $('#doe_field_selection"""
            f"""{element_id}"""
            + """').css('display','block')
                        }

                   }else{
                      $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').css('display','none')
                      $('#doe_field_selection"""
            f"""{element_id}"""
            + """').css('display','none')
                      $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').val("")
                    $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').val("").trigger('change');
                   }
                 })

                           $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').on('select2:select',function(){
                  var data_form = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
                  let table_name = $(this).val()
                  $('#doe_field_value_"""
            f"""{element_id}"""
            + """').val("").trigger('change')
                  data_form.append('elementID','"""
            f"""{element_id}"""
            + """')
                   $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').val("")
                    $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').css('display','none')
                  data_form.append('operation','date_of_extraction_field_selection')
                  data_form.append('table_name',table_name)
                  var itemCode = windowLocation.split("/")[4];
                  if(! itemCode.includes("Pr")) {
                    var id_ele = """
            + f"""'{element_id}'"""
            + """
                    for(let z = 0; z < item_code_list.length; z++) {
                      if(item_code_list[z].hasOwnProperty(id_ele)) {
                        itemCode = item_code_list[z][id_ele]
                        break
                      }
                    }
                  };
                    var tablelist= $(this).attr('tablelist')
                data_form.append('tablelist',tablelist)
               $.ajax({
                      url: `/users/${urlPath}/${itemCode}/`,
                      data:data_form,
                      contentType:false,
                      cache:false,
                      async: false,
                      processData:false,
                      type: "POST",
                      dataType: "json",
                        success: function (data) {

                          $('#doe_field_selection"""
            f"""{element_id}"""
            + """').css('display','block')


                        if(data.hasOwnProperty('columnList')){
                            let columnList = JSON.parse(data.columnList)

                            $('#doe_field_value_"""
            f"""{element_id}"""
            + """').empty()
                            $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='' selected disabled>Select Date Field</option>`)

                            if(Object.keys(columnList).includes(table_name)){
                              for(let i in columnList[table_name]){
                              $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='${Object.keys(columnList[table_name])[0]}' data-type='${columnList[table_name][i]['type']}'>${columnList[table_name][i]['verbose_name']}</option>`)
                            }
                            }else{
                              for(let k=0;k<Object.keys(columnList).length;k++){

                                for(let i in columnList[Object.keys(columnList)[k]]){
                              $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='${Object.keys(columnList[Object.keys(columnList)[k]])[0]}' data-type='${columnList[Object.keys(columnList)[k]][i]['type']}'>${columnList[Object.keys(columnList)[k]][i]['verbose_name']}</option>`)
                            }
                              }

                            }

                          }
                        },
                        error: function () {
                          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                        }
                      });
                 })

                //  Set DateOfextraction Field
                        $('#doe_field_value_"""
            f"""{element_id}"""
            + """').on('select2:select',function(){
                  let field_type = $(this).find('option:selected').attr('data-type')
                    $('#doe_field_type_"""
            f"""{element_id}"""
            + """').val(field_type).trigger('change')
                    $('#doe_field_selection"""
            f"""{element_id}"""
            + """').css('display','block')
                  if(field_type == 'DateTimeField'){
                    $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').css('display','block')
                    $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').attr('type','datetime-local')
                  }else{
                    $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').css('display','block')
                    $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').attr('type','date')
                  }


                })

                    var table_list = []
                 $(`#downloadLastUploadErrors"""
            f"""{element_id}"""
            + """`).parent().find("input[name=table_name]").each(function(){
                     table_list.push($(this).val())
                 })
                 $(`.columnMapperButton[data-elementid="""
            f"""{element_id}"""
            + """]`).attr('data-table-name',JSON.stringify(table_list))
                 $(`.customValidationButton[data-elementid="""
            f"""{element_id}"""
            + """]`).attr('data-table-name',JSON.stringify(table_list))
                 $(`.computedFieldMapperButton[data-elementid="""
            f"""{element_id}"""
            + """]`).attr('data-table-name',JSON.stringify(table_list))
                  $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).attr('tablelist',JSON.stringify(table_list))
                  $(`#uploadButton3"""
            f"""{element_id}"""
            + """`).attr('tablelist',JSON.stringify(table_list))
                    $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').attr('tablelist',JSON.stringify(table_list))
                    $("#uploadFile"""
            f"""{element_id}"""
            + """").attr('tablelist',JSON.stringify(table_list))
                  $(`.upload_tables_US`).attr('value',JSON.stringify(table_list))




$('#carouselCustomValidation"""
            f"""{element_id}"""
            + """').on('slide.bs.carousel', function onSlide (ev) {

  var name = ev.relatedTarget.getAttribute('name');

  if(name != 'existing_config'){
    $(`.submitcustomvalidation[data-elementid="""
            f"""{element_id}"""
            + """]`).css('display','none')
  }else{
    $(`.submitcustomvalidation[data-elementid="""
            f"""{element_id}"""
            + """]`).css('display','block')
  }

})
$("#uploadFile"""
            f"""{element_id}"""
            + """").on('change',function(){
// Remove
  $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('sheetname')
  $("#edit_upload_save"""
            f"""{element_id}"""
            + """").removeAttr('data-edit')
  $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('data-sheet-details')
  $(`#SkipSheetInfo"""
            f"""{element_id}"""
            + """`).removeAttr('data-skip-sheet')

//Added
  $("#edit_upload_save"""
            f"""{element_id}"""
            + """").removeAttr('data-edit')

  $("#date_extraction_checker"""
            f"""{element_id}"""
            + """").removeAttr('data-file-type')
  $(`#EditModalTab"""
            f"""{element_id}""" + """ a[href="#edit_data_tab$"""
            f"""{element_id}"""
            + """"]`).show();
  $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').css('display','none')
  $('input[data-date-extraction=date_extract_"""
            f"""{element_id}"""
            + """]').val("")
  $('#doe_field_selection"""
            f"""{element_id}"""
            + """').css('display','none')
  $('#doe_field_value_"""
            f"""{element_id}"""
            + """').val("").trigger('change')
  $('#doe_field_value_"""
            f"""{element_id}"""
            + """').removeAttr('data-file-type')
  $('#doe_sheet_selection"""
            f"""{element_id}"""
            + """').css('display','none')
  $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').val('').trigger('change');
  $('#date_extraction_checker"""
            f"""{element_id}"""
            + """').prop('checked',false)



  var itemCode = windowLocation.split("/")[4];
  if(! itemCode.includes("Pr")) {
    var id_ele = """
            + f"""'{element_id}'"""
            + """
    for(let z = 0; z < item_code_list.length; z++) {
      if(item_code_list[z].hasOwnProperty(id_ele)) {
        itemCode = item_code_list[z][id_ele]
        break
      }
    }
  };
  var data_form = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
  data_form.append('elementID','"""
            f"""{element_id}"""
            + """')
  data_form.append('operation','date_of_extraction_field_selection')

  var tablelist= $(this).attr('tablelist')
  data_form.append('tablelist',tablelist)



  if($(this)[0].files[0].name){
        let filename = $(this)[0].files[0].name.split('.')[0]
     $.ajax({

       url: `/users/${urlPath}/${itemCode}/`,
        data:data_form,
        contentType:false,
        cache:false,
        async: false,
        processData:false,
        type: "POST",
        dataType: "json",
        success: function (data) {


          if(data.hasOwnProperty('fileType')){
            if(data.fileType == "xlsx"){
              let sheet_list = JSON.parse(data.sheetnames)

              if(sheet_list.length > 1){
                $("#date_extraction_checker"""
            f"""{element_id}"""
            + """").attr('data-file-type','xlsx')
                $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').empty()
                  $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').append(`<option value='' selected disabled>Select Sheet Name</option>`)
                  for(let i=0;i < sheet_list.length;i++){
                    $('#doe_sheet_value_"""
            f"""{element_id}"""
            + """').append(`<option value='${sheet_list[i]}'>${sheet_list[i]}</option>`)
                  }
              }else{
                if(data.hasOwnProperty('columnList')){
                let columnList = JSON.parse(data.columnList)

                let sheet_name = sheet_list[0]
                $('#doe_field_value_"""
            f"""{element_id}"""
            + """').empty()
                $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='' selected disabled>Select Date Field</option>`)

                for(let i in columnList[sheet_name]){
                  $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='${Object.keys(columnList[sheet_name])[0]}' data-type='${columnList[sheet_name][i]['type']}'>${columnList[sheet_name][i]['verbose_name']}</option>`)
                }
              }
              }
            }else{
              if(data.hasOwnProperty('columnList')){
                let columnList = JSON.parse(data.columnList)
                $('#doe_field_value_"""
            f"""{element_id}"""
            + """').empty()
                $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='' selected disabled>Select Date Field</option>`)

                for(let i in columnList[filename]){
                  $('#doe_field_value_"""
            f"""{element_id}"""
            + """').append(`<option value='${Object.keys(columnList[filename])[0]}' data-type='${columnList[filename][i]['type']}'>${columnList[filename][i]['verbose_name']}</option>`)
                }
              }
            }
          }

        },
        error: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
        }
      });
  }

})

function addDashRow(y) {
  var select_html = `<select style="margin-left:50px; width: 300px;" class="form-control col-3 mx-4 m-2 select_dash_null dash_null" data-tablename="${y}" multiple>`
  $(`#select_dash_null_${y} option`).each(function()
  {
    select_html += `<option value="${$(this).attr('value')}">${$(this).text()}</option>`
  });
  select_html += '</select>'
  $(`#dashRow_${y}`).append(`
  <div class="row m-2" style="margin-left: 210px !important">
  <div class="form-inline">
  ${select_html}
  <div class="col-3">
  <select style="width: 200px;" class="form-control m-2 select_dash_value dash_null" data-tablename="${y}">
  <option value="" disabled selected>Select value for '-'</option>
  <option value="-">-</option>
  <option value="0">0</option>
  <option value="">Null/Empty</option>
  </select>
  </div>
  </div>
  </div>`)
  $(".dash_null").select2();
}

//Main Upload Button
$(`#uploadButton3"""
            f"""{element_id}"""
            + """`).click(function(){
  var elementID = """
            f"""'{element_id}'"""
            + """
  var data_form = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
  data_form.append('elementID',elementID);
     var tablelist = $(this).attr('tablelist')
  data_form.append('tablelist',tablelist)
  if($(this).attr('data-preview-mode') == 'on'){
    previewUploadElementData(elementID='"""
            f"""{element_id}"""
            + """',dataForm=data_form);
  }else{
  data_form.append('uploadbuttonUS','US')
  // Remove
    $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('sheetname')
    $("#edit_upload_save"""
            f"""{element_id}"""
            + """").removeAttr('data-edit')
    $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('data-sheet-details')
  $(`#SkipSheetInfo"""
            f"""{element_id}"""
            + """`).removeAttr('data-skip-sheet')
  UploadDatafunc(data_form,elementID)
  }
  $(".dash_null").select2();
})

function flowUICreator(elementsArray,container,element_id,data,configs) {
  var count = 0
  for (let k in elementsArray){
    if (elementsArray[k]['group'] =='nodes'){
      if (elementsArray[k]['data']['id'] in configs){
        elementsArray[k]['data']['text'] = configs[elementsArray[k]['data']['id']]
      }
      count ++
    }
  }
  if (count >= 5){
    container.css('height','20rem');
  }
  if (configs['shapes_options_text'] =='inside'){
    var styles = {
      'shape': configs['shapes_options'],
      'label': 'data(text)',
      'text-valign': 'center',
      'font-size': configs['font-size'],
      'color':configs['font-color'],
      'width': configs['shape_width'],
      'height': configs['shape_height'],
      'text-wrap': 'wrap',
      'text-max-width': `${String(configs['shape_width'])}px`,
    }
  }else{
    var styles = {
      'shape': configs['shapes_options'],
      'label': 'data(text)',
      'font-size': configs['font-size'],
      'color':configs['font-color'],
      'width': configs['shape_width'],
      'height': configs['shape_height'],
      'text-wrap': 'wrap',
      'text-max-width': `${String(configs['shape_width'])}px`,
    }
  }
  var cy = cytoscape({
    container: container,
    zoomingEnabled: false,
    userZoomingEnabled: false,
    elements: elementsArray,
    style: [
      {
        selector: 'node',
        style: styles,
      },
      {
        selector: 'edge',
        style: {
          width: 1
        }
      }
    ],
    layout: {
      name: "dagre",
      rankDir: "LR",
      padding: 10,
      spacingFactor: 1.25,
      fit: true,
      nodeDimensionsIncludeLabels: true,
      avoidOverlap: true,
      pan: { x: 200, y: 100 }
    }
  });
  if (data != undefined){
    cy.nodes().forEach(function(ele, i, eles){
       for (let k in data){
        if (data[k]['element_id'] == ele.id()){
          if (data[k]['current_status'] == 'Pass'){
            ele.css('background-color','#4bb543')
          }
        }
       }
     });
  }else{
    flag = true
    cy.nodes().forEach(function(ele, i, eles){
      if(flag){
        ele.css('background-color','#4bb543')
      }
      if (element_id == ele.id()){
        flag = false
      }
    });
  }
}
function processDesignDiv_upload(obj){
  var eleId = $(obj).attr('data-id')
  $(obj).parent().parent().find('.processflowdiv').toggleClass("displaynone")

  if ($(obj).parent().parent().find('.processflowdiv').hasClass("displaynone") == false){
    $(obj).prev().find('.stepper-wrapper').empty()
    if ($(obj).attr('data-trans')!= undefined){
      if ($(obj).attr('data-trans')!=''){
        var trans_code = $(obj).attr('data-trans')
        var flag = true
        if (trans_code.startsWith("[")){
          trans_code = JSON.parse(trans_code)
          trans_code = trans_code[0]
          flag = true
        }else if (trans_code == "NULL") {
          trans_code = ''
          flag = false
        }
        if (flag){
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
            "operation":"fetch_process_flow_model_trans",
            'trans_code':trans_code,
            },
            type: "POST",
            dataType: "json",
            success: function (data) {
             flowUICreator(data.data,$(obj).closest('.modal-body').find('.processflowdiv'),eleId,data.flow,JSON.parse($(obj).attr('data-list')))
            },
            failure: function () {
              Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            },
          })
        }

      }
    }else{
      $.ajax({
        url:`/users/${urlPath}/dynamicVal/`,
        data: {
        "operation":"fetch_process_flow_model_xml",
        'sub_pr_code':$(obj).attr('data-sub-process'),
        'pr_code':$(obj).attr('data-process'),
        },
        type: "POST",
        dataType: "json",
        success: function (data) {
          flowUICreator(data.elements_list,$(obj).closest('.card-body').find('.processflowdiv'),eleId,undefined,JSON.parse($(obj).attr('data-list')))
        },
        failure: function () {
          Swal.fire({icon: 'error',text: 'Error! Please try again.'});
        },
      })
    }

  }

  $(obj).toggleClass("rotate")
}

//Preview Upload Submit
$(`#uploadButton3_preview"""
            f"""{element_id}"""
            + """`).click(function(){
   $(`#previewUploadModal"""
            f"""{element_id}"""
            + """`).modal('hide');
  $(`#bulk_upload_in_progress_"""
            f"""{element_id}"""
            + """`).addClass('show');
  $(this).closest("body").css("pointer-events", "none")

  var elementID = """
            f"""'{element_id}'"""
            + """
  var data_form = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
  data_form.append('elementID',elementID);
  var dash_null_dict = {}
  $(".select_dash_null").each(function() {
      if (!dash_null_dict[$(this).attr("data-tablename")]) {dash_null_dict[$(this).attr("data-tablename")] = {}}
      for (i in $(this).val()) {
        dash_null_dict[$(this).attr("data-tablename")][$(this).val()[i]] = $(this).parent().find(".select_dash_value").val()
      }
  })
  data_form.append('dash_null_dict',JSON.stringify(dash_null_dict));
     var tablelist = $(`#uploadButton3"""
            f"""{element_id}"""
            + """`).attr('tablelist')
  data_form.append('tablelist',tablelist)
data_form.append('uploadbuttonUS','US')
  // Remove
    $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('sheetname')
    $("#edit_upload_save"""
            f"""{element_id}"""
            + """").removeAttr('data-edit')
    $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).removeAttr('data-sheet-details')
  $(`#SkipSheetInfo"""
            f"""{element_id}"""
            + """`).removeAttr('data-skip-sheet')
  UploadDatafunc(data_form,elementID)


})



//Edit Modal Upload Button
$('#edit_upload_save"""
            f"""{element_id}"""
            + """').on('click',function(){
  var element_id = '"""
            f"""{element_id}"""
            + """'
  var elementID = '"""
            f"""{element_id}"""
            + """'
  var tablelist = $(this).attr('tablelist')
  var stored_data = {}
let null_list = new Array("nan","nat","null","none",null)


  var data_form = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
  data_form.append('elementID',element_id)
  data_form.append('tablelist',tablelist)
  data_form.append('uploadbuttonUS','US')

  if($('#edit_upload_save"""
            f"""{element_id}"""
            + """').attr('data-edit')){
    var update_data =  $('#edit_upload_save"""
            f"""{element_id}"""
            + """').attr('data-edit')
    stored_data = JSON.parse(update_data)
    $('#edit_data_tab"""
            f"""{element_id}"""
            + """').find('table').find('#edit_upload_content').find('tr').each(function(){
    var col_data_dict={}

    $(this).find('td').each(function(){
       if (null_list.includes($(this).text().toLowerCase())!= true){
        col_data_dict[`${$(this).attr('data-key')}`] = $(this).text()
      }else{
        col_data_dict[`${$(this).attr('data-key')}`] = null
      }
    })

    stored_data[$(this).attr('data-index')]=col_data_dict
  })
      data_form.append('edit_config',JSON.stringify(stored_data))
  }

  // Change SheetName
  if($(this).attr('data-sheet-details')){
    data_form.append('ChangeSheetName',$(this).attr('data-sheet-details'))
  }

  //Update Sheet
    if($(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).attr('sheetname')){
    let sheet_list = $(`#edit_upload_save"""
            f"""{element_id}"""
            + """`).attr('sheetname')
    data_form.append('UpdateSheet',sheet_list)
  }

  // Skip Sheet
if($(`#SkipSheetInfo"""
            f"""{element_id}"""
            + """`).attr('data-skip-sheet')){
  data_form.append('SkipSheetName',$(`#SkipSheetInfo"""
            f"""{element_id}"""
            + """`).attr('data-skip-sheet'))
}
  UploadDatafunc(data_form,elementID)
})



                 document.getElementById('cancel"""
            + f"""{element_id}"""
            + """').onclick = function () {
             $("#uploadFile"""
            + f"""{element_id}"""
            + """ ").val('');
             $("#id_Date_of_Extraction").val('');
             document.getElementById('cancel"""
            + f"""{element_id}"""
            + """').disabled=true
             document.getElementById('uploadButton3"""
            + f"""{element_id}"""
            + """').disabled=true
             };
             $("#uploadFile"""
            + f"""{element_id}"""
            + """ ").change(function () {
                if($(this).val()==null){
                  document.getElementById('cancel"""
            + f"""{element_id}"""
            + """').disabled=true
                  document.getElementById('uploadButton3"""
            + f"""{element_id}"""
            + """').disabled=true
              } else {
                 document.getElementById('cancel"""
            + f"""{element_id}"""
            + """').disabled=false
                 document.getElementById('uploadButton3"""
            + f"""{element_id}"""
            + """').disabled=false
             }
           });
           $('.downloadFormatButton"""
            + f"""{element_id}"""
            + """').click(downloadFormatUpload)
           function downloadFormatUpload () {
              $.ajax({
                url: `/users/${urlPath}/downloadCsv/`,
                data: {
                  "operation": "downloadFormat",
                  "dbTableName": "users_" + ($(this).attr('data-dbTableName')).toLowerCase(),
                  "modelName":  $(this).attr('data-modelName')
                },
                type: "POST",
                dataType: "json",
                success: function (data) {
                  Swal.fire({icon: 'success',text: 'Download successful!'});
                },
                error: function () {
                  Swal.fire({icon: 'error',text: 'Error! Failure in executing download request. Please try again.'});
                }
              })
           };
               </script>
       <script>
          $('#downloadData"""
            + f"""{element_id}"""
            + """').click(function(){
            $($(this).attr('data-target')).find('select').each(function(){
              parent = $(this).parent()
              $(this).select2({dropdownParent:parent})
            })

            $($(this).attr('data-target')).modal('show')
          })
          $('#from"""
            + f"""{element_id}"""
            + """ , #to"""
            + f"""{element_id}"""
            + """').on('change', function(){
            $('#from"""
            + f"""{element_id}"""
            + """').attr('max', $('#to"""
            + f"""{element_id}"""
            + """').val());
            $('#to"""
            + f"""{element_id}"""
            + """').attr('min', $('#from"""
            + f"""{element_id}"""
            + """').val());
          });"""
        )
        if advance_setting_check == "Yes":
            html = (
                html
                + """
          $('#uploadFile"""
                + f"""{element_id}"""
                + """').on('change', function(){
            $('#importCSVFieldTypeContainerUpload"""
                + f"""{element_id}"""
                + """').empty();
            $('#importCSVEngineConfigContainerUpload"""
                + f"""{element_id}"""
                + """').find('.form-group').eq(-1).find('select').not('.select-tags').select2();
            $('#importCSVEngineConfigContainerUpload"""
                + f"""{element_id}"""
                + """').find('.form-group').eq(-1).find('.select-tags').select2({tags: true});
            var file_name = $('#uploadFile"""
                + f"""{element_id}"""
                + """').val()
            if(file_name.endsWith('.csv')){
              $('#advance_pandas_settings_upload"""
                + f"""{element_id}"""
                + """').css('display', 'inline-block')
            }
            else{
              $('#advance_pandas_settings_upload"""
                + f"""{element_id}"""
                + """').css('display', 'none')
            }
          })"""
            )
        html = (
            html
            + """
          $('#advance_pandas_settings_upload"""
            + f"""{element_id}"""
            + """').click(function(){
              event.preventDefault();
              $($(this).attr('data-target')).modal('show');
          })

          $('#saveImportEngineConfigUpload"""
            + f"""{element_id}"""
            + """').on('click', function(){
            event.preventDefault()
            var importEngineConfig = {};
            var fieldTypeConfig = {};
            var engineParameterConfig = {};
            $('#importCSVFieldTypeContainerUpload"""
            + f"""{element_id}"""
            + """').find('.form-group').each(function(){
                var fieldName = $(this).find('label').text();
                var fieldType = $(this).find('select').val();
                fieldTypeConfig[fieldName] = fieldType;
            });
            importEngineConfig['field_type'] = fieldTypeConfig;
            $('#importCSVEngineConfigContainerUpload"""
            + f"""{element_id}"""
            + """').find('.form-group').each(function(){
                var parameterName = $(this).find('label').attr('for');
                var parameterValue = $(this).find('input,select').val();
                if (parameterValue != '' && parameterValue != [] && parameterValue) {
                    if ($(this).find('input[type="number"]').length) {
                        parameterValue = Number(parameterValue);
                    }
                    engineParameterConfig[parameterName] = parameterValue;
                }
            });
            importEngineConfig['parameter_config'] = engineParameterConfig;
            $('#advance_pandas_settings_upload"""
            + f"""{element_id}"""
            + """').attr('data-config', JSON.stringify(importEngineConfig));

            $('#csvImportEngineConfigModalUpload"""
            + f"""{element_id}"""
            + """').modal('hide');
          });

          $('#csvImportFetchColumnDetailsUpload"""
            + f"""{element_id}"""
            + """').on('click', function(){
              var file_input = new FormData($(`form[data-form-id=uploadfileform"""
            f"""{element_id}"""
            + """]`)[0]);
              file_input.append('operation', 'file_upload_csv_field_info');
              var existingConfig = $('#advance_pandas_settings_upload').attr('data-config');
              if (existingConfig) {
                  existingConfig = JSON.parse(existingConfig);
              } else {
                  existingConfig = {};
              }
              var engineParameterConfig = {};
              $('#importCSVEngineConfigContainerUpload"""
            + f"""{element_id}"""
            + """').find('.form-group').each(function(){
                  var parameterName = $(this).find('label').attr('for');
                  var parameterValue = $(this).find('input,select').val();
                  if (parameterValue != '' && parameterValue != [] && parameterValue) {
                      if ($(this).find('input[type="number"]').length) {
                          parameterValue = Number(parameterValue);
                      }
                      engineParameterConfig[parameterName] = parameterValue;
                  }
              });
              file_input.append('action', 'bulk_upload')
              file_input.append('engine_parameter', JSON.stringify(engineParameterConfig));
              if (Object.keys(existingConfig).length == 0) {
                  $.ajax({
                      url: `/users/${urlPath}/computationModule/upload-handler/`,
                      data: file_input,
                      type: 'POST',
                      cache: false,
                      contentType: false,
                      processData: false,
                      success: function (context) {
                          if (typeof(context) == "string") {
                              context = JSON.parse(context);
                          }
                          $('#importCSVFieldTypeContainerUpload"""
            + f"""{element_id}"""
            + """').empty();
                          for (let [key, val] of Object.entries(context.field_info)) {
                              $('#importCSVFieldTypeContainerUpload"""
            + f"""{element_id}"""
            + """').append(`
                                  <div class="form-group col-3">
                                      <label for="fieldInfo">${key}</label>
                                      <select name="fieldInfo" class="form-control select2">
                                          <option value="object">Text</option>
                                          <option value="float64">Float</option>
                                          <option value="int64">Integer</option>
                                          <option value="date">Date</option>
                                          <option value="time">Time</option>
                                          <option value="bool">Boolean</option>
                                      </select>
                                  </div>
                              `);
                              if (existingConfig.field_type) {
                                  if (existingConfig.field_type[key]) {
                                      val = existingConfig.field_type[key];
                                  }
                              }
                              $('#importCSVFieldTypeContainerUpload"""
            + f"""{element_id}"""
            + """').find('.form-group').eq(-1).find('select').val(val).trigger('change');
                              $('#importCSVFieldTypeContainerUpload"""
            + f"""{element_id}"""
            + """').find('.form-group').eq(-1).find('select').select2();
                          }
                          $('#headingImportEngineOneUpload"""
            + f"""{element_id}"""
            + """ > .fa-circle-notch').css('display', 'none');
                      },
                      error: function () {
                          $('#headingImportEngineOneUpload"""
            + f"""{element_id}"""
            + """ > .fa-circle-notch').css('display', 'none');
                          Swal.fire({icon: 'error',text: 'Error! Failure in reading field information. Please try again.'});
                      }
                  });
              }
              $('#csvImportEngineConfigModalUpload"""
            + f"""{element_id}"""
            + """').modal('show');
          });




          $('#from"""
            + f"""{element_id}"""
            + """ , #to"""
            + f"""{element_id}"""
            + """').on('change', function(){
            $('#from"""
            + f"""{element_id}"""
            + """').attr('max', $('#to"""
            + f"""{element_id}"""
            + """').val());
            $('#to"""
            + f"""{element_id}"""
            + """').attr('min', $('#from"""
            + f"""{element_id}"""
            + """').val());
          });

          $('#downloadHistory"""
            + f"""{element_id}"""
            + """').click(function(){
            $($(this).attr('data-target')).find('select').each(function(){
              parent = $(this).parent()
              $(this).select2({dropdownParent:parent})
            })

            $($(this).attr('data-target')).modal('show')
          })
          $('#fromHistory"""
            + f"""{element_id}"""
            + """ , #toHistory"""
            + f"""{element_id}"""
            + """').on('change', function(){
            $('#fromHistory"""
            + f"""{element_id}"""
            + """').attr('max', $('#toHistory"""
            + f"""{element_id}"""
            + """').val());
            $('#toHistory"""
            + f"""{element_id}"""
            + """').attr('min', $('#fromHistory"""
            + f"""{element_id}"""
            + """').val());
          });
          $('#downloadErrorLog"""
            + f"""{element_id}"""
            + """').click(function(){
            $($(this).attr('data-target')).find(".select2")('select').each(function(){
              parent = $(this).parent()
              $(this).select2({dropdownParent:parent})
            })

            $($(this).attr('data-target')).modal('show')
          })
          $('#fromErrorLog"""
            + f"""{element_id}"""
            + """ , #toErrorLog"""
            + f"""{element_id}"""
            + """ ').on('change', function(){
            $('#fromErrorLog"""
            + f"""{element_id}"""
            + """').attr('max', $('#toErrorLog"""
            + f"""{element_id}"""
            + """').val());
            $('#toErrorLog"""
            + f"""{element_id}"""
            + """ ').attr('min', $('#fromErrorLog"""
            + f"""{element_id}"""
            + """').val());
          });
          $('#selectDateErrorLog"""
            + f"""{element_id}"""
            + """').on("select2:select",function(){
            if($(this).val() == "Custom"){
              $('#ErrorLog"""
            + f"""{element_id}"""
            + """').css('display','block')
            }
            else{
              $('#ErrorLog"""
            + f"""{element_id}"""
            + """').css('display','none')
            }
          })
        </script>
              """
        )
    return html


def commonHtml(request, tab_type_list=[]):
    tableList_ = read_data_func(
        request,
        {
            "inputs": {
                "Data_source": "Database",
                "Table": "Tables",
                "Columns": ["tablename"],
            },
            "condition": [],
        },
    ).tablename.tolist()
    html = ""
    html += """
    <div class="modal fade" id="tabsMultiFunc" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tabsMultiFunc" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Manage Tabs</h5>
             <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
              style="
                  background: unset;
                  font-size: 1.5rem;
                  color: black;
              "
            >
              <span aria-hidden="true">&times;</span>
            </button>
          </div>

          <div class="modal-body">
            <div class=''>
              <div class='tabsMultiFuncBody'>
              <style>
              #tabsMultiFuncBodyTable thead tr{
                background: var(--primary-color);
                color: var(--font-hover-color);
              }
              #tabsMultiFuncBodyTable tbody tr{
                background: #fff !important;
              }
              #tabsMultiFuncBodyTable tbody tr:hover{
                background: rgb(243, 243, 243) !important;
              }
              #tabsMultiFuncBodyTable .switch-container {
                  width: 3.6em;
                  height: 1.6em;
              }
              #tabsMultiFuncBodyTable .switch-color {
                width: 3.4em;
                height: 1.4em;
              }
              #tabsMultiFuncBodyTable .switch-container label.switch-label {
                width: 1.2em;
                height: 1.2em;
              }
              #tabsMultiFuncBodyTable td, #tabsMultiFuncBodyTable th {
                  vertical-align: middle !important;
              }

              </style>
                <table id="tabsMultiFuncBodyTable" class="table table-bordered" style="width:100%;overflow-x: scroll;overflow-y:scroll;">
                  <thead style="border-bottom:1px solid var(--primary-color)" >
                    <tr style="text-align:center">
                      <th>Re-order</th>
                      <th>Display</th>
                      <th>Tab Name</th>
                    </tr>
                  </thead>
                  <tbody style="border-bottom:1px solid var(--primary-color);">
                  </tbody>
                </table>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>
          </div>
        </div>
      </div>
    </div>"""
    if "create_view" in tab_type_list:
        html += """
      <div class="modal" id="RecurrenceModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="formModalLabel" aria-hidden="true" >
        <div class="modal-dialog modal-lg" role="document" style="width: 100%;">
          <div class="modal-content">
            <div class="modal-header" style='background:#565a5e; color:white; display: flex;justify-content: center;'>
              <h5 class="modal-title">Recurrence</h5>
            </div>
            <div class="modal-body">
              <div class="card">
                <div class="card-body">
                  <div class="form-group">
                    <label for="recpattern">Recurrence pattern: </label>
                    <select class="select2 form-control recpattern" name="recpattern">
                        <option value="" disabled selected>Choose One</option>
                        <option value='Daily'>Daily</option>
                        <option value='Weekly'>Weekly</option>
                        <option value='Monthly'>Monthly</option>
                        <option value='Yearly'>Yearly</option>
                    </select>
                </div>
                <div class="form-group daily_div" style="display:none;">
                  <div class='custom-control custom-radio'>
                    <input type="radio" id = "daily_input_every" class="custom-control-input recdaily_choice" name="data_choice1" value="Everyday">
                    <label for="daily_input_every" class="custom-control-label black">Every Day(s)</label >
                  </div>
                  <div class='custom-control custom-radio'>
                      <input type="radio" id="dail_input_weekday" class="custom-control-input recdaily_choice" name="data_choice1" value="Everyweekday">
                      <label for="dail_input_weekday" class="custom-control-label black">Every weekday</label >
                  </div>
                  <div style="padding-top: 1rem;">
                    <input type='number' class='form-control rec_daily_days_no' placeholder='Enter Number of Day(s)'/>
                  </div>
                </div>
                <div class="form-group weekly_div" style="display:none;">
                  <div class='row' style="align-items: center;">
                    <span>Recur every </span>
                    <div class='col-1'>
                    <input type='number' class='form-control rec_weekly_days_no'/>
                    </div>
                    <span> week(s) on: </span>
                  </div>
                  <div style="padding-top: 1rem;">
                    <label for="column">Following days:</label>
                    <select class="select2 form-control rec_weekly_days" name="column" multiple>
                      <option value='Monday'>Monday</option>
                      <option value='Tuesday'>Tuesday</option>
                      <option value='Wednesday'>Wednesday</option>
                      <option value='Thursday'>Thursday</option>
                      <option value='Friday'>Friday</option>
                      <option value='Saturday'>Saturday</option>
                      <option value='Sunday'>Sunday</option>
                    </select>
                  </div>
                </div>
                <div class="form-group monthly_div" style="display:none;">
                  <div class='row' style="align-items:center;">
                    <span>Day </span>
                    <div class='col-1'>
                      <input type='number' class='form-control rec_monthly_days_no'/>
                    </div>
                    <span> of every </span>
                    <div class='col-1'>
                      <input type='number' class='form-control rec_monthly_months_no'/>
                    </div>
                    <span> month(s) </span>
                  </div>
                </div>
                <div class="form-group yearly_div" style="display:none;">
                  <div class='row' style="align-items: center;">
                    <span>Recur every </span>
                    <div class='col-1'>
                      <input type='number' class='form-control rec_yearly_year_no'/>
                    </div>
                    <span> years(s) on </span>
                    <div class='col-3'>
                      <select class="select2 form-control rec_yearly_month_no">
                        <option value='Jan'>Jan</option>
                        <option value='Feb'>Feb</option>
                        <option value='Mar'>Mar</option>
                        <option value='Apr'>Apr</option>
                        <option value='May'>May</option>
                        <option value='Jun'>Jun</option>
                        <option value='Jul'>Jul</option>
                        <option value='Aug'>Aug</option>
                        <option value='Sept'>Sept</option>
                        <option value='Oct'>Oct</option>
                        <option value='Nov'>Nov</option>
                        <option value='Dec'>Dec</option>
                      </select>
                    </div>
                    <div class='col-1'>
                      <input type='number' class='form-control rec_yearly_day_no'/>
                    </div>
                  </div>
                </div>
                <div class="form-group range_div">
                  <div class="row">
                  <div class='col-3'>
                  <label>Select Date range:</label>
                  <input type='text' class="form-control p-2 dtrangepicker">
                  </div>
                </div>
                  <div class="row" style="padding-top: 2rem;">
                  <div class='custom-control custom-radio col-3'>
                    <input type="radio" id = "end_recc" class="custom-control-input rec_range_choice" name="data_choice2" value="endafter">
                    <label for="end_recc" class="custom-control-label black">End after no.of occurrences: </label >
                    <input type='number' class='form-control rec_occurr'/>
                  </div>
                  <div class='custom-control custom-radio col-3'>
                      <input type="radio" id="no_end_date" class="custom-control-input rec_range_choice" name="data_choice2" value="noenddate">
                      <label for="no_end_date" class="custom-control-label black">No end date</label >
                  </div>
                  <div class='custom-control custom-radio col-3'>
                    <input type="radio" id="on_end_date" class="custom-control-input rec_range_choice" name="data_choice2" value="onenddate">
                    <label for="on_end_date" class="custom-control-label black">On end date</label >
                </div>
                </div>
                </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button class="btn btn-primary hideRecurrModal" data-dismiss="modal" type="button">
                Close
              </button>
              <button class="btn btn-primary saveRecurrButton" type="button" data-dismiss="modal" onclick="saveRecurrButton.call(this)" style="margin-left: 0.5rem;">
                Save
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="modal fade" id="rtf_field_createView_dialog"  role="dialog" data-focus="false" aria-labelledby="rtf_field_createView_dialog" aria-hidden="true" style="z-index: 1053;">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="NotextLabel">Details</h5>
            </div>
            <div class="modal-body">
              <form>
                <textarea id="rtf_field_message_createView" name="rtf_field_message_createView">&nbsp;&nbsp;</textarea>
              </form>
              <script>
              CKEDITOR.replace('rtf_field_message_createView',{height: 300});
              CKEDITOR.config.removePlugins = 'exportpdf,elementspath';
              CKEDITOR.config.extraPlugins = 'autocorrect';
              </script>
            </div>
          </div>
        </div>
      </div>
    """
    if "analysis" in tab_type_list:
        html += """
      <div class="modal fade" id="ckEditorModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="ckEditorModal" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Text Editor</h5>
                <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>

            <div class="modal-body">
              <div class='card'>
                <div class='card-body'>
                  <div class="rtf_action_tab" role="tablist" style="display:flex;">
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1 active" data-bs-target="Text" type="button" role="tab" aria-controls="Text" aria-selected="true">Text Format</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1" data-bs-target="Insert" type="button" role="tab" aria-controls="Insert" aria-selected="false">Insert</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button mr-1" data-bs-target="Form" type="button" role="tab" aria-controls="Form" aria-selected="false">Form</button>
                    <button class="btn btn-light mb-1 rtf-editor-tab-button" data-bs-target="Page Layout" type="button" role="tab" aria-controls="Page Layout" aria-selected="false">Page Layout</button>
                  </div>
                  <textarea name="text_editor"></textarea>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button onclick="saveCkEditor.call(this)" type="button" class="btn btn-primary">Save</button>
            </div>
          </div>
        </div>
      </div>"""
    else:
        pass
    if "computation" in tab_type_list:
        html += """
      <div class="modal fade" id="viewCompScenario" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="viewCompScenario" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title text-primary" style="margin-left: auto;">View Scenario</h5>
              <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>

            <div class="modal-body" style="background-color:whitesmoke">
              <div class='card'>
                <div class='card-body viewCompScenarioBody'>
                  <div style="background:whitesmoke;border:solid 1.5px black;max-height:30rem;overflow:auto;padding: 0;">
                    <div id="model_inputs_scenario_" > </div>
                  </div>
                  <br>
                  <div class="form-inline">
                    <label for="scenario_name_">Scenario Name:</label>
                    &nbsp;&nbsp;<input type="text" id="scenario_name_" data-element_id="" class="textinput textInput form-control" required="" >
                  </div>
                  <br>
                  <div class="form-inline">
                    <label for="scenario_configuration_date_">Configuration date:</label>
                    &nbsp;&nbsp;<input type="text" placeholder="YYYY-MM-DD" id="scenario_configuration_date_" class="form-control datepickerinput" required="" >
                  </div>
                  <br>
                  <div class="custom-control custom-checkbox">
                      <input type="checkbox" name="runWithBaseModel_" class="checkboxinput custom-control-input" id="runWithBaseModel_" value="Risk_Measures" required="" >
                      <label for="runWithBaseModel_" class="custom-control-label">
                      Run with base model
                      </label>
                  </div>
                  <br>
                  <div class="row" style="overflow: auto;">
                    <table class="table table-bordered table-hover">
                      <thead class="thead-dark">
                        <tr>
                          <th scope="col" style="text-align: center;">Model input</th>
                          <th scope="col" style="text-align: center;">Scenario type - Base Data</th>
                          <th scope="col" style="text-align: center;">Scenario type - Scenario Data</th>
                          <th scope="col" style="text-align: center;">Action</th>
                        </tr>
                      </thead>
                      <tbody id="element_incremental_data_"></tbody>
                    </table>
                  </div>
                  <button type="button" id="run_saved_scenario"  class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Run Scenario &nbsp;<i class="fas fa-play"></i></button>
                  <button type="button" id="save_edited_scenario"  class="btn btn-primary btn-md mx-1 my-1 rounded px-2">Save &nbsp;<i class="fas fa-save"></i></button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal fade" id="scenarioModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tabsMultiFunc" aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Scenarios</h5>
                <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>

            <div class="modal-body">
            </div>
          </div>
        </div>
      </div>
    """
    else:
        pass
    if "list_view" in tab_type_list:
        html += """
      <div class="modal fade" id="rtf_field_listview_dialog"  role="dialog" data-focus="false" aria-labelledby="rtf_field_listview_dialog" aria-hidden="true" style="z-index:1061">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="NotextLabel"></h5>
            </div>
            <div class="modal-body">
            <form>
              <textarea id="rtf_field_message_listview" name="rtf_field_message_listview">&nbsp;&nbsp;</textarea>
            </form>
            <script>
              CKEDITOR.replace('rtf_field_message_listview',{height: 300});
              CKEDITOR.config.removePlugins = 'exportpdf,elementspath';
              CKEDITOR.config.extraPlugins = 'autocorrect';
              </script>
              </div>
          </div>
        </div>
      </div>
      <div class="modal fade" id="approval_table_Modal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tabsMultiFunc" aria-hidden="true" style="z-index:2000 !important">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Approval table</h5>
              <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
            </div>
          </div>
        </div>
      </div>

      <div class="modal fade" id="approval_template_json_data_tabular"  role="dialog" data-focus="false" aria-labelledby="approval_template_json_data_tabular" aria-hidden="true" style="z-index: 2053; padding-top: 80px;">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="">Details</h5>
            </div>
            <div class="modal-body" style="padding:50px;">
            </div>
            <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    """
    else:
        pass
    if any(tab_type in ["create_view", "list_view"] for tab_type in tab_type_list):
        html += """
      <div class="modal fade" id="rtf_field_dialog" style="z-index:1060;"  role="dialog" data-focus="false" aria-labelledby="rtf_field_dialog" aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="NotextLabel">Compose Message</h5>
            </div>
            <div class="modal-body">
            <form>
              <textarea id="rtf_field_message" name="rtf_field_message">&nbsp;&nbsp;</textarea>
            </form>
            <script>
              CKEDITOR.replace('rtf_field_message',{height: 300});
              CKEDITOR.config.removePlugins = 'exportpdf';
              CKEDITOR.config.extraPlugins = 'autocorrect';
              </script>
              </div>

            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" onclick="save_rtf_field_data()">Save</button>
            </div>
          </div>
        </div>
      </div>
    """
    else:
        pass
    if any(
        tab_type
        in [
            "computation",
            "list_view",
            "data_connector",
        ]
        for tab_type in tab_type_list
    ):
        html += """
      <div class="modal" id="EBDisplayModel">
          <div>
              <div style="height:100vh;overflow:auto;background:whitesmoke;z-index:10;position: relative;">

                  <div id="EBbody">

                      <div class="overlay" id="overlay" style="display:none;"></div>
                      <div class="popup" id="popup" style="display:none;">
                          <div class="popup-inner">
                              <input type="button" name="Close" class="s3-btn-close" onclick="popupClose();" value="&times;">

                              <h2 id='funcHeading' style="font-size:28px"></h2>
                              <br />
                              <div id="funcInput" class='ScrollStyle'>
                              </div>
                              <p id='funcDesc' style="font-size:22px;"></p>
                          </div>
                      </div>

                      <div class="equation-left">
                          <div class="fav-functions">
                              <div class="functions-search">
                                  <h2>Favourite Functions</h2>
                              </div>

                              <div id="favouriteList">

                              </div>
                          </div>

                          <div class="eq-functions">
                              <div class="functions-search">
                                  <h2>Search Functions</h2>
                                  <div class="searchWrapper">
                                      <input type="text" name="searchBar" id="searchBar"
                                          placeholder="Search for a function" />
                                  </div>
                              </div>

                              <div id="functionsList">

                              </div>
                          </div>
                      </div>
                      <div class="equation-right">
                          <div class="search-table">
                              <div class="searchWrapper">
                                  <input type="text" name="searchTable" id="searchTable" placeholder="Search for table" />
                              </div>
                              <div id="tableList">"""
        for l in tableList_:
            html = (
                html
                + f"""
        <div onClick='selectTable(`{l}`)' class="tableItem btn-md btn">
            <p class="tableItemP"
                onClick="selectTable(e.target.value);changeTableandColumns(e.target.value)"
                value="{l}">{l}</p>
        </div>
      """
            )
        html = (
            html
            + """
                                  </div>

                          </div>
                          <div id='selectedTablesDiv'>

                          </div>
                          <div id="table-columns" class="dragAreaPossible"></div>
                          <div class="eq-workspace">
                              <div class="workspace-left">
                                  <div class="ebSteps">
                                      <h2>Steps</h2>
                                      <div id="stepNumsEb"></div>
                                  </div>
                                  <div class="ebFunctions dragAreaPossible">
                                      <h2>Functions</h2>
                                  </div>
                                  <div id="dataElementParent" class="ebDataElements">
                                      <h2>Data Elements</h2>
                                  </div>
                              </div>
                              <div class="workspace-right">
                                  <h2>Preview</h2>
                                  <div id="functionPreviews"></div>
                              </div>
                          </div>
                          <div class="eq-preview">
                                      <div class="modal-content-eq">

                                  <!-- Modal body -->
                                  <div class="modal-body" id="viewData1" style="max-height:50rem;overflow:auto;">
                                      <table id="exampledata1" class="display compact" style="width:100%;" data-parent_group_no="g3">
                                          <thead>
                                              <tr>
                                                  <th id="thid1"></th>
                                              </tr>
                                          </thead>
                                          <tbody>
                                          </tbody>
                                        </table>
                                  </div>

                                </div>
                              <!-- </div> -->
                          <!-- </div> -->
                          </div>
                      </div>

                  </div>

                  <div class="modal-footer">
                      <button type="button" id="where_condition" class="btn btn-primary btn-md rounded">Configure where condition</button>
                      <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" id="export_data_equ">Export Data to DB</button>
                      <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2 closeEqBuilder" data-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" id="save_workflow_equ">Save</button>
                  </div>
              </div>
          </div>
      </div>
        <div class="modal" id="exportEquModal">
              <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">

                  <!-- Modal Header -->
                  <div class="modal-header">
                    <h6 class="modal-title">Select Configurations</h6>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                  </div>

                  <!-- Modal body -->
                  <div class="modal-body" id="exportEqData" style="max-height:25rem;overflow:auto;">
                          <div class="dropdown">

                              <div class="form-group" id="exportTable1">
                                  <label for="exportTable1">Select table to export Data:</label>
                                  <select id="selectExportTable1" class="form-control" name="exportTable1">
                                  <option value="" disabled selected>Select Table Name</option>"""
        )
        for l in tableList_:
            html = (
                html
                + f"""
        <option value="{l}">{l}</option>"""
            )
        html = (
            html
            + """
                                  </select>
                              </div>

                              <div class="form-group" id="exportTypeContainer1">
                                  <label for="selectExportDataType1">Export type: </label>
                                  <select class="form-control" name="selectExportDataType1" id="selectExportDataType1">
                                      <option value='append' selected>Append to existing data</option>
                                      <option value='update'>Update existing data</option>
                                      <option value='replace'>Replace the existing data</option>
                                  </select>
                              </div>

                              <div class="form-group"  id="exportColumn1">
                                  <label for="column1">Column Name:</label>
                                  <select id="exportselectColumn1" class="form-control" name="column1" multiple>
                                  </select>
                              </div>

                              <div class="form-group" id="updateIdentifierContainer1" style="display: none;">
                                  <label for="selectUpdateIdentifierCol1">Select identifier columns: </label>
                                  <select class="form-control" name="selectUpdateIdentifierCol1" id="selectUpdateIdentifierCol1" multiple>
                                  </select>
                              </div>
                              <div class="form-group" id="updateColumnContainer1" style="display: none;">
                                  <label for="selectUpdateCol1">Select columns to update: </label>
                                  <select class="form-control" name="selectUpdateCol1" id="selectUpdateCol1" multiple>
                                  </select>
                              </div>

                              <br>

                              <div class="form-group" style="text-align: left;">
                                  <button type="button" id="save_buttonExportData1" class="btn btn-primary btn-md mx-2 rounded px-2">Save</button>
                                  <button type="submit" id="run_stepExportData1" class="btn btn-primary btn-md mx-2 rounded px-2">Run</button>
                              </div>
                          </div>

                          <br>
                  </div>

                  <!-- Modal footer -->
                  <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                  </div>

                </div>
              </div>
          </div>

          <div class="modal" id="where_condition_Modal">
            <div class="modal-dialog modal-lg modal-dialog-centered">
              <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                  <h6 class="modal-title">Set Condition</h6>
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div class="btn-group">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                          {{_("Add Filter")}}
                          <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" id="condition_dropdown">
                        </ul>
                    </div><br>
                    <br>
                    <div style="float: left;"><button type="button" id="filter_condition_import" class="btn btn-primary btn-md mx-2 rounded px-2" style="display:none; float: right;">Filter Data</button></div><br>
                    <br>
                    <div id="select_filter_columns_div" style="display: none;">
                        <div class="col-4">
                            <label for="select_parent_column">Select Parent Column</label>
                            <select name="select_parent_column" id="select_parent_column" class="select2"></select>
                        </div>
                        <div class="col-4">
                            <label for="select_current_column">Select Filter Column</label>
                            <select name="select_current_column" id="select_current_column" class="select2"></select>
                        </div>
                    </div>
                    <div class="row" id="items">
                        <table class="table" id="filter-table">
                        </table>
                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                  <button type="button" id="btn_search" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Save</button>
                  <button type="button" class="btn btn-primary btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
                </div>

              </div>
            </div>
          </div>"""
        )
    else:
        pass
    return html


def grapeJsHtml(
    app_code,
    request,
    loadstatic,
    staticcss,
    htmldata,
    element_list,
    script_data,
    widget_script,
    displayOptions,
    mode,
    custom_favicon="",
    custom_webpage_title="Revolutio",
):
    tenant = tenant_schema_from_request(request)
    if not custom_favicon:
        custom_favicon = "{% static 'images/favicons/favicon1.ico' %}"
    htmlwithcssdata = (
        f"""<!DOCTYPE html>
    {loadstatic}
    <html lang="en">
    <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="{custom_favicon}">
    <title>{custom_webpage_title}</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <!-- Theme style -->
    <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{{%static 'css/Acies_theme/Stylesheet1.css'%}}">
    <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{{%static 'css/Base_theme/CSS_min.css'%}}">
    <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{{%static 'css/Default.css' %}}">

    <!-- jQuery -->
    <script src="{{%static 'vendor/Base_theme/jquery/jquery.min.js'%}}"></script>

    <script src="{{%static 'vendor/Base_theme/bootstrap/js/bootstrap.bundle.min.js'%}}"></script>
    <!--Jquery UI-->
    <script src="{{%static 'vendor/Base_theme/jquery-ui/jquery-ui.js'%}}"></script>

    <!-- Select2 -->
    <style>

      .commentboxcard {{
        height: 400px;
        width: 500px
      }}
      strong {{
        font-weight: bold;
      }}
    </style>
    """
        + f"""
    <style>.tooltip-arrow,
    .edittooltip + .tooltip > .tooltip-inner {{background-color: var(--primary-color);}}</style>
            <body>"""
        + """
            <form>{% csrf_token %}</form>"""
    )
    if displayOptions:
        htmlwithcssdata = (
            htmlwithcssdata
            + f"""
              <a onclick='redirectGrapejs.call(this)'"""
            + """' style="position:absolute;z-index:1;color:var(--primary-color);right:0px"><span class="edittooltip material-icons" data-toggle="tooltip" data-placement="right" title="Edit Homepage" >
      edit
      </span>
      </a>
      <span class="material-icons" id="clearCache" onclick="ClearCachealert()" style="position:absolute;z-index:1;color:var(--primary-color);right:0px;top:30px;cursor: pointer;" class="edittooltip" data-toggle="modal" data-placement="right">
          logout
      </span>

      <!--<div class="tooltipdiv" style="display:none;position:absolute;top:5px;height:30px; width: 103px;color:white;padding:5px;right: 25px;border-radius:4px;background-color:var(--primary-color)"><span class="tooltiptext">Edit Homepage</span></div>-->
        """
        )

    htmlwithcssdata = (
        htmlwithcssdata
        + f"""<style> {staticcss} </style>"""
        + """
    """
        + """
    """
        + f"""{htmldata}"""
        + """
    <div class="modal fade" id="draftModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="draftModal"  aria-modal="true" style="z-index:1052 !important;">
        <div class="modal-dialog modal-xl modal-lg modal-dialog-centered"  role="document">
            <div class="modal-content">


           <div class="modal-header border-0 pl-3 pr-3">
                  <h6 class="modal-title">Draft Versions</h6>
                  <i class="fa-solid fa-box-archive fa-3x"></i>
              </div>

            <div class="modal-body ">
                <table class="table table-striped" id="previewTable">

                </table>
            </div>

            <div class="modal-footer d-flex justify-content-end border-0">
                <button type="button" class="btn btn-primary buttonfooter btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
            </div>

            </div>
        </div>
    </div>
    <div class="modal fade" id="table_field_createView_dialog"  role="dialog" data-focus="false" aria-labelledby="table_field_createView_dialog" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal" onclick="$('#draftModal').modal('show')">Close</button>
              </div>
            </div>
          </div>
    """
        + f"""
    """
    )
    htmlwithcssdata = htmlwithcssdata + commonHtml(request)
    htmlwithcssdata = htmlwithcssdata + defineVariable()
    htmlwithcssdata = (
        htmlwithcssdata
        + f"""
    <form>{{% csrf_token %}}</form>
    <script>
      var windowLocation = window.location.pathname
      var windowLocationAttr = window.location
      var f_occ1 = windowLocation.indexOf('/', windowLocation.indexOf('/') + 1)
      var s_occ1 = windowLocation.indexOf('/', windowLocation.indexOf('/') + f_occ1 +1)
      var t_occ1 = windowLocation.indexOf('/', windowLocation.indexOf('/') + s_occ1 +1)
      var app_code2_ = windowLocation.substring(f_occ1+1,s_occ1)
      var current_dev_mode2_ = windowLocation.substring(s_occ1+1,t_occ1)
      if(current_dev_mode2_ != "Build" && current_dev_mode2_ != "Edit"){{
        current_dev_mode2_ = "User"
      }}
      var urlPath = `${{app_code2_}}/${{current_dev_mode2_}}`;
    function enableSaveButton() {{
        $(this).find('button[value=Save]').prop('disabled',false);
    }};
    var ctoken = $('form').find(`input[name='csrfmiddlewaretoken']`).attr('value')
    $.ajaxSetup({{
        beforeSend: function (xhr, settings) {{
            xhr.setRequestHeader("X-CSRFToken", ctoken);
        }}
    }});
    var grapejs = 1;
    function redirectGrapejs(){{
      window.location.href = `/users/${{app_code2_}}/${{current_dev_mode2_}}/homePage/Grapejs`;
    }}
    </script>

    """
    )
    htmlwithcssdata = (
        htmlwithcssdata
        + f"""
    <link rel="stylesheet" href="{{% static 'css/KoreD/jquery.dataTables.min.css' %}}">
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/datatables-responsive/css/responsive.bootstrap4.min.css' %}}">
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/datatables-colreorder/css/colReorder.bootstrap4.min.css' %}}">
    <link rel="stylesheet" href="{{% static 'css/KoreD/buttons.dataTables.min.css' %}}">
    <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{{% static 'css/ebstyle.css' %}}">

    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/select2/css/select2.min.css' %}}">
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/select2-bootstrap4-theme/select2-bootstrap4.min.css' %}}">
    <!-- Select2 -->
    <script src="{{% static 'vendor/Base_theme/select2/js/select2.full.min.js' %}}"></script>

    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/font-awesome/css/all.min.css' %}}">

    <!-- Sweet Alert2 -->
    <script fetchpriority="low" src="{{% static 'vendor/sweet_alert/sweetalert2.all.min.js' %}}"></script>
    <!-- DataTables -->
    <script src="{{% static 'vendor/Base_theme/datatables/jquery.dataTables.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-responsive/js/dataTables.responsive.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-fixedheader/js/dataTables.fixedHeader.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-colreorder/js/dataTables.colReorder.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-bs4/js/dataTables.bootstrap4.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-fixedcolumns/js/dataTables.fixedColumns.min.js' %}}"></script>
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/datatables-fixedcolumns/css/fixedColumns.dataTables.min.css' %}}">
    <!-- Treant JS -->
    <link href="{{% static 'vendor/treant-js-master/Treant.css' %}}" type="text/css" rel="stylesheet" />
    <script fetchpriority="low" src="{{% static 'vendor/treant-js-master/vendor/raphael.js' %}}"></script>
    <script fetchpriority="low" src="{{% static 'vendor/treant-js-master/Treant.js' %}}"></script>
    <!-- Timepicker -->
    <link rel="stylesheet" href="{{% static 'bootstrap-datepicker/bootstrap-datetimepicker.min.css' %}}">
    <link rel="stylesheet" href="{{% static 'bootstrap_datepicker_plus/css/datepicker-widget.min.css' %}}">
    <script type="text/javascript" src="{{% static 'moment/moment-with-locales.min.js' %}}"></script>
    <script type="text/javascript" src="{{% static 'bootstrap-datetimepicker/bootstrap-datetimepicker.min.js' %}}"></script>
    <script type="text/javascript" src="{{% static 'bootstrap_datepicker_plus/js/datepicker-widget.js' %}}"></script>

    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/dataTables.buttons.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/jszip/jszip.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/pdfmake/pdfmake.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/pdfmake/vfs_fonts.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/buttons.html5.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/buttons.colVis.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/buttons.print.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/buttons.print.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-buttons/js/buttons.flash.min.js' %}}"></script>
    <script src="{{% static 'vendor/Base_theme/datatables-rowreorder/js/dataTables.rowReorder.min.js' %}}"></script>
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/datatables-rowreorder/css/rowReorder.bootstrap4.min.css' %}}">
    <!-- Pivot Table JS -->
    <script type="text/javascript" src="{{% static 'vendor/d3/d3.min.js' %}}"></script>
    <script type="text/javascript" src="{{% static 'vendor/c3/c3.min.js' %}}"></script>


    <script src="{{% static 'vendor/Plotly/plotly-basic-latest.min.js' %}}"></script>

    <script src="{{% static 'js/pivottable/dist/pivot.min.js' %}}"></script>
    <script src="{{% static 'js/pivottable/dist/c3_renderers.min.js' %}}"></script>

    <script src="{{% static 'js/pivottable/dist/d3_renderers.min.js' %}}"></script>
    <script src="{{% static 'js/pivottable/dist/gchart_renderers.min.js' %}}"></script>
    <script src="{{% static 'js/pivottable/dist/googleapis.js' %}}"></script>
    <script src="{{% static 'js/pivottable/dist/plotly_renderers.min.js' %}}"></script>

    <!-- Plotly -->
    <script src="{{% static 'vendor/Plotly/plotly-latest.min.js' %}}"></script>
    <link href="{{% static 'vendor/Plotly/mapbox-gl.css' %}}" rel='stylesheet' />
    <link href="{{% static 'vendor/Tabulator/tabulator.min.css' %}}" rel="stylesheet">
    <script fetchpriority="low" type="text/javascript" src="{{% static 'vendor/Tabulator/tabulator.min.js' %}}"></script>
    <!-- jsPDF -->
    <script fetchpriority="low" src="{{% static 'js/jsPDF/dist/jspdf.umd.min.js' %}}"></script>
    <!-- html2Canvas -->
    <script src="{{% static 'js/html2canvas/html2canvas.min.js' %}}"></script>

    <!-- Jcrop OCR -->
    <script src="{{% static 'vendor/Jcrop/popper.min.js' %}}"></script>
    <script src="{{% static 'vendor/Jcrop/jquery.Jcrop.js' %}}"></script>
    <script src="{{% static 'vendor/Jcrop/console.image.min.js' %}}"></script>

    <!-- XLSX/XML Table Export --->
    <script src="{{% static 'js/tableExport/tableExport.js' %}}" ></script>

    <link rel="stylesheet" href="{{%static 'bootstrap-datepicker/bootstrap-datetimepicker.min.css'%}}">
    <link rel="stylesheet" href="{{%static 'bootstrap_datepicker_plus/css/datepicker-widget.min.css'%}}">
    <link rel="stylesheet" href="{{% static 'vendor/Base_theme/fontawesome-free/css/all.min.css' %}}">
    <script type="text/javascript" src="{{%static 'moment/moment-with-locales.min.js'%}}"></script>
    <script type="text/javascript" src="{{%static 'bootstrap-datetimepicker/bootstrap-datetimepicker.min.js'%}}"></script>
    <script type="text/javascript" src="{{%static 'bootstrap_datepicker_plus/js/datepicker-widget.js'%}}"></script>
    <script type="text/javascript" src="{{% static 'moment/moment.min.js' %}}"></script>
    <script type="text/javascript" src="{{% static 'daterangepicker/js/daterangepicker.min.js' %}}"></script>
    <link rel="stylesheet" href="{{% static 'daterangepicker/css/daterangepicker.css' %}}">
    <script src="{{% static 'vendor/sweet_alert/sweetalert2.all.min.js' %}}"></script>
    <script type="text/javascript" src="{{% static 'js/ebjavascript.min.js' %}}" defer></script>
    <script type="text/javascript" src="{{% static 'js/Kore_TI_js/htmlGeneratorScript.min.js' %}}" defer></script>
    <script>;var item_code_list = [];</script>
    <script fetchpriority="low" type="text/javascript" src="{{% static 'js/Kore_TI_js/datatables/upload_table.min.js' %}}" defer></script>
    <script src="{{% static 'js/Kore_TI_js/datatables/base_datatable_filter.min.js' %}}"></script>
    <script>{script_data}
    const gotoTab = (parent, index) => {{
      let id = '#analysis' + index;
      $(id).trigger('click');
    }}"""
        + """
    var { jsPDF } = window.jspdf;
    </script>
  """
    )
    global_css = ""
    if os.path.exists(
        f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/theme/Global/style.css"
    ):
        with open(
            f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/theme/Global/style.css"
        ) as f:
            global_css = global_css + f.read()
            f.close()
    htmlwithcssdata = (
        htmlwithcssdata
        + """

    <script>
    $(document).ready(function() {
      $('select.select2:not(.modal select.select2)').each(function(){
        parent = $(this).parent()
        $(this).select2({dropdownParent:parent})
      })
      $('.modal select.select2').each(function(){
          $(this).select2()
      })
    })
    $(".edittooltip").hover(() => {
    $(".tooltipdiv").css({
    display: "block",
    });
    });
    $(".edittooltip").mouseout(() => {
        $(".tooltipdiv").css({
        display: "none",
        });
    });</script>
    <script>
        function ClearCachealert() {
          Swal.fire({
            title: 'Are you sure you want to sign out?',
            icon: 'question',
            html : `<form method="post" action="{% url 'logout' %}">
              {% csrf_token %}
              {% if redirect_field_value %}
              <input type="hidden" name="{{ redirect_field_name }}" value="{{ redirect_field_value }}" />
              {% endif %}
              <div class="d-flex justify-content-center">
                <div class="logout switch-container">
                  <input type="checkbox" class="clear_cache switch" name="clear_cache" id="clear_cache">
                  <div class="switch-color"><label class="trigger-label" for="clear_cache"></label></div>
                  <label class="sign switch-label" for="clear_cache"></label>
                </div>
                <label style="font-weight:normal;font-size:0.9em;margin-left: 7px;" for="clear_cache"> Clear Cache? </label>
              </div>
              <button class="swal2-styled swal2-confirm" id="add" type="submit">Sign Out</button>
              <button type="button" class="swal2-cancel swal2-styled" onclick="swal.close()" aria-label="" style="display: inline-block;">Cancel</button>
            </form>`,
            showCloseButton: false,
            showCancelButton: false,
            showConfirmButton: false,
          })

        }

        $("#dontclearCache").on('click', function(){
            window.location.href = "{% url 'logout' %}";
        });
        </script>
        <script>"""
    )
    htmlwithcssdata = (
        htmlwithcssdata
        + f"""
            app_code_home='{app_code}'
            user_home='{request.user.username}'
        </script>"""
    )
    htmlwithcssdata = (
        htmlwithcssdata
        + """
  <script fetchpriority="low" src="{% static 'js/Kore_TI_js/Standardized_JS/standard_button_js.min.js' %}" defer></script>
  """
    )
    htmlwithcssdata = (
        htmlwithcssdata
        + """
        <script>
          """
        + f"""{widget_script}"""
        + """
        </script>"""
    )
    htmlwithcssdata = (
        htmlwithcssdata
        + f"""
  <style>
    {global_css}
  </style>

  """
    )

    htmlwithcssdata = (
        htmlwithcssdata
        + """

<style>
  .charts{
    width: fit-content;
  }
.arrow {
  border: solid black;
  border-width: 0 3px 3px 0;
  display: inline-block;
  padding: 3px;
}
.down {
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
}
    .dropdown-menu {
    height: 200px;
    width: 10em;
    min-width: 20em;
    overflow-y: scroll;
}



    :focus {
      outline: transparent;
    }

    .outerAnchorTag {
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      align-content: baseline;
      align-items: baseline;
      justify-content: flex-start;
      font-size: 15px;
      /*padding: 0.5rem 0rem;*/
    }

    .popoverCardheader{
      color: var(--primary-color);
      text-align: center;
    }

    .outerAnchorTag>p {
      /*font-size:0.7em;*/
      font-size: 8.7px;
      /*padding: 0.1em 0.2em;*/
      word-break: break-word;
      white-space: normal;
      text-align: center;
    }

    #search {
      margin-top: 0.1em;
      height: 2.4em;
    }


    #itag {
      display: none;
      float: right;
      font-size: 15px;
      cursor: move;
    }
    .analysisDashboardmove {
        background-color: white;
    }

    .tabulator .tabulator-header .tabulator-col {
        background-color: var(--primary-color);
        color: white;
        text-align: center;

    }
    .dropbtn {
        background-color: white;
        color: black;
        padding: 1px;
        font-size: 30px;
        border: none;
    }

    .xaxislayer-above {
        /* cursor: pointer; */
        pointer-events: all;
    }

    .yaxislayer-above {
        /* cursor: pointer; */
        pointer-events: all;
    }

    /* The container <div> - needed to position the dropdown content */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown-content:not(.notification-dropdown) {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 110px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1000;
    }

    .dropdown2-tab {
        position: relative;
        display: inline-block;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown2-content-tab {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 110px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1000;
    }

    /* Links inside the dropdown */
    .dropdown-content:not(.notification-dropdown) div {
        color: black;
        padding: 2px 1px;
        text-decoration: none;
        display: block;
    }

    /* Change color of dropdown links on hover */
    .dropdown-content:not(.notification-dropdown) a:hover {
        background-color: #ddd;
    }

    /* Show the dropdown menu on hover */
    .dropdown:hover .dropdown-content:not(.notification-dropdown) {
        display: block;
    }

    .dropdown2-content-tab div {
        color: black;
        padding: 2px 1px;
        text-decoration: none;
        display: block;
    }

    /* Change color of dropdown links on hover */
    .dropdown2-content-tab a:hover {
        background-color: #ddd;
    }
    .dataTables_scroll {
      height:fit-content;
    }
      h2 {
        font-size: medium;
      }
      .ebDataElementsDiv {
        margin-bottom: 5px;
      }
      .popup {
        height:80%;
      }
      .select2-dropdown {
        z-index:9999;
      }
      .scenarioBody {
        height: 700px;
        overflow-y:scroll;
      }
      .dataTables_length{
        padding-left: 20px !important;
      }
      .dataTables_length label{
        display:flex;
      }
      .analysisWraptext td{
        white-space: break-spaces;
      }
      .arrow-tab {
        border-style: dashed;
        border-color: transparent;
        border-width: 0.45em;
        display: -moz-inline-box;
        display: inline-block;
        font-size: 130px;
        height: 0;
        line-height: 0;
        position: relative;
        vertical-align: middle;
        width: 0;
        background-color: #fff;
        left: -14px;
        top: 0px;
        border: 0.45em dashed transparent;
        border-left: 66px dashed var(--primary-color);
      }


      .index-no-col{
        display: flex;
        align-items: center;
        justify-content: center;
        border-top-right-radius: 40px;
        border-bottom-right-radius: 40px;
        background: var(--primary-color);
        height: 6rem;
      }
      .editTabIcon{
        display: none;
        position: absolute;
        right: 0;
        z-index: 1;
        background: #f7f7f7;
        padding: 7px;
        border-radius: 50%;
        box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
        cursor: pointer;
      }
      .tab-icons, .tab-header-name, .colored-text{
              color: #fff;
            }
            .TabIcons{
              margin:1rem;
              height:4rem;
              font-size:2rem;
            }
      .index-rows-temp2{
        border-bottom: 8px solid var(--primary-color);
      }
      .index-column-temp2{
        border: 5px solid  var(--primary-color);
      }
      .dropIndex{
        border-radius: 25px 25px 0px 25px !important;
        height: 4rem;
        width: 4rem;
        z-index: 1;
        margin-top: -70px;
        margin-left: 30px;
        margin-right: -25px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);

      }
      .boxIndex{
        border-radius: 25px !important;
        height: 7rem;
        z-index: 1;
        margin-left: 30px;
        margin-right: -25px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: var(--primary-color) linear-gradient(to bottom right, var(--primary-color) 25%, #fff);
        box-shadow: rgb(0 0 0 / 35%) 0px 5px 15px;
      }
      .defaultTabTheme{
        background-color:  var(--primary-color);
      }

      .linkCard {
        width: 95%;
        height: 4rem;
        border-radius: 1.2rem;
        margin: 1rem;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
        cursor: pointer;
      }
      .linkCard a{
        color:var(--font-hover-color);
        }
      .linkCard:hover {
        transform: scale(1.05);
      }
      .linkCard:active {
        transform: scale(1.0);
      }
      .scroll-link {
        min-width : 17rem;
      }
      .scroll-nav {
        flex-wrap: nowrap !important;
        overflow-x: scroll !important;
        overflow-y: hidden !important;
      }
      #tabLinks{
        overflow-x:hidden;
      }
      .chartDivSection label{
        width: fit-content;
      }

      .dataTable thead .sorting:after{
        content: "\\f0dc" !important;
        position: absolute !important;
        bottom: 0.3em  !important;
        right: 7.5px !important;
        opacity: 0.3;
      }
      .dataTable thead .sorting_asc:after{
        content: "\\f0dc" !important;
        position: absolute !important;
        bottom: 0.3em  !important;
        right: 7.5px !important;
        opacity: 0.3;
      }
      .dataTable thead .sorting_desc:after{
        content: "\\f0dc" !important;
        position: absolute !important;
        bottom: 0.3em  !important;
        right: 7.5px !important;
        opacity: 0.3;
      }
      .dataTables_scrollHeadInner table{
        margin-top:5px;
      }
      .modal .dataTable thead .sorting_asc:after{
        bottom: 0.8em  !important;
      }
      .modal .dataTable thead .sorting:after{
        bottom: 0.8em  !important;
      }
      .modal .dataTable thead .sorting_desc:after{
        bottom: 0.8em !important;
      }
  </style>"""
    )

    if "List view" in element_list:
        htmlwithcssdata = (
            htmlwithcssdata
            + """
        <script defer>;masterUploadFunc(element_table_IDList);</script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysisUtilites.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis_modal.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis.min.js' %}"></script>
        <script>masterPlotly(analysiselementIDList)</script>
        """
        )

    if "Upload" in element_list:
        htmlwithcssdata = (
            htmlwithcssdata
            + """
        <script fetchpriority="low" src="{% static 'js/Kore_TI_js/Standardized_JS/upload_block.min.js' %}" defer></script>
        <script defer>masterStandardButtonFunc();</script>
        """
        )
    if "Analysis" in element_list:
        htmlwithcssdata = (
            htmlwithcssdata
            + """
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysisUtilites.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis_modal.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis.min.js' %}"></script>
        <script>masterPlotly(analysiselementIDList)</script>
        <link href="{% static 'js/Kore_TI_js/Tabulator/tabulator.min.css' %}" rel="stylesheet">
        <script type="text/javascript" src="{% static 'js/Kore_TI_js/Tabulator/tabulator.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/html2canvas/html2canvas.js' %}"></script>
        """
        )
    if "Create view" in element_list:
        htmlwithcssdata = (
            htmlwithcssdata
            + """
        <script src="{% static 'js/Kore_TI_js/create_view_form.js/create_view_save_form.min.js' %}" defer></script>
        <script type="module" src="{% static 'js/Kore_TI_js/embeded_computation.min.js' %}" defer></script>
        """
        )
    if "computation" in element_list:
        htmlwithcssdata = (
            htmlwithcssdata
            + """
      <script type="text/javascript" src="{% static 'js/Kore_TI_js/computation/computation.min.js' %}"></script>
      <script>
        var globalVariableID = []
        var process_level_filter_checks = {}
        var dependencies_check = {}
        $('.gVarDropDown').each(function() {
          var id = $(this).closest('.form-row').attr('data-parent_element_id');
          globalVariableID.push(id);
          let dropdown_var = $(this).parent().find('label').text().trim()
          if($(this).attr('has_process_level_filters')){
            process_level_filter_checks[dropdown_var] = $(this).attr('has_process_level_filters')
          }else{
            process_level_filter_checks[dropdown_var] = "no"
          }
          let dependencies = $(this).attr("dependencies")
            if(dependencies){
              if(JSON.parse(dependencies).length>0){
                dependencies_check[dropdown_var] = true
              }else{
                dependencies_check[dropdown_var] = false
              }
            }
        })
        if (globalVariableID.length) {
          var tab_element_id = $('.gVarDropDown:first').parent().parent().parent().attr('id').slice(16)
          $.ajax({
            url:`/users/${urlPath}/dynamicVal/`,
            data: {
              'operation':'popuplateGlobalVariable',
              'element_id_list': JSON.stringify(globalVariableID),
              'process_level_filter_checks': JSON.stringify(process_level_filter_checks),
              'tab_element_id': tab_element_id,
              'dependencies_check':JSON.stringify(dependencies_check)
            },
            type: 'POST',
            dataType: "json",
            success: function (data) {
              $('.gVarDropDown').each(function() {
                var idGV = $(this).attr('name').split('gVar_')[1];
                var listGV = data[idGV]
                $(this).find('select').empty();
                for(let i = 0; i < listGV.length; i++) {
                  $(this).find('select').append(`<option value="${listGV[i]}">${listGV[i]}</option>`);
                }
              })
            },
            error: ()=>{
              Swal.fire({icon: 'error',text: 'Error! Please try again.'});
            }
          });
        }
      </script>
      <script>masterComputeExecutionHandler(computationElementIdsArray)</script>
      <script>masterComputePreviousRunDisplayHandler(previousRunComputeElementIdArray)</script>
      """
        )
    htmlwithcssdata = (
        htmlwithcssdata
        + """
    <script>;var grapejs = 0;</script>
  """
    )

    htmlwithcssdata = (
        htmlwithcssdata
        + """
        <script>
          $('.modal').on('shown.bs.modal', function() {
              $(document).off('focusin.modal');
              $(".modal").attr("tabindex","");
          });
          var grapejs = 1;
          $(".select2-container").each(function(){
            if($(this).attr("id") != undefined){
              $(this).remove();
            }
          })
          $(".select2-container--focus").remove();

          $("a").on("click",function(event){
            event.preventDefault();
            if(["undefined","null",null,undefined].includes($(this).attr("onclick"))){
            let u_path = $(this).attr("href");
            let a_code = $(this).attr("href").split("/")[2];

            if(a_code != "{{app_code}}"){
              $.ajax({
                url: '/users/selectApplication/',
                data: {
                    'app_code' : a_code,
                    'operation': "application_selected",
                },
                type: "POST",
                dataType: "json",
                success: function(data) {
                    let loc = u_path;
                    window.location.href = loc;
                },
                error: function () {
                  Swal.fire({text:"Error",icon:"error"});
                }
              });
            }else{
              window.location.href = u_path;
            }
          }else{
            $(this).trigger("click");
          }

          })
        </script>

    </body>
    </html>"""
    )
    return htmlwithcssdata


def getUserType(username, app_code):
    tenant = tenant_schema_from_request(username)
    import os

    if editBuildIdentification(username) in ["Build", "Edit"]:
        if os.path.exists(
            f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/admin/grapejs.html"
        ):
            user = "admin"
        else:
            user = "admin"
    else:
        if os.path.exists(
            f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/user/grapejs_{username}.html"
        ):
            user = username
        elif not os.path.exists(
            f"kore_investment/templates/user_defined_template/{tenant}/{app_code}/admin/grapejs.html"
        ):
            user = username
        else:
            user = "admin"
    return user


def editBuildIdentification(user_name):
    user_info = pickle.loads(redis_instance.get(user_name))
    if user_info.get("current_application_code"):
        app_code = user_info.get("current_application_code")
        if app_code == "Dev":
            if user_info.get("current_developer_mode"):
                current_dev_mode2 = user_info.get("current_developer_mode")
            else:
                current_dev_mode2 = ""
        else:
            current_dev_mode2 = ""
        return current_dev_mode2
    else:
        return ""


def html_generator_all(
    request,
    tab_header_name_list,
    tab_body_content_list,
    tabScreenElementIDList1,
    table_name_list,
    tab_type_list,
    data1,
    prg_code,
    pr_code,
    tabs_multi_function_list,
    element_id_ct,
    element_id_ct_del,
    tab_color_config,
    regenerate=False,
    skip_gen=False,
    create_view_tab=False,
    mode="",
    design_mode=False,
):
    tenant = tenant_schema_from_request(request)
    plotInd = False
    l3_ct = False
    if design_mode:
        l3_ct = True

    def custom_html():
        if os.path.exists(
            f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_{tabScreenElementIDList1[i]}.html"
        ):
            hs = open(
                f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_{tabScreenElementIDList1[i]}.html",
            )
            soup = BeautifulSoup(hs.read(), "html.parser")

            if not l3_ct:
                soup1 = soup.find("div", id=f"{tabScreenElementIDList1[i]}_tab_content")
                soup1["id"] = ""
                soup1["aria-labelledby"] = ""
                soup1["role"] = ""
                soup1 = soup.find_all("div")
                soup1[0]["class"] = "tab-pane fade"
                soup1[0]["id"] = f"{tabScreenElementIDList1[i]}_tab_content"
                soup1[0]["aria-labelledby"] = tabScreenElementIDList1[i] + "-tab"
                soup1[0]["role"] = "tabpanel"
            soup = soup.prettify()
            return str(soup)
        else:
            return ""

    curr_app_code, db_connection_name = current_app_db_extractor(request)
    html = ""
    script = defineVariable()

    tab_layout = "Horizontal"
    all_tab_width = "auto"
    if tab_color_config:
        if tab_color_config.get("Tab_Layout") == "Vertical":
            tab_layout = "Vertical"
        else:
            pass
        if tab_color_config.get("Tab_Size"):
            all_tab_size_config = tab_color_config["Tab_Size"]
            if all_tab_size_config.get("width") and all_tab_size_config.get("width") != "0px":
                all_tab_width = all_tab_size_config["width"]
            else:
                if tab_layout == "Vertical":
                    all_tab_width = "300px"
                else:
                    all_tab_width = "auto"
        else:
            if tab_layout == "Vertical":
                all_tab_width = "300px"
            else:
                all_tab_width = "auto"
    else:
        pass
    if not l3_ct:
        if tab_layout == "Vertical":
            html = (
                html
                + f"<div class='tab-container vertical-tabs' style='margin-top:30px; width:calc(97% - {all_tab_width})'>"
            )
            html = html + "<div class='tab-content' fetchpriority='high'>"
        else:
            html = html + "<div class='tab-content' fetchpriority='high'>"

    else:
        script_inbuild = ""
        hs = open(
            f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_grapesjsview.html",
        )
        html = hs.read()
        soup = BeautifulSoup(html, "html.parser")
        sc = open(
            f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_grapesjsview_script.html",
        )
        scc = sc.read()
        script_inbuild = BeautifulSoup(scc, "html.parser")
        script_inbuild = script_inbuild.prettify()
        css = soup.find("style")
        css = css.prettify()
    if not l3_ct:
        for i in range(len(tab_header_name_list)):
            hide_ = False
            if tabScreenElementIDList1[i].__contains__("parallelo"):
                data_ = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "TabScreens",
                            "Columns": ["tab_body_content"],
                        },
                        "condition": [
                            {
                                "column_name": "tab_body_content",
                                "condition": "Contains",
                                "input_value": f'"child": "{tabScreenElementIDList1[i]}"',
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not data_.empty:
                    data_ = json.loads(data_.iloc[0].tab_body_content)
                    if data_.get("elementHide") not in [None, False]:
                        hide_ = True

            custom_template = json.loads(tab_body_content_list[i])
            if tab_type_list[i] == "create_view":
                if regenerate:
                    if custom_template["Category_attributes"]["Template"].get("Template_type") not in [None]:
                        custom_template["Category_attributes"]["Template"][
                            "Template_type"
                        ] = "System defined template"
                        updateBodyContent(request, tabScreenElementIDList1[i], custom_template)
                        custom_template = "System defined template"
                else:
                    if (
                        custom_template["Category_attributes"]["Template"].get("Template_type") not in [None]
                        and not regenerate
                    ):
                        custom_template = custom_template["Category_attributes"]["Template"]["Template_type"]
                    else:
                        custom_template = "System defined template"
                if skip_gen:
                    script = script + "\n"
                else:
                    htmlInd, scriptInd = html_generator(
                        json.loads(table_name_list[i])[0],
                        json.loads(tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        request,
                    )
                    if not l3_ct:
                        if custom_template not in [True, "Custom defined template"]:
                            html = html + "\n" + htmlInd
                        else:
                            custom_html_ = custom_html()
                            if custom_html_ != "":
                                html = html + "\n" + custom_html()
                            else:
                                return "", "", "Custom template for create view not saved"
                    script = script + "\n" + scriptInd

            elif tab_type_list[i] == "list_view":
                if regenerate:
                    if custom_template.get("customTemplateListView") not in [None]:
                        custom_template["customTemplateListView"] = False
                        updateBodyContent(request, tabScreenElementIDList1[i], custom_template)
                if custom_template.get("customTemplateListView") not in [None] and not regenerate:
                    custom_template = custom_template["customTemplateListView"]
                else:
                    custom_template = False
                config = json.loads(tab_body_content_list[i])
                if config.get("reportingView"):
                    config = config
                else:
                    mul_def_vew = ""
                    for key_1, v_1 in config.items():
                        mul_def_vew = v_1["mulview_def"]
                        break
                    config = config[mul_def_vew]
                template = config["reportingView"]["Template_choice"]
                config_array = []
                if redis_instance.exists("multiselect" + tabScreenElementIDList1[i]):
                    redis_instance.delete("multiselect" + tabScreenElementIDList1[i])
                if redis_instance.exists("custom_view_" + tabScreenElementIDList1[i]):
                    redis_instance.delete("custom_view_" + tabScreenElementIDList1[i])
                if redis_instance.exists("scenario" + tabScreenElementIDList1[i]):
                    redis_instance.delete("scenario" + tabScreenElementIDList1[i])
                if redis_instance.exists(tabScreenElementIDList1[i]):
                    redis_instance.delete(tabScreenElementIDList1[i])
                if config["Category_attributes"]["Mandatory"]["Table_name"].startswith("[") and config[
                    "Category_attributes"
                ]["Mandatory"]["Table_name"].endswith("]"):
                    if skip_gen:
                        script = script + "\n"
                    else:
                        if config["Category_attributes"]["Mandatory"].get("reorderTableList") is not None:
                            table = config["Category_attributes"]["Mandatory"]["reorderTableList"]
                            if len(table) == 0:
                                table = json.loads(config["Category_attributes"]["Mandatory"]["Table_name"])
                        else:
                            table = json.loads(config["Category_attributes"]["Mandatory"]["Table_name"])
                        count = 1
                        for j in table:
                            config1 = {}
                            config1 = config
                            config1["Category_attributes"]["Mandatory"]["Table_name"] = j
                            config1["Category_sub_elements"][0]["Category_sub_element_attributes"][0][
                                "value"
                            ] = j
                            config_array.append(config1)
                            ele_id = ""
                            ele_id = tabScreenElementIDList1[i] + "__tab__" + str(count)
                            htmlInd, scriptInd, plotInd = html_generator_list_view_tabpane(
                                j,
                                json.dumps(config1),
                                ele_id,
                                tabScreenElementIDList1[i],
                                tab_type_list[i],
                                tab_header_name_list[i],
                                request,
                                data1,
                                template,
                                count,
                                len(table),
                                plot=plotInd,
                                app_code=curr_app_code,
                                mode=mode,
                            )
                            if not l3_ct:
                                if custom_template not in [True, "Custom defined template"]:
                                    html = html + "\n" + htmlInd
                                else:
                                    custom_html_ = custom_html()
                                    if custom_html_ != "":
                                        html = html + "\n" + custom_html()
                                    else:
                                        return "", "", "Custom template for list view not saved"

                            script = script + "\n" + scriptInd
                            count = count + 1
                        count = 1
                        for j in table:
                            config1 = {}
                            config1 = config
                            config1["Category_attributes"]["Mandatory"]["Table_name"] = j
                            config1["Category_sub_elements"][0]["Category_sub_element_attributes"][0][
                                "value"
                            ] = j
                            config_array.append(config1)
                            ele_id = ""
                            ele_id = tabScreenElementIDList1[i] + "__tab__" + str(count)
                            htmlInd, scriptInd = html_generator_list_view(
                                j,
                                json.dumps(config1),
                                ele_id,
                                tabScreenElementIDList1[i],
                                tab_type_list[i],
                                tab_header_name_list[i],
                                request,
                                data1,
                                template,
                                count,
                                len(table),
                                plot=plotInd,
                            )
                            if not l3_ct:
                                if custom_template not in [True, "Custom defined template"]:
                                    html = html + "\n" + htmlInd
                                else:
                                    custom_html_ = custom_html()
                                    if custom_html_ != "":
                                        html = html + "\n" + custom_html_
                                    else:
                                        return "", "", "Custom template for list view not saved"

                            script = script + "\n" + scriptInd
                            count = count + 1
                        if custom_template not in [True, "Custom defined template"] and not l3_ct:
                            html = html + "</div>"

                else:
                    if skip_gen:
                        script = script + "\n"
                    else:
                        htmlInd, scriptInd, plotInd = html_generator_list_view_tabpane(
                            table_name_list[i],
                            json.dumps(config),
                            tabScreenElementIDList1[i],
                            tabScreenElementIDList1[i],
                            tab_type_list[i],
                            tab_header_name_list[i],
                            request,
                            data1,
                            template,
                            1,
                            1,
                            plot=plotInd,
                            app_code=curr_app_code,
                            mode=mode,
                        )
                        if not l3_ct:
                            if custom_template not in [True, "Custom defined template"]:
                                html = html + "\n" + htmlInd
                            else:
                                custom_html_ = custom_html()
                                if custom_html_ != "":
                                    html = html + "\n" + custom_html_
                                else:
                                    return "", "", "Custom template for list view not saved"

                        script = script + "\n" + scriptInd
                        htmlInd, scriptInd = html_generator_list_view(
                            table_name_list[i],
                            json.dumps(config),
                            tabScreenElementIDList1[i],
                            tabScreenElementIDList1[i],
                            tab_type_list[i],
                            tab_header_name_list[i],
                            request,
                            data1,
                            template,
                            1,
                            1,
                            plot=plotInd,
                        )
                        if not l3_ct:
                            if custom_template not in [True, "Custom defined template"]:
                                html = html + "\n" + htmlInd
                            else:
                                custom_html_ = custom_html()
                                if custom_html_ != "":
                                    html = html + "\n" + custom_html_
                                else:
                                    return "", "", "Custom template for list view not saved"

                        script = script + "\n" + scriptInd
                        if custom_template not in [True, "Custom defined template"] and not l3_ct:
                            html = html + "</div>"
            elif tab_type_list[i] == "analysis":
                if regenerate:
                    if custom_template.get("Template") not in [None]:
                        custom_template["Template"] = "System defined template"
                        updateBodyContent(request, tabScreenElementIDList1[i], custom_template)
                if custom_template.get("Template") not in [None] and not regenerate:
                    custom_template = custom_template.get("Template")
                else:
                    custom_template = "System defined template"
                if skip_gen:
                    script = script + "\n"
                else:
                    htmlInd, scriptInd = html_generator_analysis(
                        table_name_list[i],
                        json.loads(tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        tab_type_list[i],
                        tab_header_name_list[i],
                        request,
                        data1,
                        request.path,
                    )
                    if not l3_ct:
                        if custom_template not in [True, "Custom defined template"]:
                            html = html + "\n" + htmlInd
                        else:
                            custom_html_ = custom_html()
                            if custom_html_ != "":
                                html = html + "\n" + custom_html_
                            else:
                                return "", "", "Custom template analysis not saved"

                    script = script + "\n" + scriptInd
            elif tab_type_list[i] == "Ocr":
                if skip_gen:
                    html = html + "\n"
                    script = script + "\n"
                else:
                    htmlInd, scriptInd = html_generator_ocr(
                        table_name_list[i],
                        (tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        tab_type_list[i],
                        tab_header_name_list[i],
                        request=request,
                    )
                    html = html + "\n" + htmlInd
                    script = script + "\n" + scriptInd
            elif tab_type_list[i] == "alert_view":
                html = (
                    html
                    + "\n"
                    + html_generator_ocr(
                        table_name_list[i],
                        (tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        tab_type_list[i],
                        tab_header_name_list[i],
                        request=request,
                    )
                )
            elif tab_type_list[i] == "report":
                if skip_gen:
                    html = ""
                else:
                    html = (
                        html
                        + "\n"
                        + html_generator_ocr(
                            table_name_list[i],
                            (tab_body_content_list[i]),
                            tabScreenElementIDList1[i],
                            tab_type_list[i],
                            tab_header_name_list[i],
                            request=request,
                        )
                    )
            elif tab_type_list[i] == "computation" and not hide_:
                if regenerate:
                    if custom_template.get("template") not in [None]:
                        custom_template["template"] = "System defined template"
                        updateBodyContent(request, tabScreenElementIDList1[i], custom_template)
                if custom_template.get("template") not in [None] and not regenerate:
                    custom_template = custom_template.get("template")
                else:
                    custom_template = "System defined template"
                htmlInd, scriptInd = html_generator_ocr(
                    table_name_list[i],
                    (tab_body_content_list[i]),
                    tabScreenElementIDList1[i],
                    tab_type_list[i],
                    tab_header_name_list[i],
                    request=request,
                )
                if not l3_ct:
                    if custom_template not in [True, "Custom defined template"]:
                        html = html + "\n" + htmlInd
                    else:
                        custom_html_ = custom_html()
                        if custom_html_ != "":
                            html = html + "\n" + custom_html_
                        else:
                            return "", "", "Custom template for computation not saved"

                script = script + "\n" + scriptInd
            elif tab_type_list[i] == "data_connector":
                if regenerate:
                    if custom_template["Category_attributes"]["Mandatory"].get("Template_type") not in [None]:
                        custom_template["Category_attributes"]["Mandatory"][
                            "Template_type"
                        ] = "System defined template"
                        updateBodyContent(request, tabScreenElementIDList1[i], custom_template)
                if (
                    custom_template["Category_attributes"]["Mandatory"].get("Template_type") not in [None]
                    and not regenerate
                ):
                    custom_template = custom_template["Category_attributes"]["Mandatory"]["Template_type"]
                else:
                    custom_template = "System defined template"
                if skip_gen:
                    script = script + "\n"
                else:
                    htmlInd, scriptInd = html_generator_ocr(
                        table_name_list[i],
                        json.loads(tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        tab_type_list[i],
                        tab_header_name_list[i],
                        uploadTable=uploadScreenTable(json.loads(tab_body_content_list[i]), request),
                        request=request,
                    )
                    if not l3_ct:
                        if custom_template not in [True, "Custom defined template"]:
                            html = html + "\n" + htmlInd
                        else:
                            custom_html_ = custom_html()
                            if custom_html_ != "":
                                html = html + "\n" + custom_html_
                            else:
                                return "", "", "Custom template for upload not saved"

                    script = script + "\n" + scriptInd
            elif tab_type_list[i] == "decision_box":
                dec_t_content = json.loads(tab_body_content_list[i])
                dec_t_content_val = dec_t_content["Category_sub_elements"][0][
                    "Category_sub_element_attributes"
                ][1]["value"]
            elif tab_type_list[i] == "PivotReport":
                if skip_gen:
                    html = html + "\n"
                    script = script + "\n"
                else:
                    htmlInd, scriptInd = html_generator_pivot_report(
                        (tab_body_content_list[i]),
                        tabScreenElementIDList1[i],
                        tab_type_list[i],
                        tab_header_name_list[i],
                        request,
                    )
                    html = html + "\n" + htmlInd
                    script = script + "\n" + scriptInd
            elif tab_type_list[i] == "nav_points":
                with open(
                    f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/staticPage/{tab_header_name_list[i]}_{tabScreenElementIDList1[i]}_html.html"
                ) as f:
                    html = (
                        html
                        + f"""
                  <div class="tab-pane fade active show" fetchpriority='high' id="{tabScreenElementIDList1[i]}_tab_content" role="tabpanel" aria-labelledby="{tabScreenElementIDList1[i]}-tab">
                """
                    )
                    html = html + f.read()
                    html = html + "</div>"
                    f.close()

                with open(
                    f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/staticPage/{tab_header_name_list[i]}_{tabScreenElementIDList1[i]}_script.js"
                ) as f:
                    script = script + f.read()
                    f.close()
    if l3_ct:

        system_block_list = []
        system_block_names = []
        computation_element_id_list = []
        computation_prev_element_id_list = []
        cke_added = False
        system_blocks = soup.find_all("iframe", class_="system_block")
        for i in system_blocks:
            temp_dict = {}
            temp_dict["template_type"] = i["data-template_type"]
            temp_dict["process"] = i["data-process"]
            temp_dict["subprocess_name"] = i["data-subprocess_name"]
            temp_dict["tab_name"] = i["data-tab_name"]
            temp_dict["id"] = i.get("id")
            i.parent.insert(
                i.parent.index(i) + 1,
                Tag(
                    soup,
                    name="div",
                    attrs={
                        "id": i["data-template_type"]
                        + i["data-process"]
                        + i["data-subprocess_name"]
                        + i["data-tab_name"]
                    },
                ),
            )
            system_block_list.append(temp_dict)
            system_block_names.append(i["data-template_type"])
            i.decompose()

        soup1 = system_blocks

        soup_temp = copy.copy(soup)
        system_blocks_show = soup_temp.find_all("div", class_="system_blocks_show")
        for i in system_blocks_show:
            i.decompose()
        sys_html = ""
        sys_script = ""
        sys_script = sys_script + script_inbuild

        for i in system_block_list:
            temp_style = ""
            sys_html = ""
            if i.get("id") is not None:
                temp_style = css
                temp_style = temp_style[temp_style.find(i["id"]) :]
                start = temp_style.find("{")
                end = temp_style.find("}")
                temp_style = temp_style[start + 1 : end]
            sys_html = sys_html + f"""<div style="{temp_style}" > """

            if i["template_type"] == "create_view":
                sqlReadData = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "NavigationSideBar",
                            "Columns": ["item_code", "item_name", "item_group_name"],
                        },
                        "condition": [
                            {
                                "column_name": "item_group_code",
                                "condition": "Equal to",
                                "input_value": i["process"],
                                "and_or": "AND",
                            },
                            {
                                "column_name": "item_name",
                                "condition": "Equal to",
                                "input_value": i["subprocess_name"],
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not sqlReadData.empty:
                    item_code = sqlReadData.iloc[0]["item_code"]
                    sqlReadData = read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    "tab_header_name",
                                    "table_name",
                                    "tab_body_content",
                                    "element_id",
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "related_item_code",
                                    "condition": "Equal to",
                                    "input_value": item_code,
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_header_name",
                                    "condition": "Equal to",
                                    "input_value": i["tab_name"],
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_type",
                                    "condition": "Equal to",
                                    "input_value": i["template_type"],
                                    "and_or": "",
                                },
                            ],
                        },
                    )
                    if not sqlReadData.empty:
                        elementID = sqlReadData.iloc[0]["element_id"]
                        tableName = json.loads(sqlReadData.iloc[0]["table_name"])[0]
                        tabBodyContent = sqlReadData.iloc[0]["tab_body_content"]
                        htmlInd, scriptInd = html_generator(
                            tableName,
                            json.loads(tabBodyContent),
                            elementID,
                            request,
                            False,
                            0,
                            item_code,
                            iden2="yes",
                        )
                        sys_html = sys_html + htmlInd + "</div>"
                        sys_script = sys_script + scriptInd

                        element = soup_temp.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

                        element = soup.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)
            elif i["template_type"] == "list_view":
                ele_id = ""
                ele_list_mul = []
                sqlReadData = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "NavigationSideBar",
                            "Columns": ["item_code", "item_name", "item_group_name"],
                        },
                        "condition": [
                            {
                                "column_name": "item_group_code",
                                "condition": "Equal to",
                                "input_value": i["process"],
                                "and_or": "AND",
                            },
                            {
                                "column_name": "item_name",
                                "condition": "Equal to",
                                "input_value": i["subprocess_name"],
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not sqlReadData.empty:
                    item_code = sqlReadData.iloc[0]["item_code"]
                    sqlReadData = read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    "tab_header_name",
                                    "table_name",
                                    "tab_body_content",
                                    "element_id",
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "related_item_code",
                                    "condition": "Equal to",
                                    "input_value": item_code,
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_header_name",
                                    "condition": "Equal to",
                                    "input_value": i["tab_name"],
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_type",
                                    "condition": "Equal to",
                                    "input_value": "list_view",
                                    "and_or": "",
                                },
                            ],
                        },
                    )
                    if not sqlReadData.empty:
                        elementID = sqlReadData.iloc[0]["element_id"]
                        tableName = sqlReadData.iloc[0]["table_name"]
                        tabBodyContent = sqlReadData.iloc[0]["tab_body_content"]
                        data1 = {}
                        html = ""
                        script = ""
                        config = json.loads(tabBodyContent)
                        if config.get("reportingView"):
                            config = config
                        else:
                            mul_def_vew = ""
                            for key_1, v_1 in config.items():
                                mul_def_vew = v_1["mulview_def"]
                                break
                            config = config[mul_def_vew]
                        pagination = config["Category_attributes"]["Mandatory"].get("pagination")
                        if pagination in [None]:
                            pagination = paginationNum()
                        template = config["reportingView"]["Template_choice"]
                        config_array = []
                        if config["Category_attributes"]["Mandatory"]["Table_name"].startswith(
                            "["
                        ) and config["Category_attributes"]["Mandatory"]["Table_name"].endswith("]"):
                            table = json.loads(config["Category_attributes"]["Mandatory"]["Table_name"])
                            count = 1
                            for j in table:
                                config1 = {}
                                config1 = config
                                config1["Category_attributes"]["Mandatory"]["Table_name"] = j
                                config1["Category_sub_elements"][0]["Category_sub_element_attributes"][0][
                                    "value"
                                ] = j
                                config_array.append(config1)
                                ele_id = ""
                                ele_id = elementID + "__tab__" + str(count)
                                htmlInd, scriptInd, plotInd = html_generator_list_view_tabpane(
                                    j,
                                    json.dumps(config1),
                                    ele_id,
                                    elementID,
                                    "list_view",
                                    i["tab_name"],
                                    request,
                                    data1,
                                    template,
                                    count,
                                    len(table),
                                    tab_pane=False,
                                    app_code=curr_app_code,
                                    mode=mode,
                                    iden2="yes",
                                )
                                html = html + htmlInd
                                script = script + scriptInd
                                count = count + 1
                            count = 1
                            for j in table:
                                config1 = {}
                                config1 = config
                                config1["Category_attributes"]["Mandatory"]["Table_name"] = j
                                config1["Category_sub_elements"][0]["Category_sub_element_attributes"][0][
                                    "value"
                                ] = j
                                config_array.append(config1)
                                ele_id = ""
                                ele_id = elementID + "__tab__" + str(count)
                                htmlInd, scriptInd = html_generator_list_view(
                                    j,
                                    json.dumps(config1),
                                    ele_id,
                                    elementID,
                                    "list_view",
                                    i["tab_name"],
                                    request,
                                    data1,
                                    template,
                                    count,
                                    len(table),
                                )
                                html = html + htmlInd
                                script = script + scriptInd
                                count = count + 1
                                ele_list_mul.append(ele_id)
                            html = html + "</div>"
                        else:
                            htmlInd, scriptInd, plotInd = html_generator_list_view_tabpane(
                                tableName,
                                json.dumps(config),
                                elementID,
                                elementID,
                                "list_view",
                                i["tab_name"],
                                request,
                                data1,
                                template,
                                1,
                                1,
                                tab_pane=False,
                                app_code=curr_app_code,
                                mode=mode,
                                iden2="yes",
                            )
                            html = html + htmlInd
                            script = script + scriptInd
                            htmlInd, scriptInd = html_generator_list_view(
                                tableName,
                                json.dumps(config),
                                elementID,
                                elementID,
                                "list_view",
                                i["tab_name"],
                                request,
                                data1,
                                template,
                                1,
                                1,
                            )
                            html = html + htmlInd
                            script = script + scriptInd
                            html = html + "</div>"
                        html = html + "</div>"

                        if ele_list_mul:
                            script = (
                                script
                                + f"""<script>;\n
                            $(document).ready(function(){{"""
                            )
                            for itm in ele_list_mul:
                                script = (
                                    script
                                    + f"""\n
                                    if ($(`#example1{itm}_wrapper`)[0] == undefined) {{
                                        masterBaseDataFilter(['{itm}'],[{pagination}]);
                                    }}\n
                                    """
                                )
                            script = script + """ }) </script>"""

                        script = (
                            script
                            + f"""<script>;\n
                                $(document).ready(function(){{
                                    if ($(`#example1{elementID}_wrapper`)[0] == undefined) {{
                                        masterBaseDataFilter(['{elementID}'],[{pagination}]);
                                    }}\n
                                }})
                                </script>"""
                        )

                        h = add_html_grapesjs(i["template_type"])
                        if not cke_added:
                            cke_added = True
                            sys_html = sys_html + h + html + "</div>"
                        else:
                            sys_html = sys_html + html + "</div>"
                        sys_script = sys_script + script

                        element = soup_temp.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

                        element = soup.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)
            elif i["template_type"] == "computation":
                sqlReadData = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "NavigationSideBar",
                            "Columns": ["item_code", "item_name", "item_group_name"],
                        },
                        "condition": [
                            {
                                "column_name": "item_group_code",
                                "condition": "Equal to",
                                "input_value": i["process"],
                                "and_or": "AND",
                            },
                            {
                                "column_name": "item_name",
                                "condition": "Equal to",
                                "input_value": i["subprocess_name"],
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not sqlReadData.empty:
                    item_code = sqlReadData.iloc[0]["item_code"]
                    sqlReadData = read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    "tab_header_name",
                                    "table_name",
                                    "tab_body_content",
                                    "element_id",
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "related_item_code",
                                    "condition": "Equal to",
                                    "input_value": item_code,
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "computation_name",
                                    "condition": "Equal to",
                                    "input_value": i["tab_name"],
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_type",
                                    "condition": "Equal to",
                                    "input_value": "computation",
                                    "and_or": "",
                                },
                            ],
                        },
                    )
                    if not sqlReadData.empty:
                        elementID = sqlReadData.iloc[0]["element_id"]
                        tabBodyContent = sqlReadData.iloc[0]["tab_body_content"]
                        computation_element_id_list.append(elementID)
                        if json.loads(tabBodyContent)["previous_run"] == "yes":
                            computation_prev_element_id_list.append(elementID)
                        html = ""
                        script = ""
                        dic = {elementID: item_code}
                        htmlInd, scriptInd = html_generator_ocr(
                            (json.loads(tabBodyContent))["model"],
                            tabBodyContent,
                            elementID,
                            "computation",
                            i["tab_name"],
                            request=request,
                            tab_pane=False,
                            iden2="yes",
                        )
                        html = html + htmlInd
                        script = script + scriptInd
                        sys_html = sys_html + html + "</div>"
                        sys_script = sys_script + script

                        element = soup_temp.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

                        element = soup.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)
            elif i["template_type"] == "data_connector":
                sqlReadData = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "NavigationSideBar",
                            "Columns": ["item_code", "item_name", "item_group_name"],
                        },
                        "condition": [
                            {
                                "column_name": "item_group_code",
                                "condition": "Equal to",
                                "input_value": i["process"],
                                "and_or": "AND",
                            },
                            {
                                "column_name": "item_name",
                                "condition": "Equal to",
                                "input_value": i["subprocess_name"],
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not sqlReadData.empty:
                    item_code = sqlReadData.iloc[0]["item_code"]
                    sqlReadData = read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    "tab_header_name",
                                    "table_name",
                                    "tab_body_content",
                                    "element_id",
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "related_item_code",
                                    "condition": "Equal to",
                                    "input_value": item_code,
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_header_name",
                                    "condition": "Equal to",
                                    "input_value": i["tab_name"],
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_type",
                                    "condition": "Equal to",
                                    "input_value": "data_connector",
                                    "and_or": "",
                                },
                            ],
                        },
                    )
                    if not sqlReadData.empty:
                        elementID = sqlReadData.iloc[0]["element_id"]
                        tableName = json.loads(sqlReadData.iloc[0]["table_name"])[0]
                        tabBodyContent = sqlReadData.iloc[0]["tab_body_content"]
                        tabHeaderName = sqlReadData.iloc[0]["tab_header_name"]
                        html = ""
                        script = ""
                        htmlInd, scriptInd = html_generator_ocr(
                            tableName,
                            json.loads(tabBodyContent),
                            elementID,
                            "data_connector",
                            tabHeaderName,
                            uploadTable=uploadScreenTable(json.loads(tabBodyContent), request),
                            request=request,
                            tab_pane=False,
                            iden2="yes",
                        )
                        html = html + htmlInd
                        script = script + scriptInd
                        h = add_html_grapesjs(i["template_type"])
                        sys_html = sys_html + h + html + "</div>"
                        sys_script = sys_script + script

                        element = soup_temp.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

                        element = soup.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)
            elif i["template_type"] == "analysis":
                sqlReadData = read_data_func(
                    request,
                    {
                        "inputs": {
                            "Data_source": "Database",
                            "Table": "NavigationSideBar",
                            "Columns": ["item_code", "item_name", "item_group_name"],
                        },
                        "condition": [
                            {
                                "column_name": "item_group_code",
                                "condition": "Equal to",
                                "input_value": i["process"],
                                "and_or": "AND",
                            },
                            {
                                "column_name": "item_name",
                                "condition": "Equal to",
                                "input_value": i["subprocess_name"],
                                "and_or": "",
                            },
                        ],
                    },
                )
                if not sqlReadData.empty:
                    item_code = sqlReadData.iloc[0]["item_code"]
                    sqlReadData = read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": "TabScreens",
                                "Columns": [
                                    "tab_header_name",
                                    "table_name",
                                    "tab_body_content",
                                    "element_id",
                                ],
                            },
                            "condition": [
                                {
                                    "column_name": "related_item_code",
                                    "condition": "Equal to",
                                    "input_value": item_code,
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_header_name",
                                    "condition": "Equal to",
                                    "input_value": i["tab_name"],
                                    "and_or": "AND",
                                },
                                {
                                    "column_name": "tab_type",
                                    "condition": "Equal to",
                                    "input_value": "analysis",
                                    "and_or": "",
                                },
                            ],
                        },
                    )
                    if not sqlReadData.empty:
                        elementID = sqlReadData.iloc[0]["element_id"]
                        tableName = sqlReadData.iloc[0]["table_name"]
                        tabBodyContent = sqlReadData.iloc[0]["tab_body_content"]
                        screen_path = f"/users/{item_code}/"
                        screen_path2 = item_code
                        data1 = {}
                        user_name = request.user.username
                        sqlReadData = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "UserConfig",
                                    "Columns": ["id", "plot_config_home_page", "shared_config"],
                                },
                                "condition": [
                                    {
                                        "column_name": "name",
                                        "condition": "Equal to",
                                        "input_value": user_name,
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "plot_config_home_page",
                                        "condition": "Not Equal to",
                                        "input_value": "NULL",
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "screen_url",
                                        "condition": "Contains",
                                        "input_value": screen_path2,
                                        "and_or": "",
                                    },
                                ],
                            },
                        )

                        if not sqlReadData.empty:
                            data1["plot_config_data"] = sqlReadData["plot_config_home_page"][0]
                            data1["bokeh_chart_load_yes_or_no"] = "YES"
                        else:
                            data1["bokeh_chart_load_yes_or_no"] = "NO"

                        sqlReadid = read_data_func(
                            request,
                            {
                                "inputs": {"Data_source": "Database", "Table": "user", "Columns": ["id"]},
                                "condition": [
                                    {
                                        "column_name": "username",
                                        "condition": "Equal to",
                                        "input_value": user_name,
                                        "and_or": "",
                                    }
                                ],
                            },
                        )

                        uid = sqlReadid.iloc[0]["id"]
                        sqlReadgroup = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "user_groups",
                                    "Columns": ["group_id"],
                                },
                                "condition": [
                                    {
                                        "column_name": "user_id",
                                        "condition": "Equal to",
                                        "input_value": str(uid),
                                        "and_or": "",
                                    }
                                ],
                            },
                        ).group_id.tolist()

                        groupname = []
                        if request.user.is_superuser is True:
                            groupname = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "auth_group",
                                        "Columns": ["name"],
                                    },
                                    "condition": [],
                                },
                            ).name.to_list()
                        else:
                            for gid in sqlReadgroup:
                                sqlReadgroupname = read_data_func(
                                    request,
                                    {
                                        "inputs": {
                                            "Data_source": "Database",
                                            "Table": "auth_group",
                                            "Columns": ["name"],
                                        },
                                        "condition": [
                                            {
                                                "column_name": "id",
                                                "condition": "Equal to",
                                                "input_value": str(gid),
                                                "and_or": "",
                                            }
                                        ],
                                    },
                                )

                                groupname.append(sqlReadgroupname.iloc[0]["name"])
                        groupconfig_list = []
                        group_list = []
                        for gname in groupname:
                            sqlReadData = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "group_config",
                                        "Order_Type": "ORDER BY created_date DESC",
                                        "Columns": ["group_config", "created_date"],
                                    },
                                    "condition": [
                                        {
                                            "column_name": "name",
                                            "condition": "Equal to",
                                            "input_value": gname,
                                            "and_or": "and",
                                        },
                                        {
                                            "column_name": "screen_url",
                                            "condition": "Equal to",
                                            "input_value": screen_path,
                                            "and_or": "",
                                        },
                                    ],
                                },
                            )
                            for x in range(5):
                                group_dict = {}
                                if x in sqlReadData.index:
                                    group_dict["name"] = gname
                                    group_dict["version_name"] = "version" + str(x + 1)
                                    group_dict["config"] = sqlReadData.iloc[x]["group_config"]
                                    group_dict["date"] = pd.to_datetime(
                                        sqlReadData.iloc[x]["created_date"]
                                    ).strftime("%d-%m-%Y %H:%M")
                                    group_list.append(group_dict)

                            if not sqlReadData.empty:
                                groupconfig = {}
                                groupconfig["name"] = gname
                                groupconfig["config"] = sqlReadData.iloc[0]["group_config"]
                                groupconfig_list.append(groupconfig)

                        group_name_list = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "auth_group",
                                    "Columns": ["name"],
                                },
                                "condition": [],
                            },
                        ).name.tolist()

                        permission_group_list = []
                        subprocess_id = screen_path.rsplit("/", 2)[1]
                        for group_name in group_name_list:
                            name = subprocess_id + "__analysis__"
                            name_list1 = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "UserPermission_Master",
                                        "Columns": ["permission_name"],
                                    },
                                    "condition": [
                                        {
                                            "column_name": "usergroup",
                                            "condition": "Equal to",
                                            "input_value": group_name,
                                            "and_or": "and",
                                        },
                                        {
                                            "column_name": "permission_level",
                                            "condition": "Equal to",
                                            "input_value": "2",
                                            "and_or": "",
                                        },
                                    ],
                                },
                            )

                            if not name_list1.empty:
                                groups = json.loads(name_list1.iloc[0]["permission_name"])
                                for g in groups:
                                    if g.startswith(name) is True:
                                        permission_group_list.append(group_name)
                            else:
                                name_list = read_data_func(
                                    request,
                                    {
                                        "inputs": {
                                            "Data_source": "Database",
                                            "Table": "UserPermission_Master",
                                            "Columns": ["permission_name"],
                                        },
                                        "condition": [
                                            {
                                                "column_name": "usergroup",
                                                "condition": "Equal to",
                                                "input_value": group_name,
                                                "and_or": "and",
                                            },
                                            {
                                                "column_name": "permission_level",
                                                "condition": "Equal to",
                                                "input_value": "1",
                                                "and_or": "",
                                            },
                                        ],
                                    },
                                )
                                if not name_list.empty:
                                    groups = json.loads(name_list.iloc[0]["permission_name"])
                                    if subprocess_id in groups:
                                        permission_group_list.append(group_name)
                                else:
                                    master_name_list = read_data_func(
                                        request,
                                        {
                                            "inputs": {
                                                "Data_source": "Database",
                                                "Table": "NavigationSideBar",
                                                "Columns": ["item_group_code"],
                                            },
                                            "condition": [
                                                {
                                                    "column_name": "item_code",
                                                    "condition": "Equal to",
                                                    "input_value": subprocess_id,
                                                    "and_or": "",
                                                }
                                            ],
                                        },
                                    )
                                    if not master_name_list.empty:
                                        group_code = master_name_list.iloc[0]["item_group_code"]
                                        name_list = read_data_func(
                                            request,
                                            {
                                                "inputs": {
                                                    "Data_source": "Database",
                                                    "Table": "UserPermission_Master",
                                                    "Columns": ["permission_name"],
                                                },
                                                "condition": [
                                                    {
                                                        "column_name": "usergroup",
                                                        "condition": "Equal to",
                                                        "input_value": group_name,
                                                        "and_or": "and",
                                                    },
                                                    {
                                                        "column_name": "permission_level",
                                                        "condition": "Equal to",
                                                        "input_value": "0",
                                                        "and_or": "",
                                                    },
                                                ],
                                            },
                                        )
                                        if not name_list.empty:
                                            groups = json.loads(name_list.iloc[0]["permission_name"])
                                            if group_code in groups:
                                                permission_group_list.append(group_name)

                        sqlReadData = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "UserConfig",
                                    "Columns": ["id", "analysis_config", "shared_config"],
                                },
                                "condition": [
                                    {
                                        "column_name": "name",
                                        "condition": "Equal to",
                                        "input_value": user_name,
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "analysis_config",
                                        "condition": "Not Equal to",
                                        "input_value": "NULL",
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "screen_url",
                                        "condition": "Contains",
                                        "input_value": screen_path2,
                                        "and_or": "",
                                    },
                                ],
                            },
                        )
                        sqlReadconfig = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "UserConfig",
                                    "Columns": ["id", "analysis_config", "name"],
                                },
                                "condition": [
                                    {
                                        "column_name": "analysis_config",
                                        "condition": "Not Equal to",
                                        "input_value": "NULL",
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "screen_url",
                                        "condition": "Contains",
                                        "input_value": screen_path2,
                                        "and_or": "",
                                    },
                                ],
                            },
                        )
                        user_id_list = []
                        for index, value in sqlReadconfig["name"].items():
                            sqlReadid = read_data_func(
                                request,
                                {
                                    "inputs": {"Data_source": "Database", "Table": "user", "Columns": ["id"]},
                                    "condition": [
                                        {
                                            "column_name": "username",
                                            "condition": "Equal to",
                                            "input_value": value,
                                            "and_or": "",
                                        }
                                    ],
                                },
                            )
                            uid = sqlReadid.iloc[0]["id"]
                            sqlReadgroup1 = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "user_groups",
                                        "Columns": ["group_id"],
                                    },
                                    "condition": [
                                        {
                                            "column_name": "user_id",
                                            "condition": "Equal to",
                                            "input_value": str(uid),
                                            "and_or": "",
                                        }
                                    ],
                                },
                            ).group_id.tolist()
                            a_set = set(sqlReadgroup)
                            b_set = set(sqlReadgroup1)
                            if a_set & b_set:
                                for aset in a_set & b_set:
                                    sqlReaduser = read_data_func(
                                        request,
                                        {
                                            "inputs": {
                                                "Data_source": "Database",
                                                "Table": "user_groups",
                                                "Columns": ["user_id"],
                                            },
                                            "condition": [
                                                {
                                                    "column_name": "group_id",
                                                    "condition": "Equal to",
                                                    "input_value": str(aset),
                                                    "and_or": "",
                                                }
                                            ],
                                        },
                                    ).user_id.tolist()
                                    user_id_list = user_id_list + sqlReaduser
                        user_id = np.unique(np.array(user_id_list)).tolist()
                        user_config_list = []
                        list_of_names = sqlReadconfig["name"].to_list()
                        for uid in user_id:
                            sqlReaduser1 = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "user",
                                        "Columns": ["username"],
                                    },
                                    "condition": [
                                        {
                                            "column_name": "id",
                                            "condition": "Equal to",
                                            "input_value": str(uid),
                                            "and_or": "",
                                        }
                                    ],
                                },
                            )
                            uname = sqlReaduser1.iloc[0]["username"]
                            sqlReaduserconfig1 = read_data_func(
                                request,
                                {
                                    "inputs": {
                                        "Data_source": "Database",
                                        "Table": "UserConfig",
                                        "Columns": ["analysis_config", "shared_config"],
                                    },
                                    "condition": [
                                        {
                                            "column_name": "name",
                                            "condition": "Equal to",
                                            "input_value": uname,
                                            "and_or": "and",
                                        },
                                        {
                                            "column_name": "analysis_config",
                                            "condition": "Not Equal to",
                                            "input_value": "NULL",
                                            "and_or": "and",
                                        },
                                        {
                                            "column_name": "screen_url",
                                            "condition": "Contains",
                                            "input_value": screen_path2,
                                            "and_or": "",
                                        },
                                    ],
                                },
                            )

                            if not sqlReaduserconfig1.empty:
                                dict_name = {}
                                if sqlReaduser1.iloc[0]["username"] in list_of_names:
                                    dict_name["name"] = sqlReaduser1.iloc[0]["username"]
                                    dict_name["config"] = sqlReaduserconfig1.iloc[0]["analysis_config"]
                                    user_config_list.append(dict_name)
                        if not sqlReadData.empty:
                            if sqlReadData["shared_config"][0] not in [None, "NULL"]:
                                data1["shared_config"] = sqlReadData["shared_config"][0]
                            else:
                                data1["shared_config"] = {}
                            data1["analysisConfigData"] = sqlReadData["analysis_config"][0]
                            data1["analysis_load_yes_or_no"] = "YES"
                        else:
                            data1["shared_config"] = {}
                            data1["analysis_load_yes_or_no"] = "NO"

                        last_modified_date_query = read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": "UserConfig",
                                    "Columns": ["modified_date"],
                                },
                                "condition": [
                                    {
                                        "column_name": "name",
                                        "condition": "Equal to",
                                        "input_value": user_name,
                                        "and_or": "and",
                                    },
                                    {
                                        "column_name": "screen_url",
                                        "condition": "Contains",
                                        "input_value": screen_path2,
                                        "and_or": "",
                                    },
                                ],
                            },
                        )

                        if not last_modified_date_query.empty:
                            last_modified_date = pd.to_datetime(
                                last_modified_date_query.iloc[0]["modified_date"]
                            ).strftime("%d-%m-%Y %H:%M")
                        else:
                            last_modified_date = "00-00-00 00:00"
                        data1["last_modified_date"] = last_modified_date
                        data1["group_name_list"] = permission_group_list
                        data1["user_config_list"] = groupconfig_list
                        data1["group_config_list"] = group_list
                        html = ""
                        script = ""
                        htmlInd, scriptInd = html_generator_analysis(
                            tableName,
                            json.loads(tabBodyContent),
                            elementID,
                            "analysis",
                            i["tab_name"],
                            request,
                            data1,
                            request.path,
                            tab_pane=False,
                        )
                        h = add_html_grapesjs(i["template_type"])
                        html = html + htmlInd
                        script = script + scriptInd
                        if not cke_added:
                            cke_added = True
                            sys_html = sys_html + h + html + "</div>"
                        else:
                            sys_html = sys_html + html + "</div>"

                        sys_script = (
                            sys_script + script + "\n<script>masterPlotly(analysiselementIDList)</script>"
                        )

                        element = soup_temp.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

                        element = soup.find(
                            id=i["template_type"] + i["process"] + i["subprocess_name"] + i["tab_name"]
                        )
                        sys_html_temp = sys_html
                        sys_html_temp = BeautifulSoup(sys_html_temp, "html.parser")
                        element.replaceWith(sys_html_temp)

        script_preview = """<script>setTimeout(function(){
            $('body').css('pointer-events', 'none')
            $('.main-sidebar').css('pointer-events', 'none')
            $('#toggleButton').css('pointer-events', 'none')
            $('.select2').empty()
             $('select.select2:not(.modal select.select2)').each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
})
$('.modal select.select2').each(function(){
    $(this).select2()
})
            },500)
        </script>"""
        script_preview = BeautifulSoup(script_preview, "html.parser")
        soup.body.insert(len(soup.body.contents), script_preview)

        soup = soup.prettify()
        soup = soup.replace("&lt;", "<").replace("&gt;", ">")

        soup_rtf_modal = """<div class="modal fade" id="rtf_field_dialog" style="z-index:1060;" role="dialog" data-focus="false" aria-labelledby="rtf_field_dialog" aria-hidden="true">
          <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="NotextLabel">Compose Message</h5>
              </div>
              <div class="modal-body">
              <form>
                <textarea id="rtf_field_message" name="rtf_field_message">&nbsp;&nbsp;</textarea>
              </form>
              <script>
                CKEDITOR.replace('rtf_field_message',{height: 300});
                CKEDITOR.config.removePlugins = 'exportpdf';
                CKEDITOR.config.extraPlugins = 'autocorrect';
                </script>
                </div>

              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="save_rtf_field_data()">Save</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal fade" id="rtf_field_listview_dialog"  role="dialog" data-focus="false" aria-labelledby="rtf_field_listview_dialog" aria-hidden="true" style="z-index:1061">
          <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="NotextLabel"></h5>
              </div>
              <div class="modal-body">
              <form>
                <textarea id="rtf_field_message_listview" name="rtf_field_message_listview">&nbsp;&nbsp;</textarea>
              </form>
              <script>
                CKEDITOR.replace('rtf_field_message_listview',{height: 300});
                CKEDITOR.config.removePlugins = 'exportpdf,elementspath';
                CKEDITOR.config.extraPlugins = 'autocorrect';
                </script>
                </div>
            </div>
          </div>
        </div>
        <div class="modal fade" id="rtf_field_createView_dialog"  role="dialog" data-focus="false" aria-labelledby="rtf_field_createView_dialog" aria-hidden="true" style="z-index: 1053;">
          <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="NotextLabel">Details</h5>
              </div>
              <div class="modal-body">
                <form>
                  <textarea id="rtf_field_message_createView" name="rtf_field_message_createView">&nbsp;&nbsp;</textarea>
                </form>
                <script>
                CKEDITOR.replace('rtf_field_message_createView',{height: 300});
                CKEDITOR.config.removePlugins = 'exportpdf,elementspath';
                CKEDITOR.config.extraPlugins = 'autocorrect';
                </script>
              </div>
            </div>
          </div>
        </div>
        <div class="modal fade" id="approval_table_Modal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="tabsMultiFunc" aria-hidden="true" style="z-index:2000 !important">
          <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Approval table</h5>
                 <button
                  type="button"
                  class="close"
                  data-dismiss="modal"
                  aria-label="Close"
                >
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>

              <div class="modal-body">
              </div>
            </div>
          </div>
        </div>
        <div class="modal fade" id="draftModal" tabindex="-1" role="dialog" data-focus="false" aria-labelledby="draftModal"  aria-modal="true" style="z-index:1052 !important;">
          <div class="modal-dialog modal-xl modal-lg modal-dialog-centered"  role="document">
              <div class="modal-content">


              <div class="modal-header border-0 pl-3 pr-3">
                  <h6 class="modal-title">Draft Versions</h6>
                  <i class="fa-solid fa-box-archive fa-3x"></i>
              </div>

              <div class="modal-body " >
                  <table class="table table-striped" id="previewTable">

                  </table>
              </div>

              <div class="modal-footer d-flex justify-content-end border-0">
                  <button type="button" class="btn btn-primary buttonfooter btn-md mx-2 rounded px-2" data-dismiss="modal">Close</button>
              </div>

              </div>
          </div>
        </div>
        <div class="modal fade" id="table_field_createView_dialog"  role="dialog" data-focus="false" aria-labelledby="table_field_createView_dialog" aria-hidden="true" style="z-index: 1053; padding-top: 265px;">
            <div class="modal-dialog modal-xl" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="">Details</h5>
                </div>
                <div class="modal-body" style="padding:50px;">
                </div>
                <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal" onclick="$('#draftModal').modal('show')">Close</button>
              </div>
          </div>
        </div>



      <div class="modal fade" id="approval_template_json_data_tabular"  role="dialog" data-focus="false" aria-labelledby="approval_template_json_data_tabular" aria-hidden="true" style="z-index: 2053; padding-top: 80px;">
        <div class="modal-dialog modal-xl" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="">Details</h5>
            </div>
            <div class="modal-body" style="padding:50px;">
            </div>
            <button type="button" class="btn btn-primary" style="position:absolute; bottom: 0.5rem; right: 0.5rem; width:80px" data-dismiss="modal">Close</button>
          </div>
          </div>
        </div>
        """

        soup_temp_scr = """
        <script>
        var listViewTableDict={};
        var listViewEditTemplate = {};
        var createViewIdList = [];
        var elementIDList=[];
        var chartConfigDict={};
        var crossFilterDict={};
        var names = {};
        var app_code_home = '';
        var user_home = '';
        var item_code_list = [];
        var listViewEditTemplate={};
        var listViewTableDict={};
        var element_table_IDList = [];
        var element_page = [];
        var analysiselementIDList=[];
        var chartSaveEleIdList = [];
        var dashboardSave_ = true;
        var editType = "Enable";
        var computationElementIdsArray = [];
        var previousRunComputeElementIdArray = [];
        var button_ids = ["savebutton_","saveDraftbutton_","customValidationList","calculateComp","viewHistory_","button-id-back","resetDraft_","previewDraft_","rejectedRecords","viewTransactions"];
        function enableSaveButton() {{
                $(this).find('button[value=Save]').prop('disabled',false);
            }};
        if ($('form').find("input[name='csrfmiddlewaretoken']").attr('value') != undefined) {
        var ctoken = $('form').find("input[name='csrfmiddlewaretoken']").attr('value')
        if(ctoken != undefined) {
        $.ajaxSetup({
            beforeSend: function (xhr, settings) {
            xhr.setRequestHeader("X-CSRFToken", ctoken);
            }
            });
        }
        }

        function bta_apply() {
            let lba_data = {{lba_data | safe}};
            for (var key of Object.keys(lba_data)) {
            if(Object.keys(lba_data[key]).length != 0) {
            e_id = key;
            if (e_id.startsWith("whiteSpacewrap")) {
                if (!lba_data[key].includes("CreateView - Save")) {
                $(`#savebutton_${e_id}`).attr("disabled", "true");
                $(`#compare_existing_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Save as Draft")) {
                $(`#saveDraftbutton_${e_id}`).attr("disabled", "true");
                $(`#resetDraft_${e_id}`).attr("disabled", "true");
                $(`#previewDraft_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Custom Validation")) {
                $(`#customValidationList${e_id}`).attr("disabled", "true");
                $(`#customValidation${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Refresh Computation")) {
                $(`#calCompVal_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - Back")) {
                $(`#button-id-back${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - View History")) {
                $(`#viewHistory_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("CreateView - View Rejected Records")) {
                $(`#rejectedRecords${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("CreateView - View Transaction Status")) {
                $(`#showTransactions${e_id}`).attr("disabled", "true");
                $(`#viewTransactions${e_id}`).attr("disabled", "true");
                }
            }
            if (e_id.startsWith("ellipse")) {
                if (!lba_data[key].includes("Analysis - Previous Versions")) {
                $(`#previousVersion${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Save and Share")) {
                $(`#saveShare${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Plot charts")) {
                $(`#plotCharts${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - PDF")) {
                $(`#analysisPDF${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Save")) {
                $(`#saveChartConfigButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Global Settings")) {
                $(`#globalButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("Analysis - Add tab")) {
                $(`#analysisAddTab${e_id}`).attr("disabled", "true");
                }
            }

            if (e_id.startsWith("parallelogram")) {
                if (!lba_data[key].includes("Computation - Run Model")) {
                $(`#runModel_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("Computation - Configure Scenario")) {
                $(`#scenarios_${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("Computation - Filter")) {
                $(`#filter_button_prev_run_computation${e_id}`).attr(
                    "disabled",
                    "true"
                );
                $(`#freezepane_button_prev_run_computation${e_id}`).attr(
                    "disabled",
                    "true"
                );
                }
            }
            if (e_id.startsWith("document")) {
                if (!lba_data[key].includes("UploadView - Upload")) {
                $(`#uploadFile${e_id}`).attr("disabled", "true");
                $(`#downloadButton${e_id}`).attr("disabled", "true");
                }

                if (!lba_data[key].includes("UploadView - Map Columns")) {
                $(`#columnMapperButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Custom Validation")) {
                $(`#customValidationButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Add computation logic")) {
                $(`#computedFieldMapperButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Download data")) {
                $(`#downloadData${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Upload history")) {
                $(`#downloadHistory${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Last upload errors")) {
                $(`#downloadLastUploadErrors${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Detailed error log")) {
                $(`#downloadErrorLog${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("UploadView - Transaction status")) {
                $(`#showTransactions${e_id}`).attr("disabled", "true");
                }
            }
            if (e_id.startsWith("process")) {
                if (!lba_data[key].includes("ListView - Upload")) {
                $(`#uploadButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Save template")) {
                $(`#saveTemplateButton${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Set Alerts")) {
                $(`#displayalert${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Paste Tabular Data")) {
                $(`#tablegenerator_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Edit Mode")) {
                $(`#editListView${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Delete all data")) {
                $(`#listview_clearall_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Find and replace")) {
                $(`#find_replace_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Freeze Panes")) {
                $(`#freeze_pane_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Formatters")) {
                $(`#formatter_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Transactions Status")) {
                $(`#showTransactions${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Plot Charts")) {
                $(`#plotCharts${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Filter")) {
                $(`#filter_button_list_view${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Add Computed Fields")) {
                $(`#addComp_field_${e_id}`).attr("disabled", "true");
                }
                if (!lba_data[key].includes("ListView - Expand")) {
                $(`#example1_expand${e_id}`).attr("disabled", "true");
                }
            }
                $("section").addClass('visible-section')
            }else{
                $("section").addClass('visible-section')
            }
            }
        }
        </script>
        """
        soup_temp_scr = BeautifulSoup(soup_temp_scr, "html.parser")
        soup_temp.body.insert(len(soup_temp.body.contents), soup_temp_scr)
        soup_rtf_modal = BeautifulSoup(soup_rtf_modal, "html.parser")
        soup_temp.body.insert(0, soup_rtf_modal)

        soup_temp = soup_temp.prettify()

        system_block_names = list(set(system_block_names))
        s_script = add_scripts_grapesjs(
            system_block_names,
            compute_list=computation_element_id_list,
            compute_prev_list=computation_prev_element_id_list,
        )
        script = (
            s_script
            + jsFieldsGenerator(tab_type_list=system_block_names)
            + sys_script
            + """
        <script>
          $(document).ready(function(){
            $('.select2').each(function(){
              if($(this).hasClass('user_logo')){
                $(this).select2({
                  templateResult: formatState1,
                  templateSelection: formatState2
                });
              }else if($(this).hasClass('select2')){
                parent = $(this).parent()
                $(this).select2({dropdownParent:parent})
              }
            })
          });

          $('.tab').on('click', function(e){
            setTimeout(() => {
              $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
            }, 100);
          })

          function showpopOver(){
            let flag = $(this).attr("data-to_show")
            if(flag == undefined){
              $(this).attr("data-to_show",1)
              flag = 1
            }else if(flag == 1){
              $(this).attr("data-to_show",0)
            } else{
              $(this).attr("data-to_show",1)
            }
            if(flag == 1){
              $(this).popover('show')
            }
          }

        </script>
        <style>
          .bootstrap-datetimepicker-widget {
              top: auto !important;
              bottom: auto !important;
              left: auto !important;
              right: auto !important;
              position: fixed !important;
            }
        </style>
        """
        )

        with open(
            f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_customL3.html",
            "w",
        ) as f:
            html = """
                <!DOCTYPE html>
                    {% extends extend_template %}
                    {% load crispy_forms_tags %}
                    {{ form.media }}
                    {% load static %}
                    {% block body_block %}
                    <link rel="stylesheet" href="{% static 'css/KoreD/jquery.dataTables.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-responsive/css/responsive.bootstrap4.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-colreorder/css/colReorder.bootstrap4.min.css' %}">
                        <link rel="stylesheet" href="{% static 'css/KoreD/buttons.dataTables.min.css' %}">
                        <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{% static 'css/ebstyle.css' %}">
                        <!-- DataTables -->
                        <script src="{% static 'vendor/Base_theme/datatables/jquery.dataTables.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-responsive/js/dataTables.responsive.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-fixedheader/js/dataTables.fixedHeader.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-colreorder/js/dataTables.colReorder.min.js' %}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-bs4/js/dataTables.bootstrap4.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-fixedcolumns/js/dataTables.fixedColumns.min.js'%}"></script>
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-fixedcolumns/css/fixedColumns.dataTables.min.css'%}">
                        <!-- Treant JS -->
                        <link href="{%static 'vendor/treant-js-master/Treant.css'%}" type="text/css" rel="stylesheet" />
                        <script src="{%static 'vendor/treant-js-master/vendor/raphael.js'%}"></script>
                        <script src="{%static 'vendor/treant-js-master/Treant.js'%}"></script>
                        <!-- Timepicker -->
                        <link rel="stylesheet" href="{%static 'bootstrap-datepicker/bootstrap-datetimepicker.min.css'%}">
                        <link rel="stylesheet" href="{%static 'bootstrap_datepicker_plus/css/datepicker-widget.min.css'%}">
                        <script type="text/javascript" src="{%static 'moment/moment-with-locales.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'bootstrap-datetimepicker/bootstrap-datetimepicker.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'bootstrap_datepicker_plus/js/datepicker-widget.js'%}"></script>

                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/dataTables.buttons.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/jszip/jszip.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/pdfmake/pdfmake.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/pdfmake/vfs_fonts.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.html5.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.colVis.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.print.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.flash.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-rowreorder/js/dataTables.rowReorder.min.js'%}"></script>
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-rowreorder/css/rowReorder.bootstrap4.min.css' %}">
                        <!-- Pivot Table JS -->
                        <script type="text/javascript" src=" {% static 'vendor/d3/d3.min.js' %}"></script>
                        <script type="text/javascript" src=" {% static 'vendor/c3/c3.min.js' %}"></script>


                        <script src="{%static 'vendor/Plotly/plotly-basic-latest.min.js'%}"></script>

                        <script src=" {% static 'js/pivottable/dist/pivot.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/c3_renderers.min.js' %}"></script>

                        <script src=" {% static 'js/pivottable/dist/d3_renderers.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/gchart_renderers.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/googleapis.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/plotly_renderers.min.js' %}"></script>

                        <!-- Select2 -->
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/select2/css/select2.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/select2-bootstrap4-theme/select2-bootstrap4.min.css' %}">

                        <!-- Select2 -->
                        <script src="{% static 'vendor/Base_theme/select2/js/select2.min.js' %}"></script>

                        <!-- Plotly -->
                        <script src="{%static 'vendor/Plotly/plotly-latest.min.js'%}"></script>
                        <link href="{%static 'vendor/Plotly/mapbox-gl.css'%}" rel='stylesheet' />
                        <link href="{%static 'vendor/Tabulator/tabulator.min.css'%}" rel="stylesheet">
                        <script type="text/javascript" src="{%static 'vendor/Tabulator/tabulator.min.js'%}"></script>
                        <!-- jsPDF -->
                        <script src="{%static 'js/jsPDF/dist/jspdf.umd.min.js'%}"></script>
                        <!-- html2Canvas -->
                        <script src="{%static 'js/html2canvas/html2canvas.min.js'%}"></script>

                        <!-- Jcrop OCR -->
                        <link rel="stylesheet" href="{% static 'vendor/Jcrop/jquery.Jcrop.css' %}">
                        <script src="{%static 'vendor/Jcrop/popper.min.js'%}"></script>
                        <script src="{%static 'vendor/Jcrop/jquery.Jcrop.js'%}"></script>
                        <script src="{%static 'vendor/Jcrop/console.image.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'moment/moment.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'daterangepicker/js/daterangepicker.min.js'%}"></script>
                        <link rel="stylesheet" href="{%static 'daterangepicker/css/daterangepicker.css'%}">

                    <!-- XLSX/XML Table Export --->
                        <script src="{%static 'js/tableExport/tableExport.min.js'%}" ></script>
            """
            html = html + "<style>" + css + "</style>" + soup_temp + script
            html = html + "{%endblock%}"
            f.write(html)
            f.close()

        with open(
            f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_temp.html",
            "w",
        ) as f:
            html = """
                    <!DOCTYPE html>
                        {% extends extend_template %}
                        {% load crispy_forms_tags %}
                        {{ form.media }}
                        {% load static %}
                        {% block body_block %}
                        <link rel="stylesheet" href="{% static 'css/KoreD/jquery.dataTables.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-responsive/css/responsive.bootstrap4.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-colreorder/css/colReorder.bootstrap4.min.css' %}">
                        <link rel="stylesheet" href="{% static 'css/KoreD/buttons.dataTables.min.css' %}">
                        <link rel="preload" as="style" fetchpriority="low" onload="this.rel='stylesheet'" href="{% static 'css/ebstyle.css' %}">
                        <!-- DataTables -->
                        <script src="{% static 'vendor/Base_theme/datatables/jquery.dataTables.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-responsive/js/dataTables.responsive.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-fixedheader/js/dataTables.fixedHeader.min.js' %}"></script>
                        <script src="{% static 'vendor/Base_theme/datatables-colreorder/js/dataTables.colReorder.min.js' %}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-bs4/js/dataTables.bootstrap4.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-fixedcolumns/js/dataTables.fixedColumns.min.js'%}"></script>
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-fixedcolumns/css/fixedColumns.dataTables.min.css'%}">
                        <!-- Treant JS -->
                        <link href="{%static 'vendor/treant-js-master/Treant.css'%}" type="text/css" rel="stylesheet" />
                        <script src="{%static 'vendor/treant-js-master/vendor/raphael.js'%}"></script>
                        <script src="{%static 'vendor/treant-js-master/Treant.js'%}"></script>
                        <!-- Timepicker -->
                        <link rel="stylesheet" href="{%static 'bootstrap-datepicker/bootstrap-datetimepicker.min.css'%}">
                        <link rel="stylesheet" href="{%static 'bootstrap_datepicker_plus/css/datepicker-widget.min.css'%}">
                        <script type="text/javascript" src="{%static 'moment/moment-with-locales.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'bootstrap-datetimepicker/bootstrap-datetimepicker.min.js'%}"></script>
                        <script type="text/javascript" src="{%static 'bootstrap_datepicker_plus/js/datepicker-widget.js'%}"></script>

                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/dataTables.buttons.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/jszip/jszip.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/pdfmake/pdfmake.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/pdfmake/vfs_fonts.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.html5.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.colVis.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.print.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-buttons/js/buttons.flash.min.js'%}"></script>
                        <script src="{%static 'vendor/Base_theme/datatables-rowreorder/js/dataTables.rowReorder.min.js'%}"></script>
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/datatables-rowreorder/css/rowReorder.bootstrap4.min.css' %}">
                        <!-- Pivot Table JS -->
                        <script type="text/javascript" src=" {% static 'vendor/d3/d3.min.js' %}"></script>
                        <script type="text/javascript" src=" {% static 'vendor/c3/c3.min.js' %}"></script>


                        <script src="{%static 'vendor/Plotly/plotly-basic-latest.min.js'%}"></script>

                        <script src=" {% static 'js/pivottable/dist/pivot.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/c3_renderers.min.js' %}"></script>

                        <script src=" {% static 'js/pivottable/dist/d3_renderers.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/gchart_renderers.min.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/googleapis.js' %}"></script>
                        <script src=" {% static 'js/pivottable/dist/plotly_renderers.min.js' %}"></script>

                        <!-- Select2 -->
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/select2/css/select2.min.css' %}">
                        <link rel="stylesheet" href="{% static 'vendor/Base_theme/select2-bootstrap4-theme/select2-bootstrap4.min.css' %}">

                        <!-- Select2 -->
                        <script src="{% static 'vendor/Base_theme/select2/js/select2.min.js' %}"></script>

                        <!-- Plotly -->
                        <script src="{%static 'vendor/Plotly/plotly-latest.min.js'%}"></script>
                        <link href="{%static 'vendor/Plotly/mapbox-gl.css'%}" rel='stylesheet' />
                        <link href="{%static 'vendor/Tabulator/tabulator.min.css'%}" rel="stylesheet">
                        <script type="text/javascript" src="{%static 'vendor/Tabulator/tabulator.min.js'%}"></script>
                        <!-- jsPDF -->
                        <script src="{%static 'js/jsPDF/dist/jspdf.umd.min.js'%}"></script>
                        <!-- html2Canvas -->
                        <script src="{%static 'js/html2canvas/html2canvas.min.js'%}"></script>

                        <!-- Jcrop OCR -->
                        <link rel="stylesheet" href="{% static 'vendor/Jcrop/jquery.Jcrop.css' %}">
                        <script src="{%static 'vendor/Jcrop/popper.min.js'%}"></script>
                        <script src="{%static 'vendor/Jcrop/jquery.Jcrop.js'%}"></script>
                        <script src="{%static 'vendor/Jcrop/console.image.min.js'%}"></script>

                    <!-- XLSX/XML Table Export --->
                        <script src="{%static 'js/tableExport/tableExport.min.js'%}" ></script>
                        <script>
                          $('select.select2:not(.modal select.select2)').each(function(){
    parent = $(this).parent()
    $(this).select2({dropdownParent:parent})
})
$('.modal select.select2').each(function(){
    $(this).select2()
})
                        </script>
                """
            html = html + soup + "{%endblock%}"
            f.write("<style>" + css + "</style>" + html)
            f.close()

        html = ""
    else:
        if tab_layout == "Vertical":
            html = html + "</div></div></div>"
        else:
            html = html + "</div>"

    if not l3_ct:
        script = jsFieldsGenerator(tab_type_list=tab_type_list) + script
        script = (
            script
            + """
          <script>
          $('.span_content_editable').each(function () {
          $(this).on('click', function () {
            $(this).attr('data-currentName', $(this).text());
          $(this).attr("contenteditable", "true")
          $(this).focus()
          })
          $(this).focusout(function () {
          var tab_header = this.innerText
          tab_header = tab_header.trim()
          if (tab_header.length == 0){
              this.innerText = "Set Name"
              $(this).removeAttr("contenteditable");
              $(this).addClass("bg-danger")
              $(this).trigger("click")

          }
          else{
          $(this).removeAttr("contenteditable");
          $(this).removeClass("bg-danger")
          if (tab_header != $(this).attr('data-currentName')) {
            $(this).removeAttr("data-currentName");
            $.ajax({
                url: `/users/${urlPath}/ajax/tabConfig/`,

                data: {
                'operation': "update_tab_header_name_populate",
                'id': $(this).parent().parent().attr('data-tab_pk'),
                'user_name':'{{ user.get_username }}',
                'tab_header_name': tab_header,

                },
                type: "POST",
                dataType: "json",
                success: function (data) {


                },
                error: function () {
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
                }
            });
          }
          }

          })
      })
      var populateTabFuctionalities = function() {
      var tab_data = JSON.parse($(this).attr('data-data_list'));
      var tab_data_ordered = {};
      var count = 0;
      for(let [key,value] of Object.entries(tab_data)) {
        count++;
        for(let [key1,value1] of Object.entries(tab_data)) {
          if(count == parseInt(value1["order"])) {
            tab_data_ordered[key1] = {}
            tab_data_ordered[key1]["order"] = count
            tab_data_ordered[key1]["show"] = value1["show"]
          }
        }
      };
      $('#tabsMultiFuncBodyTable').find('tbody').empty();

      html_tab = ''
      id_gen = 0
      for(let [key,value] of Object.entries(tab_data_ordered)) {
        id_gen++
        html_tab = html_tab + `<tr style="text-align:center;background:#f3f3f3;cursor: move;" data-element_id='${key}'>`
        html_tab = html_tab +`<td minimum=1 maximum='${count}' data-value="${value["order"]}"><span class="ui-icon ui-icon-arrowthick-2-n-s mt-1" data-toggle="tooltip" title="Drag Up/ Down to reorder"></span></td>`
        if(value["show"] == "1") {
          html_tab = html_tab + `
          <td>
            <div class="d-flex">
              <div class="switch-container">
                <input class="float-right switch" type="checkbox" id="input${id_gen}" style="margin-right: 20rem;" name="input${id_gen}" value="input${id_gen}" checked>
                <div class="switch-color"><label class="trigger-label" for="input${id_gen}"></label></div>
                <label class="switch-label" for="input${id_gen}"></label>
              </div>
            </div>
          </td>`
        } else {
          html_tab = html_tab + `
          <td>
            <div class="d-flex">
              <div class="switch-container">
                <input class="float-right switch" type="checkbox" id="input${id_gen}" style="margin-right: 20rem;" name="input${id_gen}" value="input${id_gen}">
                <div class="switch-color"><label class="trigger-label" for="input${id_gen}"></label></div>
                <label class="switch-label" for="input${id_gen}"></label>
              </div>
            </div>
          </td>`
        }
        html_tab = html_tab + `<td><span class="tab_name_config" style="word-break:break-word;white-space:break-spaces;text-align:left;display:block;margin-left:10px;">${$('#'+key+'-tab').text()}</span></td></tr>`


      }
      $('#tabsMultiFuncBodyTable').find('tbody').append(html_tab)

      $("#tabsMultiFuncBodyTable tbody").disableSelection();

      $("#tabsMultiFuncBodyTable tbody").sortable({
        axis: "y",
        containment: "parent",
        cursor: "grabbing",
        handle: "td",
        helper: "original",
        opacity: 0.6,
        update: function(event, ui) {
          var sortedItems = $(this).find("tr");
          sortedItems.each(function(index) {
            $(this).find('td').eq(0).attr("data-value",index + 1);
          });
        },
      });

      $("#tabsMultiFuncBodyTable tbody tr").draggable({
        connectToSortable: "#tabsMultiFuncBodyTable tbody",
        helper: "original",
        revert: "invalid"
      }).draggable("enable");

    }
    var validation = function() {
      if(parseInt($(this).val()) < 1) {
        $(this).val(1).trigger('change')
      }
      if(parseInt($(this).val()) > parseInt($(this).attr('maximum'))) {
        $(this).val(parseInt($(this).attr('maximum'))).trigger('change')
      }
    }
    var saveTabsFunc = function() {
      $('#tabsMultiFunc').find('.modal-footer').find('button').html(`<i class="fa fa-circle-notch fa-spin"></i>`)
      var order_data = {}
      var validation = 0
      var len = $('#tabsMultiFuncBodyTable').find('tbody').find('tr').length;
      for(let j = 0; j < len; j++) {
        validation = 0
        var dummy = parseInt($('#tabsMultiFuncBodyTable').find('tbody').find('tr').eq(j).find('td').eq(0).attr('data-value'));
        for(let i = 0; i < len; i++) {
          var dummy1 = parseInt($('#tabsMultiFuncBodyTable').find('tbody').find('tr').eq(i).find('td').eq(0).attr('data-value'))
          if (dummy == dummy1) {
            validation = validation + 1;
            if(validation > 1) {
              break;
            }
          }
        }
        if(validation > 1) {
          break;
        }
        if(!dummy){
          validation = 2;
          break;
        }
      }
      if(validation < 2) {
        $('#tabsMultiFuncBodyTable').find('tbody').find('tr').each(function() {
          var ele_ids = $(this).attr('data-element_id')
          var show
          if ($(this).find('td').eq(1).find('input').prop('checked')){
            show = "1"
          } else {
            show = "0"
          }
          order_data[ele_ids] = {'tab_name':$(this).find('td').eq(2).text(),
              'data': {
                'order': String($(this).find('td').eq(0).attr('data-value')),
                'show': show
              }
          }
        });
        $.ajax({
        url: `/users/${urlPath}/processGraphModule/`,
        data: {
            'operation': 'saveTabOrder',
            'order_data': JSON.stringify(order_data),
            'pr_code':windowLocation.split('/')[4],
          },
          type: "POST",
          dataType:"json",
          success:function(data){
            $('#tabsMultiFunc').find('.modal-footer').html(`<button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>`)
            window.location.reload();
          },
          error: function () {
            $('#tabsMultiFunc').find('.modal-footer').html(`<button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>`)
            Swal.fire({icon: 'error',text: 'Error! Please try again.'});
          }
        })
      } else {
        $('#tabsMultiFunc').find('.modal-footer').html(`<button onclick="saveTabsFunc.call(this)" type="button" class="btn btn-primary">Save</button>`)
        Swal.fire({icon: 'warning',text: 'Order cannot be left blank or cannot be the same.'});
      }

    }
      </script>
          """
        )

        html = html.replace("&lt;", "<").replace("&gt;", ">")
        if "data_connector" in tab_type_list:
            html += """<script src="{% static 'js/Kore_TI_js/Standardized_JS/upload_block.min.js' %}" defer></script>"""
        if "analysis" in tab_type_list or "list_view" in tab_type_list:
            html = (
                html
                + """
          <style>
              /* Dropdown Button */


              /* .modal-dialog {
                  max-width: 1300px;
                  margin: 0.75rem auto;
              } */

              .analysisDashboardmove {
                  background-color: white;
              }

              .tabulator .tabulator-header .tabulator-col {
                  background-color: var(--primary-color);
                  color: white;
                  text-align: center;

              }


              .dropbtn {
                  background-color: white;
                  color: black;
                  padding: 1px;
                  font-size: 30px;
                  border: none;
              }

              .xaxislayer-above {
                  /* cursor: pointer; */
                  pointer-events: all;
              }

              .yaxislayer-above {
                  /* cursor: pointer; */
                  pointer-events: all;
              }

              /* The container <div> - needed to position the dropdown content */
              .dropdown {
                  position: relative;
                  display: inline-block;
              }

              /* Dropdown Content (Hidden by Default) */
              .dropdown-content:not(.notification-dropdown) {
                  display: none;
                  position: absolute;
                  background-color: white;
                  min-width: 110px;
                  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
                  z-index: 1000;
              }

              .dropdown2-tab {
                  position: relative;
                  display: inline-block;
              }

              /* Dropdown Content (Hidden by Default) */
              .dropdown2-content-tab {
                  display: none;
                  position: absolute;
                  background-color: white;
                  min-width: 110px;
                  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
                  z-index: 1000;
              }

              /* Links inside the dropdown */
              .dropdown-content:not(.notification-dropdown) div {
                  color: black;
                  padding: 2px 1px;
                  text-decoration: none;
                  display: block;
              }

              /* Change color of dropdown links on hover */
              .dropdown-content:not(.notification-dropdown) a:hover {
                  background-color: #ddd;
              }

              /* Show the dropdown menu on hover */
              .dropdown:hover .dropdown-content:not(.notification-dropdown) {
                  display: block;
              }

              .dropdown2-content-tab div {
                  color: black;
                  padding: 2px 1px;
                  text-decoration: none;
                  display: block;
              }

              /* Change color of dropdown links on hover */
              .dropdown2-content-tab a:hover {
                  background-color: #ddd;
              }
              /* Give grid like background to chart parent container */
          </style>
          <script>
            if ($('textarea[name="text_editor"]').length > 0) {
              var form_rtf = ['CreateDiv,Anchor,Language,About,PasteText,PasteFromWord,Find,Replace,SelectAll,Scayt,Blockquote,Outdent,Indent,BulletedList,NumberedList,CopyFormatting,RemoveFormat,Bold,Italic,Underline,Strike,Subscript,Superscript,TextColor,BidiLtr,BidiRtl,Templates,Link,Unlink,Source,Save,NewPage,ExportPdf,Preview,Print,Styles,Format,Font,FontSize,BGColor,ShowBlocks,Maximize,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,HorizontalRule,SpecialChar,PageBreak,Iframe,Flash,Table,Image,Smiley'];
              var home_rtf =['Source,Save,Templates,CreateDiv,Unlink,Anchor,Language,Link,Image,Flash,Table,HorizontalRule,SpecialChar,PageBreak,Iframe,ShowBlocks,Maximize,About,Print,Preview,ExportPdf,NewPage,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Smiley'];
              var tools_rtf =['Flash,About,Templates,Cut,Copy,Paste,PasteText,PasteFromWord,Redo,Undo,Find,Replace,SelectAll,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Bold,Italic,Underline,Strike,Subscript,Superscript,CopyFormatting,RemoveFormat,Outdent,NumberedList,BulletedList,Indent,Blockquote,JustifyLeft,CreateDiv,JustifyCenter,JustifyRight,JustifyBlock,Language,BidiRtl,BidiLtr,Link,Unlink,Anchor,Image,Table,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,Styles,Format,Font,FontSize,TextColor,BGColor'];
              var insert_rtf2 =['Source,Save,NewPage,ExportPdf,Preview,Print,Templates,PasteText,PasteFromWord,Replace,Find,SelectAll,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Bold,BidiLtr,BidiRtl,Language,JustifyRight,JustifyBlock,JustifyCenter,CreateDiv,Indent,BulletedList,NumberedList,Outdent,Blockquote,JustifyLeft,CopyFormatting,RemoveFormat,Styles,Format,Font,FontSize,TextColor,BGColor,ShowBlocks,Maximize,About,Italic,Underline,Strike,Subscript,Superscript'];
              CKEDITOR.replace(`text_editor`,{height: 60, removeButtons:home_rtf[0]});
              CKEDITOR.config.removePlugins = 'exportpdf';
              CKEDITOR.config.extraPlugins = 'autocorrect';
              $(".rtf_action_tab").find('button').each(function(){
                $(this).on('click',function(){
                  $(".rtf_action_tab").find('button').removeClass('active')
                  $(this).addClass('active')
                  if($(this).attr('data-bs-target') == "Form"){
                    var editor = CKEDITOR.instances[`text_editor`];
                    var editor_data = CKEDITOR.instances[`text_editor`].getData()
                    if (editor) { editor.destroy(true); }
                    CKEDITOR.replace(`text_editor`,{height: 60,removeButtons:form_rtf[0] });
                    CKEDITOR.instances[`text_editor`].setData(editor_data)
                  }
                  else if ($(this).attr('data-bs-target') == "Text"){
                    var editor = CKEDITOR.instances[`text_editor`];
                    var editor_data = CKEDITOR.instances[`text_editor`].getData()
                    if (editor) { editor.destroy(true); }
                    CKEDITOR.replace(`text_editor`,{height: 60,removeButtons:home_rtf[0] });
                    CKEDITOR.instances[`text_editor`].setData(editor_data)
                  }
                  else if ($(this).attr('data-bs-target') == "Insert"){
                    var editor = CKEDITOR.instances[`text_editor`];
                    var editor_data = CKEDITOR.instances[`text_editor`].getData()
                    if (editor) { editor.destroy(true); }
                    CKEDITOR.replace(`text_editor`,{height: 60,removeButtons:insert_rtf2[0] });
                    CKEDITOR.instances[`text_editor`].setData(editor_data)
                  }
                  else if ($(this).attr('data-bs-target') == "Page Layout"){
                    var editor = CKEDITOR.instances[`text_editor`];
                    var editor_data = CKEDITOR.instances[`text_editor`].getData()
                    if (editor) { editor.destroy(true); }
                    CKEDITOR.replace(`text_editor`,{height: 60,removeButtons:tools_rtf[0] });
                    CKEDITOR.instances[`text_editor`].setData(editor_data)
                  }
                });
              });
              function ckEditorFunc () { // eslint-disable-line no-unused-vars
                const data = $(this).parent().parent().find('.commentbox').html()
                const id_ = $(this).parent().parent().attr('data-id')
                if (typeof (data) !== 'undefined') {
                  CKEDITOR.instances.text_editor.setData(`${data}`)
                }
                $('#ckEditorModal').attr('data-id', id_)
                $('#ckEditorModal').modal('show')
              }
              function saveCkEditor () { // eslint-disable-line no-unused-vars
                const editorData = CKEDITOR.instances.text_editor.getData()
                const id_ = $('#ckEditorModal').attr('data-id')
                $('#' + id_).find('.commentbox').html(editorData)
                $('#ckEditorModal').modal('hide')
              }
            }
          </script>
          """
            )
        if "create_view" in tab_type_list:
            script = (
                script
                + """<script src="{% static 'js/Kore_TI_js/create_view_form.js/create_view_save_form.min.js' %}" defer></script>
          <script type="module" src="{% static 'js/Kore_TI_js/embeded_computation.min.js' %}" defer></script>"""
            )
        if "list_view" in tab_type_list:
            script_trigger_tree_grid = False
            for k in tab_body_content_list:
                group_by = json.loads(k)
                if group_by.get("Category_attributes"):
                    if group_by["Category_attributes"].get("Mandatory"):
                        if group_by["Category_attributes"]["Mandatory"].get("GroupByConfigs") is not None:
                            if group_by["Category_attributes"]["Mandatory"].get("Table_name") is not None:
                                if group_by["Category_attributes"]["Mandatory"].get("Table_name").startswith(
                                    "["
                                ) and group_by["Category_attributes"]["Mandatory"].get("Table_name").endswith(
                                    "]"
                                ):
                                    table_list = json.loads(
                                        group_by["Category_attributes"]["Mandatory"].get("Table_name")
                                    )
                                    for b in table_list:
                                        if (
                                            group_by["Category_attributes"]["Mandatory"][
                                                "GroupByConfigs"
                                            ].get(b)
                                            is not None
                                        ):
                                            if (
                                                group_by["Category_attributes"]["Mandatory"][
                                                    "GroupByConfigs"
                                                ][b].get("group_by_switch")
                                                != True
                                            ):
                                                script_trigger_tree_grid = True
                                                break
                                            if (
                                                group_by["Category_attributes"]["Mandatory"][
                                                    "GroupByConfigs"
                                                ][b].get("group_by_switch_user_configuration")
                                                == True
                                            ):
                                                script_trigger_tree_grid = True
                                                break
                                else:
                                    if (
                                        group_by["Category_attributes"]["Mandatory"]["GroupByConfigs"].get(
                                            group_by["Category_attributes"]["Mandatory"].get("Table_name")
                                        )
                                        is not None
                                    ):
                                        if (
                                            group_by["Category_attributes"]["Mandatory"]["GroupByConfigs"][
                                                group_by["Category_attributes"]["Mandatory"].get("Table_name")
                                            ].get("group_by_switch")
                                            != True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
                                        if (
                                            group_by["Category_attributes"]["Mandatory"]["GroupByConfigs"][
                                                group_by["Category_attributes"]["Mandatory"].get("Table_name")
                                            ].get("group_by_switch_user_configuration")
                                            == True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
                else:
                    my_list = [i for i in group_by.values()]
                    if type(my_list[0]) == dict:
                        if my_list[0].get("mulview_def_cols"):
                            for b in my_list[0].get("mulview_def_cols"):
                                group_by_mul = group_by[b]
                                if (
                                    group_by_mul["Category_attributes"]["Mandatory"].get("GroupByConfigs")
                                    is not None
                                ):
                                    if (
                                        group_by_mul["Category_attributes"]["Mandatory"][
                                            "GroupByConfigs"
                                        ].get(
                                            group_by_mul["Category_attributes"]["Mandatory"].get("Table_name")
                                        )
                                        is not None
                                    ):
                                        if (
                                            group_by_mul["Category_attributes"]["Mandatory"][
                                                "GroupByConfigs"
                                            ][
                                                group_by_mul["Category_attributes"]["Mandatory"].get(
                                                    "Table_name"
                                                )
                                            ].get(
                                                "group_by_switch"
                                            )
                                            != True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
                                        if (
                                            group_by_mul["Category_attributes"]["Mandatory"][
                                                "GroupByConfigs"
                                            ][
                                                group_by_mul["Category_attributes"]["Mandatory"].get(
                                                    "Table_name"
                                                )
                                            ].get(
                                                "group_by_switch_user_configuration"
                                            )
                                            == True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
                                    if (
                                        group_by_mul["Category_attributes"]["Mandatory"][
                                            "GroupByConfigs"
                                        ].get(b)
                                        is not None
                                    ):
                                        if (
                                            group_by_mul["Category_attributes"]["Mandatory"][
                                                "GroupByConfigs"
                                            ][b].get("group_by_switch")
                                            != True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
                                        if (
                                            group_by_mul["Category_attributes"]["Mandatory"][
                                                "GroupByConfigs"
                                            ][b].get("group_by_switch_user_configuration")
                                            == True
                                        ):
                                            script_trigger_tree_grid = True
                                            break
            if script_trigger_tree_grid:
                script += """
              <script src="{% static 'js/tree_grid/tree_grid.min.js' %}"></script>
            """
            script = (
                script
                + """<script src="{% static 'js/Kore_TI_js/datatables/base_datatable_filter.min.js' %}"></script>
              <script type="module" src="{% static 'js/Kore_TI_js/embeded_computation_list_view.min.js' %}" defer></script>
              <link rel="stylesheet" href="{% static 'vendor/Base_theme/ion-range-slider/css/ion.rangeSlider.min.css' %}"/>
              <script src="{% static 'vendor/Base_theme/ion-range-slider/js/ion.rangeSlider.min.js' %}"></script>
              <script src="{% static 'vendor/cytoscape/cytoscape.min.js' %}"></script>
              <script src="{% static 'vendor/cytoscape/dagre.min.js' %}"></script>
              <script src="{% static 'vendor/cytoscape/cytoscape-dagre.min.js' %}"></script>
          <script>masterBaseDataFilter(element_table_IDList,element_page)</script>
          <script>
          </script>
          """
            )
            if create_view_tab and "create_view" not in tab_type_list:
                script = (
                    script
                    + """<script src="{% static 'js/Kore_TI_js/create_view_form.js/create_view_save_form.min.js' %}" defer>
              </script><script type="module" src="{% static 'js/Kore_TI_js/embeded_computation.min.js' %}" defer></script>"""
                )
        if "computation" in tab_type_list:
            script += """
        <script type="text/javascript" src="{% static 'js/Kore_TI_js/computation/computation.min.js' %}"></script>
        <script>
          var globalVariableID = []
          var process_level_filter_checks = {}
          var dependencies_check = {}
          $('.gVarDropDown').each(function() {
            var id = $(this).closest('.form-row').attr('data-parent_element_id');
            globalVariableID.push(id);
            let dropdown_var = $(this).parent().find('label').text().trim()
            if($(this).attr('has_process_level_filters')){
              process_level_filter_checks[dropdown_var] = $(this).attr('has_process_level_filters')
            }else{
              process_level_filter_checks[dropdown_var] = "no"
            }
            let dependencies = $(this).attr("dependencies")
            if(dependencies){
              if(JSON.parse(dependencies).length>0){
                dependencies_check[dropdown_var] = true
              }else{
                dependencies_check[dropdown_var] = false
              }
            }
          })
          if (globalVariableID.length) {
            var tab_element_id = $('.gVarDropDown:first').parent().parent().parent().attr('id').slice(16)
            $.ajax({
              url:`/users/${urlPath}/dynamicVal/`,
              data: {
                'operation':'popuplateGlobalVariable',
                'element_id_list': JSON.stringify(globalVariableID),
                'process_level_filter_checks': JSON.stringify(process_level_filter_checks),
                'tab_element_id': tab_element_id,
                'dependencies_check':JSON.stringify(dependencies_check)
              },
              type: 'POST',
              dataType: "json",
              success: function (data) {
                $('.gVarDropDown').each(function() {
                  var idGV = $(this).attr('name').split('gVar_')[1];
                  var listGV = data[idGV]
                  $(this).find('select').empty();
                  $(this).find('select').append('<option value="">---------</option>');
                  for(let i = 0; i < listGV.length; i++) {
                    $(this).find('select').append(`<option value="${listGV[i]}">${listGV[i]}</option>`);
                  }
                })
              },
              error: ()=>{
                Swal.fire({icon: 'error',text: 'Error! Please try again.'});
              }
            });
          }
        </script>
        <script>masterComputeExecutionHandler(computationElementIdsArray)</script>
        <script>masterComputePreviousRunDisplayHandler(previousRunComputeElementIdArray)</script>
        <script fetchpriority="low" type="text/javascript" src="{%static 'js/ebjavascript.min.js'%}" defer></script>
        """
        if ("list_view" in tab_type_list and plotInd == True) or ("analysis" in tab_type_list):
            script += """
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysisUtilites.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis_modal.min.js' %}"></script>
        <script src="{% static 'js/Kore_TI_js/plot_charts/plotly_chartsAnalysis.min.js' %}"></script>
        <script defer>masterPlotly(analysiselementIDList)</script>
        """

    if not l3_ct:
        html = html + """</section>"""

    if regenerate:
        for i in tabScreenElementIDList1:
            if os.path.exists(
                f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_{i}.html"
            ):
                os.remove(
                    f"kore_investment/templates/user_defined_template/{tenant}/{curr_app_code}/{prg_code}_{pr_code}_{i}.html"
                )
    return html, script, ""


def foreign_key_value_listView(js_foreign_table, js_foreign_column, jsattrlist, request):

    datajs = ""
    for con in jsattrlist:
        if con["parentvalue"] == "Foreign-key-relation":
            datajs = con
            break

    column_name = [js_foreign_column]
    table_name = [js_foreign_table]
    constraint = []
    ruleSet = []
    cond = []
    cond_column = []
    cond_val = []
    dynamicVal = []

    if datajs:
        constraint.append(datajs["finaljsattr"][2][0]["condition"]["constraint"])
        ruleSet.append(datajs["finaljsattr"][2][0]["condition"]["ruleSet"])
        cond.append(datajs["finaljsattr"][2][0]["condition"]["cond"])
        cond_column.append(datajs["finaljsattr"][2][0]["condition"]["column"])
        cond_val.append(datajs["finaljsattr"][2][0]["condition"]["value"])
        dynamicVal.append(datajs["finaljsattr"][2][0]["condition"]["dynamicVal"])

    value = []
    count = 0

    for iindx, i in enumerate(column_name):
        condition = []

        if cond:
            if not count > (len(cond_column) - 1):
                if len(cond[count]) > 0 and len(cond_column[count]) > 0:
                    for j in range(len(cond_column[count])):
                        if cond[count][j] not in ["null", None] and cond_column[count][j] not in [
                            "null",
                            None,
                        ]:
                            if cond[count][j] == "IN":
                                val_str = "("
                                if not dynamicVal:
                                    for j1 in range(len(cond_val[count][j])):
                                        val_str = val_str + "'"
                                        val_str = val_str + cond_val[count][j][j1]
                                        val_str = val_str + "'"
                                        if j1 != (len(cond_val[count][j]) - 1):
                                            val_str = val_str + ","
                                else:
                                    if isinstance(dynamicVal[count], list):
                                        if dynamicVal[count][j] == "curr_user":
                                            val_str = val_str + "'" + request.user.username + "'"
                                        elif dynamicVal[count][j] == "curr_date":
                                            val_str = (
                                                val_str + "'" + date.today().strftime("%Y-%m-%dT%H:%M") + "'"
                                            )
                                        else:
                                            for j1 in range(len(cond_val[count][j])):
                                                val_str = val_str + "'"
                                                val_str = val_str + cond_val[count][j][j1]
                                                val_str = val_str + "'"
                                                if j1 != (len(cond_val[count][j]) - 1):
                                                    val_str = val_str + ","
                                    else:
                                        for j1 in range(len(cond_val[count][j])):
                                            val_str = val_str + "'"
                                            val_str = val_str + cond_val[count][j][j1]
                                            val_str = val_str + "'"
                                            if j1 != (len(cond_val[count][j]) - 1):
                                                val_str = val_str + ","
                                val_str = val_str + ")"
                            else:
                                val_str = cond_val[count][j]
                                if len(dynamicVal) - 1 >= count:
                                    if isinstance(dynamicVal[count], list):
                                        if dynamicVal[count][j] == "curr_user":
                                            val_str = request.user.username
                                        elif dynamicVal[count][j] == "curr_date":
                                            val_str = date.today().strftime("%Y-%m-%dT%H:%M")
                                        else:
                                            pass
                                    else:
                                        pass
                            if len(constraint[count]) > 0:
                                dic = {
                                    "column_name": cond_column[count][j],
                                    "condition": cond[count][j],
                                    "input_value": val_str,
                                    "and_or": "AND",
                                    "constraintName": constraint[count][j],
                                    "ruleSet": ruleSet[count][j],
                                }
                            else:
                                dic = {
                                    "column_name": cond_column[count][j],
                                    "condition": cond[count][j],
                                    "input_value": val_str,
                                    "and_or": "AND",
                                }
                            condition.append(dic)
        if len(condition) > 0:
            if condition[0]["input_value"] in [None, "None", "null"]:
                condition = []

        if column_name[count]:
            if len(condition) > 0:
                condition[len(condition) - 1]["and_or"] = ""
            model_class = dynamic_model_create.get_model_class(table_name[count], request)
            field_class = model_class.get_field(column_name[count])
            if field_class.get_internal_type() == "ForeignKey":
                val = (
                    read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": table_name[count],
                                "Agg_Type": "DISTINCT",
                                "Columns": [column_name[count]],
                            },
                            "condition": condition,
                            "adv_condition": [],
                        },
                    )[column_name[count]]
                    .dropna()
                    .astype(int)
                    .astype("string")
                    .tolist()
                )
            else:
                val = (
                    read_data_func(
                        request,
                        {
                            "inputs": {
                                "Data_source": "Database",
                                "Table": table_name[count],
                                "Agg_Type": "DISTINCT",
                                "Columns": [column_name[count]],
                            },
                            "condition": condition,
                            "adv_condition": [],
                        },
                    )[column_name[count]]
                    .fillna("NULL")
                    .tolist()
                )
            if field_class.get_internal_type() == "ForeignKey":
                parent_table = field_class.parent
                parent_model_class = dynamic_model_create.get_model_class(parent_table, request)
                if val:
                    foreign_key_data = (
                        read_data_func(
                            request,
                            {
                                "inputs": {
                                    "Data_source": "Database",
                                    "Table": parent_table,
                                    "Columns": [parent_model_class.pk.name, column_name[count]],
                                },
                                "condition": [
                                    {
                                        "column_name": parent_model_class.pk.name,
                                        "condition": "IN",
                                        "input_value": val,
                                        "and_or": "",
                                    },
                                ],
                            },
                        )
                        .set_index(parent_model_class.pk.name)[column_name[count]]
                        .to_dict()
                    )
                    updated_val = []
                    for fk_val in val:
                        if int(fk_val) in foreign_key_data:
                            updated_val.append(foreign_key_data[int(fk_val)])
                        else:
                            continue
                    value.append(updated_val)
            else:
                value.append(val)
            count = count + 1

    return value


def form_field_sizing_handler(field_name, form_row_config, default_col_class="3"):
    style_attr = ""
    class_attr = f"col-md-{default_col_class}"
    for r_no, config in form_row_config.items():
        if config.get(field_name):
            field_config = config[field_name]
            if field_config.get("sizeConfig"):
                size_config = field_config["sizeConfig"]
                if size_config["type"] == "customized":
                    width = size_config["width"]
                    height = size_config["height"]
                    class_attr = ""
                    style_attr = f"width: {width} !important; height: {height} !important;"
                else:
                    large_screen = size_config["large_screen"]
                    medium_screen = size_config["medium_screen"]
                    small_screen = size_config["small_screen"]
                    class_attr = f"col-lg-{large_screen} col-md-{medium_screen} col-sm-{small_screen}"
            else:
                continue
        else:
            continue
    return class_attr, style_attr
