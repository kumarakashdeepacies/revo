version: "3.8"

services:
  redis:
    env_file:
      - ".env_prod"
    image: ${REGISTRY_HOST}/revolutio_kubernetes/redis:5.0.4-stretch
    build: ./redis
    command: redis-server --maxmemory 10gb --maxmemory-policy allkeys-lru
    restart: always
    stop_grace_period: 3s
    volumes:
      - "redis:/data"
    ports:
      - "6379:6379"

  redis-scheduler:
    env_file:
      - ".env_prod"
    image: ${REGISTRY_HOST}/revolutio_kubernetes/redis:5.0.4-stretch
    command: redis-server --maxmemory 10gb --maxmemory-policy allkeys-lru
    build: ./redis
    restart: always
    stop_grace_period: 3s
    volumes:
      - "redis-scheduler:/data"
    ports:
      - "6479:6379"

  keydb:
    env_file:
      - ".env_prod"
    image: ${REGISTRY_HOST}/revolutio_kubernetes/keydb:latest
    command: keydb-server --server-threads 4
    build: ./keydb
    restart: always
    stop_grace_period: 3s
    volumes:
      - "keydb:/data"
    ports:
      - "6478:6379"

  postgres:
    image: ${REGISTRY_HOST}/revolutio_kubernetes/postgres:10-alpine
    build: ./postgres
    restart: always
    environment:
      - POSTGRES_DB=Platform_DB
      - POSTGRES_USER=revolutio
      - POSTGRES_PASSWORD=supersecretpassword
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - postgresql-backup:/backups
      #- ./postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
      #- ./pgbouncer/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    # ports:
    #  - "5432:5432"
    restart: always

  postgres-update:
    image: ${REGISTRY_HOST}/revolutio_kubernetes/postgres:15-bullseye
    build:
      context: "./postgres"
      dockerfile: ./Dockerfile_update
    restart: always
    environment:
      - POSTGRES_DB=Platform_DB
      - POSTGRES_USER=revolutio
      - POSTGRES_PASSWORD=supersecretpassword
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - postgresql-data-update:/var/lib/postgresql/data
      - postgresql-backup-update:/backups
      #- ./postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
      #- ./pgbouncer/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    # ports:
    #  - "5432:5432"
    restart: always

  pgbouncer1:
    image: edoburu/pgbouncer:1.17.0
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRESQL_HOST=postgres
      - PGBOUNCER_AUTH_TYPE=trust
      - DB_HOST=postgres
      - DB_USER=revolutio
      - DB_PASSWORD=supersecretpassword
      - POOL_MODE=session
      - SERVER_RESET_QUERY=DISCARD ALL
      - IGNORE_STARTUP_PARAMETERS="options"
      - MAX_CLIENT_CONN=500
    depends_on:
    - "postgres"
    restart: always

  # frontend:
  #   image: ${REGISTRY_HOST}/revolutio_kubernetes/frontend:latest
  #   build: ./frontend
  #   stdin_open: true
  #   tty: true
  #   volumes:
  #     - ./frontend:/app
  #     # One-way volume to use node_modules from inside image
  #     - /app/node_modules
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #   depends_on:
  #     - web
  #   command: npm start

  web:
    image: ${REGISTRY_HOST}/revolutio_kubernetes/revolutio:latest
    build:
      context: "."
      dockerfile: ./Dockerfile-updated-collectstatic
    # command: bash -c 'python3 manage.py collectstatic --no-input; uvicorn config.asgi:application --port 5000 --host 0.0.0.0'
    # command: bash -c 'python3 manage.py collectstatic --no-input; python3 manage.py migrate_schemas; uvicorn config.asgi:application --port 5000 --host 0.0.0.0'
    # command: bash -c 'while !</dev/tcp/postgres/5432; do sleep 1; done; python3 manage.py collectstatic --no-input; python3 manage.py compress; python3 manage.py makemigrations; python3 manage.py migrate_schemas; python3 tenant_context_manage.py createsuperuser --noinput --username $DJANGO_SUPERUSER_USERNAME --email $DJANGO_SUPERUSER_EMAIL ; uvicorn config.asgi:application --port 5000 --host 0.0.0.0 '
    command: bash -c 'uvicorn config.asgi:application --port 5000 --host 0.0.0.0'

    depends_on:
      - "redis"
      - "pgbouncer1"
      - "redis-scheduler"
    env_file:
      - ".env_prod"
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8000/login}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT:-127.0.0.1:5000}:5000"
    restart: always
    stop_grace_period: 3s
    volumes:
      - "${DOCKER_WEB_VOLUME:-./revolutio.conf:/opt/revolutio/revolutio.conf}"
      - static:/opt/revolutio/static
      - ./kore_investment/media:/opt/revolutio/kore_investment/media
      - ./:/opt/revolutio/

volumes:
  redis:
  redis-scheduler:
  keydb:
  postgresql-data:
  postgresql-backup:
  static:
  user_defined_template:
  user_migration:
  revolutioconf:
  platform_configs:
  media:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  data_store:
  postgresql-data-update:
  postgresql-backup-update: